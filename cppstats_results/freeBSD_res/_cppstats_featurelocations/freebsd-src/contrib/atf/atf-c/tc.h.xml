<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/tc.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATF_C_TC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_C_TC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/defs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/error_fwd.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>atf_tc</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>atf_tc_head_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>atf_tc</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>atf_tc_body_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>atf_tc</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>atf_tc_cleanup_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>atf_tc</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>






<struct>struct <name>atf_tc_pack</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m_ident</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>m_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atf_tc_head_t</name></type> <name>m_head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_tc_body_t</name></type> <name>m_body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_tc_cleanup_t</name></type> <name>m_cleanup</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><specifier>const</specifier> <name><name>struct</name> <name>atf_tc_pack</name></name></type> <name>atf_tc_pack_t</name>;</typedef>





<struct_decl>struct <name>atf_tc_impl</name>;</struct_decl>
<struct>struct <name>atf_tc</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>atf_tc_impl</name></name> <modifier>*</modifier></type><name>pimpl</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>atf_tc</name></name></type> <name>atf_tc_t</name>;</typedef>


<function_decl><type><name>atf_error_t</name></type> <name>atf_tc_init</name><parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>atf_tc_head_t</name></type></decl></parameter>,
<parameter><decl><type><name>atf_tc_body_t</name></type></decl></parameter>, <parameter><decl><type><name>atf_tc_cleanup_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>atf_error_t</name></type> <name>atf_tc_init_pack</name><parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>atf_tc_pack_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>atf_tc_fini</name><parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>atf_tc_get_ident</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>atf_tc_get_config_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>atf_tc_get_config_var_wd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>atf_tc_get_config_var_as_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>atf_tc_get_config_var_as_bool_wd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>atf_tc_get_config_var_as_long</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>atf_tc_get_config_var_as_long_wd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>atf_tc_get_md_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>atf_tc_get_md_vars</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>atf_tc_has_config_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>atf_tc_has_md_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>atf_error_t</name></type> <name>atf_tc_set_md_var</name><parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>atf_error_t</name></type> <name>atf_tc_run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>atf_error_t</name></type> <name>atf_tc_cleanup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>atf_tc_fail</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list>
<name>ATF_DEFS_ATTRIBUTE_FORMAT_PRINTF</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list>
<name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>atf_tc_fail_nonfatal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
ATF_DEFS_ATTRIBUTE_FORMAT_PRINTF<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>atf_tc_pass</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>atf_tc_require_prog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>atf_tc_skip</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list>
<name>ATF_DEFS_ATTRIBUTE_FORMAT_PRINTF</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list>
<name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>atf_tc_expect_pass</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>atf_tc_expect_fail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
ATF_DEFS_ATTRIBUTE_FORMAT_PRINTF<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>atf_tc_expect_exit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
ATF_DEFS_ATTRIBUTE_FORMAT_PRINTF<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>atf_tc_expect_signal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
ATF_DEFS_ATTRIBUTE_FORMAT_PRINTF<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>atf_tc_expect_death</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
ATF_DEFS_ATTRIBUTE_FORMAT_PRINTF<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>atf_tc_expect_timeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
ATF_DEFS_ATTRIBUTE_FORMAT_PRINTF<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>


<function_decl><type><name>void</name></type> <name>atf_tc_fail_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
ATF_DEFS_ATTRIBUTE_FORMAT_PRINTF<parameter_list>(</parameter_list>3<operator>,</operator> 4</function_decl>)<empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>atf_tc_fail_requirement</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>size_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list>
<name>ATF_DEFS_ATTRIBUTE_FORMAT_PRINTF</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list>
<name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>atf_tc_check_errno</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>atf_tc_require_errno</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
