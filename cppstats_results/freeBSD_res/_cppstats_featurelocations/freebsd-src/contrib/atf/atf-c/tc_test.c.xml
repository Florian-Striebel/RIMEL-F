<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/tc_test.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/tc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/test_helpers.h"</cpp:file></cpp:include>





<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>empty</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content/>}</block></if></if_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>empty</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
</block_content>}</block>

<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>test_var</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>, <argument><expr><literal type="string">"Test text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>init</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the atf_tc_init function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>init</argument>, <argument>tcin</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_tc_t</name></type> <name>tc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_tc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>, <argument><expr><call><name>ATF_TC_HEAD_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ATF_TC_BODY_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>atf_tc_get_ident</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_tc_has_md_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_tc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test2"</literal></expr></argument>, <argument><expr><call><name>ATF_TC_HEAD_NAME</name><argument_list>(<argument><expr><name>test_var</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ATF_TC_BODY_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>atf_tc_get_ident</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_tc_has_md_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>init_pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>init_pack</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the atf_tc_init_pack function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>init_pack</argument>, <argument>tcin</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_tc_t</name></type> <name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_tc_pack_t</name></type> <name>tcp1</name> <init>= <expr><block>{
<expr><operator>.</operator><name>m_ident</name> <operator>=</operator> <literal type="string">"test1"</literal></expr>,
<expr><operator>.</operator><name>m_head</name> <operator>=</operator> <call><name>ATF_TC_HEAD_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>m_body</name> <operator>=</operator> <call><name>ATF_TC_BODY_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>m_cleanup</name> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_tc_pack_t</name></type> <name>tcp2</name> <init>= <expr><block>{
<expr><operator>.</operator><name>m_ident</name> <operator>=</operator> <literal type="string">"test2"</literal></expr>,
<expr><operator>.</operator><name>m_head</name> <operator>=</operator> <call><name>ATF_TC_HEAD_NAME</name><argument_list>(<argument><expr><name>test_var</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>m_body</name> <operator>=</operator> <call><name>ATF_TC_BODY_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>m_cleanup</name> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_tc_init_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcp1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>atf_tc_get_ident</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_tc_has_md_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_tc_init_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcp2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>atf_tc_get_ident</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_tc_has_md_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>vars</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the atf_tc_get_md_var, "</literal>
<literal type="string">"atf_tc_has_md_var and atf_tc_set_md_var functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>vars</argument>, <argument>tcin</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_tc_t</name></type> <name>tc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_tc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>, <argument><expr><call><name>ATF_TC_HEAD_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ATF_TC_BODY_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_tc_has_md_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>, <argument><expr><literal type="string">"Test value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_tc_has_md_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>atf_tc_get_md_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Test value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>config</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the atf_tc_get_config_var, "</literal>
<literal type="string">"atf_tc_get_config_var_wd and atf_tc_has_config_var "</literal>
<literal type="string">"functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>config</argument>, <argument>tcin</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_tc_t</name></type> <name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>config</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"test-var"</literal></expr>, <expr><literal type="string">"test-value"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_tc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>, <argument><expr><call><name>ATF_TC_HEAD_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ATF_TC_BODY_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_tc_has_config_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_tc_has_md_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_tc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>, <argument><expr><call><name>ATF_TC_HEAD_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ATF_TC_BODY_NAME</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_tc_has_config_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"test-value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_tc_has_md_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_tc_has_config_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var_wd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test-var2"</literal></expr></argument>, <argument><expr><literal type="string">"def-value"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"def-value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>













<macro><name>ATF_TP_ADD_TCS</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>

<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>init_pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>
</unit>
