<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/macros.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATF_C_MACROS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_C_MACROS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/defs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/tc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/tp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/utils.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TC_NAME</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(atfu_ ##tc ##_tc)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TC_PACK_NAME</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(atfu_ ##tc ##_tc_pack)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TC_WITHOUT_HEAD</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void atfu_ ##tc ##_body(const atf_tc_t *); static atf_tc_t atfu_ ##tc ##_tc; static atf_tc_pack_t atfu_ ##tc ##_tc_pack = { .m_ident = #tc, .m_head = NULL, .m_body = atfu_ ##tc ##_body, .m_cleanup = NULL, }</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TC</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void atfu_ ##tc ##_head(atf_tc_t *); static void atfu_ ##tc ##_body(const atf_tc_t *); static atf_tc_t atfu_ ##tc ##_tc; static atf_tc_pack_t atfu_ ##tc ##_tc_pack = { .m_ident = #tc, .m_head = atfu_ ##tc ##_head, .m_body = atfu_ ##tc ##_body, .m_cleanup = NULL, }</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TC_WITH_CLEANUP</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void atfu_ ##tc ##_head(atf_tc_t *); static void atfu_ ##tc ##_body(const atf_tc_t *); static void atfu_ ##tc ##_cleanup(const atf_tc_t *); static atf_tc_t atfu_ ##tc ##_tc; static atf_tc_pack_t atfu_ ##tc ##_tc_pack = { .m_ident = #tc, .m_head = atfu_ ##tc ##_head, .m_body = atfu_ ##tc ##_body, .m_cleanup = atfu_ ##tc ##_cleanup, }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TC_HEAD</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>, <parameter><type><name>tcptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void atfu_ ##tc ##_head(atf_tc_t *tcptr ATF_DEFS_ATTRIBUTE_UNUSED)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TC_HEAD_NAME</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(atfu_ ##tc ##_head)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TC_BODY</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>, <parameter><type><name>tcptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void atfu_ ##tc ##_body(const atf_tc_t *tcptr ATF_DEFS_ATTRIBUTE_UNUSED)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TC_BODY_NAME</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(atfu_ ##tc ##_body)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TC_CLEANUP</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>, <parameter><type><name>tcptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void atfu_ ##tc ##_cleanup(const atf_tc_t *tcptr ATF_DEFS_ATTRIBUTE_UNUSED)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TC_CLEANUP_NAME</name><parameter_list>(<parameter><type><name>tc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(atfu_ ##tc ##_cleanup)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TP_ADD_TCS</name><parameter_list>(<parameter><type><name>tps</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static atf_error_t atfu_tp_add_tcs(atf_tp_t *); int atf_tp_main(int, char **, atf_error_t (*)(atf_tp_t *)); int main(int argc, char **argv) { return atf_tp_main(argc, argv, atfu_tp_add_tcs); } static atf_error_t atfu_tp_add_tcs(atf_tp_t *tps)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_TP_ADD_TC</name><parameter_list>(<parameter><type><name>tp</name></type></parameter>, <parameter><type><name>tc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { atf_error_t atfu_err; char **atfu_config = atf_tp_get_config(tp); if (atfu_config == NULL) return atf_no_memory_error(); atfu_err = atf_tc_init_pack(&amp;atfu_ ##tc ##_tc, &amp;atfu_ ##tc ##_tc_pack, (const char *const *)atfu_config); atf_utils_free_charpp(atfu_config); if (atf_is_error(atfu_err)) return atfu_err; atfu_err = atf_tp_add_tc(tp, &amp;atfu_ ##tc ##_tc); if (atf_is_error(atfu_err)) return atfu_err; } while (0)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_REQUIRE_MSG</name><parameter_list>(<parameter><type><name>expression</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(expression)) atf_tc_fail_requirement(__FILE__, __LINE__, fmt, ##__VA_ARGS__); } while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_CHECK_MSG</name><parameter_list>(<parameter><type><name>expression</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(expression)) atf_tc_fail_check(__FILE__, __LINE__, fmt, ##__VA_ARGS__); } while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_REQUIRE</name><parameter_list>(<parameter><type><name>expression</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(expression)) atf_tc_fail_requirement(__FILE__, __LINE__, "%s", #expression " not met"); } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_CHECK</name><parameter_list>(<parameter><type><name>expression</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(expression)) atf_tc_fail_check(__FILE__, __LINE__, "%s", #expression " not met"); } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_REQUIRE_EQ</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_REQUIRE_MSG((expected) == (actual), "%s != %s", #expected, #actual)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_CHECK_EQ</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_CHECK_MSG((expected) == (actual), "%s != %s", #expected, #actual)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_REQUIRE_EQ_MSG</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_REQUIRE_MSG((expected) == (actual), "%s != %s: " fmt, #expected, #actual, ##__VA_ARGS__)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_CHECK_EQ_MSG</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_CHECK_MSG((expected) == (actual), "%s != %s: " fmt, #expected, #actual, ##__VA_ARGS__)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_REQUIRE_STREQ</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_REQUIRE_MSG(strcmp(expected, actual) == 0, "%s != %s (%s != %s)", #expected, #actual, expected, actual)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_CHECK_STREQ</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_CHECK_MSG(strcmp(expected, actual) == 0, "%s != %s (%s != %s)", #expected, #actual, expected, actual)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_REQUIRE_STREQ_MSG</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_REQUIRE_MSG(strcmp(expected, actual) == 0, "%s != %s (%s != %s): " fmt, #expected, #actual, expected, actual, ##__VA_ARGS__)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_CHECK_STREQ_MSG</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_CHECK_MSG(strcmp(expected, actual) == 0, "%s != %s (%s != %s): " fmt, #expected, #actual, expected, actual, ##__VA_ARGS__)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_REQUIRE_INTEQ</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_REQUIRE_MSG((expected) == (actual), "%s != %s (%jd != %jd)", #expected, #actual, (intmax_t)(expected), (intmax_t)(actual))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_CHECK_INTEQ</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_CHECK_MSG((expected) == (actual), "%s != %s (%jd != %jd)", #expected, #actual, (intmax_t)(expected), (intmax_t)(actual))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_REQUIRE_INTEQ_MSG</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_REQUIRE_MSG((expected) == (actual), "%s != %s (%jd != %jd): " fmt, #expected, #actual, (intmax_t)(expected), (intmax_t)(actual), ##__VA_ARGS__)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_CHECK_INTEQ_MSG</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>actual</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_CHECK_MSG((expected) == (actual), "%s != %s (%jd != %jd): " fmt, #expected, #actual, (intmax_t)(expected), (intmax_t)(actual), ##__VA_ARGS__)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_REQUIRE_MATCH</name><parameter_list>(<parameter><type><name>regexp</name></type></parameter>, <parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_REQUIRE_MSG(atf_utils_grep_string("%s", string, regexp), "'%s' not matched in '%s'", regexp, string);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_CHECK_MATCH</name><parameter_list>(<parameter><type><name>regexp</name></type></parameter>, <parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_CHECK_MSG(atf_utils_grep_string("%s", string, regexp), "'%s' not matched in '%s'", regexp, string);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_REQUIRE_MATCH_MSG</name><parameter_list>(<parameter><type><name>regexp</name></type></parameter>, <parameter><type><name>string</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_REQUIRE_MSG(atf_utils_grep_string("%s", string, regexp), "'%s' not matched in '%s': " fmt, regexp, string, ##__VA_ARGS__);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_CHECK_MATCH_MSG</name><parameter_list>(<parameter><type><name>regexp</name></type></parameter>, <parameter><type><name>string</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_CHECK_MSG(atf_utils_grep_string("%s", string, regexp), "'%s' not matched in '%s': " fmt, regexp, string, ##__VA_ARGS__);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_CHECK_ERRNO</name><parameter_list>(<parameter><type><name>exp_errno</name></type></parameter>, <parameter><type><name>bool_expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atf_tc_check_errno(__FILE__, __LINE__, exp_errno, #bool_expr, bool_expr)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_REQUIRE_ERRNO</name><parameter_list>(<parameter><type><name>exp_errno</name></type></parameter>, <parameter><type><name>bool_expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atf_tc_require_errno(__FILE__, __LINE__, exp_errno, #bool_expr, bool_expr)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
