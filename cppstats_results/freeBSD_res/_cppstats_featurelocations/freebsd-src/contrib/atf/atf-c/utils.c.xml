<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/utils.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/dynstr.h"</cpp:file></cpp:include>


<function_decl><type><name>void</name></type> <name>atf_tc_set_resultsfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_out_filename</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>in_parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>atf_dynstr_init_fmt</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"atf_utils_fork_%d_%s.txt"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>atf_error_format</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in_parent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"Failed to create output file: %s"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Failed to create output file: %s"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier>
<name>bool</name></type>
<name>grep_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regex_t</name></type> <name>preg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Looking for '%s' in '%s'\n"</literal></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>preg</name></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>preg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>res</name> <operator>==</operator> <name>REG_NOMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>preg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>atf_utils_cat_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_MSG</name><argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cannot open %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>continued</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>count</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>continued</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>!=</operator> <name>buffer</name> <operator>+</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>continued</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>&lt;</operator> <name>buffer</name> <operator>+</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>continued</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>bool</name></type>
<name>atf_utils_compare_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_MSG</name><argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cannot open %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>contents</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>remaining</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>count</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>count</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>count</name> <operator>&lt;=</operator> <name>remaining</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>remaining</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>atf_utils_copy_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>input</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_MSG</name><argument_list>(<argument><expr><name>input</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Failed to open source file during "</literal>
<literal type="string">"copy (%s)"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>output</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>destination</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_MSG</name><argument_list>(<argument><expr><name>output</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Failed to open destination file during "</literal>
<literal type="string">"copy (%s)"</literal></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>length</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>length</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE_MSG</name><argument_list>(<argument><expr><call><name>write</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>length</name></expr></argument>,
<argument><expr><literal type="string">"Failed to write to %s during copy"</literal></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>ATF_REQUIRE_MSG</name><argument_list>(<argument><expr><name>length</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Failed to read from %s during copy"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_MSG</name><argument_list>(<argument><expr><call><name>fstat</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Failed to stat source file %s during copy"</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_MSG</name><argument_list>(<argument><expr><call><name>fchmod</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Failed to chmod destination file %s during copy"</literal></expr></argument>,
<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>atf_utils_create_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_dynstr_t</name></type> <name>formatted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>atf_dynstr_init_ap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_MSG</name><argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Cannot create file %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>atf_dynstr_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_dynstr_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>bool</name></type>
<name>atf_utils_file_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>access</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"Failed to check the existence of %s: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>








<function><type><name>pid_t</name></type>
<name>atf_utils_fork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>fork</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"fork failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>atf_dynstr_t</name></type> <name>out_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_out_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_name</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>atf_dynstr_t</name></type> <name>err_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_out_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err_name</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"err"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_utils_redirect</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_utils_redirect</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>, <argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_dynstr_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_dynstr_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_utils_reset_resultsfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>atf_tc_set_resultsfile</name><argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>atf_utils_free_charpp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>argv</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>bool</name></type>
<name>atf_utils_grep_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_dynstr_t</name></type> <name>formatted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>atf_dynstr_init_ap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>=</operator> <call><name>atf_utils_readline</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>grep_string</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_dynstr_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>bool</name></type>
<name>atf_utils_grep_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_dynstr_t</name></type> <name>formatted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>atf_dynstr_init_ap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>grep_string</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_dynstr_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>char</name> <modifier>*</modifier></type>
<name>atf_utils_readline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_dynstr_t</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>atf_dynstr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
<name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>atf_dynstr_append_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>cnt</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>atf_dynstr_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atf_dynstr_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>atf_dynstr_fini_disown</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>atf_utils_redirect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>target_fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>target_fd</name> <operator>==</operator> <name>STDOUT_FILENO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>target_fd</name> <operator>==</operator> <name>STDERR_FILENO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>new_fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Cannot create %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_fd</name> <operator>!=</operator> <name>target_fd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><name>new_fd</name></expr></argument>, <argument><expr><name>target_fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Cannot redirect to fd %d"</literal></expr></argument>, <argument><expr><name>target_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>new_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>atf_utils_wait</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>exitstatus</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expout</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>experr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>atf_dynstr_t</name></type> <name>out_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_out_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_name</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>atf_dynstr_t</name></type> <name>err_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_out_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err_name</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="string">"err"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_utils_cat_file</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"subprocess stdout: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_utils_cat_file</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"subprocess stderr: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>WIFEXITED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><name>exitstatus</name></expr></argument>, <argument><expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>save_prefix</name> <init>= <expr><literal type="string">"save:"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>save_prefix_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>save_prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>expout</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>save_prefix_length</name> <operator>&amp;&amp;</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>expout</name></expr></argument>, <argument><expr><name>save_prefix</name></expr></argument>, <argument><expr><name>save_prefix_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atf_utils_copy_file</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>expout</name> <operator>+</operator> <name>save_prefix_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_compare_file</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>expout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>experr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>save_prefix_length</name> <operator>&amp;&amp;</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>experr</name></expr></argument>, <argument><expr><name>save_prefix</name></expr></argument>, <argument><expr><name>save_prefix_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atf_utils_copy_file</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err_name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>experr</name> <operator>+</operator> <name>save_prefix_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_compare_file</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err_name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>experr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
