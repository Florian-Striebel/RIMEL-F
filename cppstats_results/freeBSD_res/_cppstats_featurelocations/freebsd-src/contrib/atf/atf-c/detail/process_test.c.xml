<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/detail/process_test.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/process.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/sanity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/test_helpers.h"</cpp:file></cpp:include>

<function_decl><type><name>atf_error_t</name></type> <name>atf_process_status_init</name><parameter_list>(<parameter><decl><type><name>atf_process_status_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>



















<enum>enum <name>out_type</name> <block>{ <decl><name>stdout_type</name></decl>, <decl><name>stderr_type</name></decl> }</block>;</enum>

<struct>struct <name>base_stream</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>process</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>atf_process_child_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fini</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>m_sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_stream_t</name> <modifier>*</modifier></type><name>m_sb_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>out_type</name></name></type> <name>m_type</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_STREAM</name><parameter_list>(<parameter><type><name>ihook</name></type></parameter>, <parameter><type><name>phook</name></type></parameter>, <parameter><type><name>fhook</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .init = ihook, .process = phook, .fini = fhook, .m_type = type }</cpp:value></cpp:define>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>check_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>out_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>stdout_type</name></expr>:</case>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"stdout: msg"</literal></expr></argument>, <argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"stderr: msg"</literal></expr></argument>, <argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>stderr_type</name></expr>:</case>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"stderr: msg"</literal></expr></argument>, <argument><expr><literal type="string">"stderr"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"stdout: msg"</literal></expr></argument>, <argument><expr><literal type="string">"stderr"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<struct>struct <name>capture_stream</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>base_stream</name></name></type> <name>m_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m_msg</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAPTURE_STREAM</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .m_base = BASE_STREAM(capture_stream_init, capture_stream_process, capture_stream_fini, type) }</cpp:value></cpp:define>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>capture_stream_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>capture_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_capture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_msg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>capture_stream_process</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>atf_process_child_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>capture_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>stdout_type</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_msg</name></name> <operator>=</operator> <call><name>atf_utils_readline</name><argument_list>(<argument><expr><call><name>atf_process_child_stdout</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>stderr_type</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_msg</name></name> <operator>=</operator> <call><name>atf_utils_readline</name><argument_list>(<argument><expr><call><name>atf_process_child_stderr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>capture_stream_fini</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>capture_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>stdout_type</name></expr>:</case>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_utils_grep_string</name><argument_list>(<argument><expr><literal type="string">"stdout: msg"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_utils_grep_string</name><argument_list>(<argument><expr><literal type="string">"stderr: msg"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>stderr_type</name></expr>:</case>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_utils_grep_string</name><argument_list>(<argument><expr><literal type="string">"stdout: msg"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_utils_grep_string</name><argument_list>(<argument><expr><literal type="string">"stderr: msg"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>connect_stream</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>base_stream</name></name></type> <name>m_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_fd</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECT_STREAM</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .m_base = BASE_STREAM(connect_stream_init, NULL, connect_stream_fini, type) }</cpp:value></cpp:define>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>connect_stream_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connect_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_fd</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>stdout_type</name></expr>:</case>
<expr_stmt><expr><name>src_fd</name> <operator>=</operator> <name>STDOUT_FILENO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"stdout"</literal></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>stderr_type</name></expr>:</case>
<expr_stmt><expr><name>src_fd</name> <operator>=</operator> <name>STDERR_FILENO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"stderr"</literal></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr></argument>, <argument><expr><name>src_fd</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>connect_stream_fini</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connect_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_file</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>inherit_stream</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>base_stream</name></name></type> <name>m_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_old_fd</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INHERIT_STREAM</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .m_base = BASE_STREAM(inherit_stream_init, NULL, inherit_stream_fini, type) }</cpp:value></cpp:define>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>inherit_stream_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>inherit_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_inherit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>stdout_type</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name> <operator>=</operator> <name>STDOUT_FILENO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"stdout"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>stderr_type</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name> <operator>=</operator> <name>STDERR_FILENO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"stderr"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_old_fd</name></name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_old_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><call><name>open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>inherit_stream_fini</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>inherit_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_old_fd</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_old_fd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_file</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>default_stream</name></cpp:macro> <cpp:value>inherit_stream</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_STREAM</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .m_base = BASE_STREAM(default_stream_init, NULL, default_stream_fini, type) }</cpp:value></cpp:define>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>default_stream_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>inherit_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>inherit_stream_init</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>default_stream_fini</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>inherit_stream_fini</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>redirect_fd_stream</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>base_stream</name></name></type> <name>m_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_fd</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIRECT_FD_STREAM</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .m_base = BASE_STREAM(redirect_fd_stream_init, NULL, redirect_fd_stream_fini, type) }</cpp:value></cpp:define>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>redirect_fd_stream_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redirect_fd_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>stdout_type</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"stdout"</literal></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>stderr_type</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"stderr"</literal></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_redirect_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>redirect_fd_stream_fini</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redirect_fd_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_fd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_file</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>redirect_path_stream</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>base_stream</name></name></type> <name>m_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atf_fs_path_t</name></type> <name>m_path</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDIRECT_PATH_STREAM</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .m_base = BASE_STREAM(redirect_path_stream_init, NULL, redirect_path_stream_fini, type) }</cpp:value></cpp:define>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>redirect_path_stream_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redirect_path_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>stdout_type</name></expr>:</case>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_fs_path_init_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_path</name></name></expr></argument>, <argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>stderr_type</name></expr>:</case>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_fs_path_init_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_path</name></name></expr></argument>, <argument><expr><literal type="string">"stderr"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_redirect_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>redirect_path_stream_fini</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>redirect_path_stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_fs_path_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_file</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m_base</name><operator>.</operator><name>m_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>child_print</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list> <name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>

<struct>struct <name>child_print_data</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m_msg</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>child_print</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>child_print_data</name></name> <modifier>*</modifier></type><name>cpd</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"stdout: %s\n"</literal></expr></argument>, <argument><expr><name><name>cpd</name><operator>-&gt;</operator><name>m_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"stderr: %s\n"</literal></expr></argument>, <argument><expr><name><name>cpd</name><operator>-&gt;</operator><name>m_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>do_fork</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>base_stream</name></name> <modifier>*</modifier></type><name>outfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>base_stream</name></name> <modifier>*</modifier></type><name>errfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_child_t</name></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>child_print_data</name></name></type> <name>cpd</name> <init>= <expr><block>{ <expr><literal type="string">"msg"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>outfs</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>errfs</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_fork</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><name>child_print</name></expr></argument>, <argument><expr><name><name>outfs</name><operator>-&gt;</operator><name>m_sb_ptr</name></name></expr></argument>,
<argument><expr><name><name>errfs</name><operator>-&gt;</operator><name>m_sb_ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>outfs</name><operator>-&gt;</operator><name>process</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>outfs</name><operator>-&gt;</operator><name>process</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>errfs</name><operator>-&gt;</operator><name>process</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>errfs</name><operator>-&gt;</operator><name>process</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_child_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>outfs</name><operator>-&gt;</operator><name>fini</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>errfs</name><operator>-&gt;</operator><name>fini</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>stream_init_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>stream_init_capture</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the "</literal>
<literal type="string">"atf_process_stream_init_capture function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>stream_init_capture</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>sb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_capture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_stream_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>atf_process_stream_type_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>stream_init_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>stream_init_connect</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the "</literal>
<literal type="string">"atf_process_stream_init_connect function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>stream_init_connect</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>sb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_stream_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>atf_process_stream_type_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>stream_init_inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>stream_init_inherit</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the "</literal>
<literal type="string">"atf_process_stream_init_inherit function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>stream_init_inherit</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>sb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_inherit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_stream_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>atf_process_stream_type_inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>stream_init_redirect_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>stream_init_redirect_fd</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the "</literal>
<literal type="string">"atf_process_stream_init_redirect_fd function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>stream_init_redirect_fd</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>sb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_redirect_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_stream_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>atf_process_stream_type_redirect_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>stream_init_redirect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>stream_init_redirect_path</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the "</literal>
<literal type="string">"atf_process_stream_init_redirect_path function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>stream_init_redirect_path</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_fs_path_t</name></type> <name>path</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_fs_path_init_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_redirect_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_stream_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>atf_process_stream_type_redirect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_fs_path_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>child_exit_success</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>child_exit_failure</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>child_sigkill</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>child_sigquit</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>child_sigterm</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>child_exit_success</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>child_exit_failure</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>child_sigkill</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>child_sigquit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>child_sigterm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>int</name></type>
<name>fork_and_wait_child</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>child_func</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>pid</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>child_func</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>status_exited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>status_exited</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the status type for processes "</literal>
<literal type="string">"that exit cleanly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>status_exited</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rawstatus</name> <init>= <expr><call><name>fork_and_wait_child</name><argument_list>(<argument><expr><name>child_exit_success</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_status_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>rawstatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_exitstatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_process_status_signaled</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rawstatus</name> <init>= <expr><call><name>fork_and_wait_child</name><argument_list>(<argument><expr><name>child_exit_failure</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_status_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>rawstatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_exitstatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_process_status_signaled</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>status_signaled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>status_signaled</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the status type for processes "</literal>
<literal type="string">"that end due to a signal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>status_signaled</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rawstatus</name> <init>= <expr><call><name>fork_and_wait_child</name><argument_list>(<argument><expr><name>child_sigkill</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_status_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>rawstatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_signaled</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_termsig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_process_status_coredump</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rawstatus</name> <init>= <expr><call><name>fork_and_wait_child</name><argument_list>(<argument><expr><name>child_sigterm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_status_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>rawstatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_signaled</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_termsig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_process_status_coredump</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>status_coredump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>status_coredump</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the status type for processes "</literal>
<literal type="string">"that crash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>status_coredump</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>rl</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name>RLIM_INFINITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rl</name><operator>.</operator><name>rlim_max</name></name> <operator>=</operator> <name>RLIM_INFINITY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_CORE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_tc_skip</name><argument_list>(<argument><expr><literal type="string">"Cannot unlimit the core file size; check limits "</literal>
<literal type="string">"manually"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>coredump_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ce_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>coredump_enabled</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"kern.coredump"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>coredump_enabled</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ce_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>coredump_enabled</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_tc_skip</name><argument_list>(<argument><expr><literal type="string">"Coredumps disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rawstatus</name> <init>= <expr><call><name>fork_and_wait_child</name><argument_list>(<argument><expr><name>child_sigquit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_status_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>rawstatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_signaled</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_termsig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_coredump</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>child_report_pid</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list> <name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>child_report_pid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>v</name></type> <name>ATF_DEFS_ATTRIBUTE_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Reporting %d to parent\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>child_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>child_pid</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the correctness of the pid "</literal>
<literal type="string">"stored in the child type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>child_pid</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>outsb</name></decl>, <decl><type ref="prev"/><name>errsb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_child_t</name></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_capture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_inherit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_fork</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><name>child_report_pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>read</name><argument_list>(<argument><expr><call><name>atf_process_child_stdout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Expected PID: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>atf_process_child_pid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Actual PID: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_child_pid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_child_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>child_loop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>v</name></type> <name>ATF_DEFS_ATTRIBUTE_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>nop_signal</name><parameter_list>(<parameter><decl><type><name>int</name> <name>sig</name></type> <name>ATF_DEFS_ATTRIBUTE_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>child_spawn_loop_and_wait_eintr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>v</name></type> <name>ATF_DEFS_ATTRIBUTE_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_child_t</name></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sighup</name></decl>, <decl><type ref="prev"/><name>old_sighup</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_ABORT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { atf_error_t _aux_err = expr; if (atf_is_error(_aux_err)) { atf_error_free(_aux_err); abort(); } } while (0)</cpp:value></cpp:define>








<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>outsb</name></decl>, <decl><type ref="prev"/><name>errsb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE_ABORT</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_capture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE_ABORT</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_inherit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE_ABORT</name><argument_list>(<argument><expr><call><name>atf_process_fork</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><name>child_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>sighup</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>nop_signal</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sighup</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sighup</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sighup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_sighup</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"waiting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Child entering wait(2)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name> <init>= <expr><call><name>atf_process_child_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Child's wait(2) terminated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"wait completed successfully (not interrupted)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"libc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"wait did not raise libc_error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_libc_error_code</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"libc_error is not EINTR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_sighup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Child is killing subchild\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>atf_process_child_pid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RE_ABORT</name><argument_list>(<argument><expr><call><name>atf_process_child_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RE_ABORT</name></cpp:undef>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>child_wait_eintr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>child_wait_eintr</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the interruption of the wait "</literal>
<literal type="string">"method by an external signal, and the return of "</literal>
<literal type="string">"an EINTR error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>, <argument><expr><literal type="string">"30"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>child_wait_eintr</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_child_t</name></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>status</name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>outsb</name></decl>, <decl><type ref="prev"/><name>errsb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_capture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_inherit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_fork</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><name>child_spawn_loop_and_wait_eintr</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>




<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Waiting for child to issue wait(2)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>read</name><argument_list>(<argument><expr><call><name>atf_process_child_stdout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Interrupting child's wait(2) call\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>atf_process_child_pid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Waiting for child's completion\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_child_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_exitstatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>do_exec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>helper_name</name></decl></parameter>, <parameter><decl><type><name>atf_process_status_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>prehook</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_fs_path_t</name></type> <name>process_helpers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_process_helpers_path</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>process_helpers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>process_helpers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>helper_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Executing %s %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_exec_array</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>process_helpers</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>prehook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_fs_path_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>process_helpers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>check_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>atf_utils_readline</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><name>line</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_STREQ_MSG</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"read: '%s', expected: '%s'"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>exec_failure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>exec_failure</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests execing a command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>exec_failure</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>do_exec</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"exit-failure"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_exitstatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>exec_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>exec_list</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests execing a command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>exec_list</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_fs_path_t</name></type> <name>process_helpers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_list_t</name></type> <name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_process_helpers_path</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>process_helpers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>process_helpers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"echo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"test-message"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_fs_path_t</name></type> <name>outpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>outsb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_fs_path_init_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outpath</name></expr></argument>, <argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_redirect_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_exec_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>process_helpers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_fs_path_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>atf_list_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_exitstatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><literal type="string">"stdout"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_line</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"test-message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_fs_path_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>process_helpers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>exit_early</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>exec_prehook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>exec_prehook</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests execing a command with a prehook"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>exec_prehook</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>do_exec</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"exit-success"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>exit_early</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_exitstatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>exec_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>exec_success</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests execing a command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>exec_success</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>do_exec</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"exit-success"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_exitstatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>exit_v_null</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>exit_v_notnull</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>child_cookie</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>exit_v_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>exit_v_notnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>fork_cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>fork_cookie</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests forking a child, with "</literal>
<literal type="string">"a null and non-null data cookie"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>fork_cookie</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>outsb</name></decl>, <decl><type ref="prev"/><name>errsb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_inherit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_inherit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_child_t</name></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_fork</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><name>child_cookie</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_child_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_exitstatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exit_v_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_child_t</name></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dummy_int</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_fork</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><name>child_cookie</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_child_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_process_status_exitstatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exit_v_notnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_FORK_STREAMS</name><parameter_list>(<parameter><type><name>outlc</name></type></parameter>, <parameter><type><name>outuc</name></type></parameter>, <parameter><type><name>errlc</name></type></parameter>, <parameter><type><name>erruc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC(fork_out_ ##outlc ##_err_ ##errlc); ATF_TC_HEAD(fork_out_ ##outlc ##_err_ ##errlc, tc) { atf_tc_set_md_var(tc, "descr", "Tests forking a child, with " "stdout " #outlc " and stderr " #errlc); } ATF_TC_BODY(fork_out_ ##outlc ##_err_ ##errlc, tc) { struct outlc ##_stream out = outuc ##_STREAM(stdout_type); struct errlc ##_stream err = erruc ##_STREAM(stderr_type); do_fork(&amp;out.m_base, &amp;out, &amp;err.m_base, &amp;err); }</cpp:value></cpp:define>













<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>, <argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>, <argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>, <argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>, <argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>, <argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>, <argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>, <argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>, <argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>, <argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>, <argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>, <argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>, <argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>, <argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>, <argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>, <argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>, <argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>, <argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>, <argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>, <argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>, <argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>, <argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>, <argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>, <argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>, <argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>, <argument><expr><name>capture</name></expr></argument>, <argument><expr><name>CAPTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>, <argument><expr><name>connect</name></expr></argument>, <argument><expr><name>CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>, <argument><expr>default</expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>, <argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>INHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>, <argument><expr><name>redirect_fd</name></expr></argument>, <argument><expr><name>REDIRECT_FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TC_FORK_STREAMS</name><argument_list>(<argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>, <argument><expr><name>redirect_path</name></expr></argument>, <argument><expr><name>REDIRECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TC_FORK_STREAMS</name></cpp:undef>





<macro><name>ATF_TP_ADD_TCS</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>

<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>stream_init_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>stream_init_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>stream_init_inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>stream_init_redirect_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>stream_init_redirect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>status_exited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>status_signaled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>status_coredump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>child_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>child_wait_eintr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>exec_failure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>exec_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>exec_prehook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>exec_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_capture_err_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_capture_err_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_capture_err_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_capture_err_inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_capture_err_redirect_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_capture_err_redirect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_connect_err_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_connect_err_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_connect_err_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_connect_err_inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_connect_err_redirect_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_connect_err_redirect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_default_err_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_default_err_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_default_err_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_default_err_inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_default_err_redirect_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_default_err_redirect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_inherit_err_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_inherit_err_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_inherit_err_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_inherit_err_inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_inherit_err_redirect_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_inherit_err_redirect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_fd_err_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_fd_err_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_fd_err_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_fd_err_inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_fd_err_redirect_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_fd_err_redirect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_path_err_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_path_err_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_path_err_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_path_err_inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_path_err_redirect_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>fork_out_redirect_path_err_redirect_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>
</unit>
