<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/detail/process.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/process.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/sanity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/error.h"</cpp:file></cpp:include>



<function_decl><type><name>atf_error_t</name></type> <name>atf_process_status_init</name><parameter_list>(<parameter><decl><type><name>atf_process_status_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>





<struct>struct <name>stream_prepare</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>m_sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_pipefds_ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>m_pipefds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>stream_prepare</name></name></type> <name>stream_prepare_t</name>;</typedef>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>stream_prepare_init</name><parameter_list>(<parameter><decl><type><name>stream_prepare_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name> <init>= <expr><call><name>atf_process_stream_type</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>m_sb</name></name> <operator>=</operator> <name>sb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>m_pipefds_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_process_stream_type_capture</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_pipefds</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed to create pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>m_pipefds_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>stream_prepare_fini</name><parameter_list>(<parameter><decl><type><name>stream_prepare_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>m_pipefds_ok</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_pipefds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_pipefds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_process_stream_type_capture</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_process_stream_type_connect</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_process_stream_type_inherit</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_process_stream_type_redirect_fd</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_process_stream_type_redirect_path</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier>
<name>bool</name></type>
<name>stream_is_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>m_type</name></name> <operator>==</operator> <name>atf_process_stream_type_capture</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>m_type</name></name> <operator>==</operator> <name>atf_process_stream_type_connect</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>m_type</name></name> <operator>==</operator> <name>atf_process_stream_type_inherit</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>m_type</name></name> <operator>==</operator> <name>atf_process_stream_type_redirect_fd</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>m_type</name></name> <operator>==</operator> <name>atf_process_stream_type_redirect_path</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_process_stream_init_capture</name><parameter_list>(<parameter><decl><type><name>atf_process_stream_t</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_process_stream_type_capture</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POST</name><argument_list>(<argument><expr><call><name>stream_is_valid</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_process_stream_init_connect</name><parameter_list>(<parameter><decl><type><name>atf_process_stream_t</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>tgt_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>src_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>tgt_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>src_fd</name> <operator>!=</operator> <name>tgt_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_process_stream_type_connect</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>m_src_fd</name></name> <operator>=</operator> <name>src_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>m_tgt_fd</name></name> <operator>=</operator> <name>tgt_fd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POST</name><argument_list>(<argument><expr><call><name>stream_is_valid</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_process_stream_init_inherit</name><parameter_list>(<parameter><decl><type><name>atf_process_stream_t</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_process_stream_type_inherit</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POST</name><argument_list>(<argument><expr><call><name>stream_is_valid</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_process_stream_init_redirect_fd</name><parameter_list>(<parameter><decl><type><name>atf_process_stream_t</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_process_stream_type_redirect_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>m_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POST</name><argument_list>(<argument><expr><call><name>stream_is_valid</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_process_stream_init_redirect_path</name><parameter_list>(<parameter><decl><type><name>atf_process_stream_t</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_process_stream_type_redirect_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>m_path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POST</name><argument_list>(<argument><expr><call><name>stream_is_valid</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_process_stream_fini</name><parameter_list>(<parameter><decl><type><name>atf_process_stream_t</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>stream_is_valid</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>atf_process_stream_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>stream_is_valid</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>sb</name><operator>-&gt;</operator><name>m_type</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>atf_error_t</name></type>
<name>atf_process_status_init</name><parameter_list>(<parameter><decl><type><name>atf_process_status_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m_status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_process_status_fini</name><parameter_list>(<parameter><decl><type><name>atf_process_status_t</name> <modifier>*</modifier><name>s</name></type> <name>ATF_DEFS_ATTRIBUTE_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_process_status_exited</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_process_status_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mutable_status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>m_status</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>WIFEXITED</name><argument_list>(<argument><expr><name>mutable_status</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>atf_process_status_exitstatus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_process_status_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mutable_status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>m_status</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>mutable_status</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_process_status_signaled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_process_status_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mutable_status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>m_status</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>mutable_status</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>atf_process_status_termsig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_process_status_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>atf_process_status_signaled</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mutable_status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>m_status</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>WTERMSIG</name><argument_list>(<argument><expr><name>mutable_status</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_process_status_coredump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_process_status_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>atf_process_status_signaled</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WCOREDUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>mutable_status</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>m_status</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>WCOREDUMP</name><argument_list>(<argument><expr><name>mutable_status</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>atf_process_child_init</name><parameter_list>(<parameter><decl><type><name>atf_process_child_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>m_pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>m_stdout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>m_stderr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>atf_process_child_fini</name><parameter_list>(<parameter><decl><type><name>atf_process_child_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>m_stdout</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>m_stdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>m_stderr</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>m_stderr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_process_child_wait</name><parameter_list>(<parameter><decl><type><name>atf_process_child_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>atf_process_status_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>waitpid</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>m_pid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed waiting for process %d"</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>m_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>atf_process_child_fini</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_process_status_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>pid_t</name></type>
<name>atf_process_child_pid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_process_child_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>m_pid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>atf_process_child_stdout</name><parameter_list>(<parameter><decl><type><name>atf_process_child_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>m_stdout</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>m_stdout</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>atf_process_child_stderr</name><parameter_list>(<parameter><decl><type><name>atf_process_child_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>m_stderr</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>m_stderr</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>safe_dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>oldfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>newfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>oldfd</name> <operator>!=</operator> <name>newfd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><name>oldfd</name></expr></argument>, <argument><expr><name>newfd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate file descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>oldfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>child_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stream_prepare_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>procfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name> <init>= <expr><call><name>atf_process_stream_type</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_process_stream_type_capture</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_pipefds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>safe_dup</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_pipefds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>procfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_process_stream_type_connect</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_sb</name><operator>-&gt;</operator><name>m_tgt_fd</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_sb</name><operator>-&gt;</operator><name>m_src_fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Cannot connect descriptor %d to %d"</literal></expr></argument>,
<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_sb</name><operator>-&gt;</operator><name>m_tgt_fd</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_sb</name><operator>-&gt;</operator><name>m_src_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_process_stream_type_inherit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_process_stream_type_redirect_fd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>safe_dup</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_sb</name><operator>-&gt;</operator><name>m_fd</name></name></expr></argument>, <argument><expr><name>procfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_process_stream_type_redirect_path</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>aux</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_sb</name><operator>-&gt;</operator><name>m_path</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>aux</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Could not create %s"</literal></expr></argument>,
<argument><expr><call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_sb</name><operator>-&gt;</operator><name>m_path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>safe_dup</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>procfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>parent_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stream_prepare_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name> <init>= <expr><call><name>atf_process_stream_type</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_process_stream_type_capture</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>m_pipefds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>m_pipefds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_process_stream_type_connect</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_process_stream_type_inherit</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_process_stream_type_redirect_fd</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_process_stream_type_redirect_path</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>do_parent</name><parameter_list>(<parameter><decl><type><name>atf_process_child_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>pid_t</name></type> <name>pid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>stream_prepare_t</name> <modifier>*</modifier></type><name>outsp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>stream_prepare_t</name> <modifier>*</modifier></type><name>errsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_process_child_init</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>m_pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parent_connect</name><argument_list>(<argument><expr><name>outsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>m_stdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parent_connect</name><argument_list>(<argument><expr><name>errsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>m_stderr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier>
<name>void</name></type>
<name>do_child</name><argument_list>(<argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>stream_prepare_t</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>stream_prepare_t</name> <operator>*</operator></expr></argument>)</argument_list> <name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>do_child</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>start</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>stream_prepare_t</name> <modifier>*</modifier></type><name>outsp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>stream_prepare_t</name> <modifier>*</modifier></type><name>errsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>child_connect</name><argument_list>(<argument><expr><name>outsp</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>child_connect</name><argument_list>(<argument><expr><name>errsp</name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atf_error_format</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unhandled error: %s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>fork_with_streams</name><parameter_list>(<parameter><decl><type><name>atf_process_child_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>start</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>outsb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>errsb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_prepare_t</name></type> <name>outsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stream_prepare_t</name></type> <name>errsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>stream_prepare_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsp</name></expr></argument>, <argument><expr><name>outsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>stream_prepare_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsp</name></expr></argument>, <argument><expr><name>errsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err_outpipe</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Failed to fork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err_errpipe</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_child</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>do_parent</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err_errpipe</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<goto>goto <name>out</name>;</goto>

<label><name>err_errpipe</name>:</label>
<expr_stmt><expr><call><name>stream_prepare_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err_outpipe</name>:</label>
<expr_stmt><expr><call><name>stream_prepare_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>init_stream_w_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>usersb</name></decl></parameter>,
<parameter><decl><type><name>atf_process_stream_t</name> <modifier>*</modifier></type><name>inheritsb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>realsb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>usersb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_process_stream_init_inherit</name><argument_list>(<argument><expr><name>inheritsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>realsb</name> <operator>=</operator> <name>inheritsb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>realsb</name> <operator>=</operator> <name>usersb</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_process_fork</name><parameter_list>(<parameter><decl><type><name>atf_process_child_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>start</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>outsb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>errsb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>inherit_outsb</name></decl>, <decl><type ref="prev"/><name>inherit_errsb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>real_outsb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>real_errsb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>real_outsb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>init_stream_w_default</name><argument_list>(<argument><expr><name>outsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inherit_outsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>real_outsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>real_errsb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>init_stream_w_default</name><argument_list>(<argument><expr><name>errsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inherit_errsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>real_errsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out_out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>fork_with_streams</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>real_outsb</name></expr></argument>, <argument><expr><name>real_errsb</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errsb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inherit_errsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>out_out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>outsb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inherit_outsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>int</name></type>
<name>const_execvp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCONST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)(uintptr_t)(const void *)(a))</cpp:value></cpp:define>
<return>return <expr><call><name>execvp</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>UNCONST</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UNCONST</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>list_to_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><call><name>atf_list_size</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>aiter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_list_citer_t</name></type> <name>liter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>aiter</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<macro><name>atf_list_for_each_c</name><argument_list>(<argument>liter</argument>, <argument>l</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>aiter</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>atf_list_citer_data</name><argument_list>(<argument><expr><name>liter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aiter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><operator>*</operator><name>aiter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ap</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>exec_args</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>m_prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>m_argv</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>m_prehook</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>do_exec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>exec_args</name></name> <modifier>*</modifier></type><name>ea</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>m_prehook</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ea</name><operator>-&gt;</operator><name>m_prehook</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>const_execvp</name><argument_list>(<argument><expr><call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><name><name>ea</name><operator>-&gt;</operator><name>m_prog</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ea</name><operator>-&gt;</operator><name>m_argv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>errnocopy</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"exec(%s) failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><name><name>ea</name><operator>-&gt;</operator><name>m_prog</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errnocopy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_process_exec_array</name><parameter_list>(<parameter><decl><type><name>atf_process_status_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>outsb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>errsb</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>prehook</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_child_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>ea</name> <init>= <expr><block>{ <expr><name>prog</name></expr>, <expr><name>argv</name></expr>, <expr><name>prehook</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>outsb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>atf_process_stream_type</name><argument_list>(<argument><expr><name>outsb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>atf_process_stream_type_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>errsb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>atf_process_stream_type</name><argument_list>(<argument><expr><name>errsb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>atf_process_stream_type_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_process_fork</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>do_exec</name></expr></argument>, <argument><expr><name>outsb</name></expr></argument>, <argument><expr><name>errsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<label><name>again</name>:</label>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_process_child_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"libc"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>atf_libc_error_code</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EINTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_process_exec_list</name><parameter_list>(<parameter><decl><type><name>atf_process_status_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>outsb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_process_stream_t</name> <modifier>*</modifier></type><name>errsb</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>prehook</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>outsb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>atf_process_stream_type</name><argument_list>(<argument><expr><name>outsb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>atf_process_stream_type_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>errsb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>atf_process_stream_type</name><argument_list>(<argument><expr><name>errsb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>atf_process_stream_type_capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argv2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>list_to_array</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_process_exec_array</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>outsb</name></expr></argument>, <argument><expr><name>errsb</name></expr></argument>, <argument><expr><name>prehook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
</unit>
