<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/detail/text_test.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/text.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/sanity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/test_helpers.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUIRE_ERROR</name><parameter_list>(<parameter><type><name>exp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { atf_error_t err = exp; ATF_REQUIRE(atf_is_error(err)); atf_error_free(err); } while (0)</cpp:value></cpp:define>






<function><type><specifier>static</specifier>
<name>size_t</name></type>
<name>array_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>word</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>word</name> <operator>=</operator> <name>words</name></expr>;</init> <condition><expr><operator>*</operator><name>word</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>word</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>check_split</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_list_t</name></type> <name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>word</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Splitting '%s' with delimiter '%s'\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CE</name><argument_list>(<argument><expr><call><name>atf_text_split</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Expecting %zd words\n"</literal></expr></argument>, <argument><expr><call><name>array_size</name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_EQ</name><argument_list>(<argument><expr><call><name>atf_list_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>array_size</name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>word</name> <operator>=</operator> <name>words</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>word</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>word</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Word at position %zd should be '%s'\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_STREQ</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>atf_list_index_c</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>atf_list_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>word_acum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acum</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>acum</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>word_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>word</name></type> <name>ATF_DEFS_ATTRIBUTE_UNUSED</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>counter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>counter</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>fail_at</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>failpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curpos</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>word_fail_at</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>word</name></type> <name>ATF_DEFS_ATTRIBUTE_UNUSED</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fail_at</name></name> <modifier>*</modifier></type><name>fa</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fa</name><operator>-&gt;</operator><name>failpos</name></name> <operator>==</operator> <name><name>fa</name><operator>-&gt;</operator><name>curpos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>fa</name><operator>-&gt;</operator><name>curpos</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>





<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>for_each_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>for_each_word</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the atf_text_for_each_word"</literal>
<literal type="string">"function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>for_each_word</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>acum</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>acum</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_for_each_word</name><argument_list>(<argument><expr><literal type="string">"1 2 3"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>word_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_for_each_word</name><argument_list>(<argument><expr><literal type="string">"1 2 3"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>word_acum</name></expr></argument>, <argument><expr><name>acum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>cnt</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>acum</name></expr></argument>, <argument><expr><literal type="string">"123"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>acum</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_for_each_word</name><argument_list>(<argument><expr><literal type="string">"1 2 3"</literal></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>word_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_for_each_word</name><argument_list>(<argument><expr><literal type="string">"1 2 3"</literal></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>word_acum</name></expr></argument>, <argument><expr><name>acum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>cnt</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>acum</name></expr></argument>, <argument><expr><literal type="string">"1 2 3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>acum</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_for_each_word</name><argument_list>(<argument><expr><literal type="string">"1 2 3 4 5"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>word_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_for_each_word</name><argument_list>(<argument><expr><literal type="string">"1 2 3 4 5"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>word_acum</name></expr></argument>, <argument><expr><name>acum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>cnt</name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>acum</name></expr></argument>, <argument><expr><literal type="string">"12345"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>acum</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_for_each_word</name><argument_list>(<argument><expr><literal type="string">"1 2.3.4 5"</literal></expr></argument>, <argument><expr><literal type="string">" ."</literal></expr></argument>, <argument><expr><name>word_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_for_each_word</name><argument_list>(<argument><expr><literal type="string">"1 2.3.4 5"</literal></expr></argument>, <argument><expr><literal type="string">" ."</literal></expr></argument>, <argument><expr><name>word_acum</name></expr></argument>, <argument><expr><name>acum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>cnt</name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>acum</name></expr></argument>, <argument><expr><literal type="string">"12345"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fail_at</name></name></type> <name>fa</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fa</name><operator>.</operator><name>failpos</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fa</name><operator>.</operator><name>curpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name> <init>= <expr><call><name>atf_text_for_each_word</name><argument_list>(<argument><expr><literal type="string">"a b c d e"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>,
<argument><expr><name>word_fail_at</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"no_memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name><name>fa</name><operator>.</operator><name>curpos</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>format</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the construction of free-form "</literal>
<literal type="string">"strings using a variable parameters list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>format</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_text_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s %s %d"</literal></expr></argument>, <argument><expr><literal type="string">"Test"</literal></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"Test string 1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>format_ap</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_text_format_ap</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>format_ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>format_ap</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the construction of free-form "</literal>
<literal type="string">"strings using a va_list argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>format_ap</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>format_ap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s %s %d"</literal></expr></argument>, <argument><expr><literal type="string">"Test"</literal></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"Test string 1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>split</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the split function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>split</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">"a b"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">"a b c d"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">"foo bar"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar"</literal></expr>, <expr><literal type="string">"baz"</literal></expr>, <expr><literal type="string">"foobar"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">"foo bar baz foobar"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">" foo bar"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">"foo bar"</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">"foo bar "</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">" foo bar "</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>split_delims</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>split_delims</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the split function using "</literal>
<literal type="string">"different delimiters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>split_delims</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">" "</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">" "</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">"a/b"</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"bcd"</literal></expr>, <expr><literal type="string">"ef"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>check_split</name><argument_list>(<argument><expr><literal type="string">"aLONGDELIMbcdLONGDELIMef"</literal></expr></argument>, <argument><expr><literal type="string">"LONGDELIM"</literal></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>to_bool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>to_bool</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the atf_text_to_bool function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>to_bool</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"TRUE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"yes"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"FALSE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"tru"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"tru"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"true2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"true2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"fals"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"fals"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"false2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_bool</name><argument_list>(<argument><expr><literal type="string">"false2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>to_long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>to_long</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the atf_text_to_long function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>to_long</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_long</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_long</name><argument_list>(<argument><expr><literal type="string">"-5"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_long</name><argument_list>(<argument><expr><literal type="string">"5"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_to_long</name><argument_list>(<argument><expr><literal type="string">"123456789"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">123456789</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1212</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_long</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">1212</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_long</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">1212</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REQUIRE_ERROR</name><argument_list>(<argument><expr><call><name>atf_text_to_long</name><argument_list>(<argument><expr><literal type="string">"1234x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">1212</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>ATF_TP_ADD_TCS</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>for_each_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>format_ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>split_delims</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>to_bool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>to_long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>
</unit>
