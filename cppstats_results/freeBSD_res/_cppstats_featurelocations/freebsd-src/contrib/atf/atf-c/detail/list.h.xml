<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/detail/list.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATF_C_DETAIL_LIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_C_DETAIL_LIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/error_fwd.h&gt;</cpp:file></cpp:include>





<struct>struct <name>atf_list_citer</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>atf_list</name></name> <modifier>*</modifier></type><name>m_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>m_entry</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>atf_list_citer</name></name></type> <name>atf_list_citer_t</name>;</typedef>


<function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>atf_list_citer_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_citer_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>atf_list_citer_t</name></type> <name>atf_list_citer_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_citer_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>atf_equal_list_citer_list_citer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_citer_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_list_citer_t</name></type></decl></parameter>)</parameter_list>;</function_decl>





<struct>struct <name>atf_list_iter</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>atf_list</name></name> <modifier>*</modifier></type><name>m_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_entry</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>atf_list_iter</name></name></type> <name>atf_list_iter_t</name>;</typedef>


<function_decl><type><name>void</name> <modifier>*</modifier></type><name>atf_list_iter_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_iter_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>atf_list_iter_t</name></type> <name>atf_list_iter_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_iter_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>atf_equal_list_iter_list_iter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_iter_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_list_iter_t</name></type></decl></parameter>)</parameter_list>;</function_decl>





<struct>struct <name>atf_list</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>m_size</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>atf_list</name></name></type> <name>atf_list_t</name>;</typedef>


<function_decl><type><name>atf_error_t</name></type> <name>atf_list_init</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>atf_list_fini</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>atf_list_iter_t</name></type> <name>atf_list_begin</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>atf_list_citer_t</name></type> <name>atf_list_begin_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>atf_list_iter_t</name></type> <name>atf_list_end</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>atf_list_citer_t</name></type> <name>atf_list_end_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>atf_list_index</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>atf_list_index_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>atf_list_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>atf_list_to_charpp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>atf_error_t</name></type> <name>atf_list_append</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>atf_list_append_list</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atf_list_for_each</name><parameter_list>(<parameter><type><name>iter</name></type></parameter>, <parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (iter = atf_list_begin(list); !atf_equal_list_iter_list_iter((iter), atf_list_end(list)); iter = atf_list_iter_next(iter))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atf_list_for_each_c</name><parameter_list>(<parameter><type><name>iter</name></type></parameter>, <parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (iter = atf_list_begin_c(list); !atf_equal_list_citer_list_citer((iter), atf_list_end_c(list)); iter = atf_list_citer_next(iter))</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
