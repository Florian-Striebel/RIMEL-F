<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/detail/list.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/sanity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/utils.h"</cpp:file></cpp:include>





<struct>struct <name>list_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>m_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>m_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_managed</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier>
<name>atf_list_citer_t</name></type>
<name>entry_to_citer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_list_citer_t</name></type> <name>iter</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>iter</name><operator>.</operator><name>m_list</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>.</operator><name>m_entry</name></name> <operator>=</operator> <name>le</name></expr>;</expr_stmt>
<return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_list_iter_t</name></type>
<name>entry_to_iter</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_list_iter_t</name></type> <name>iter</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>iter</name><operator>.</operator><name>m_list</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>.</operator><name>m_entry</name></name> <operator>=</operator> <name>le</name></expr>;</expr_stmt>
<return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type>
<name>new_entry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>managed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>

<expr_stmt><expr><name>le</name> <operator>=</operator> <operator>(</operator>struct <name>list_entry</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>le</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>m_prev</name></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>m_object</name></name> <operator>=</operator> <name>object</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>m_managed</name></name> <operator>=</operator> <name>managed</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>managed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>le</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>delete_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>le</name><operator>-&gt;</operator><name>m_managed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>le</name><operator>-&gt;</operator><name>m_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type>
<name>new_entry_and_link</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>managed</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>

<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>new_entry</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>managed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>m_prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>le</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name>le</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>m_prev</name></name> <operator>=</operator> <name>le</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>le</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>atf_list_citer_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_citer_t</name></type> <name>citer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name> <init>= <expr><name><name>citer</name><operator>.</operator><name>m_entry</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>le</name><operator>-&gt;</operator><name>m_object</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_list_citer_t</name></type>
<name>atf_list_citer_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_citer_t</name></type> <name>citer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name> <init>= <expr><name><name>citer</name><operator>.</operator><name>m_entry</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_list_citer_t</name></type> <name>newciter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newciter</name> <operator>=</operator> <name>citer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newciter</name><operator>.</operator><name>m_entry</name></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>m_next</name></name></expr>;</expr_stmt>

<return>return <expr><name>newciter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_equal_list_citer_list_citer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_citer_t</name></type> <name>i1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_list_citer_t</name></type> <name>i2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>i1</name><operator>.</operator><name>m_list</name></name> <operator>==</operator> <name><name>i2</name><operator>.</operator><name>m_list</name></name> <operator>&amp;&amp;</operator> <name><name>i1</name><operator>.</operator><name>m_entry</name></name> <operator>==</operator> <name><name>i2</name><operator>.</operator><name>m_entry</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name> <modifier>*</modifier></type>
<name>atf_list_iter_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name> <init>= <expr><name><name>iter</name><operator>.</operator><name>m_entry</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>le</name><operator>-&gt;</operator><name>m_object</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_list_iter_t</name></type>
<name>atf_list_iter_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name> <init>= <expr><name><name>iter</name><operator>.</operator><name>m_entry</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_list_iter_t</name></type> <name>newiter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newiter</name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newiter</name><operator>.</operator><name>m_entry</name></name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>m_next</name></name></expr>;</expr_stmt>

<return>return <expr><name>newiter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_equal_list_iter_list_iter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_iter_t</name></type> <name>i1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_list_iter_t</name></type> <name>i2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>i1</name><operator>.</operator><name>m_list</name></name> <operator>==</operator> <name><name>i2</name><operator>.</operator><name>m_list</name></name> <operator>&amp;&amp;</operator> <name><name>i1</name><operator>.</operator><name>m_entry</name></name> <operator>==</operator> <name><name>i2</name><operator>.</operator><name>m_entry</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><name>atf_error_t</name></type>
<name>atf_list_init</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>lebeg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>leend</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lebeg</name> <operator>=</operator> <call><name>new_entry</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lebeg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>leend</name> <operator>=</operator> <call><name>new_entry</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>leend</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lebeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lebeg</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name>leend</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lebeg</name><operator>-&gt;</operator><name>m_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>leend</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leend</name><operator>-&gt;</operator><name>m_prev</name></name> <operator>=</operator> <name>lebeg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>m_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>m_begin</name></name> <operator>=</operator> <name>lebeg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>m_end</name></name> <operator>=</operator> <name>leend</name></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_list_fini</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>freed</name></decl>;</decl_stmt>

<expr_stmt><expr><name>le</name> <operator>=</operator> <operator>(</operator>struct <name>list_entry</name> <operator>*</operator><operator>)</operator><name><name>l</name><operator>-&gt;</operator><name>m_begin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>freed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>le</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>lenext</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lenext</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>m_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_entry</name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>le</name> <operator>=</operator> <name>lenext</name></expr>;</expr_stmt>

<expr_stmt><expr><name>freed</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><name>freed</name> <operator>==</operator> <name><name>l</name><operator>-&gt;</operator><name>m_size</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>atf_list_iter_t</name></type>
<name>atf_list_begin</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>m_begin</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>entry_to_iter</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>le</name><operator>-&gt;</operator><name>m_next</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_list_citer_t</name></type>
<name>atf_list_begin_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>m_begin</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>entry_to_citer</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>le</name><operator>-&gt;</operator><name>m_next</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_list_iter_t</name></type>
<name>atf_list_end</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>entry_to_iter</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>m_end</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_list_citer_t</name></type>
<name>atf_list_end_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>entry_to_citer</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>m_end</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>atf_list_index</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_list_iter_t</name></type> <name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <call><name>atf_list_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>atf_list_begin</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>idx</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>atf_equal_list_iter_list_iter</name><argument_list>(<argument><expr><operator>(</operator><name>iter</name><operator>)</operator></expr></argument>, <argument><expr><call><name>atf_list_end</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>atf_list_iter_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>
<return>return <expr><call><name>atf_list_iter_data</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>atf_list_index_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_list_citer_t</name></type> <name>iter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <call><name>atf_list_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>atf_list_begin_c</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>idx</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>atf_equal_list_citer_list_citer</name><argument_list>(<argument><expr><operator>(</operator><name>iter</name><operator>)</operator></expr></argument>,
<argument><expr><call><name>atf_list_end_c</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>atf_list_citer_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>
<return>return <expr><call><name>atf_list_citer_data</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>atf_list_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>l</name><operator>-&gt;</operator><name>m_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>atf_list_to_charpp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_list_citer_t</name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><call><name>atf_list_size</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>array</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>atf_list_for_each_c</name><argument_list>(<argument>iter</argument>, <argument>l</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>atf_list_citer_data</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atf_utils_free_charpp</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>array</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>array</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>atf_error_t</name></type>
<name>atf_list_append</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>managed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>le</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>(</operator>struct <name>list_entry</name> <operator>*</operator><operator>)</operator><name><name>l</name><operator>-&gt;</operator><name>m_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>m_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>le</name> <operator>=</operator> <call><name>new_entry_and_link</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>managed</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>le</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>m_size</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_list_append_list</name><parameter_list>(<parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>atf_list_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>list_entry</name></name> <modifier>*</modifier></type><name>e1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ghost1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ghost2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ghost1</name> <operator>=</operator> <operator>(</operator>struct <name>list_entry</name> <operator>*</operator><operator>)</operator><name><name>l</name><operator>-&gt;</operator><name>m_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ghost2</name> <operator>=</operator> <operator>(</operator>struct <name>list_entry</name> <operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>m_begin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <name><name>ghost1</name><operator>-&gt;</operator><name>m_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <name><name>ghost2</name><operator>-&gt;</operator><name>m_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_entry</name><argument_list>(<argument><expr><name>ghost1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_entry</name><argument_list>(<argument><expr><name>ghost2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e1</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e2</name><operator>-&gt;</operator><name>m_prev</name></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>m_end</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>m_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>m_size</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>m_size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
