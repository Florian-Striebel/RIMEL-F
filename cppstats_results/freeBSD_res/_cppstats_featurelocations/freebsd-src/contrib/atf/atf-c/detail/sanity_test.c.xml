<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/detail/sanity_test.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/sanity.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/dynstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/test_helpers.h"</cpp:file></cpp:include>





<enum>enum <name>type</name> <block>{ <decl><name>inv</name></decl>, <decl><name>pre</name></decl>, <decl><name>post</name></decl>, <decl><name>unreachable</name></decl> }</block>;</enum>

<struct>struct <name>test_data</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>type</name></name></type> <name>m_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_cond</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>do_test_child</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list> <name>ATF_DEFS_ATTRIBUTE_NORETURN</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>do_test_child</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>test_data</name></name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>m_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>inv</name></expr>:</case>
<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>m_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>pre</name></expr>:</case>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>m_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>post</name></expr>:</case>
<expr_stmt><expr><call><name>POST</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>m_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>unreachable</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>m_cond</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>do_test</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>type</name></name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_child_t</name></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_process_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>lines</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>atf_process_stream_t</name></type> <name>outsb</name></decl>, <decl><type ref="prev"/><name>errsb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>test_data</name></name></type> <name>td</name> <init>= <expr><block>{ <expr><name>t</name></expr>, <expr><name>cond</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_inherit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_stream_init_capture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_fork</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><name>do_test_child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_process_stream_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>nlines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nlines</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lines</name><index>[<expr><name>nlines</name></expr>]</index></name> <operator>=</operator>
<call><name>atf_utils_readline</name><argument_list>(<argument><expr><call><name>atf_process_child_stderr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nlines</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>nlines</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>nlines</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_process_child_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cond</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_process_status_signaled</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_process_status_termsig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIGABRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_process_status_exited</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_process_status_exitstatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>atf_process_status_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cond</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>inv</name></expr>:</case>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_string</name><argument_list>(<argument><expr><literal type="string">"Invariant"</literal></expr></argument>, <argument><expr><name><name>lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>pre</name></expr>:</case>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_string</name><argument_list>(<argument><expr><literal type="string">"Precondition"</literal></expr></argument>, <argument><expr><name><name>lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>post</name></expr>:</case>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_string</name><argument_list>(<argument><expr><literal type="string">"Postcondition"</literal></expr></argument>, <argument><expr><name><name>lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>unreachable</name></expr>:</case>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_string</name><argument_list>(<argument><expr><literal type="string">"Invariant"</literal></expr></argument>, <argument><expr><name><name>lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_string</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name><name>lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_string</name><argument_list>(<argument><expr><name>PACKAGE_BUGREPORT</name></expr></argument>, <argument><expr><name><name>lines</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>nlines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nlines</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>nlines</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>require_ndebug</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>atf_tc_skip</name><argument_list>(<argument><expr><literal type="string">"Sanity checks not available; code built with -DNDEBUG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>inv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>inv</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the INV macro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>inv</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>require_ndebug</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_test</name><argument_list>(<argument><expr><name>inv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_test</name><argument_list>(<argument><expr><name>inv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>pre</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the PRE macro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>pre</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>require_ndebug</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_test</name><argument_list>(<argument><expr><name>pre</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_test</name><argument_list>(<argument><expr><name>pre</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>post</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the POST macro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>post</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>require_ndebug</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_test</name><argument_list>(<argument><expr><name>post</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_test</name><argument_list>(<argument><expr><name>post</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>unreachable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>unreachable</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the UNREACHABLE macro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>unreachable</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>require_ndebug</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_test</name><argument_list>(<argument><expr><name>unreachable</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_test</name><argument_list>(<argument><expr><name>unreachable</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>ATF_TP_ADD_TCS</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>inv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>unreachable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>
</unit>
