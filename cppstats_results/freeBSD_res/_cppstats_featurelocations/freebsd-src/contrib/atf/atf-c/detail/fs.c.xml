<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/detail/fs.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/fs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/sanity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/text.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/user.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/error.h"</cpp:file></cpp:include>





<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_umask</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mode_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mode_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>atf_error_t</name></type> <name>copy_contents</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>mode_t</name></type> <name>current_umask</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>atf_error_t</name></type> <name>do_mkdtemp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>atf_error_t</name></type> <name>normalize</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>atf_error_t</name></type> <name>normalize_ap</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>replace_contents</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stat_type_to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>





<struct>struct <name>invalid_umask_error_data</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>m_type</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>char</name></type> <name><name>m_path</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mode_t</name></type> <name>m_umask</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>invalid_umask_error_data</name></name></type> <name>invalid_umask_error_data_t</name>;</typedef>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>invalid_umask_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_error_t</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>invalid_umask_error_data_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"invalid_umask"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>atf_error_data</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"Could not create the temporary %s %s because "</literal>
<literal type="string">"it will not have enough access rights due to the current "</literal>
<literal type="string">"umask %05o"</literal></expr></argument>, <argument><expr><call><name>stat_type_to_string</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>m_type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>m_path</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>m_umask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>invalid_umask_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>mode_t</name></type> <name>failing_mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>invalid_umask_error_data_t</name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>m_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>m_path</name></name></expr></argument>, <argument><expr><call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>m_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>m_path</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>m_path</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>m_umask</name></name> <operator>=</operator> <name>failing_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_error_new</name><argument_list>(<argument><expr><literal type="string">"invalid_umask"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>invalid_umask_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>





<struct>struct <name>unknown_type_error_data</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m_type</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>unknown_type_error_data</name></name></type> <name>unknown_type_error_data_t</name>;</typedef>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>unknown_type_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_error_t</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unknown_type_error_data_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unknown_type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>atf_error_data</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"Unknown file type %d of %s"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>m_type</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>m_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>unknown_type_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unknown_type_error_data_t</name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>m_path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>.</operator><name>m_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_error_new</name><argument_list>(<argument><expr><literal type="string">"unknown_type"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>unknown_type_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier>
<name>bool</name></type>
<name>check_umask</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mode_t</name></type> <name>exp_mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mode_t</name></type> <name>min_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>mode_t</name></type> <name>actual_mode</name> <init>= <expr><operator>(</operator><operator>~</operator><call><name>current_umask</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>exp_mode</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>actual_mode</name> <operator>&amp;</operator> <name>min_mode</name><operator>)</operator> <operator>==</operator> <name>min_mode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>copy_contents</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>atf_dynstr_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>mode_t</name></type>
<name>current_umask</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>mode_t</name></type> <name>current</name> <init>= <expr><call><name>umask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>umask</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>current</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>do_mkdtemp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>tmpl</name></expr></argument>, <argument><expr><literal type="string">"XXXXXX"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mkdtemp</name><argument_list>(<argument><expr><name>tmpl</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Cannot create temporary directory "</literal>
<literal type="string">"with template '%s'"</literal></expr></argument>, <argument><expr><name>tmpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>do_mkstemp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpl</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fdout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>tmpl</name></expr></argument>, <argument><expr><literal type="string">"XXXXXX"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fdout</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name>tmpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fdout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Cannot create temporary file "</literal>
<literal type="string">"with template '%s'"</literal></expr></argument>, <argument><expr><name>tmpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>normalize</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>atf_dynstr_length</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_dynstr_append_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_dynstr_append_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"/"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>normalize_ap</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_dynstr_init</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_text_format_ap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_dynstr_fini</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>normalize</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>replace_contents</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><call><name>atf_dynstr_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_dynstr_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_dynstr_append_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>stat_type_to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_fs_stat_blk_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"block device"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_fs_stat_chr_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"character device"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_fs_stat_dir_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"directory"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_fs_stat_fifo_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"named pipe"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_fs_stat_lnk_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"symbolic link"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_fs_stat_reg_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"regular file"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_fs_stat_sock_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"socket"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>atf_fs_stat_wht_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"whiteout"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>atf_error_t</name></type>
<name>atf_fs_path_init_ap</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>normalize_ap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_path_init_fmt</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_fs_path_init_ap</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_path_copy</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atf_dynstr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_fs_path_fini</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_dynstr_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>atf_error_t</name></type>
<name>atf_fs_path_branch_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>endpos</name> <init>= <expr><call><name>atf_dynstr_rfind_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>endpos</name> <operator>==</operator> <name>atf_dynstr_npos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_fs_path_init_fmt</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>endpos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_fs_path_init_fmt</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_dynstr_init_substr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bp</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>endpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_DIRNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><call><name>atf_equal_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bp</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>,
<argument><expr><call><name>dirname</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>atf_fs_path_cstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_path_leaf_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ln</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>begpos</name> <init>= <expr><call><name>atf_dynstr_rfind_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>begpos</name> <operator>==</operator> <name>atf_dynstr_npos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>begpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>begpos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_dynstr_init_substr</name><argument_list>(<argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><name>begpos</name></expr></argument>, <argument><expr><name>atf_dynstr_npos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_BASENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><call><name>atf_equal_dynstr_cstring</name><argument_list>(<argument><expr><name>ln</name></expr></argument>,
<argument><expr><call><name>basename</name><argument_list>(<argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_fs_path_is_absolute</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'/'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_fs_path_is_root</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atf_equal_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>atf_error_t</name></type>
<name>atf_fs_path_append_ap</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_dynstr_t</name></type> <name>aux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>normalize_ap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auxstr</name> <init>= <expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>needslash</name> <init>= <expr><name><name>auxstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_dynstr_append_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>needslash</name></expr> ?</condition><then> <expr><literal type="string">"/"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>auxstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_dynstr_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_path_append_fmt</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_fs_path_append_ap</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_path_append_path</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atf_fs_path_append_fmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>atf_dynstr_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p2</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_path_to_absolute</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>pa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_fs_path_is_absolute</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_fs_getcwd</name><argument_list>(<argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_fs_path_append_path</name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_fs_path_fini</name><argument_list>(<argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>atf_equal_fs_path_fs_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atf_equal_dynstr_dynstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p1</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p2</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_stat_blk_type</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_stat_chr_type</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_stat_dir_type</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_stat_fifo_type</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_stat_lnk_type</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_stat_reg_type</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_stat_sock_type</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_stat_wht_type</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>





<function><type><name>atf_error_t</name></type>
<name>atf_fs_stat_init</name><parameter_list>(<parameter><decl><type><name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pstr</name> <init>= <expr><call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>m_sb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Cannot get information of %s; "</literal>
<literal type="string">"lstat(2) failed"</literal></expr></argument>, <argument><expr><name>pstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>S_IFBLK</name></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_fs_stat_blk_type</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>S_IFCHR</name></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_fs_stat_chr_type</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>S_IFDIR</name></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_fs_stat_dir_type</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>S_IFIFO</name></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_fs_stat_fifo_type</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>S_IFLNK</name></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_fs_stat_lnk_type</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>S_IFREG</name></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_fs_stat_reg_type</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>S_IFSOCK</name></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_fs_stat_sock_type</name></expr>;</expr_stmt> <break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_IFWHT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>S_IFWHT</name></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name>atf_fs_stat_wht_type</name></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>unknown_type_error</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_fs_stat_copy</name><parameter_list>(<parameter><decl><type><name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>m_type</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>m_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>m_sb</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>m_sb</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_fs_stat_fini</name><parameter_list>(<parameter><decl><type><name>atf_fs_stat_t</name> <modifier>*</modifier><name>st</name></type> <name>ATF_DEFS_ATTRIBUTE_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>





<function><type><name>dev_t</name></type>
<name>atf_fs_stat_get_device</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_dev</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ino_t</name></type>
<name>atf_fs_stat_get_inode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_ino</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>mode_t</name></type>
<name>atf_fs_stat_get_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>S_IFMT</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>off_t</name></type>
<name>atf_fs_stat_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>atf_fs_stat_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_fs_stat_is_owner_readable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IRUSR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_fs_stat_is_owner_writable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IWUSR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_fs_stat_is_owner_executable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IXUSR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_fs_stat_is_group_readable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IRGRP</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_fs_stat_is_group_writable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IWGRP</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_fs_stat_is_group_executable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IXGRP</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_fs_stat_is_other_readable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IROTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_fs_stat_is_other_writable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IWOTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_fs_stat_is_other_executable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_stat_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IXOTH</name></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_access_f</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_access_r</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_access_w</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>atf_fs_access_x</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>






<function><type><name>atf_error_t</name></type>
<name>atf_fs_eaccess</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_f</name> <operator>||</operator> <name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_r</name> <operator>||</operator>
<name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_w</name> <operator>||</operator> <name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Cannot get information from file %s"</literal></expr></argument>,
<argument><expr><call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_f</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_user_is_root</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_x</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IXUSR</name> <operator>|</operator> <name>S_IXGRP</name> <operator>|</operator> <name>S_IXOTH</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atf_user_euid</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>st</name><operator>.</operator><name>st_uid</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_r</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IRUSR</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_w</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IWUSR</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_x</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IXUSR</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>&amp;&amp;</operator> <call><name>atf_user_is_member_of_group</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_r</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IRGRP</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_w</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IWGRP</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_x</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IXGRP</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>atf_user_euid</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>st</name><operator>.</operator><name>st_uid</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>atf_user_is_member_of_group</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_r</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IROTH</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_w</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IWOTH</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>atf_fs_access_x</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IXOTH</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>EACCES</name></expr></argument>, <argument><expr><literal type="string">"Access check failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_fs_eaccess</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>atf_fs_access_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"libc"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>atf_libc_error_code</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_getcwd</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cwd</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETCWD_DYN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cwd</name> <operator>=</operator> <call><name>getcwd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>cwd</name> <operator>=</operator> <call><name>getcwd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MAXPATHLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>cwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Cannot determine current directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_fs_path_init_fmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_mkdtemp</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_umask</name><argument_list>(<argument><expr><name>S_IRWXU</name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>invalid_umask_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>atf_fs_stat_dir_type</name></expr></argument>, <argument><expr><call><name>current_umask</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>copy_contents</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>do_mkdtemp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out_buf</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>replace_contents</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out_buf</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_mkstemp</name><parameter_list>(<parameter><decl><type><name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fdout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_umask</name><argument_list>(<argument><expr><name>S_IRWXU</name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>invalid_umask_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>atf_fs_stat_reg_type</name></expr></argument>, <argument><expr><call><name>current_umask</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>copy_contents</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>do_mkstemp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out_buf</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>replace_contents</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fdout</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out_buf</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rmdir</name><argument_list>(<argument><expr><call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EEXIST</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTEMPTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Cannot remove directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_fs_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_fs_path_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Cannot unlink file: '%s'"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
</unit>
