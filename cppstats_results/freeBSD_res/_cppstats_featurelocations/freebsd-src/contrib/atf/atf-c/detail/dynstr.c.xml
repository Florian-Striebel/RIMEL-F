<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/detail/dynstr.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/dynstr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/sanity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/text.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/error.h"</cpp:file></cpp:include>





<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>resize</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRE</name><argument_list>(<argument><expr><name>newsize</name> <operator>&gt;</operator> <name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newdata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newdata</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>newdata</name></expr></argument>, <argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>=</operator> <name>newdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>atf_error_t</name></type>
<name>prepend_or_append</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>prepend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_text_format_ap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>resize</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>newlen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out_free</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prepend</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>+</operator> <name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name></expr></argument>, <argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>out_free</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>









<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>atf_dynstr_npos</name> <init>= <expr><name>SIZE_MAX</name></expr></init></decl>;</decl_stmt>





<function><type><name>atf_error_t</name></type>
<name>atf_dynstr_init</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_dynstr_init_ap</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Cannot format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ret</name> <operator>&gt;=</operator> <name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name> <operator>&gt;=</operator> <name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name></expr>)</condition>;</do>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>POST</name><argument_list>(<argument><expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_dynstr_init_fmt</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_dynstr_init_ap</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_dynstr_init_raw</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>memlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>memlen</name> <operator>&gt;=</operator> <name>SIZE_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>memlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name> <operator>=</operator> <name>memlen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name><index>[<expr><name>memlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name> <operator>&lt;=</operator> <name>memlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_dynstr_init_rep</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_datasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_dynstr_init_substr</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>atf_dynstr_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>beg</name> <operator>&gt;</operator> <name><name>src</name><operator>-&gt;</operator><name>m_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>m_length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>atf_dynstr_npos</name> <operator>||</operator> <name>end</name> <operator>&gt;</operator> <name><name>src</name><operator>-&gt;</operator><name>m_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>m_length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>atf_dynstr_init_raw</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>m_data</name></name> <operator>+</operator> <name>beg</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_dynstr_copy</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>atf_dynstr_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>m_data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>m_datasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dest</name><operator>-&gt;</operator><name>m_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>m_datasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>m_datasize</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>m_datasize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>m_length</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>m_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_dynstr_fini</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>atf_dynstr_fini_disown</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>INV</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>atf_dynstr_cstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>atf_dynstr_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>atf_dynstr_rfind_ch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name></expr>;</init> <condition><expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ad</name><operator>-&gt;</operator><name>m_data</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>ch</name></expr>;</condition> <incr><expr><name>pos</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><ternary><condition><expr><name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>atf_dynstr_npos</name></expr> </then><else>: <expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><name>atf_error_t</name></type>
<name>atf_dynstr_append_ap</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>prepend_or_append</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_dynstr_append_fmt</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>prepend_or_append</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_dynstr_clear</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>m_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_dynstr_prepend_ap</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>prepend_or_append</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>atf_error_t</name></type>
<name>atf_dynstr_prepend_fmt</name><parameter_list>(<parameter><decl><type><name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>prepend_or_append</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type>
<name>atf_equal_dynstr_cstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_dynstr_t</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>atf_equal_dynstr_dynstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_dynstr_t</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>atf_dynstr_t</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>, <argument><expr><name><name>s2</name><operator>-&gt;</operator><name>m_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
