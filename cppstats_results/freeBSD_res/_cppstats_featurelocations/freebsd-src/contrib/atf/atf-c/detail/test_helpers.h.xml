<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/detail/test_helpers.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ATF_C_DETAIL_TEST_HELPERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Cannot include test_helpers.h more than once."</cpp:literal></cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATF_C_DETAIL_TEST_HELPERS_H</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/detail/env.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/error_fwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/tc.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>atf_dynstr</name>;</struct_decl>
<struct_decl>struct <name>atf_fs_path</name>;</struct_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE</name><parameter_list>(<parameter><type><name>stm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_CHECK(!atf_is_error(stm))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE</name><parameter_list>(<parameter><type><name>stm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_REQUIRE(!atf_is_error(stm))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_TC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>hdrname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC(name); ATF_TC_HEAD(name, tc) { const char *cc; atf_tc_set_md_var(tc, "descr", "Tests that the " hdrname " file can " "be included on its own, without any prerequisites"); cc = atf_env_get_with_default("ATF_BUILD_CC", ATF_BUILD_CC); atf_tc_set_md_var(tc, "require.progs", cc); } ATF_TC_BODY(name, tc) { header_check(hdrname); }</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD_TC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>sfile</name></type></parameter>, <parameter><type><name>descr</name></type></parameter>, <parameter><type><name>failmsg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC(name); ATF_TC_HEAD(name, tc) { const char *cc; atf_tc_set_md_var(tc, "descr", descr); cc = atf_env_get_with_default("ATF_BUILD_CC", ATF_BUILD_CC); atf_tc_set_md_var(tc, "require.progs", cc); } ATF_TC_BODY(name, tc) { if (!build_check_c_o_srcdir(tc, sfile)) atf_tc_fail("%s", failmsg); }</cpp:value></cpp:define>














<function_decl><type><name>bool</name></type> <name>build_check_c_o</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>build_check_c_o_srcdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>header_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>get_process_helpers_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>atf_fs_path</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>read_line</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>atf_dynstr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>run_h_tc</name><parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
</unit>
