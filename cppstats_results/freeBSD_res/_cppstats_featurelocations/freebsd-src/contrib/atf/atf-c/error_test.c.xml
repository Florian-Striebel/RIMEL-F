<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/error_test.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/defs.h"</cpp:file></cpp:include>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>test_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_error_t</name> <name>err</name></type> <name>ATF_DEFS_ATTRIBUTE_UNUSED</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"Test formatting function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>error_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>error_new</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the construction of an error "</literal>
<literal type="string">"object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>error_new</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_error_new</name><argument_list>(<argument><expr><literal type="string">"test_error"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"test_error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unknown_error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_data</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_error_new</name><argument_list>(<argument><expr><literal type="string">"test_data_error"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"test_data_error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"unknown_error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_data</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><call><name>atf_error_data</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>error_new_wo_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>error_new_wo_memory</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks that an unavailable memory error "</literal>
<literal type="string">"raised when constructing an error object "</literal>
<literal type="string">"is properly converted to the no_memory "</literal>
<literal type="string">"static error type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>error_new_wo_memory</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>invalid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>invalid</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_error_new</name><argument_list>(<argument><expr><literal type="string">"test_error"</literal></expr></argument>, <argument><expr><name>invalid</name></expr></argument>, <argument><expr><name>SIZE_MAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"no_memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_data</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>no_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>no_error</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks that constructing a non-error "</literal>
<literal type="string">"object works"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>no_error</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>is_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>is_error</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the is_error method to determine "</literal>
<literal type="string">"if an error object holds success or an error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>is_error</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_error_new</name><argument_list>(<argument><expr><literal type="string">"test_error"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_is_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>format</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the default formatting function "</literal>
<literal type="string">"and the ability to change it"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>format</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Testing default formatting function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_error_new</name><argument_list>(<argument><expr><literal type="string">"test_error"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_format</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error string is: %s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Error 'test_error'"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Testing custom formatting function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_error_new</name><argument_list>(<argument><expr><literal type="string">"test_error"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>test_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_format</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error string is: %s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Test formatting function"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>libc_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>libc_new</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the construction of libc errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>libc_new</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Test message 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"libc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><call><name>atf_libc_error_code</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>atf_libc_error_msg</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Test message 1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>, <argument><expr><literal type="string">"%s message %d"</literal></expr></argument>, <argument><expr><literal type="string">"Test"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"libc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><call><name>atf_libc_error_code</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>atf_libc_error_msg</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Test message 2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>libc_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>libc_format</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the formatting of libc errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>libc_format</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>, <argument><expr><literal type="string">"Test message 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_format</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Test message 1"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>, <argument><expr><literal type="string">"Test message 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_format</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Test message 2"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_libc_error</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>, <argument><expr><literal type="string">"%s message %d"</literal></expr></argument>, <argument><expr><literal type="string">"Test"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_format</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Test message 3"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>no_memory_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>no_memory_new</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the construction of no_memory "</literal>
<literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>no_memory_new</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"no_memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_data</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>no_memory_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>no_memory_format</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the formatting of no_memory "</literal>
<literal type="string">"errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>no_memory_format</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_format</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>no_memory_twice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>no_memory_twice</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks the construction of no_memory "</literal>
<literal type="string">"errors multiple times, as this error is initialized "</literal>
<literal type="string">"statically"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>no_memory_twice</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name> <init>= <expr><call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"no_memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_data</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>atf_error_t</name></type> <name>err</name> <init>= <expr><call><name>atf_no_memory_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_is</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"no_memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_error_data</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_error_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block>





<macro><name>ATF_TP_ADD_TCS</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>

<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>error_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>error_new_wo_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>no_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>is_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>libc_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>libc_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>no_memory_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>no_memory_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>no_memory_twice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>
</unit>
