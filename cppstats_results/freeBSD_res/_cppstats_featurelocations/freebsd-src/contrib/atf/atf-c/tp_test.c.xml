<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/tp_test.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/tp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>getopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>getopt</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Checks if getopt(3) global state is "</literal>
<literal type="string">"reset by the test program driver so that test cases can use "</literal>
<literal type="string">"getopt(3) again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>getopt</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>arg1</name><index>[]</index></name> <init>= <expr><literal type="string">"progname"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>arg2</name><index>[]</index></name> <init>= <expr><literal type="string">"-Z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>arg3</name><index>[]</index></name> <init>= <expr><literal type="string">"-s"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>arg4</name><index>[]</index></name> <init>= <expr><literal type="string">"foo"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>arg1</name></expr>, <expr><name>arg2</name></expr>, <expr><name>arg3</name></expr>, <expr><name>arg4</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>zflag</name></decl>;</decl_stmt>




<expr_stmt><expr><name>zflag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">":Z"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<expr_stmt><expr><name>zflag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>optopt</name> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"Unexpected unknown option -%c found"</literal></expr></argument>, <argument><expr><name>optopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>zflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ_MSG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argc</name> <operator>-</operator> <name>optind</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of arguments left "</literal>
<literal type="string">"after the call to getopt(3)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_STREQ_MSG</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"The non-option argument is "</literal>
<literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>ATF_TP_ADD_TCS</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>getopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>
</unit>
