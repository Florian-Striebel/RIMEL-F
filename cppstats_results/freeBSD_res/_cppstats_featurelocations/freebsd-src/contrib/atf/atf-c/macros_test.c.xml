<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/macros_test.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/test_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/text.h"</cpp:file></cpp:include>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>create_ctl_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_fs_path_t</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_fs_path_init_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>open</name><argument_list>(<argument><expr><call><name>atf_fs_path_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_fs_path_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>bool</name></type>
<name>exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_fs_path_t</name></type> <name>pp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_fs_path_init_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_fs_exists</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_fs_path_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>init_and_run_h_tc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>head</name>)<parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>body</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_tc_t</name></type> <name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>config</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_tc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>run_h_tc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_DEF</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>macro</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD(h_ ##id, tc) { atf_tc_set_md_var(tc, "descr", "Helper test case"); } ATF_TC_BODY(h_ ##id, tc) { create_ctl_file("before"); macro; create_ctl_file("after"); }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_check_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_check_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>condition</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(check_ ##id, ATF_CHECK(condition))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_MSG_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_check_msg_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_MSG_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_check_msg_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_MSG</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>condition</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(check_msg_ ##id, ATF_CHECK_MSG(condition, msg))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_EQ_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_check_eq_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_EQ_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_check_eq_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_EQ</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(check_eq_ ##id, ATF_CHECK_EQ(v1, v2))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_STREQ_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_check_streq_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_STREQ_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_check_streq_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_STREQ</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(check_streq_ ##id, ATF_CHECK_STREQ(v1, v2))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_MATCH_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_check_match_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_MATCH_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_check_match_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_MATCH</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(check_match_ ##id, ATF_CHECK_MATCH(v1, v2))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_EQ_MSG_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_check_eq_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_EQ_MSG_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_check_eq_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_EQ_MSG</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(check_eq_msg_ ##id, ATF_CHECK_EQ_MSG(v1, v2, msg))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_STREQ_MSG_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_check_streq_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_STREQ_MSG_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_check_streq_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_STREQ_MSG</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(check_streq_msg_ ##id, ATF_CHECK_STREQ_MSG(v1, v2, msg))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_MATCH_MSG_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_check_match_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_MATCH_MSG_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_check_match_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_MATCH_MSG</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(check_match_msg_ ##id, ATF_CHECK_MATCH_MSG(v1, v2, msg))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_ERRNO_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_check_errno_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_ERRNO_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_check_errno_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_CHECK_ERRNO</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>exp_errno</name></type></parameter>, <parameter><type><name>bool_expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(check_errno_ ##id, ATF_CHECK_ERRNO(exp_errno, bool_expr))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_require_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_require_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>condition</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(require_ ##id, ATF_REQUIRE(condition))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_MSG_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_require_msg_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_MSG_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_require_msg_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_MSG</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>condition</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(require_msg_ ##id, ATF_REQUIRE_MSG(condition, msg))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_EQ_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_require_eq_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_EQ_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_require_eq_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_EQ</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(require_eq_ ##id, ATF_REQUIRE_EQ(v1, v2))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_STREQ_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_require_streq_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_STREQ_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_require_streq_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_STREQ</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(require_streq_ ##id, ATF_REQUIRE_STREQ(v1, v2))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_MATCH_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_require_match_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_MATCH_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_require_match_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_MATCH</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(require_match_ ##id, ATF_REQUIRE_MATCH(v1, v2))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_EQ_MSG_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_require_eq_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_EQ_MSG_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_require_eq_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_EQ_MSG</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(require_eq_msg_ ##id, ATF_REQUIRE_EQ_MSG(v1, v2, msg))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_STREQ_MSG_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_require_streq_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_STREQ_MSG_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_require_streq_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_STREQ_MSG</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(require_streq_msg_ ##id, ATF_REQUIRE_STREQ_MSG(v1, v2, msg))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_MATCH_MSG_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_require_match_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_MATCH_MSG_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_require_match_msg_ ##id)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_MATCH_MSG</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(require_match_msg_ ##id, ATF_REQUIRE_MATCH_MSG(v1, v2, msg))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_ERRNO_HEAD_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_HEAD_NAME(h_require_errno_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_ERRNO_BODY_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ATF_TC_BODY_NAME(h_require_errno_ ##id)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_REQUIRE_ERRNO</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>exp_errno</name></type></parameter>, <parameter><type><name>bool_expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H_DEF(require_errno_ ##id, ATF_REQUIRE_ERRNO(exp_errno, bool_expr))</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>errno_fail_stub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>raised_errno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>raised_errno</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>errno_ok_stub</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>H_CHECK_ERRNO</name><argument_list>(<argument><expr><name>no_error</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>errno_ok_stub</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_ERRNO</name><argument_list>(<argument><expr><name>errno_ok</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>errno_fail_stub</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_ERRNO</name><argument_list>(<argument><expr><name>errno_fail</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>errno_fail_stub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H_REQUIRE_ERRNO</name><argument_list>(<argument><expr><name>no_error</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>errno_ok_stub</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_ERRNO</name><argument_list>(<argument><expr><name>errno_ok</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>errno_fail_stub</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_ERRNO</name><argument_list>(<argument><expr><name>errno_fail</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>errno_fail_stub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>check_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>check_errno</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the ATF_CHECK_ERRNO macro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>check_errno</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <name>test</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>head</name>)<parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>body</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp_regex</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>t</name></decl>, <decl><type ref="prev"/><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>H_CHECK_ERRNO_HEAD_NAME</name><argument_list>(<argument><expr><name>no_error</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_CHECK_ERRNO_BODY_NAME</name><argument_list>(<argument><expr><name>no_error</name></expr></argument>)</argument_list></call></expr>,
<expr><name>false</name></expr>, <expr><literal type="string">"Expected true value in errno_ok_stub\\(\\) == -1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_ERRNO_HEAD_NAME</name><argument_list>(<argument><expr><name>errno_ok</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_CHECK_ERRNO_BODY_NAME</name><argument_list>(<argument><expr><name>errno_ok</name></expr></argument>)</argument_list></call></expr>,
<expr><name>true</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_ERRNO_HEAD_NAME</name><argument_list>(<argument><expr><name>errno_fail</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_CHECK_ERRNO_BODY_NAME</name><argument_list>(<argument><expr><name>errno_fail</name></expr></argument>)</argument_list></call></expr>,
<expr><name>false</name></expr>, <expr><literal type="string">"Expected errno 3, got 4, in errno_fail_stub\\(4\\) == -1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>false</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>init_and_run_h_tc</name><argument_list>(<argument><expr><literal type="string">"h_check_errno"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"^passed"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"^failed"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(
<argument><expr><literal type="string">"macros_test.c:[0-9]+: %s$"</literal></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>exp_regex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>require_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>require_errno</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the ATF_REQUIRE_ERRNO macro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>require_errno</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <name>test</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>head</name>)<parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>body</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp_regex</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>t</name></decl>, <decl><type ref="prev"/><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>H_REQUIRE_ERRNO_HEAD_NAME</name><argument_list>(<argument><expr><name>no_error</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_REQUIRE_ERRNO_BODY_NAME</name><argument_list>(<argument><expr><name>no_error</name></expr></argument>)</argument_list></call></expr>,
<expr><name>false</name></expr>, <expr><literal type="string">"Expected true value in errno_ok_stub\\(\\) == -1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_ERRNO_HEAD_NAME</name><argument_list>(<argument><expr><name>errno_ok</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_REQUIRE_ERRNO_BODY_NAME</name><argument_list>(<argument><expr><name>errno_ok</name></expr></argument>)</argument_list></call></expr>,
<expr><name>true</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_ERRNO_HEAD_NAME</name><argument_list>(<argument><expr><name>errno_fail</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_REQUIRE_ERRNO_BODY_NAME</name><argument_list>(<argument><expr><name>errno_fail</name></expr></argument>)</argument_list></call></expr>,
<expr><name>false</name></expr>, <expr><literal type="string">"Expected errno 3, got 4, in errno_fail_stub\\(4\\) == -1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>false</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>init_and_run_h_tc</name><argument_list>(<argument><expr><literal type="string">"h_require_errno"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"^passed"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(
<argument><expr><literal type="string">"^failed: .*macros_test.c:[0-9]+: %s$"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>exp_regex</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>





<expr_stmt><expr><call><name>H_CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_MSG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"expected a false value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_MSG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"expected a true value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>check</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the ATF_CHECK and "</literal>
<literal type="string">"ATF_CHECK_MSG macros"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>check</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <name>test</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>head</name>)<parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>body</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>t</name></decl>, <decl><type ref="prev"/><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>H_CHECK_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="string">"0 not met"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="string">"1 not met"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="string">"expected a false value"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="string">"expected a true value"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Checking with a %d value\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_and_run_h_tc</name><argument_list>(<argument><expr><literal type="string">"h_check"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"^passed"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"^failed"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"Check failed: .*"</literal>
<literal type="string">"macros_test.c:[0-9]+: %s$"</literal></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>





<struct>struct <name>check_eq_test</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>head</name>)<parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>body</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>do_check_eq_tests</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>check_eq_test</name></name> <modifier>*</modifier></type><name>tests</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>check_eq_test</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Checking with %s, %s and expecting %s\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>t</name><operator>-&gt;</operator><name>ok</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_and_run_h_tc</name><argument_list>(<argument><expr><literal type="string">"h_check"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"^passed"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"^failed"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"Check failed: .*"</literal>
<literal type="string">"macros_test.c:[0-9]+: %s$"</literal></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<expr_stmt><expr><call><name>H_CHECK_EQ</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_EQ</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_EQ</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_EQ</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_EQ_MSG</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1 does not match 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_EQ_MSG</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"1 does not match 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_EQ_MSG</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"2 does not match 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_EQ_MSG</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"2 does not match 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>check_eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>check_eq</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the ATF_CHECK_EQ and "</literal>
<literal type="string">"ATF_CHECK_EQ_MSG macros"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>check_eq</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>check_eq_test</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>H_CHECK_EQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_EQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1 != 1"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_EQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_EQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1 != 2"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_EQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_EQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2 != 1"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_EQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_EQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2 != 2"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_EQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_EQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1 != 1: 1 does not match 1"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_EQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_EQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1 != 2: 1 does not match 2"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_EQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_EQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2 != 1: 2 does not match 1"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_EQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_EQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2 != 2: 2 does not match 2"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>do_check_eq_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>H_CHECK_STREQ</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_STREQ</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_STREQ</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_STREQ</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_STREQ_MSG</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"1 does not match 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_STREQ_MSG</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"1 does not match 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_STREQ_MSG</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"2 does not match 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_STREQ_MSG</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"2 does not match 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_STREQ_VAR1</name></cpp:macro> <cpp:value>"5"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_STREQ_VAR2</name></cpp:macro> <cpp:value>"9"</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>check_streq_var1</name> <init>= <expr><name>CHECK_STREQ_VAR1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>check_streq_var2</name> <init>= <expr><name>CHECK_STREQ_VAR2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>H_CHECK_STREQ</name><argument_list>(<argument><expr><name>vars</name></expr></argument>, <argument><expr><name>check_streq_var1</name></expr></argument>, <argument><expr><name>check_streq_var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>check_streq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>check_streq</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the ATF_CHECK_STREQ and "</literal>
<literal type="string">"ATF_CHECK_STREQ_MSG macros"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>check_streq</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>check_eq_test</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>H_CHECK_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_STREQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"\"1\" != \"1\" \\(1 != 1\\)"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_STREQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"\"1\" != \"2\" \\(1 != 2\\)"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_STREQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"\"2\" != \"1\" \\(2 != 1\\)"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_STREQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"\"2\" != \"2\" \\(2 != 2\\)"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_STREQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_CHECK_STREQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"\"1\" != \"1\" \\(1 != 1\\): 1 does not match 1"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_STREQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_CHECK_STREQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"\"1\" != \"2\" \\(1 != 2\\): 1 does not match 2"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_STREQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_CHECK_STREQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"\"2\" != \"1\" \\(2 != 1\\): 2 does not match 1"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_STREQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_CHECK_STREQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"\"2\" != \"2\" \\(2 != 2\\): 2 does not match 2"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_STREQ_BODY_NAME</name><argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>,
<expr><name>check_streq_var1</name></expr>, <expr><name>check_streq_var2</name></expr>,
<expr><literal type="string">"check_streq_var1 != check_streq_var2 \\("</literal>
<name>CHECK_STREQ_VAR1</name> <literal type="string">" != "</literal> <name>CHECK_STREQ_VAR2</name> <literal type="string">"\\)"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>do_check_eq_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<expr_stmt><expr><call><name>H_CHECK_MATCH</name><argument_list>(<argument><expr><name>yes</name></expr></argument>, <argument><expr><literal type="string">"hello [a-z]+"</literal></expr></argument>, <argument><expr><literal type="string">"abc hello world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_MATCH</name><argument_list>(<argument><expr><name>no</name></expr></argument>, <argument><expr><literal type="string">"hello [a-z]+"</literal></expr></argument>, <argument><expr><literal type="string">"abc hello WORLD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_MATCH_MSG</name><argument_list>(<argument><expr><name>yes</name></expr></argument>, <argument><expr><literal type="string">"hello [a-z]+"</literal></expr></argument>, <argument><expr><literal type="string">"abc hello world"</literal></expr></argument>, <argument><expr><literal type="string">"lowercase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_MATCH_MSG</name><argument_list>(<argument><expr><name>no</name></expr></argument>, <argument><expr><literal type="string">"hello [a-z]+"</literal></expr></argument>, <argument><expr><literal type="string">"abc hello WORLD"</literal></expr></argument>, <argument><expr><literal type="string">"uppercase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>check_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>check_match</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the ATF_CHECK_MATCH and "</literal>
<literal type="string">"ATF_CHECK_MATCH_MSG macros"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>check_match</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>check_eq_test</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>H_CHECK_MATCH_HEAD_NAME</name><argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_MATCH_BODY_NAME</name><argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"hello [a-z]+"</literal></expr>, <expr><literal type="string">"abc hello world"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_MATCH_HEAD_NAME</name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_MATCH_BODY_NAME</name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"hello [a-z]+"</literal></expr>, <expr><literal type="string">"abc hello WORLD"</literal></expr>,
<expr><literal type="string">"'hello \\[a-z\\]\\+' not matched in 'abc hello WORLD'"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_MATCH_MSG_HEAD_NAME</name><argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_MATCH_MSG_BODY_NAME</name><argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"hello [a-z]+"</literal></expr>, <expr><literal type="string">"abc hello world"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_MATCH_MSG_HEAD_NAME</name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_MATCH_MSG_BODY_NAME</name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"hello [a-z]+"</literal></expr>, <expr><literal type="string">"abc hello WORLD"</literal></expr>,
<expr><literal type="string">"'hello \\[a-z\\]\\+' not matched in 'abc hello WORLD': uppercase"</literal></expr>,
<expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>do_check_eq_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<expr_stmt><expr><call><name>H_REQUIRE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_MSG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"expected a false value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_MSG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"expected a true value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>require</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>require</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the ATF_REQUIRE and "</literal>
<literal type="string">"ATF_REQUIRE_MSG macros"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>require</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <name>test</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>head</name>)<parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>body</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>t</name></decl>, <decl><type ref="prev"/><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>H_REQUIRE_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="string">"0 not met"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="string">"1 not met"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="string">"expected a false value"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="string">"expected a true value"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Checking with a %d value\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_and_run_h_tc</name><argument_list>(<argument><expr><literal type="string">"h_require"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"^passed"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(
<argument><expr><literal type="string">"^failed: .*macros_test.c:[0-9]+: %s$"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>





<struct>struct <name>require_eq_test</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>head</name>)<parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>body</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>do_require_eq_tests</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>require_eq_test</name></name> <modifier>*</modifier></type><name>tests</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>require_eq_test</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Checking with %s, %s and expecting %s\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>t</name><operator>-&gt;</operator><name>ok</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_and_run_h_tc</name><argument_list>(<argument><expr><literal type="string">"h_require"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"^passed"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"^failed: .*macros_test.c"</literal>
<literal type="string">":[0-9]+: %s$"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>exists</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"before"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"after"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<expr_stmt><expr><call><name>H_REQUIRE_EQ</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_EQ</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_EQ</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_EQ</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_EQ_MSG</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1 does not match 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_EQ_MSG</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"1 does not match 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_EQ_MSG</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"2 does not match 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_EQ_MSG</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"2 does not match 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>require_eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>require_eq</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the ATF_REQUIRE_EQ and "</literal>
<literal type="string">"ATF_REQUIRE_EQ_MSG macros"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>require_eq</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>require_eq_test</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>H_REQUIRE_EQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_EQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1 != 1"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_EQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_EQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1 != 2"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_EQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_EQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2 != 1"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_EQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_EQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2 != 2"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_EQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_EQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1 != 1: 1 does not match 1"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_EQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_EQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1 != 2: 1 does not match 2"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_EQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_EQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2 != 1: 2 does not match 1"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_EQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_EQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2 != 2: 2 does not match 2"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>do_require_eq_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>H_REQUIRE_STREQ</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_STREQ</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_STREQ</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_STREQ</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_STREQ_MSG</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"1 does not match 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_STREQ_MSG</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"1 does not match 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_STREQ_MSG</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"2 does not match 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_STREQ_MSG</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"2 does not match 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUIRE_STREQ_VAR1</name></cpp:macro> <cpp:value>"5"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUIRE_STREQ_VAR2</name></cpp:macro> <cpp:value>"9"</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>require_streq_var1</name> <init>= <expr><name>REQUIRE_STREQ_VAR1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>require_streq_var2</name> <init>= <expr><name>REQUIRE_STREQ_VAR2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_STREQ</name><argument_list>(<argument><expr><name>vars</name></expr></argument>, <argument><expr><name>require_streq_var1</name></expr></argument>, <argument><expr><name>require_streq_var2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>require_streq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>require_streq</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the ATF_REQUIRE_STREQ and "</literal>
<literal type="string">"ATF_REQUIRE_STREQ_MSG macros"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>require_streq</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>require_eq_test</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>H_REQUIRE_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_STREQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"\"1\" != \"1\" \\(1 != 1\\)"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_STREQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"\"1\" != \"2\" \\(1 != 2\\)"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_STREQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"\"2\" != \"1\" \\(2 != 1\\)"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_STREQ_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"\"2\" != \"2\" \\(2 != 2\\)"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_STREQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_REQUIRE_STREQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"\"1\" != \"1\" \\(1 != 1\\): 1 does not match 1"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_STREQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_REQUIRE_STREQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">1_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"\"1\" != \"2\" \\(1 != 2\\): 1 does not match 2"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_STREQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_REQUIRE_STREQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_1</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"\"2\" != \"1\" \\(2 != 1\\): 2 does not match 1"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_STREQ_MSG_HEAD_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_REQUIRE_STREQ_MSG_BODY_NAME</name><argument_list>(<argument><expr><literal type="number">2_2</literal></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"\"2\" != \"2\" \\(2 != 2\\): 2 does not match 2"</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_STREQ_BODY_NAME</name><argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>,
<expr><name>require_streq_var1</name></expr>, <expr><name>require_streq_var2</name></expr>,
<expr><literal type="string">"require_streq_var1 != require_streq_var2 \\("</literal>
<name>REQUIRE_STREQ_VAR1</name> <literal type="string">" != "</literal> <name>REQUIRE_STREQ_VAR2</name> <literal type="string">"\\)"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>do_require_eq_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<expr_stmt><expr><call><name>H_REQUIRE_MATCH</name><argument_list>(<argument><expr><name>yes</name></expr></argument>, <argument><expr><literal type="string">"hello [a-z]+"</literal></expr></argument>, <argument><expr><literal type="string">"abc hello world"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_MATCH</name><argument_list>(<argument><expr><name>no</name></expr></argument>, <argument><expr><literal type="string">"hello [a-z]+"</literal></expr></argument>, <argument><expr><literal type="string">"abc hello WORLD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_MATCH_MSG</name><argument_list>(<argument><expr><name>yes</name></expr></argument>, <argument><expr><literal type="string">"hello [a-z]+"</literal></expr></argument>, <argument><expr><literal type="string">"abc hello world"</literal></expr></argument>, <argument><expr><literal type="string">"lowercase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_MATCH_MSG</name><argument_list>(<argument><expr><name>no</name></expr></argument>, <argument><expr><literal type="string">"hello [a-z]+"</literal></expr></argument>, <argument><expr><literal type="string">"abc hello WORLD"</literal></expr></argument>, <argument><expr><literal type="string">"uppercase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>require_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>require_match</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests the ATF_REQUIRE_MATCH and "</literal>
<literal type="string">"ATF_REQUIRE_MATCH_MSG macros"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>require_match</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>require_eq_test</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>H_REQUIRE_MATCH_HEAD_NAME</name><argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_MATCH_BODY_NAME</name><argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"hello [a-z]+"</literal></expr>, <expr><literal type="string">"abc hello world"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_MATCH_HEAD_NAME</name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_MATCH_BODY_NAME</name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"hello [a-z]+"</literal></expr>, <expr><literal type="string">"abc hello WORLD"</literal></expr>,
<expr><literal type="string">"'hello \\[a-z\\]\\+' not matched in 'abc hello WORLD'"</literal></expr>, <expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_MATCH_MSG_HEAD_NAME</name><argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>H_REQUIRE_MATCH_MSG_BODY_NAME</name><argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"hello [a-z]+"</literal></expr>, <expr><literal type="string">"abc hello world"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>true</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_MATCH_MSG_HEAD_NAME</name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_MATCH_MSG_BODY_NAME</name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>,
<expr><literal type="string">"hello [a-z]+"</literal></expr>, <expr><literal type="string">"abc hello WORLD"</literal></expr>,
<expr><literal type="string">"'hello \\[a-z\\]\\+' not matched in 'abc hello WORLD': uppercase"</literal></expr>,
<expr><name>false</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>do_require_eq_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<function><type><specifier>static</specifier>
<name>bool</name></type>
<name>aux_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>fmt</name></type> <name>ATF_DEFS_ATTRIBUTE_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>aux_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>fmt</name></type> <name>ATF_DEFS_ATTRIBUTE_UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="string">"foo"</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>H_CHECK</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>aux_bool</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>aux_bool</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_CHECK_STREQ</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>aux_str</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H_REQUIRE_STREQ</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>aux_str</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>msg_embedded_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>msg_embedded_fmt</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Tests that format strings passed "</literal>
<literal type="string">"as part of the automatically-generated messages "</literal>
<literal type="string">"do not get expanded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>msg_embedded_fmt</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <name>test</name> <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>head</name>)<parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>body</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>fatal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>t</name></decl>, <decl><type ref="prev"/><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>H_CHECK_HEAD_NAME</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_BODY_NAME</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>, <expr><name>false</name></expr>,
<expr><literal type="string">"aux_bool\\(\"%d\"\\) not met"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_HEAD_NAME</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_BODY_NAME</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr>,
<expr><literal type="string">"aux_bool\\(\"%d\"\\) not met"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_CHECK_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_CHECK_STREQ_BODY_NAME</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>, <expr><name>false</name></expr>,
<expr><literal type="string">"aux_str\\(\"%d\"\\) != \"\" \\(foo != \\)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>H_REQUIRE_STREQ_HEAD_NAME</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>H_REQUIRE_STREQ_BODY_NAME</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>, <expr><name>true</name></expr>,
<expr><literal type="string">"aux_str\\(\"%d\"\\) != \"\" \\(foo != \\)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>false</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Checking with an expected '%s' message\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_and_run_h_tc</name><argument_list>(<argument><expr><literal type="string">"h_check"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>fatal</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>matched</name> <init>=
<expr><call><name>atf_utils_grep_file</name><argument_list>(
<argument><expr><literal type="string">"^failed: .*macros_test.c:[0-9]+: %s$"</literal></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_MSG</name><argument_list>(<argument><expr><name>matched</name></expr></argument>, <argument><expr><literal type="string">"couldn't find error string in result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>matched</name> <init>= <expr><call><name>atf_utils_grep_file</name><argument_list>(<argument><expr><literal type="string">"Check failed: .*"</literal>
<literal type="string">"macros_test.c:[0-9]+: %s$"</literal></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_MSG</name><argument_list>(<argument><expr><name>matched</name></expr></argument>, <argument><expr><literal type="string">"couldn't find error string in output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block>





<expr_stmt><expr><call><name>BUILD_TC</name><argument_list>(<argument><expr><name>use</name></expr></argument>, <argument><expr><literal type="string">"macros_h_test.c"</literal></expr></argument>,
<argument><expr><literal type="string">"Tests that the macros provided by the atf-c/macros.h file "</literal>
<literal type="string">"do not cause syntax errors when used"</literal></expr></argument>,
<argument><expr><literal type="string">"Build of macros_h_test.c failed; some macros in atf-c/macros.h "</literal>
<literal type="string">"are broken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>detect_unused_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>detect_unused_tests</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>,
<argument><expr><literal type="string">"Tests that defining an unused test case raises a "</literal>
<literal type="string">"warning (and thus an error)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>detect_unused_tests</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>validate_compiler</name> <init>=
<expr><literal type="string">"struct test_struct { int dummy; };\n"</literal>
<literal type="string">"#define define_unused static struct test_struct unused\n"</literal>
<literal type="string">"define_unused;\n"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atf_utils_create_file</name><argument_list>(<argument><expr><literal type="string">"compiler_test.c"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>validate_compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>build_check_c_o</name><argument_list>(<argument><expr><literal type="string">"compiler_test.c"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_tc_expect_fail</name><argument_list>(<argument><expr><literal type="string">"Compiler does not raise a warning on an unused "</literal>
<literal type="string">"static global variable declared by a macro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_check_c_o_srcdir</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"unused_test.c"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"Build of unused_test.c passed; unused test cases are "</literal>
<literal type="string">"not properly detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>





<macro><name>ATF_TP_ADD_TCS</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>check_eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>check_streq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>check_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>check_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>require</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>require_eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>require_streq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>require_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>require_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>msg_embedded_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>use</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>detect_unused_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>
</unit>
