<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/atf-c/macros_h_test.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c/macros.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>atf_require_inside_if</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>atf_require_equal_inside_if</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>atf_check_errno_semicolons</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>atf_require_errno_semicolons</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>atf_require_inside_if</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>true</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_require_equal_inside_if</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>true</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE_EQ</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_check_errno_semicolons</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>ATF_CHECK_ERRNO</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_CHECK_ERRNO</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>atf_require_errno_semicolons</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>ATF_REQUIRE_ERRNO</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE_ERRNO</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MACRO_1</name></cpp:macro> <cpp:value>invalid + name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MACRO_2</name></cpp:macro> <cpp:value>invalid + name</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MACRO_3</name></cpp:macro> <cpp:value>invalid + name</cpp:value></cpp:define>
<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>TEST_MACRO_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>TEST_MACRO_1</argument>, <argument>tc</argument>)</argument_list></macro> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content/>}</block></if></if_stmt> </block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>TEST_MACRO_1</argument>, <argument>tc</argument>)</argument_list></macro> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content/>}</block></if></if_stmt> </block_content>}</block>
<decl_stmt><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type><name>test_name_1</name> <init>= <expr><operator>&amp;</operator><call><name>ATF_TC_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_tc_pack_t</name> <modifier>*</modifier></type><name>test_pack_1</name> <init>= <expr><operator>&amp;</operator><call><name>ATF_TC_PACK_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>head_1</name>)<parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><call><name>ATF_TC_HEAD_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_1</name></expr></argument>)</argument_list></call></expr></init>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>body_1</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><call><name>ATF_TC_BODY_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_1</name></expr></argument>)</argument_list></call></expr></init>;</function_decl>
<expr_stmt><expr><call><name>ATF_TC_WITH_CLEANUP</name><argument_list>(<argument><expr><name>TEST_MACRO_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>TEST_MACRO_2</argument>, <argument>tc</argument>)</argument_list></macro> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content/>}</block></if></if_stmt> </block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>TEST_MACRO_2</argument>, <argument>tc</argument>)</argument_list></macro> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content/>}</block></if></if_stmt> </block_content>}</block>
<macro><name>ATF_TC_CLEANUP</name><argument_list>(<argument>TEST_MACRO_2</argument>, <argument>tc</argument>)</argument_list></macro> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content/>}</block></if></if_stmt> </block_content>}</block>
<decl_stmt><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type><name>test_name_2</name> <init>= <expr><operator>&amp;</operator><call><name>ATF_TC_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_tc_pack_t</name> <modifier>*</modifier></type><name>test_pack_2</name> <init>= <expr><operator>&amp;</operator><call><name>ATF_TC_PACK_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>head_2</name>)<parameter_list>(<parameter><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><call><name>ATF_TC_HEAD_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_2</name></expr></argument>)</argument_list></call></expr></init>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>body_2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><call><name>ATF_TC_BODY_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_2</name></expr></argument>)</argument_list></call></expr></init>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cleanup_2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><call><name>ATF_TC_CLEANUP_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_2</name></expr></argument>)</argument_list></call></expr></init>;</function_decl>
<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>TEST_MACRO_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>TEST_MACRO_3</argument>, <argument>tc</argument>)</argument_list></macro> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>tc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content/>}</block></if></if_stmt> </block_content>}</block>
<decl_stmt><decl><type><name>atf_tc_t</name> <modifier>*</modifier></type><name>test_name_3</name> <init>= <expr><operator>&amp;</operator><call><name>ATF_TC_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atf_tc_pack_t</name> <modifier>*</modifier></type><name>test_pack_3</name> <init>= <expr><operator>&amp;</operator><call><name>ATF_TC_PACK_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>body_3</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>atf_tc_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><call><name>ATF_TC_BODY_NAME</name><argument_list>(<argument><expr><name>TEST_MACRO_3</name></expr></argument>)</argument_list></call></expr></init>;</function_decl>
</unit>
