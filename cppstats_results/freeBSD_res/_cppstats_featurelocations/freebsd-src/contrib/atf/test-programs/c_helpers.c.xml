<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/atf/test-programs/c_helpers.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atf-c.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/env.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/test_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/detail/text.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atf-c/error.h"</cpp:file></cpp:include>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>safe_remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"unlink(2) of %s failed"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>touch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"Could not create file %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<expr_stmt><expr><call><name>ATF_TC_WITH_CLEANUP</name><argument_list>(<argument><expr><name>cleanup_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>cleanup_pass</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_cleanup test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>cleanup_pass</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"tmpfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_CLEANUP</name><argument_list>(<argument>cleanup_pass</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>atf_tc_get_config_var_as_bool</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"cleanup"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>safe_remove</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"tmpfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITH_CLEANUP</name><argument_list>(<argument><expr><name>cleanup_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>cleanup_fail</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_cleanup test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>cleanup_fail</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"tmpfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"On purpose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_CLEANUP</name><argument_list>(<argument>cleanup_fail</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>atf_tc_get_config_var_as_bool</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"cleanup"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>safe_remove</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"tmpfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITH_CLEANUP</name><argument_list>(<argument><expr><name>cleanup_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>cleanup_skip</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_cleanup test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>cleanup_skip</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"tmpfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_skip</name><argument_list>(<argument><expr><literal type="string">"On purpose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_CLEANUP</name><argument_list>(<argument>cleanup_skip</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>atf_tc_get_config_var_as_bool</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"cleanup"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>safe_remove</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"tmpfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITH_CLEANUP</name><argument_list>(<argument><expr><name>cleanup_curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>cleanup_curdir</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_cleanup test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>cleanup_curdir</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"oldvalue"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"Failed to create oldvalue file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"1234"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_CLEANUP</name><argument_list>(<argument>cleanup_curdir</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"oldvalue"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to read old value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Old value: %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITH_CLEANUP</name><argument_list>(<argument><expr><name>cleanup_sigterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>cleanup_sigterm</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_cleanup test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>cleanup_sigterm</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nofile</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"tmpfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_text_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nofile</name></expr></argument>, <argument><expr><literal type="string">"%s.no"</literal></expr></argument>,
<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"tmpfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>touch</name><argument_list>(<argument><expr><name>nofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nofile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_CLEANUP</name><argument_list>(<argument>cleanup_sigterm</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>safe_remove</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"tmpfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>config_unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>config_unset</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_config test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>config_unset</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><operator>!</operator><call><name>atf_tc_has_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>config_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>config_empty</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_config test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>config_empty</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_tc_has_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>config_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>config_value</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_config test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>config_value</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_tc_has_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>config_multi_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>config_multi_value</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_config test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>config_multi_value</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>atf_tc_has_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_REQUIRE</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"foo bar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_pass_and_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_pass_and_pass</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_pass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_pass_but_fail_requirement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_pass_but_fail_requirement</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_pass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"Some reason"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_pass_but_fail_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_pass_but_fail_check</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_pass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fail_nonfatal</name><argument_list>(<argument><expr><literal type="string">"Some reason"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_fail_and_fail_requirement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_fail_and_fail_requirement</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_fail</name><argument_list>(<argument><expr><literal type="string">"Fail %s"</literal></expr></argument>, <argument><expr><literal type="string">"reason"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"The failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_expect_pass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_fail_and_fail_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_fail_and_fail_check</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_fail</name><argument_list>(<argument><expr><literal type="string">"Fail first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fail_nonfatal</name><argument_list>(<argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_expect_pass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_tc_expect_fail</name><argument_list>(<argument><expr><literal type="string">"And fail again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fail_nonfatal</name><argument_list>(<argument><expr><literal type="string">"def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_expect_pass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_fail_but_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_fail_but_pass</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_fail</name><argument_list>(<argument><expr><literal type="string">"Fail first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fail_nonfatal</name><argument_list>(<argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_expect_pass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_tc_expect_fail</name><argument_list>(<argument><expr><literal type="string">"Will not fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_expect_pass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atf_tc_expect_fail</name><argument_list>(<argument><expr><literal type="string">"And fail again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fail_nonfatal</name><argument_list>(<argument><expr><literal type="string">"def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_expect_pass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_exit_any_and_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_exit_any_and_exit</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Call will exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_exit_code_and_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_exit_code_and_exit</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_exit</name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Call will exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_exit_but_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_exit_but_pass</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Call won't exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_signal_any_and_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_signal_any_and_signal</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_signal</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Call will signal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_signal_no_and_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_signal_no_and_signal</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><literal type="string">"Call will signal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_signal_but_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_signal_but_pass</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_signal</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Call won't signal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_death_and_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_death_and_exit</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_death</name><argument_list>(<argument><expr><literal type="string">"Exit case"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_death_and_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_death_and_signal</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_death</name><argument_list>(<argument><expr><literal type="string">"Signal case"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>expect_death_but_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_death_but_pass</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_death</name><argument_list>(<argument><expr><literal type="string">"Call won't die"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>expect_timeout_and_hang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>expect_timeout_and_hang</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_timeout_and_hang</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_timeout</name><argument_list>(<argument><expr><literal type="string">"Will overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>expect_timeout_but_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>expect_timeout_but_pass</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>expect_timeout_but_pass</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_expect_timeout</name><argument_list>(<argument><expr><literal type="string">"Will just exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>metadata_no_descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>metadata_no_descr</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>metadata_no_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>metadata_no_head</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
</block_content>}</block>





<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>srcdir_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>srcdir_exists</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_srcdir test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>srcdir_exists</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>atf_fs_path_t</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_fs_path_init_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s/datafile"</literal></expr></argument>,
<argument><expr><call><name>atf_tc_get_config_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"srcdir"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE</name><argument_list>(<argument><expr><call><name>atf_fs_exists</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_fs_path_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"Cannot find datafile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>





<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>result_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>result_pass</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"msg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>result_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>result_fail</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"msg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"Failure reason"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC_WITHOUT_HEAD</name><argument_list>(<argument><expr><name>result_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>result_skip</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"msg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atf_tc_skip</name><argument_list>(<argument><expr><literal type="string">"Skipped reason"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>result_newlines_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>result_newlines_fail</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_result test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>result_newlines_fail</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_fail</name><argument_list>(<argument><expr><literal type="string">"First line\nSecond line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>ATF_TC</name><argument_list>(<argument><expr><name>result_newlines_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ATF_TC_HEAD</name><argument_list>(<argument>result_newlines_skip</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_set_md_var</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="string">"descr"</literal></expr></argument>, <argument><expr><literal type="string">"Helper test case for the t_result test "</literal>
<literal type="string">"program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>ATF_TC_BODY</name><argument_list>(<argument>result_newlines_skip</argument>, <argument>tc</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>atf_tc_skip</name><argument_list>(<argument><expr><literal type="string">"First line\nSecond line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>ATF_TP_ADD_TCS</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>

<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>cleanup_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>cleanup_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>cleanup_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>cleanup_curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>cleanup_sigterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>config_unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>config_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>config_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>config_multi_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_pass_and_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_pass_but_fail_requirement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_pass_but_fail_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_fail_and_fail_requirement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_fail_and_fail_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_fail_but_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_exit_any_and_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_exit_code_and_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_exit_but_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_signal_any_and_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_signal_no_and_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_signal_but_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_death_and_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_death_and_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_death_but_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_timeout_and_hang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>expect_timeout_but_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>metadata_no_descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>metadata_no_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>srcdir_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>result_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>result_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>result_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>result_newlines_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ATF_TP_ADD_TC</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>result_newlines_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>atf_no_error</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block>
</unit>
