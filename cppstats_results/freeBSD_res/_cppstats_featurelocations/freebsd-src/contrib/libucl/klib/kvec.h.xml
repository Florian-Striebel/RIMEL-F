<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/klib/kvec.h">
















































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AC_KVEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_KVEC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_roundup32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(--(x), (x)|=(x)&gt;&gt;1, (x)|=(x)&gt;&gt;2, (x)|=(x)&gt;&gt;4, (x)|=(x)&gt;&gt;8, (x)|=(x)&gt;&gt;16, ++(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kvec_t</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { size_t n, m; type *a; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_init</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).n = (v).m = 0, (v).a = 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_destroy</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free((v).a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_A</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).a[(i)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_pop</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).a[--(v).n])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_size</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_max</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).m)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_resize_safe</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { type *_tp = (type*)realloc((v).a, sizeof(type) * (s)); if (_tp == NULL) { goto el; } else { (v).a = _tp; (v).m = (s); } } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_grow_factor</name></cpp:macro> <cpp:value>1.5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_grow_safe</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { size_t _ts = ((v).m &gt; 1 ? (v).m * kv_grow_factor : 2); type *_tp = (type*)realloc((v).a, sizeof(type) * _ts); if (_tp == NULL) { goto el; } else { (v).a = _tp; (v).m = _ts; } } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_copy_safe</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v0</name></type></parameter>, <parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((v1).m &lt; (v0).n) kv_resize_safe(type, v1, (v0).n, el); (v1).n = (v0).n; memcpy((v1).a, (v0).a, sizeof(type) * (v0).n); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_push_safe</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((v).n == (v).m) { kv_grow_safe(type, v, el); } (v).a[(v).n++] = (x); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_prepend_safe</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((v).n == (v).m) { kv_grow_safe(type, v, el); } memmove((v).a + 1, (v).a, sizeof(type) * (v).n); (v).a[0] = (x); (v).n ++; } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_concat_safe</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v0</name></type></parameter>, <parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((v1).m &lt; (v0).n + (v1).n) kv_resize_safe(type, v1, (v0).n + (v1).n, el); memcpy((v1).a + (v1).n, (v0).a, sizeof(type) * (v0).n); (v1).n = (v0).n + (v1).n; } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_del</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((i) &lt; (v).n) { memmove((v).a + (i), (v).a + ((i) + 1), sizeof(type) * ((v).n - (i) - 1)); (v).n --; } } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_resize</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).m = (s), (v).a = (type*)realloc((v).a, sizeof(type) * (v).m))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_grow</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).m = ((v).m &gt; 1 ? (v).m * kv_grow_factor : 2), (v).a = (type*)realloc((v).a, sizeof(type) * (v).m))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_copy</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((v1).m &lt; (v0).n) kv_resize(type, v1, (v0).n); (v1).n = (v0).n; memcpy((v1).a, (v0).a, sizeof(type) * (v0).n); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_push</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((v).n == (v).m) { kv_grow(type, v); } (v).a[(v).n++] = (x); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_prepend</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((v).n == (v).m) { kv_grow(type, v); } memmove((v).a + 1, (v).a, sizeof(type) * (v).n); (v).a[0] = (x); (v).n ++; } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kv_concat</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((v1).m &lt; (v0).n + (v1).n) kv_resize(type, v1, (v0).n + (v1).n); memcpy((v1).a + (v1).n, (v0).a, sizeof(type) * (v0).n); (v1).n = (v0).n + (v1).n; } while (0)</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
