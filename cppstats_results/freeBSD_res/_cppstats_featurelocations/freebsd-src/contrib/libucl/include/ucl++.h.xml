<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/include/ucl++.h">























<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl.h"</cpp:file></cpp:include>



<decl_stmt><decl><type><name>namespace</name></type> <name>ucl</name> <block>{<block_content>

<struct>struct <name>ucl_map_construct_t</name> <block>{ }</block>;</struct>
<decl_stmt><decl><type><name>constexpr</name> <name>ucl_map_construct_t</name></type> <name>ucl_map_construct</name> <init>= <expr><call><name>ucl_map_construct_t</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<struct>struct <name>ucl_array_construct_t</name> <block>{ }</block>;</struct>
<decl_stmt><decl><type><name>constexpr</name> <name>ucl_array_construct_t</name></type> <name>ucl_array_construct</name> <init>= <expr><call><name>ucl_array_construct_t</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>Ucl</name></type> <name>final</name> <block>{<block_content>
<label><name>private</name>:</label>

<struct>struct <name>ucl_deleter</name> <block>{
<expr_stmt><expr><name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>ucl_object_t</name> <operator>*</operator><name>obj</name><operator>)</operator> <block>{
<expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>append_char</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nchars</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>out</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>out</name><operator>-&gt;</operator><name>append</name></name> <argument_list>(<argument><expr><name>nchars</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nchars</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>append_len</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>out</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>out</name><operator>-&gt;</operator><name>append</name></name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>append_int</name> <parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>elt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>out</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>nstr</name> <init>= <expr><name>std</name><operator>::</operator><call><name>to_string</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>out</name><operator>-&gt;</operator><name>append</name></name> <argument_list>(<argument><expr><name>nstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>nstr</name><operator>.</operator><name>size</name></name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>append_double</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>elt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>out</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>nstr</name> <init>= <expr><name>std</name><operator>::</operator><call><name>to_string</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>out</name><operator>-&gt;</operator><name>append</name></name> <argument_list>(<argument><expr><name>nstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name><name>nstr</name><operator>.</operator><name>size</name></name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name></type> <name>default_emit_funcs</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_functions</name></name></type> <name>func</name> <init>= <expr><block>{
<expr><name>Ucl</name><operator>::</operator><name>append_char</name></expr>,
<expr><name>Ucl</name><operator>::</operator><name>append_len</name></expr>,
<expr><name>Ucl</name><operator>::</operator><name>append_int</name></expr>,
<expr><name>Ucl</name><operator>::</operator><name>append_double</name></expr>,
<expr><name>nullptr</name></expr>,
<expr><name>nullptr</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>func</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ucl_variable_getter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter> , <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>need_free</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>need_free</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>vars</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vars</name> <operator>&amp;&amp;</operator> <name>data</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>vars</name><operator>-&gt;</operator><name>emplace</name></name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ucl_variable_replacer</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>replace</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>replace_len</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>need_free</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>need_free</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>replacer</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>variable_replacer</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>replacer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>var_name</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>replacer</name><operator>-&gt;</operator><name>is_variable</name></name> <argument_list>(<argument><expr><name>var_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>var_value</name> <operator>=</operator> <call><name><name>replacer</name><operator>-&gt;</operator><name>replace</name></name> <argument_list>(<argument><expr><name>var_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>var_value</name><operator>.</operator><name>empty</name></name> <argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>replace</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><call><name><name>var_value</name><operator>.</operator><name>size</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>*</operator><name>replace</name></expr></argument>, <argument><expr><call><name><name>var_value</name><operator>.</operator><name>data</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>var_value</name><operator>.</operator><name>size</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>replace_len</name> <operator>=</operator> <call><name><name>var_value</name><operator>.</operator><name>size</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>need_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>C</name></expr></argument>, <argument><expr><name>typename</name> <name>P</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Ucl</name></type> <name>parse_with_strategy_function</name> <argument_list>(<argument><expr><name>C</name> <name>config_func</name></expr></argument>, <argument><expr><name>P</name> <name>parse_func</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>parser</name> <init>= <expr><call><name>ucl_parser_new</name> <argument_list>(<argument><expr><name>UCL_PARSER_DEFAULT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_func</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_func</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>ucl_parser_get_error</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><name>error</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>err</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_parser_free</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>obj</name> <init>= <expr><call><name>ucl_parser_get_object</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ucl_parser_free</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><call><name>Ucl</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ucl_object_t</name></expr></argument>, <argument><expr><name>ucl_deleter</name></expr></argument>&gt;</argument_list></name> <name>obj</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<struct>struct <name>macro_handler_s</name> <block>{
<decl_stmt><decl><type><name>ucl_macro_handler</name></type> <name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_context_macro_handler</name></type> <name>ctx_handler</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>macro_userdata_s</name> <block>{
<decl_stmt><decl><type><name>ucl_parser</name> <modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>const_iterator</name> <block>{<block_content>
<label><name>private</name>:</label>
<struct>struct <name>ucl_iter_deleter</name> <block>{
<expr_stmt><expr><name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>ucl_object_iter_t</name> <name>it</name><operator>)</operator> <block>{
<expr><call><name>ucl_object_iterate_free</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>
}</block>;</struct>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name> <name>it</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Ucl</name></expr></argument>&gt;</argument_list></name> <name>cur</name></expr>;</expr_stmt>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name>forward_iterator_tag</name> <name>iterator_category</name></expr>;</expr_stmt></typedef>

<macro><name>const_iterator</name><argument_list>(<argument>const Ucl &amp;obj</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>it</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>ucl_object_iterate_new</name> <argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ucl_iter_deleter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>cur</name></macro><expr_stmt><expr><operator>.</operator><macro><name>reset</name> <argument_list>(<argument>new Ucl(ucl_object_iterate_safe (it.get(), true))</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>it</name><operator>.</operator><name>reset</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>cur</name><operator>.</operator><name>reset</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<macro><name>const_iterator</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><call><name>const_iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>const_iterator</name> <operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>const_iterator</name><argument_list>(<argument><expr><name>const_iterator</name> <operator>&amp;&amp;</operator><name>other</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><macro><name>const_iterator</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>const_iterator</name><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>const_iterator</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>const_iterator</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>const_iterator</name> <operator>&amp;&amp;</operator><name>other</name><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>const_iterator</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&amp;&amp;</operator> <name><name>other</name><operator>.</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>cur</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>other</name><operator>.</operator><name>cur</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>

return !cur &amp;&amp; !other.cur</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>const_iterator</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <specifier>const</specifier>
<block>{
<return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>other</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>const_iterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator>
<block>{
<if_stmt><if>if <condition>(<expr><name>it</name></expr>)</condition> <block>{<block_content>
<macro><name>cur</name></macro><expr_stmt><expr><operator>.</operator><macro><name>reset</name> <argument_list>(<argument>new Ucl(ucl_object_iterate_safe (it.get(), true))</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

if (cur &amp;&amp; !cur-&gt;obj</block></if></if_stmt>) <block>{
<expr><call><name><name>it</name><operator>.</operator><name>reset</name></name> <argument_list>()</argument_list></call></expr>;
<expr><call><name><name>cur</name><operator>.</operator><name>reset</name></name> <argument_list>()</argument_list></call></expr>;
}</block></block></expr></expr_stmt>

<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Ucl</name><operator>&amp;</operator> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier>
<block>{
<return>return <expr><operator>*</operator><name>cur</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>Ucl</name><operator>*</operator> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const
<block>{<block_content>
<return>return <expr><call><name><name>cur</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>variable_replacer</name> <block>{
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>variable_replacer</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>bool</name> <macro><name>is_variable</name> <argument_list>(<argument>const std::string &amp;str</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><operator>!</operator><call><name><name>str</name><operator>.</operator><name>empty</name></name> <argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>replace</name> <argument_list>(<argument>const std::string &amp;var</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
}</block>;</struct>


<macro><name>Ucl</name><argument_list>(<argument>ucl_object_t *other</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>Ucl</name><argument_list>(<argument>const ucl_object_t *other</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><call><name>ucl_object_ref</name> <argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>Ucl</name><argument_list>(<argument>const Ucl &amp;other</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><call><name>ucl_object_ref</name> <argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>Ucl</name><argument_list>(<argument>Ucl &amp;&amp;other</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>swap</name></name> <argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>Ucl</name><argument_list>()</argument_list></macro> <macro><name>noexcept</name></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>Ucl</name><argument_list>(<argument>std::nullptr_t</argument>)</argument_list></macro> <macro><name>noexcept</name></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>Ucl</name><argument_list>(<argument>double value</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_FLOAT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>dv</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>Ucl</name><argument_list>(<argument>int64_t value</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_INT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>Ucl</name><argument_list>(<argument>bool value</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_BOOLEAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>Ucl</name><argument_list>(<argument>const std::string &amp;value</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><call><name>ucl_object_fromstring_common</name> <argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>data</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>size</name></name> <argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>UCL_STRING_RAW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>Ucl</name><argument_list>(<argument>const char *value</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><call><name>ucl_object_fromstring_common</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UCL_STRING_RAW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>T</name></expr><operator>,</operator> <expr><name>class</name> <operator>=</operator> <call><name>decltype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name><operator>::</operator><name>to_ucl</name></expr></argument>)</argument_list></call><operator>&gt;</operator>
<call><name>Ucl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Ucl</name><argument_list>(<argument>t.to_ucl()</argument>)</argument_list></macro> <block>{}</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>M</name></expr></argument>, <argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>typename</name> <name>M</name><operator>::</operator><name>key_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name>
<operator>&amp;&amp;</operator> <name>std</name><operator>::</operator><name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name>Ucl</name></expr></argument>, <argument><expr><name>typename</name> <name>M</name><operator>::</operator><name>mapped_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>&gt;</argument_list></name>
<macro><name>Ucl</name><argument_list>(<argument>const M &amp;m</argument>)</argument_list></macro> <block>{
<expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_OBJECT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <name>cobj</name> <operator>=</operator> <call><name><name>obj</name><operator>.</operator><name>get</name></name> <argument_list>()</argument_list></call></expr>;

<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>e</name> <range>: <expr><name>m</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_object_insert_key</name> <argument_list>(<argument><expr><name>cobj</name></expr></argument>, <argument><expr><call><name>ucl_object_ref</name> <argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>second</name><operator>.</operator><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>e</name><operator>.</operator><name>first</name><operator>.</operator><name>data</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>first</name><operator>.</operator><name>size</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
}


template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>V</name></expr><operator>,</operator> <expr><name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>is_constructible</name><argument_list type="generic">&lt;<argument><expr><name>Ucl</name></expr></argument>, <argument><expr><name>typename</name> <name>V</name><operator>::</operator><name>value_type</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal><operator>&gt;</operator>
<macro><name>Ucl</name><argument_list>(<argument>const V &amp;v</argument>)</argument_list></macro> <block>{
<expr><call><name><name>obj</name><operator>.</operator><name>reset</name></name> <argument_list>(<argument><expr><call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_ARRAY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <name>cobj</name> <operator>=</operator> <call><name><name>obj</name><operator>.</operator><name>get</name></name> <argument_list>()</argument_list></call></expr>;

<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>e</name> <range>: <expr><name>v</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>cobj</name></expr></argument>, <argument><expr><call><name>ucl_object_ref</name> <argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
}

ucl_type_t <macro><name>type</name> <argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ucl_object_type</name> <argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>get</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<return>return <expr><name>UCL_NULL</name></expr>;</return>
}

std<expr_stmt><expr><operator>::</operator><name>string</name> <macro><name>key</name> <argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>res</name></expr>;

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>assign</name></name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
}

double <macro><name>number_value</name> <argument_list>(<argument>const double default_val = <literal type="number">0.0</literal></argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier>
<block>{
<expr><name>double</name> <name>res</name></expr>;

<if_stmt><if>if <condition>(<expr><call><name>ucl_object_todouble_safe</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<return>return <expr><name>default_val</name></expr>;</return>
}

int64_t <macro><name>int_value</name> <argument_list>(<argument>const int64_t default_val = <literal type="number">0</literal></argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier>
<block>{
<expr><name>int64_t</name> <name>res</name></expr>;

<if_stmt><if>if <condition>(<expr><call><name>ucl_object_toint_safe</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<return>return <expr><name>default_val</name></expr>;</return>
}

bool <macro><name>bool_value</name> <argument_list>(<argument>const bool default_val = false</argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier>
<block>{
<expr><name>bool</name> <name>res</name></expr>;

<if_stmt><if>if <condition>(<expr><call><name>ucl_object_toboolean_safe</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<return>return <expr><name>default_val</name></expr>;</return>
}

std<expr_stmt><expr><operator>::</operator><name>string</name> <macro><name>string_value</name> <argument_list>(<argument>const std::string&amp; default_val = <literal type="string">""</literal></argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>res</name> <operator>=</operator> <name>nullptr</name></expr>;

<if_stmt><if>if <condition>(<expr><call><name>ucl_object_tostring_safe</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<return>return <expr><name>default_val</name></expr>;</return>
}

size_t <macro><name>size</name> <argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><call><name>type</name> <argument_list>()</argument_list></call> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ucl_array_size</name> <argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
}

Ucl <macro><name>at</name> <argument_list>(<argument>size_t i</argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><call><name>type</name> <argument_list>()</argument_list></call> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>Ucl</name> <argument_list>(<argument><expr><call><name>ucl_array_find_index</name> <argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<return>return <expr><call><name>Ucl</name> <argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
}

Ucl <macro><name>lookup</name> <argument_list>(<argument>const std::string &amp;key</argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><call><name>type</name> <argument_list>()</argument_list></call> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>Ucl</name> <argument_list>(<argument><expr><call><name>ucl_object_lookup_len</name> <argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>key</name><operator>.</operator><name>data</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>size</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<return>return <expr><call><name>Ucl</name> <argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
}

inline <decl_stmt><decl><type><name>Ucl</name></type> <name><name>operator</name><index>[]</index></name> <argument_list>(<argument><expr><name>size_t</name> <name>i</name></expr></argument>)</argument_list> const
<block>{<block_content>
<return>return <expr><call><name>at</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>Ucl</name></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>key</name></expr></argument>)</argument_list> const
<block>{<block_content>
<return>return <expr><call><name>lookup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>dump</name> <argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>ucl_emitter_t</name> <name>type</name> <operator>=</operator> <name>UCL_EMIT_JSON</name></expr></argument>)</argument_list> const
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_functions</name></name></type> <name>cbdata</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cbdata</name> <operator>=</operator> <name>Ucl</name><operator>::</operator><call><name>default_emit_funcs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbdata</name><operator>.</operator><name>ud</name></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ucl_object_emit_full</name> <argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbdata</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>dump</name> <argument_list>(<argument>ucl_emitter_t type = UCL_EMIT_JSON</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>out</name></expr>;

<expr><call><name>dump</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;

<return>return <expr><name>out</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr>enum <name>ucl_duplicate_strategy</name> <name>duplicate_strategy</name> <operator>=</operator> <name>UCL_DUPLICATE_APPEND</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>parse</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>duplicate_strategy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>vars</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr>enum <name>ucl_duplicate_strategy</name> <name>duplicate_strategy</name> <operator>=</operator> <name>UCL_DUPLICATE_APPEND</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>macro_handler_s</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>emptyVector</name></expr>;</expr_stmt>
<return>return <expr><call><name>parse</name> <argument_list>( <argument><expr><name>in</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>emptyVector</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>duplicate_strategy</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>in</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument> , <argument><expr><name>macro_handler_s</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <operator>&amp;</operator><name>macros</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr>enum <name>ucl_duplicate_strategy</name> <name>duplicate_strategy</name> <operator>=</operator> <name>UCL_DUPLICATE_APPEND</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>parse</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>macros</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>duplicate_strategy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>vars</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument> , <argument><expr><name>macro_handler_s</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <operator>&amp;</operator><name>macros</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr>enum <name>ucl_duplicate_strategy</name> <name>duplicate_strategy</name> <operator>=</operator> <name>UCL_DUPLICATE_APPEND</name></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>macro_userdata_s</name></expr></argument>&gt;</argument_list></name> <name>userdata_list</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>userdata_list</name><operator>.</operator><name>reserve</name></name> <argument_list>(<argument><expr><call><name><name>macros</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>config_func</name> <init>= <expr><index>[<expr><operator>&amp;</operator><name>userdata_list</name></expr><operator>,</operator> <operator>&amp;</operator><name>vars</name><operator>,</operator> <operator>&amp;</operator><name>macros</name>]</index> <operator>(</operator><name>ucl_parser</name> <operator>*</operator><name>parser</name><operator>)</operator> <block>{
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type> <name>item</name> <range>: <expr><name>vars</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_parser_register_variable</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>first</name><operator>.</operator><name>c_str</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>second</name><operator>.</operator><name>c_str</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
for (auto &amp; macro : macros</block></for>) <block>{
<macro><name>userdata_list</name></macro><expr><operator>.</operator><macro><name>push_back</name> <argument_list>(<argument>{parser</argument>, <argument>std::get&lt;<literal type="number">2</literal>&gt;(macro)}</argument>)</argument_list></macro></expr>;
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call><operator>.</operator><name>handler</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_parser_register_macro</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call><operator>.</operator><name>handler</name></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>userdata_list</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
else if (std::get&lt;1&gt;(macro</block></if></if_stmt>)<operator>.</operator><name>ctx_handler</name> <operator>!=</operator> <name>NULL</name>)</block> <block>{
<expr><call><name>ucl_parser_register_context_macro</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call><operator>.</operator><name>ctx_handler</name></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>userdata_list</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></block></expr></init></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
};

<decl_stmt><decl><type><name>auto</name></type> <name>parse_func</name> <init>= <expr><index>[<expr><operator>&amp;</operator><name>in</name></expr><operator>,</operator> <operator>&amp;</operator><name>duplicate_strategy</name>]</index> <operator>(</operator>struct <name>ucl_parser</name> <operator>*</operator><name>parser</name><operator>)</operator> <operator>-&gt;</operator> <name>bool</name> <block>{
<return>return <expr><call><name>ucl_parser_add_chunk_full</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>data</name></name> <argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>in</name><operator>.</operator><name>size</name></name> <argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>ucl_parser_get_default_priority</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>duplicate_strategy</name></expr></argument>,
<argument><expr><name>UCL_PARSE_UCL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>

<return>return <expr><call><name>parse_with_strategy_function</name> <argument_list>(<argument><expr><name>config_func</name></expr></argument>, <argument><expr><name>parse_func</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}

static <decl_stmt><decl><type><name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>variable_replacer</name> <operator>&amp;</operator><name>replacer</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr>enum <name>ucl_duplicate_strategy</name> <name>duplicate_strategy</name> <operator>=</operator> <name>UCL_DUPLICATE_APPEND</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>macro_handler_s</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>emptyVector</name></expr>;</expr_stmt>
<return>return <expr><call><name>parse</name> <argument_list>( <argument><expr><name>in</name></expr></argument>, <argument><expr><name>replacer</name></expr></argument>, <argument><expr><name>emptyVector</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>duplicate_strategy</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>variable_replacer</name> <operator>&amp;</operator><name>replacer</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument> , <argument><expr><name>macro_handler_s</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <operator>&amp;</operator><name>macros</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr>enum <name>ucl_duplicate_strategy</name> <name>duplicate_strategy</name> <operator>=</operator> <name>UCL_DUPLICATE_APPEND</name></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>macro_userdata_s</name></expr></argument>&gt;</argument_list></name> <name>userdata_list</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>userdata_list</name><operator>.</operator><name>reserve</name></name> <argument_list>(<argument><expr><call><name><name>macros</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>config_func</name> <init>= <expr><index>[<expr><operator>&amp;</operator><name>userdata_list</name></expr><operator>,</operator> <operator>&amp;</operator><name>replacer</name><operator>,</operator> <operator>&amp;</operator><name>macros</name>]</index> <operator>(</operator><name>ucl_parser</name> <operator>*</operator><name>parser</name><operator>)</operator> <block>{
<expr><call><name>ucl_parser_set_variables_handler</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ucl_variable_replacer</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>variable_replacer</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>replacer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator> <name>macro</name> <operator>:</operator> <name>macros</name></expr></init>)</control> <block>{<block_content>
<macro><name>userdata_list</name></macro><expr_stmt><expr><operator>.</operator><macro><name>push_back</name> <argument_list>(<argument>{parser</argument>, <argument>std::get&lt;<literal type="number">2</literal>&gt;(macro)}</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call><operator>.</operator><name>handler</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_parser_register_macro</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call><operator>.</operator><name>handler</name></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>userdata_list</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
else if (std::get&lt;1&gt;(macro</block></if></if_stmt>)</block_content>.ctx_handler != NULL</block></for>) <block>{
<expr><call><name>ucl_parser_register_context_macro</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call><operator>.</operator><name>ctx_handler</name></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>userdata_list</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></block></expr></init></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
};

<decl_stmt><decl><type><name>auto</name></type> <name>parse_func</name> <init>= <expr><index>[<expr><operator>&amp;</operator><name>in</name></expr><operator>,</operator> <operator>&amp;</operator><name>duplicate_strategy</name>]</index> <operator>(</operator>struct <name>ucl_parser</name> <operator>*</operator><name>parser</name><operator>)</operator> <operator>-&gt;</operator> <name>bool</name> <block>{
<return>return <expr><call><name>ucl_parser_add_chunk_full</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>data</name></name> <argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>in</name><operator>.</operator><name>size</name></name> <argument_list>()</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>ucl_parser_get_default_priority</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>duplicate_strategy</name></expr></argument>,
<argument><expr><name>UCL_PARSE_UCL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>

<return>return <expr><call><name>parse_with_strategy_function</name> <argument_list>(<argument><expr><name>config_func</name></expr></argument>, <argument><expr><name>parse_func</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}

static <decl_stmt><decl><type><name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr>enum <name>ucl_duplicate_strategy</name> <name>duplicate_strategy</name> <operator>=</operator> <name>UCL_DUPLICATE_APPEND</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>parse</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>duplicate_strategy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>vars</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"null input"</literal></expr>;</expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>parse</name> <argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>in</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument> , <argument><expr><name>macro_handler_s</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <operator>&amp;</operator><name>macros</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr>enum <name>ucl_duplicate_strategy</name> <name>duplicate_strategy</name> <operator>=</operator> <name>UCL_DUPLICATE_APPEND</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>parse</name> <argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>macros</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>duplicate_strategy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>vars</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument> , <argument><expr><name>macro_handler_s</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <operator>&amp;</operator><name>macros</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr>enum <name>ucl_duplicate_strategy</name> <name>duplicate_strategy</name> <operator>=</operator> <name>UCL_DUPLICATE_APPEND</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"null input"</literal></expr>;</expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>parse</name> <argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>macros</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>duplicate_strategy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>variable_replacer</name> <operator>&amp;</operator><name>replacer</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr>enum <name>ucl_duplicate_strategy</name> <name>duplicate_strategy</name> <operator>=</operator> <name>UCL_DUPLICATE_APPEND</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"null input"</literal></expr>;</expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>parse</name> <argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>replacer</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>duplicate_strategy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>in</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>variable_replacer</name> <operator>&amp;</operator><name>replacer</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt; <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument> , <argument><expr><name>macro_handler_s</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <operator>&amp;</operator><name>macros</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr>enum <name>ucl_duplicate_strategy</name> <name>duplicate_strategy</name> <operator>=</operator> <name>UCL_DUPLICATE_APPEND</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"null input"</literal></expr>;</expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>parse</name> <argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>replacer</name></expr></argument>, <argument><expr><name>macros</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>duplicate_strategy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse_from_file</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>parse_from_file</name> <argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse_from_file</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>vars</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>config_func</name> <init>= <expr><index>[<expr><operator>&amp;</operator><name>vars</name></expr>]</index> <operator>(</operator><name>ucl_parser</name> <operator>*</operator><name>parser</name><operator>)</operator> <block>{
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type> <name>item</name> <range>: <expr><name>vars</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_parser_register_variable</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>first</name><operator>.</operator><name>c_str</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>second</name><operator>.</operator><name>c_str</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}</block><empty_stmt>;</empty_stmt></for>

<name>auto</name> <name>parse_func</name> <operator>=</operator> <index>[<expr><operator>&amp;</operator><name>filename</name></expr>]</index> <operator>(</operator><name>ucl_parser</name> <operator>*</operator><name>parser</name><operator>)</operator> <block>{
<return>return <expr><call><name>ucl_parser_add_file</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><call><name><name>filename</name><operator>.</operator><name>c_str</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_with_strategy_function</name> <argument_list>(<argument><expr><name>config_func</name></expr></argument>, <argument><expr><name>parse_func</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Ucl</name></type> <name>parse_from_file</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>variable_replacer</name> <operator>&amp;</operator><name>replacer</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>err</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>config_func</name> <init>= <expr><index>[<expr><operator>&amp;</operator><name>replacer</name></expr>]</index> <operator>(</operator><name>ucl_parser</name> <operator>*</operator><name>parser</name><operator>)</operator> <block>{
<expr><call><name>ucl_parser_set_variables_handler</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ucl_variable_replacer</name></expr></argument>,
<argument><expr><operator>&amp;</operator><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>variable_replacer</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>replacer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>parse_func</name> <init>= <expr><index>[<expr><operator>&amp;</operator><name>filename</name></expr>]</index> <operator>(</operator><name>ucl_parser</name> <operator>*</operator><name>parser</name><operator>)</operator> <block>{
<return>return <expr><call><name>ucl_parser_add_file</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><call><name><name>filename</name><operator>.</operator><name>c_str</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>

<return>return <expr><call><name>parse_with_strategy_function</name> <argument_list>(<argument><expr><name>config_func</name></expr></argument>, <argument><expr><name>parse_func</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>find_variable</name> <argument_list>(<argument>const std::string &amp;in</argument>)</argument_list></macro>
<block>{
<expr><name>auto</name> <name>parser</name> <operator>=</operator> <call><name>ucl_parser_new</name> <argument_list>(<argument><expr><name>UCL_PARSER_DEFAULT</name></expr></argument>)</argument_list></call></expr>;

<expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>vars</name></expr>;
<expr><call><name>ucl_parser_set_variables_handler</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ucl_variable_getter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vars</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>ucl_parser_add_chunk</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name><name>in</name><operator>.</operator><name>data</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>in</name><operator>.</operator><name>size</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>ucl_parser_free</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>result</name></expr>;
<expr><name>std</name><operator>::</operator><call><name>move</name> <argument_list>(<argument><expr><call><name><name>vars</name><operator>.</operator><name>begin</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vars</name><operator>.</operator><name>end</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>back_inserter</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>result</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>find_variable</name> <argument_list>(<argument>const char *in</argument>)</argument_list></macro>
<block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<return>return <expr><call><name>find_variable</name> <argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name> <argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

static <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>find_variable_from_file</name> <argument_list>(<argument>const std::string &amp;filename</argument>)</argument_list></macro>
<block>{
<expr><name>auto</name> <name>parser</name> <operator>=</operator> <call><name>ucl_parser_new</name> <argument_list>(<argument><expr><name>UCL_PARSER_DEFAULT</name></expr></argument>)</argument_list></call></expr>;

<expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>vars</name></expr>;
<expr><call><name>ucl_parser_set_variables_handler</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ucl_variable_getter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vars</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>ucl_parser_add_file</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><call><name><name>filename</name><operator>.</operator><name>c_str</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>ucl_parser_free</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>result</name></expr>;
<expr><name>std</name><operator>::</operator><call><name>move</name> <argument_list>(<argument><expr><call><name><name>vars</name><operator>.</operator><name>begin</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vars</name><operator>.</operator><name>end</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>back_inserter</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>result</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>Ucl</name><modifier>&amp;</modifier></type> <name>operator</name><init>= <expr><operator>(</operator><name>Ucl</name> <name>rhs</name><operator>)</operator>
<block>{
<expr><call><name><name>obj</name><operator>.</operator><name>swap</name></name> <argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>Ucl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier>
<block>{
<return>return <expr><call><name>ucl_object_compare</name> <argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name><operator>.</operator><name>obj</name><operator>.</operator><name>get</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>Ucl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier>
<block>{
<return>return <expr><call><name>ucl_object_compare</name> <argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name><operator>.</operator><name>obj</name><operator>.</operator><name>get</name></name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator> <operator>(</operator><specifier>const</specifier> <name>Ucl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>rhs</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;=</operator> <operator>(</operator><specifier>const</specifier> <name>Ucl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>rhs</name> <operator>&lt;</operator> <operator>*</operator><name>this</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;</operator> <operator>(</operator><specifier>const</specifier> <name>Ucl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>rhs</name> <operator>&lt;</operator> <operator>*</operator><name>this</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;=</operator> <operator>(</operator><specifier>const</specifier> <name>Ucl</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>&lt;</operator> <name>rhs</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name> <argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <call><name>type</name><argument_list>()</argument_list></call> <operator>==</operator> <name>UCL_NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>type</name> <argument_list>()</argument_list></call> <operator>==</operator> <name>UCL_BOOLEAN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>bool_value</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
}

const_iterator <macro><name>begin</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier>
<block>{
<return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>cbegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><call><name>const_iterator</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>cend</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><call><name>const_iterator</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
};

};
</unit>
