<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/include/ucl.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UCL_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_EXTERN</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_EXTERN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UCL_ALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_ALLOC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(size)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UCL_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_FREE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(ptr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_WARN_UNUSED_RESULT</name></cpp:macro> <cpp:value>__attribute__((warn_unused_result))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_WARN_UNUSED_RESULT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_DEPRECATED</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>func __attribute__ ((deprecated))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_DEPRECATED</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(deprecated) func</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_DEPRECATED</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>func</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<typedef>typedef <type><enum>enum <name>ucl_error</name> <block>{
<decl><name>UCL_EOK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UCL_ESYNTAX</name></decl>,
<decl><name>UCL_EIO</name></decl>,
<decl><name>UCL_ESTATE</name></decl>,
<decl><name>UCL_ENESTED</name></decl>,
<decl><name>UCL_EUNPAIRED</name></decl>,
<decl><name>UCL_EMACRO</name></decl>,
<decl><name>UCL_EINTERNAL</name></decl>,
<decl><name>UCL_ESSL</name></decl>,
<decl><name>UCL_EMERGE</name></decl>
}</block></enum></type> <name>ucl_error_t</name>;</typedef>







<typedef>typedef <type><enum>enum <name>ucl_type</name> <block>{
<decl><name>UCL_OBJECT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UCL_ARRAY</name></decl>,
<decl><name>UCL_INT</name></decl>,
<decl><name>UCL_FLOAT</name></decl>,
<decl><name>UCL_STRING</name></decl>,
<decl><name>UCL_BOOLEAN</name></decl>,
<decl><name>UCL_TIME</name></decl>,
<decl><name>UCL_USERDATA</name></decl>,
<decl><name>UCL_NULL</name></decl>
}</block></enum></type> <name>ucl_type_t</name>;</typedef>




<typedef>typedef <type><enum>enum <name>ucl_emitter</name> <block>{
<decl><name>UCL_EMIT_JSON</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UCL_EMIT_JSON_COMPACT</name></decl>,
<decl><name>UCL_EMIT_CONFIG</name></decl>,
<decl><name>UCL_EMIT_YAML</name></decl>,
<decl><name>UCL_EMIT_MSGPACK</name></decl>,
<decl><name>UCL_EMIT_MAX</name></decl>
}</block></enum></type> <name>ucl_emitter_t</name>;</typedef>







<typedef>typedef <type><enum>enum <name>ucl_parser_flags</name> <block>{
<decl><name>UCL_PARSER_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UCL_PARSER_KEY_LOWERCASE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_PARSER_ZEROCOPY</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_PARSER_NO_TIME</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_PARSER_NO_IMPLICIT_ARRAYS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_PARSER_SAVE_COMMENTS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_PARSER_DISABLE_MACRO</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_PARSER_NO_FILEVARS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>
}</block></enum></type> <name>ucl_parser_flags_t</name>;</typedef>




<typedef>typedef <type><enum>enum <name>ucl_string_flags</name> <block>{
<decl><name>UCL_STRING_RAW</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,
<decl><name>UCL_STRING_ESCAPE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_STRING_TRIM</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_STRING_PARSE_BOOLEAN</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_STRING_PARSE_INT</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_STRING_PARSE_DOUBLE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_STRING_PARSE_TIME</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_STRING_PARSE_NUMBER</name> <init>= <expr><name>UCL_STRING_PARSE_INT</name><operator>|</operator><name>UCL_STRING_PARSE_DOUBLE</name><operator>|</operator><name>UCL_STRING_PARSE_TIME</name></expr></init></decl>,

<decl><name>UCL_STRING_PARSE</name> <init>= <expr><name>UCL_STRING_PARSE_BOOLEAN</name><operator>|</operator><name>UCL_STRING_PARSE_NUMBER</name></expr></init></decl>,

<decl><name>UCL_STRING_PARSE_BYTES</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>
}</block></enum></type> <name>ucl_string_flags_t</name>;</typedef>





<typedef>typedef <type><enum>enum <name>ucl_object_flags</name> <block>{
<decl><name>UCL_OBJECT_ALLOCATED_KEY</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_OBJECT_ALLOCATED_VALUE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_OBJECT_NEED_KEY_ESCAPE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_OBJECT_EPHEMERAL</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_OBJECT_MULTILINE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_OBJECT_MULTIVALUE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_OBJECT_INHERITED</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_OBJECT_BINARY</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_OBJECT_SQUOTED</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>
}</block></enum></type> <name>ucl_object_flags_t</name>;</typedef>




<enum>enum <name>ucl_duplicate_strategy</name> <block>{
<decl><name>UCL_DUPLICATE_APPEND</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UCL_DUPLICATE_MERGE</name></decl>,
<decl><name>UCL_DUPLICATE_REWRITE</name></decl>,
<decl><name>UCL_DUPLICATE_ERROR</name></decl>
}</block>;</enum>




<enum>enum <name>ucl_parse_type</name> <block>{
<decl><name>UCL_PARSE_UCL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UCL_PARSE_MSGPACK</name></decl>,
<decl><name>UCL_PARSE_CSEXP</name></decl>,
<decl><name>UCL_PARSE_AUTO</name></decl>
}</block>;</enum>





<typedef>typedef <type><struct>struct <name>ucl_object_s</name> <block>{



<union>union <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>av</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ud</name></decl>;</decl_stmt>
}</block> <decl><name>value</name></decl>;</union>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_object_s</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_object_s</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name><name>trash_stack</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ucl_object_t</name>;</typedef>





<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ucl_userdata_dtor</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<modifier>*</modifier><name>ucl_userdata_emitter</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>;</function_decl></typedef>














<function_decl><type><name>UCL_EXTERN</name> <name>char</name><modifier>*</modifier></type> <name>ucl_copy_key_trash</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>char</name><modifier>*</modifier></type> <name>ucl_copy_value_trash</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_new</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>ucl_type_t</name> <name>type</name></expr></argument>)</argument_list> <name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>ucl_type_t</name> <name>type</name></expr></argument>, <argument><expr><name>unsigned</name> <name>priority</name></expr></argument>)</argument_list>
<name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_new_userdata</name> <argument_list>(<argument><expr><name>ucl_userdata_dtor</name> <name>dtor</name></expr></argument>,
<argument><expr><name>ucl_userdata_emitter</name> <name>emitter</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list> <name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name> <modifier>*</modifier></type> <name>ucl_object_copy</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>ucl_object_t</name> <operator>*</operator><name>other</name></expr></argument>)</argument_list>
<name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>





<function_decl><type><name>UCL_EXTERN</name> <name>ucl_type_t</name></type> <name>ucl_object_type</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ucl_object_type_to_string</name> <parameter_list>(<parameter><decl><type><name>ucl_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_string_to_type</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>ucl_type_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name> <modifier>*</modifier></type> <name>ucl_object_fromstring_common</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>,
<argument><expr>enum <name>ucl_string_flags</name> <name>flags</name></expr></argument>)</argument_list> <name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name> <modifier>*</modifier></type><name>ucl_object_fromstring</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list> <name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name> <modifier>*</modifier></type><name>ucl_object_fromlstring</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>,
<argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_fromint</name> <argument_list>(<argument><expr><name>int64_t</name> <name>iv</name></expr></argument>)</argument_list> <name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_fromdouble</name> <argument_list>(<argument><expr><name>double</name> <name>dv</name></expr></argument>)</argument_list> <name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_frombool</name> <argument_list>(<argument><expr><name>bool</name> <name>bv</name></expr></argument>)</argument_list> <name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>










<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_insert_key</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>copy_key</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_replace_key</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>copy_key</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_merge</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>copy</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_delete_keyl</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_delete_key</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>











<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_pop_keyl</name> <argument_list>(<argument><expr><name>ucl_object_t</name> <operator>*</operator><name>top</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>key</name></expr></argument>,
<argument><expr><name>size_t</name> <name>keylen</name></expr></argument>)</argument_list> <name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_pop_key</name> <argument_list>(<argument><expr><name>ucl_object_t</name> <operator>*</operator><name>top</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list>
<name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>











<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_insert_key_merged</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>copy_key</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_reserve</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>reserved</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_array_append</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_array_prepend</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_array_merge</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>copy</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_array_delete</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_array_head</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_array_tail</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_array_pop_last</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_array_pop_first</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>unsigned</name> <name>int</name></type> <name>ucl_array_size</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_array_find_index</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>unsigned</name> <name>int</name></type> <name>ucl_array_index_of</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>ucl_object_t</name> <modifier>*</modifier></type>
<name>ucl_array_replace_index</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name> <modifier>*</modifier></type> <name>ucl_elt_append</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_todouble_safe</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>double</name></type> <name>ucl_object_todouble</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_toint_safe</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>int64_t</name></type> <name>ucl_object_toint</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_toboolean_safe</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_toboolean</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_tostring_safe</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ucl_object_tostring</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ucl_object_tostring_forced</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_tolstring_safe</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>tlen</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ucl_object_tolstring</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>tlen</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_lookup</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_object_find_key</name></cpp:macro> <cpp:value>ucl_object_lookup</cpp:value></cpp:define>











<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_lookup_any</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_object_find_any_key</name></cpp:macro> <cpp:value>ucl_object_lookup_any</cpp:value></cpp:define>








<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_lookup_len</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_object_find_keyl</name></cpp:macro> <cpp:value>ucl_object_lookup_len</cpp:value></cpp:define>







<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>ucl_object_lookup_path</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_lookup_path</name></cpp:macro> <cpp:value>ucl_object_lookup_path</cpp:value></cpp:define>








<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>ucl_object_lookup_path_char</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>sep</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_lookup_path_char</name></cpp:macro> <cpp:value>ucl_object_lookup_path_char</cpp:value></cpp:define>






<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ucl_object_key</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ucl_object_keyl</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_ref</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>





<macro><name>UCL_DEPRECATED</name><argument_list>(<argument>UCL_EXTERN void ucl_object_free (ucl_object_t *obj)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_object_unref</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>UCL_EXTERN</name> <name>int</name></type> <name>ucl_object_compare</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>o1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>o2</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>UCL_EXTERN</name> <name>int</name></type> <name>ucl_object_compare_qsort</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>o1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>o2</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_object_array_sort</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>o2</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>ucl_object_keys_sort_flags</name> <block>{
<decl><name>UCL_SORT_KEYS_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UCL_SORT_KEYS_ICASE</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">0u</literal><operator>)</operator></expr></init></decl>,
<decl><name>UCL_SORT_KEYS_RECURSIVE</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">1u</literal><operator>)</operator></expr></init></decl>,
}</block>;</enum>





<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_object_sort_keys</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_object_keys_sort_flags</name></name></type> <name>how</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>unsigned</name> <name>int</name></type> <name>ucl_object_get_priority</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_object_set_priority</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>priority</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>ucl_object_iter_t</name>;</typedef>










<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_iterate_with_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_iter_t</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>expand_values</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_iterate_object</name></cpp:macro> <cpp:value>ucl_object_iterate</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_object_iterate</name><parameter_list>(<parameter><type><name>ob</name></type></parameter>, <parameter><type><name>it</name></type></parameter>, <parameter><type><name>ev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ucl_object_iterate_with_error((ob), (it), (ev), NULL)</cpp:value></cpp:define>






<decl_stmt><decl><type><name>UCL_EXTERN</name> <name>ucl_object_iter_t</name></type> <name>ucl_object_iterate_new</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>ucl_object_t</name> <operator>*</operator><name>obj</name></expr></argument>)</argument_list>
<name>UCL_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>







<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_iter_chk_excpn</name><parameter_list>(<parameter><decl><type><name>ucl_object_iter_t</name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>ucl_object_iter_t</name></type> <name>ucl_object_iterate_reset</name> <parameter_list>(<parameter><decl><type><name>ucl_object_iter_t</name></type> <name>it</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_iterate_safe</name> <parameter_list>(<parameter><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>expand_values</name></decl></parameter>)</parameter_list>;</function_decl>



<enum>enum <name>ucl_iterate_type</name> <block>{
<decl><name>UCL_ITERATE_EXPLICIT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>UCL_ITERATE_IMPLICIT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>UCL_ITERATE_BOTH</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
}</block>;</enum>








<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_object_iterate_full</name> <parameter_list>(<parameter><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_iterate_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_object_iterate_free</name> <parameter_list>(<parameter><decl><type><name>ucl_object_iter_t</name></type> <name>it</name></decl></parameter>)</parameter_list>;</function_decl>




















<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>ucl_macro_handler</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>arguments</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ud</name></decl></parameter>)</parameter_list>;</function_decl></typedef>











<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>ucl_context_macro_handler</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>arguments</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ud</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<struct_decl>struct <name>ucl_parser</name>;</struct_decl>






<function_decl><type><name>UCL_EXTERN</name> <name><name>struct</name> <name>ucl_parser</name></name><modifier>*</modifier></type> <name>ucl_parser_new</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_set_default_priority</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>prio</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>int</name></type> <name>ucl_parser_get_default_priority</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_register_macro</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>macro</name></decl></parameter>,
<parameter><decl><type><name>ucl_macro_handler</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ud</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_register_context_macro</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>macro</name></decl></parameter>,
<parameter><decl><type><name>ucl_context_macro_handler</name></type> <name>handler</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ud</name></decl></parameter>)</parameter_list>;</function_decl>











<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>ucl_variable_handler</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>replace</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>replace_len</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>need_free</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ud</name></decl></parameter>)</parameter_list>;</function_decl></typedef>







<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_parser_register_variable</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_parser_set_variables_handler</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>ucl_variable_handler</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_add_chunk</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_add_chunk_priority</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_insert_chunk</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_add_chunk_full</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_duplicate_strategy</name></name></type> <name>strat</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_parse_type</name></name></type> <name>parse_type</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_add_string</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_add_string_priority</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_add_file</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_add_file_priority</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_add_file_full</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_duplicate_strategy</name></name></type> <name>strat</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_parse_type</name></name></type> <name>parse_type</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_add_fd</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_add_fd_priority</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_add_fd_full</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_duplicate_strategy</name></name></type> <name>strat</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_parse_type</name></name></type> <name>parse_type</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_set_include_path</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>paths</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_parser_get_object</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_parser_get_current_stack_object</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>unsigned</name> <name>char</name></type> <name>ucl_parser_chunk_peek</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_chunk_skip</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ucl_parser_get_error</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>int</name></type> <name>ucl_parser_get_error_code</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>unsigned</name></type> <name>ucl_parser_get_column</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>unsigned</name></type> <name>ucl_parser_get_linenum</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_parser_clear_error</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_parser_free</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type> <name>ucl_parser_get_comments</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type> <name>ucl_comments_find</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>comments</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>srch</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_comments_move</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>comments</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_comments_add</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>comments</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_pubkey_add</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_parser_set_filevars</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>need_expand</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ucl_parser_get_cur_file</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>ucl_parser_special_handler_t</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>source_len</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>destination</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dest_len</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>




<enum>enum <name>ucl_special_handler_flags</name> <block>{
<decl><name>UCL_SPECIAL_HANDLER_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UCL_SPECIAL_HANDLER_PREPROCESS_ALL</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
}</block>;</enum>




<struct>struct <name>ucl_parser_special_handler</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>magic_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ucl_special_handler_flags</name></name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_parser_special_handler_t</name></type> <name>handler</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_function</name>) <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_parser_special_handler</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>






<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_parser_add_special_handler</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_parser_special_handler</name></name> <modifier>*</modifier></type><name>handler</name></decl></parameter>)</parameter_list>;</function_decl>










<typedef>typedef <function_decl><type><name>void</name></type> (<name>ucl_include_trace_func_t</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>pathlen</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>







<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_parser_set_include_tracer</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>ucl_include_trace_func_t</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl>










<struct_decl>struct <name>ucl_emitter_context</name>;</struct_decl>



<struct>struct <name>ucl_emitter_functions</name> <block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ucl_emitter_append_character</name>) <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nchars</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ucl_emitter_append_len</name>) <parameter_list>(<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ucl_emitter_append_int</name>) <parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>elt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ucl_emitter_append_double</name>) <parameter_list>(<parameter><decl><type><name>double</name></type> <name>elt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ucl_emitter_free_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ucl_emitter_operations</name> <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ucl_emitter_write_elt</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ucl_emitter_start_object</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ucl_emitter_end_object</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ucl_emitter_start_array</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ucl_emitter_end_array</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>




<struct>struct <name>ucl_emitter_context</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_operations</name></name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>comments</name></decl>;</decl_stmt>
}</block>;</struct>








<function_decl><type><name>UCL_EXTERN</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ucl_object_emit</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_emitter</name></name></type> <name>emit_type</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>UCL_EXTERN</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ucl_object_emit_len</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_emitter</name></name></type> <name>emit_type</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_emit_full</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_emitter</name></name></type> <name>emit_type</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>comments</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>UCL_EXTERN</name> <name><name>struct</name> <name>ucl_emitter_context</name></name><modifier>*</modifier></type> <name>ucl_object_emit_streamline_new</name> <parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_emitter</name></name></type> <name>emit_type</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_object_emit_streamline_start_container</name> <parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_object_emit_streamline_add_object</name> <parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_object_emit_streamline_end_container</name> <parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_object_emit_streamline_finish</name> <parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name><name>struct</name> <name>ucl_emitter_functions</name></name><modifier>*</modifier></type> <name>ucl_object_emit_memory_funcs</name> <parameter_list>(
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pmem</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>UCL_EXTERN</name> <name><name>struct</name> <name>ucl_emitter_functions</name></name><modifier>*</modifier></type> <name>ucl_object_emit_file_funcs</name> <parameter_list>(
<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>UCL_EXTERN</name> <name><name>struct</name> <name>ucl_emitter_functions</name></name><modifier>*</modifier></type> <name>ucl_object_emit_fd_funcs</name> <parameter_list>(
<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>UCL_EXTERN</name> <name>void</name></type> <name>ucl_object_emit_funcs_free</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>













<enum>enum <name>ucl_schema_error_code</name> <block>{
<decl><name>UCL_SCHEMA_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UCL_SCHEMA_TYPE_MISMATCH</name></decl>,
<decl><name>UCL_SCHEMA_INVALID_SCHEMA</name></decl>,
<decl><name>UCL_SCHEMA_MISSING_PROPERTY</name></decl>,
<decl><name>UCL_SCHEMA_CONSTRAINT</name></decl>,
<decl><name>UCL_SCHEMA_MISSING_DEPENDENCY</name></decl>,
<decl><name>UCL_SCHEMA_EXTERNAL_REF_MISSING</name></decl>,
<decl><name>UCL_SCHEMA_EXTERNAL_REF_INVALID</name></decl>,
<decl><name>UCL_SCHEMA_INTERNAL_ERROR</name></decl>,
<decl><name>UCL_SCHEMA_UNKNOWN</name></decl>
}</block>;</enum>




<struct>struct <name>ucl_schema_error</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>ucl_schema_error_code</name></name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
}</block>;</struct>









<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_validate</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_validate_root</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>UCL_EXTERN</name> <name>bool</name></type> <name>ucl_object_validate_root_ext</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>ext_refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_todouble_safe</name></cpp:macro> <cpp:value>ucl_object_todouble_safe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_todouble</name></cpp:macro> <cpp:value>ucl_object_todouble</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_tostring</name></cpp:macro> <cpp:value>ucl_object_tostring</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_tostring_safe</name></cpp:macro> <cpp:value>ucl_object_tostring_safe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_tolstring</name></cpp:macro> <cpp:value>ucl_object_tolstring</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_tolstring_safe</name></cpp:macro> <cpp:value>ucl_object_tolstring_safe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_toint</name></cpp:macro> <cpp:value>ucl_object_toint</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_toint_safe</name></cpp:macro> <cpp:value>ucl_object_toint_safe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_toboolean</name></cpp:macro> <cpp:value>ucl_object_toboolean</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_toboolean_safe</name></cpp:macro> <cpp:value>ucl_object_toboolean_safe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_get_key</name></cpp:macro> <cpp:value>ucl_object_find_key</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_get_keyl</name></cpp:macro> <cpp:value>ucl_object_find_keyl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_unref</name></cpp:macro> <cpp:value>ucl_object_unref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_ref</name></cpp:macro> <cpp:value>ucl_object_ref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_obj_free</name></cpp:macro> <cpp:value>ucl_object_free</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_PRIORITY_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_PRIORITY_MAX</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
