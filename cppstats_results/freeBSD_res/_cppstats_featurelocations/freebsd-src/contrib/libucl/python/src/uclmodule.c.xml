<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/python/src/uclmodule.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ucl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>SchemaError</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_basic_ucl_type</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UCL_INT</name></expr>:</case>
<return>return <expr><call><name>Py_BuildValue</name> <argument_list>(<argument><expr><literal type="string">"L"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><call><name>ucl_object_toint</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>UCL_FLOAT</name></expr>:</case>
<return>return <expr><call><name>Py_BuildValue</name> <argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><call><name>ucl_object_todouble</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>UCL_STRING</name></expr>:</case>
<return>return <expr><call><name>Py_BuildValue</name> <argument_list>(<argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><call><name>ucl_object_tostring</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>UCL_BOOLEAN</name></expr>:</case>
<return>return <expr><call><name>PyBool_FromLong</name> <argument_list>(<argument><expr><call><name>ucl_object_toboolean</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>UCL_TIME</name></expr>:</case>
<return>return <expr><call><name>Py_BuildValue</name> <argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><call><name>ucl_object_todouble</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>UCL_NULL</name></expr>:</case>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_iterate_valid_ucl</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>it</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>_basic_ucl_type</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><call><name>ucl_object_key</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>it_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it_obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyobj</name> <init>= <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"s"</literal></expr></argument>,<argument><expr><call><name>ucl_object_key</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>keyobj</name></expr></argument>, <argument><expr><call><name>_iterate_valid_ucl</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>it_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it_obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>_iterate_valid_ucl</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_USERDATA</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PyBytes_FromString</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></while>

<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_SystemError</name></expr></argument>, <argument><expr><literal type="string">"unhandled type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>_internal_load_ucl</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>uclstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name> <init>=
<expr><call><name>ucl_parser_new</name> <argument_list>(<argument><expr><name>UCL_PARSER_NO_TIME</name><operator>|</operator><name>UCL_PARSER_NO_IMPLICIT_ARRAYS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>r</name> <init>= <expr><call><name>ucl_parser_add_string</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>uclstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_parser_get_error</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><call><name>ucl_parser_get_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_parser_free</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>return_with_parser</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>uclobj</name> <init>= <expr><call><name>ucl_parser_get_object</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_iterate_valid_ucl</name><argument_list>(<argument><expr><name>uclobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_unref</name><argument_list>(<argument><expr><name>uclobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>return_with_parser</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><call><name>ucl_parser_get_error</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>return_with_parser</name>;</goto>
</block_content>}</block></else></if_stmt>

<label><name>return_with_parser</name>:</label>
<expr_stmt><expr><call><name>ucl_parser_free</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>
<name>ucl_load</name> <parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uclstr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>uclstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uclstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_internal_load_ucl</name><argument_list>(<argument><expr><name>uclstr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type>
<name>_iterate_python</name> <parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ucl_object_new</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>PyBool_Check</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ucl_object_frombool</name> <argument_list>(<argument><expr><name>obj</name> <operator>==</operator> <name>Py_True</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>PyInt_Check</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ucl_object_fromint</name> <argument_list>(<argument><expr><call><name>PyInt_AsLong</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><call><name>PyLong_Check</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ucl_object_fromint</name> <argument_list>(<argument><expr><call><name>PyLong_AsLong</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>PyFloat_Check</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ucl_object_fromdouble</name> <argument_list>(<argument><expr><call><name>PyFloat_AsDouble</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>PyUnicode_Check</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>ucl_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>PyUnicode_AsASCIIString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ucl_str</name> <operator>=</operator> <call><name>ucl_object_fromstring</name> <argument_list>(<argument><expr><call><name>PyBytes_AsString</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ucl_str</name></expr>;</return>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>PyString_Check</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ucl_object_fromstring</name> <argument_list>(<argument><expr><call><name>PyString_AsString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><call><name>PyDict_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>elm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keystr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>PyDict_Next</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elm</name> <operator>=</operator> <call><name>_iterate_python</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>keyascii</name> <init>= <expr><call><name>PyUnicode_AsASCIIString</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>keystr</name> <operator>=</operator> <call><name>PyBytes_AsString</name><argument_list>(<argument><expr><name>keyascii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keyascii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keystr</name> <operator>=</operator> <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><literal type="string">"Unknown key type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ucl_object_insert_key</name> <argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>elm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>top</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>PySequence_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>elm</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>PySequence_Length</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elm</name> <operator>=</operator> <call><name>_iterate_python</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>elm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>top</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><literal type="string">"Unhandled object type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>ucl_dump</name> <parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_emitter_t</name></type> <name>emitter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>emitter</name> <operator>=</operator> <name>UCL_EMIT_CONFIG</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O|i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><literal type="string">"Unhandled object type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>emitter</name> <operator>&gt;=</operator> <name>UCL_EMIT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><literal type="string">"Invalid emitter type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>_iterate_python</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ucl_object_emit</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyString_FromString</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PyUnicode_FromString</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>ucl_validate</name> <parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dataobj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>schemaobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"OO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>schemaobj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PyErr_SetString</name> <argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><literal type="string">"Unhandled object type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>_iterate_python</name><argument_list>(<argument><expr><name>schemaobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>schema</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>_iterate_python</name><argument_list>(<argument><expr><name>dataobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ucl_object_validate</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PyErr_SetString</name> <argument_list>(<argument><expr><name>SchemaError</name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Py_RETURN_TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>uclMethods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"load"</literal></expr>, <expr><name>ucl_load</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">"Load UCL from stream"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dump"</literal></expr>, <expr><name>ucl_dump</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">"Dump UCL to stream"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"validate"</literal></expr>, <expr><name>ucl_validate</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><literal type="string">"Validate ucl stream against schema"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_macros</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PyModule_AddIntMacro</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>UCL_EMIT_JSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddIntMacro</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>UCL_EMIT_JSON_COMPACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddIntMacro</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>UCL_EMIT_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddIntMacro</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>UCL_EMIT_YAML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddIntMacro</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>UCL_EMIT_MSGPACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SchemaError</name> <operator>=</operator> <call><name>PyErr_NewException</name><argument_list>(<argument><expr><literal type="string">"ucl.SchemaError"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>SchemaError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"SchemaError"</literal></expr></argument>, <argument><expr><name>SchemaError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyModuleDef</name></name></type> <name>uclmodule</name> <init>= <expr><block>{
<expr><name>PyModuleDef_HEAD_INIT</name></expr>,
<expr><literal type="string">"ucl"</literal></expr>,
<expr><name>NULL</name></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><name>uclMethods</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PyMODINIT_FUNC</name></type>
<name>PyInit_ucl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>PyModule_Create</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>uclmodule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_macros</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mod</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>void</name></type> <name>initucl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>mod</name> <init>= <expr><call><name>Py_InitModule</name> <argument_list>(<argument><expr><literal type="string">"ucl"</literal></expr></argument>, <argument><expr><name>uclMethods</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_macros</name> <argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
