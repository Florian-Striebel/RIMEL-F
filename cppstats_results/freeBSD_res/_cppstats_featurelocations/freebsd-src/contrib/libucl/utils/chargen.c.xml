<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/utils/chargen.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>print_flag</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>need_or</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>need_or</name></expr> ?</condition><then> <expr><literal type="string">"|"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>need_or</name> <operator>|=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><literal type="string">"ucl_chartable"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_or</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>valbuf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"static const unsigned int %s[256] = {\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>need_or</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_WHITESPACE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_WHITESPACE_UNSAFE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalnum</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_KEY_START"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalnum</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_KEY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_VALUE_END"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isprint</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_VALUE_STR"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_VALUE_DIGIT_START"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isalnum</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_VALUE_DIGIT"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator>
<name>i</name> <operator>==</operator> <literal type="char">'f'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_ESCAPE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_KEY_SEP"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\b'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator>
<name>i</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\f'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_JSON_UNSAFE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\b'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator>
<name>i</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'\f'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_UCL_UNSAFE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_or</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>print_flag</name> <argument_list>(<argument><expr><literal type="string">"UCL_CHARACTER_DENIED"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_or</name></expr></argument>, <argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isprint</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>, <argument><expr><literal type="string">" /* %c */"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>sprintf</name> <argument_list>(<argument><expr><name>valbuf</name> <operator>+</operator> <name>r</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n%s"</literal></expr></argument>, <argument><expr><name>valbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>valbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
