<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/uthash/utlist.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UTLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTLIST_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTLIST_VERSION</name></cpp:macro> <cpp:value>1.9.8</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>




































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1600</literal> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDECLTYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>decltype(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_DECLTYPE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDECLTYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>char*</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ICCARM__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_DECLTYPE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDECLTYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>char*</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDECLTYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__typeof(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_DECLTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SV</name><parameter_list>(<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_tmp = (char*)(list); {char **_alias = (char**)&amp;(list); *_alias = (elt); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NEXT</name><parameter_list>(<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>list</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char*)((list)-&gt;next))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NEXTASGN</name><parameter_list>(<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>list</name></type></parameter>,<parameter><type><name>to</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ char **_alias = (char**)&amp;((list)-&gt;next); *_alias=(char*)(to); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PREVASGN</name><parameter_list>(<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>list</name></type></parameter>,<parameter><type><name>to</name></type></parameter>,<parameter><type><name>prev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ char **_alias = (char**)&amp;((list)-&gt;prev); *_alias=(char*)(to); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RS</name><parameter_list>(<parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ char **_alias = (char**)&amp;(list); *_alias=_tmp; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CASTASGN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ char **_alias = (char**)&amp;(a); *_alias=(char*)(b); }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SV</name><parameter_list>(<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NEXT</name><parameter_list>(<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>list</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elt)-&gt;next)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NEXTASGN</name><parameter_list>(<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>list</name></type></parameter>,<parameter><type><name>to</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elt)-&gt;next)=(to)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PREVASGN</name><parameter_list>(<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>list</name></type></parameter>,<parameter><type><name>to</name></type></parameter>,<parameter><type><name>prev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elt)-&gt;prev)=(to)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RS</name><parameter_list>(<parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CASTASGN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a)=(b)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_SORT</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_SORT2(list, cmp, next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_SORT2</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>, <parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LDECLTYPE(list) _ls_p; LDECLTYPE(list) _ls_q; LDECLTYPE(list) _ls_e; LDECLTYPE(list) _ls_tail; int _ls_insize, _ls_nmerges, _ls_psize, _ls_qsize, _ls_i, _ls_looping; if (list) { _ls_insize = 1; _ls_looping = 1; while (_ls_looping) { _CASTASGN(_ls_p,list); list = NULL; _ls_tail = NULL; _ls_nmerges = 0; while (_ls_p) { _ls_nmerges++; _ls_q = _ls_p; _ls_psize = 0; for (_ls_i = 0; _ls_i &lt; _ls_insize; _ls_i++) { _ls_psize++; _SV(_ls_q,list); _ls_q = _NEXT(_ls_q,list,next); _RS(list); if (!_ls_q) break; } _ls_qsize = _ls_insize; while (_ls_psize &gt; 0 || (_ls_qsize &gt; 0 &amp;&amp; _ls_q)) { if (_ls_psize == 0) { _ls_e = _ls_q; _SV(_ls_q,list); _ls_q = _NEXT(_ls_q,list,next); _RS(list); _ls_qsize--; } else if (_ls_qsize == 0 || !_ls_q) { _ls_e = _ls_p; _SV(_ls_p,list); _ls_p = _NEXT(_ls_p,list,next); _RS(list); _ls_psize--; } else if (cmp(_ls_p,_ls_q) &lt;= 0) { _ls_e = _ls_p; _SV(_ls_p,list); _ls_p = _NEXT(_ls_p,list,next); _RS(list); _ls_psize--; } else { _ls_e = _ls_q; _SV(_ls_q,list); _ls_q = _NEXT(_ls_q,list,next); _RS(list); _ls_qsize--; } if (_ls_tail) { _SV(_ls_tail,list); _NEXTASGN(_ls_tail,list,_ls_e,next); _RS(list); } else { _CASTASGN(list,_ls_e); } _ls_tail = _ls_e; } _ls_p = _ls_q; } if (_ls_tail) { _SV(_ls_tail,list); _NEXTASGN(_ls_tail,list,NULL,next); _RS(list); } if (_ls_nmerges &lt;= 1) { _ls_looping=0; } _ls_insize *= 2; } } } while (0)</cpp:value></cpp:define>



























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_SORT</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DL_SORT2(list, cmp, prev, next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_SORT2</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>, <parameter><type><name>prev</name></type></parameter>, <parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LDECLTYPE(list) _ls_p; LDECLTYPE(list) _ls_q; LDECLTYPE(list) _ls_e; LDECLTYPE(list) _ls_tail; int _ls_insize, _ls_nmerges, _ls_psize, _ls_qsize, _ls_i, _ls_looping; if (list) { _ls_insize = 1; _ls_looping = 1; while (_ls_looping) { _CASTASGN(_ls_p,list); list = NULL; _ls_tail = NULL; _ls_nmerges = 0; while (_ls_p) { _ls_nmerges++; _ls_q = _ls_p; _ls_psize = 0; for (_ls_i = 0; _ls_i &lt; _ls_insize; _ls_i++) { _ls_psize++; _SV(_ls_q,list); _ls_q = _NEXT(_ls_q,list,next); _RS(list); if (!_ls_q) break; } _ls_qsize = _ls_insize; while (_ls_psize &gt; 0 || (_ls_qsize &gt; 0 &amp;&amp; _ls_q)) { if (_ls_psize == 0) { _ls_e = _ls_q; _SV(_ls_q,list); _ls_q = _NEXT(_ls_q,list,next); _RS(list); _ls_qsize--; } else if (_ls_qsize == 0 || !_ls_q) { _ls_e = _ls_p; _SV(_ls_p,list); _ls_p = _NEXT(_ls_p,list,next); _RS(list); _ls_psize--; } else if (cmp(_ls_p,_ls_q) &lt;= 0) { _ls_e = _ls_p; _SV(_ls_p,list); _ls_p = _NEXT(_ls_p,list,next); _RS(list); _ls_psize--; } else { _ls_e = _ls_q; _SV(_ls_q,list); _ls_q = _NEXT(_ls_q,list,next); _RS(list); _ls_qsize--; } if (_ls_tail) { _SV(_ls_tail,list); _NEXTASGN(_ls_tail,list,_ls_e,next); _RS(list); } else { _CASTASGN(list,_ls_e); } _SV(_ls_e,list); _PREVASGN(_ls_e,list,_ls_tail,prev); _RS(list); _ls_tail = _ls_e; } _ls_p = _ls_q; } _CASTASGN(list-&gt;prev, _ls_tail); _SV(_ls_tail,list); _NEXTASGN(_ls_tail,list,NULL,next); _RS(list); if (_ls_nmerges &lt;= 1) { _ls_looping=0; } _ls_insize *= 2; } } } while (0)</cpp:value></cpp:define>


























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_SORT</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CDL_SORT2(list, cmp, prev, next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_SORT2</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>, <parameter><type><name>prev</name></type></parameter>, <parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LDECLTYPE(list) _ls_p; LDECLTYPE(list) _ls_q; LDECLTYPE(list) _ls_e; LDECLTYPE(list) _ls_tail; LDECLTYPE(list) _ls_oldhead; LDECLTYPE(list) _tmp; int _ls_insize, _ls_nmerges, _ls_psize, _ls_qsize, _ls_i, _ls_looping; if (list) { _ls_insize = 1; _ls_looping = 1; while (_ls_looping) { _CASTASGN(_ls_p,list); _CASTASGN(_ls_oldhead,list); list = NULL; _ls_tail = NULL; _ls_nmerges = 0; while (_ls_p) { _ls_nmerges++; _ls_q = _ls_p; _ls_psize = 0; for (_ls_i = 0; _ls_i &lt; _ls_insize; _ls_i++) { _ls_psize++; _SV(_ls_q,list); if (_NEXT(_ls_q,list,next) == _ls_oldhead) { _ls_q = NULL; } else { _ls_q = _NEXT(_ls_q,list,next); } _RS(list); if (!_ls_q) break; } _ls_qsize = _ls_insize; while (_ls_psize &gt; 0 || (_ls_qsize &gt; 0 &amp;&amp; _ls_q)) { if (_ls_psize == 0) { _ls_e = _ls_q; _SV(_ls_q,list); _ls_q = _NEXT(_ls_q,list,next); _RS(list); _ls_qsize--; if (_ls_q == _ls_oldhead) { _ls_q = NULL; } } else if (_ls_qsize == 0 || !_ls_q) { _ls_e = _ls_p; _SV(_ls_p,list); _ls_p = _NEXT(_ls_p,list,next); _RS(list); _ls_psize--; if (_ls_p == _ls_oldhead) { _ls_p = NULL; } } else if (cmp(_ls_p,_ls_q) &lt;= 0) { _ls_e = _ls_p; _SV(_ls_p,list); _ls_p = _NEXT(_ls_p,list,next); _RS(list); _ls_psize--; if (_ls_p == _ls_oldhead) { _ls_p = NULL; } } else { _ls_e = _ls_q; _SV(_ls_q,list); _ls_q = _NEXT(_ls_q,list,next); _RS(list); _ls_qsize--; if (_ls_q == _ls_oldhead) { _ls_q = NULL; } } if (_ls_tail) { _SV(_ls_tail,list); _NEXTASGN(_ls_tail,list,_ls_e,next); _RS(list); } else { _CASTASGN(list,_ls_e); } _SV(_ls_e,list); _PREVASGN(_ls_e,list,_ls_tail,prev); _RS(list); _ls_tail = _ls_e; } _ls_p = _ls_q; } _CASTASGN(list-&gt;prev,_ls_tail); _CASTASGN(_tmp,list); _SV(_ls_tail,list); _NEXTASGN(_ls_tail,list,_tmp,next); _RS(list); if (_ls_nmerges &lt;= 1) { _ls_looping=0; } _ls_insize *= 2; } } } while (0)</cpp:value></cpp:define>











































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_PREPEND</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_PREPEND2(head,add,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_PREPEND2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (add)-&gt;next = head; head = add; } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_CONCAT</name><parameter_list>(<parameter><type><name>head1</name></type></parameter>,<parameter><type><name>head2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_CONCAT2(head1,head2,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_CONCAT2</name><parameter_list>(<parameter><type><name>head1</name></type></parameter>,<parameter><type><name>head2</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LDECLTYPE(head1) _tmp; if (head1) { _tmp = head1; while (_tmp-&gt;next) { _tmp = _tmp-&gt;next; } _tmp-&gt;next=(head2); } else { (head1)=(head2); } } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_APPEND</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_APPEND2(head,add,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_APPEND2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LDECLTYPE(head) _tmp; (add)-&gt;next=NULL; if (head) { _tmp = head; while (_tmp-&gt;next) { _tmp = _tmp-&gt;next; } _tmp-&gt;next=(add); } else { (head)=(add); } } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_DELETE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>del</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_DELETE2(head,del,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_DELETE2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>del</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LDECLTYPE(head) _tmp; if ((head) == (del)) { (head)=(head)-&gt;next; } else { _tmp = head; while (_tmp-&gt;next &amp;&amp; (_tmp-&gt;next != (del))) { _tmp = _tmp-&gt;next; } if (_tmp-&gt;next) { _tmp-&gt;next = ((del)-&gt;next); } } } while (0)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_APPEND_VS2008</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_APPEND2_VS2008(head,add,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_APPEND2_VS2008</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (head) { (add)-&gt;next = head; while ((add)-&gt;next-&gt;next) { (add)-&gt;next = (add)-&gt;next-&gt;next; } (add)-&gt;next-&gt;next=(add); } else { (head)=(add); } (add)-&gt;next=NULL; } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_DELETE_VS2008</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>del</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_DELETE2_VS2008(head,del,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_DELETE2_VS2008</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>del</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((head) == (del)) { (head)=(head)-&gt;next; } else { char *_tmp = (char*)(head); while ((head)-&gt;next &amp;&amp; ((head)-&gt;next != (del))) { head = (head)-&gt;next; } if ((head)-&gt;next) { (head)-&gt;next = ((del)-&gt;next); } { char **_head_alias = (char**)&amp;(head); *_head_alias = _tmp; } } } while (0)</cpp:value></cpp:define>

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_DECLTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LL_APPEND</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_APPEND</name></cpp:macro> <cpp:value>LL_APPEND_VS2008</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LL_DELETE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_DELETE</name></cpp:macro> <cpp:value>LL_DELETE_VS2008</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LL_DELETE2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_DELETE2</name></cpp:macro> <cpp:value>LL_DELETE2_VS2008</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LL_APPEND2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_APPEND2</name></cpp:macro> <cpp:value>LL_APPEND2_VS2008</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LL_CONCAT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DL_CONCAT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_COUNT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>counter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_COUNT2(head,el,counter,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_COUNT2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>counter</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ counter = 0; LL_FOREACH2(head,el,next){ ++counter; } }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_FOREACH</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_FOREACH2(head,el,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_FOREACH2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(el=head;el;el=(el)-&gt;next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_FOREACH_SAFE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>tmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_FOREACH_SAFE2(head,el,tmp,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_FOREACH_SAFE2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>tmp</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for((el)=(head);(el) &amp;&amp; (tmp = (el)-&gt;next, 1); (el) = tmp)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_SEARCH_SCALAR</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>out</name></type></parameter>,<parameter><type><name>field</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_SEARCH_SCALAR2(head,out,field,val,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_SEARCH_SCALAR2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>out</name></type></parameter>,<parameter><type><name>field</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LL_FOREACH2(head,out,next) { if ((out)-&gt;field == (val)) break; } } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_SEARCH</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>out</name></type></parameter>,<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL_SEARCH2(head,out,elt,cmp,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_SEARCH2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>out</name></type></parameter>,<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>cmp</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LL_FOREACH2(head,out,next) { if ((cmp(out,elt))==0) break; } } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_REPLACE_ELEM</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>el</name></type></parameter>, <parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LDECLTYPE(head) _tmp; assert(head != NULL); assert(el != NULL); assert(add != NULL); (add)-&gt;next = (el)-&gt;next; if ((head) == (el)) { (head) = (add); } else { _tmp = head; while (_tmp-&gt;next &amp;&amp; (_tmp-&gt;next != (el))) { _tmp = _tmp-&gt;next; } if (_tmp-&gt;next) { _tmp-&gt;next = (add); } } } while (0)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_PREPEND_ELEM</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>el</name></type></parameter>, <parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LDECLTYPE(head) _tmp; assert(head != NULL); assert(el != NULL); assert(add != NULL); (add)-&gt;next = (el); if ((head) == (el)) { (head) = (add); } else { _tmp = head; while (_tmp-&gt;next &amp;&amp; (_tmp-&gt;next != (el))) { _tmp = _tmp-&gt;next; } if (_tmp-&gt;next) { _tmp-&gt;next = (add); } } } while (0)</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_PREPEND</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DL_PREPEND2(head,add,prev,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_PREPEND2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>,<parameter><type><name>prev</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (add)-&gt;next = head; if (head) { (add)-&gt;prev = (head)-&gt;prev; (head)-&gt;prev = (add); } else { (add)-&gt;prev = (add); } (head) = (add); } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_APPEND</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DL_APPEND2(head,add,prev,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_APPEND2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>,<parameter><type><name>prev</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (head) { (add)-&gt;prev = (head)-&gt;prev; (head)-&gt;prev-&gt;next = (add); (head)-&gt;prev = (add); (add)-&gt;next = NULL; } else { (head)=(add); (head)-&gt;prev = (head); (head)-&gt;next = NULL; } } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_CONCAT</name><parameter_list>(<parameter><type><name>head1</name></type></parameter>,<parameter><type><name>head2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DL_CONCAT2(head1,head2,prev,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_CONCAT2</name><parameter_list>(<parameter><type><name>head1</name></type></parameter>,<parameter><type><name>head2</name></type></parameter>,<parameter><type><name>prev</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LDECLTYPE(head1) _tmp; if (head2) { if (head1) { _tmp = (head2)-&gt;prev; (head2)-&gt;prev = (head1)-&gt;prev; (head1)-&gt;prev-&gt;next = (head2); (head1)-&gt;prev = _tmp; } else { (head1)=(head2); } } } while (0)</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_DELETE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>del</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DL_DELETE2(head,del,prev,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_DELETE2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>del</name></type></parameter>,<parameter><type><name>prev</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { assert((del)-&gt;prev != NULL); if ((del)-&gt;prev == (del)) { (head)=NULL; } else if ((del)==(head)) { (del)-&gt;next-&gt;prev = (del)-&gt;prev; (head) = (del)-&gt;next; } else { (del)-&gt;prev-&gt;next = (del)-&gt;next; if ((del)-&gt;next) { (del)-&gt;next-&gt;prev = (del)-&gt;prev; } else { (head)-&gt;prev = (del)-&gt;prev; } } } while (0)</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_COUNT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>counter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DL_COUNT2(head,el,counter,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_COUNT2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>counter</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ counter = 0; DL_FOREACH2(head,el,next){ ++counter; } }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_FOREACH</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DL_FOREACH2(head,el,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_FOREACH2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(el=head;el;el=(el)-&gt;next)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_FOREACH_SAFE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>tmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DL_FOREACH_SAFE2(head,el,tmp,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_FOREACH_SAFE2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>tmp</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for((el)=(head);(el) &amp;&amp; (tmp = (el)-&gt;next, 1); (el) = tmp)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_SEARCH_SCALAR</name></cpp:macro> <cpp:value>LL_SEARCH_SCALAR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_SEARCH</name></cpp:macro> <cpp:value>LL_SEARCH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_SEARCH_SCALAR2</name></cpp:macro> <cpp:value>LL_SEARCH_SCALAR2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_SEARCH2</name></cpp:macro> <cpp:value>LL_SEARCH2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_REPLACE_ELEM</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>el</name></type></parameter>, <parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { assert(head != NULL); assert(el != NULL); assert(add != NULL); if ((head) == (el)) { (head) = (add); (add)-&gt;next = (el)-&gt;next; if ((el)-&gt;next == NULL) { (add)-&gt;prev = (add); } else { (add)-&gt;prev = (el)-&gt;prev; (add)-&gt;next-&gt;prev = (add); } } else { (add)-&gt;next = (el)-&gt;next; (add)-&gt;prev = (el)-&gt;prev; (add)-&gt;prev-&gt;next = (add); if ((el)-&gt;next == NULL) { (head)-&gt;prev = (add); } else { (add)-&gt;next-&gt;prev = (add); } } } while (0)</cpp:value></cpp:define>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL_PREPEND_ELEM</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>el</name></type></parameter>, <parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { assert(head != NULL); assert(el != NULL); assert(add != NULL); (add)-&gt;next = (el); (add)-&gt;prev = (el)-&gt;prev; (el)-&gt;prev = (add); if ((head) == (el)) { (head) = (add); } else { (add)-&gt;prev-&gt;next = (add); } } while (0)</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_PREPEND</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CDL_PREPEND2(head,add,prev,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_PREPEND2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>add</name></type></parameter>,<parameter><type><name>prev</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (head) { (add)-&gt;prev = (head)-&gt;prev; (add)-&gt;next = (head); (head)-&gt;prev = (add); (add)-&gt;prev-&gt;next = (add); } else { (add)-&gt;prev = (add); (add)-&gt;next = (add); } (head)=(add); } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_DELETE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>del</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CDL_DELETE2(head,del,prev,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_DELETE2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>del</name></type></parameter>,<parameter><type><name>prev</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ( ((head)==(del)) &amp;&amp; ((head)-&gt;next == (head))) { (head) = 0L; } else { (del)-&gt;next-&gt;prev = (del)-&gt;prev; (del)-&gt;prev-&gt;next = (del)-&gt;next; if ((del) == (head)) (head)=(del)-&gt;next; } } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_COUNT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>counter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CDL_COUNT2(head,el,counter,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_COUNT2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>el</name></type></parameter>, <parameter><type><name>counter</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ counter = 0; CDL_FOREACH2(head,el,next){ ++counter; } }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_FOREACH</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CDL_FOREACH2(head,el,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_FOREACH2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(el=head;el;el=((el)-&gt;next==head ? 0L : (el)-&gt;next))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_FOREACH_SAFE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>tmp1</name></type></parameter>,<parameter><type><name>tmp2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CDL_FOREACH_SAFE2(head,el,tmp1,tmp2,prev,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_FOREACH_SAFE2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>el</name></type></parameter>,<parameter><type><name>tmp1</name></type></parameter>,<parameter><type><name>tmp2</name></type></parameter>,<parameter><type><name>prev</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for((el)=(head), ((tmp1)=(head)?((head)-&gt;prev):NULL); (el) &amp;&amp; ((tmp2)=(el)-&gt;next, 1); ((el) = (((el)==(tmp1)) ? 0L : (tmp2))))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_SEARCH_SCALAR</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>out</name></type></parameter>,<parameter><type><name>field</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CDL_SEARCH_SCALAR2(head,out,field,val,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_SEARCH_SCALAR2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>out</name></type></parameter>,<parameter><type><name>field</name></type></parameter>,<parameter><type><name>val</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CDL_FOREACH2(head,out,next) { if ((out)-&gt;field == (val)) break; } } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_SEARCH</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>out</name></type></parameter>,<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CDL_SEARCH2(head,out,elt,cmp,next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_SEARCH2</name><parameter_list>(<parameter><type><name>head</name></type></parameter>,<parameter><type><name>out</name></type></parameter>,<parameter><type><name>elt</name></type></parameter>,<parameter><type><name>cmp</name></type></parameter>,<parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CDL_FOREACH2(head,out,next) { if ((cmp(out,elt))==0) break; } } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_REPLACE_ELEM</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>el</name></type></parameter>, <parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { assert(head != NULL); assert(el != NULL); assert(add != NULL); if ((el)-&gt;next == (el)) { (add)-&gt;next = (add); (add)-&gt;prev = (add); (head) = (add); } else { (add)-&gt;next = (el)-&gt;next; (add)-&gt;prev = (el)-&gt;prev; (add)-&gt;next-&gt;prev = (add); (add)-&gt;prev-&gt;next = (add); if ((head) == (el)) { (head) = (add); } } } while (0)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDL_PREPEND_ELEM</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>el</name></type></parameter>, <parameter><type><name>add</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { assert(head != NULL); assert(el != NULL); assert(add != NULL); (add)-&gt;next = (el); (add)-&gt;prev = (el)-&gt;prev; (el)-&gt;prev = (add); (add)-&gt;prev-&gt;next = (add); if ((head) == (el)) { (head) = (add); } } while (0)</cpp:value></cpp:define>













<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
