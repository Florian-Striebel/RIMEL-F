<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/uthash/utstring.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UTSTRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTSTRING_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTSTRING_VERSION</name></cpp:macro> <cpp:value>1.9.8</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UNUSED_</name></cpp:macro> <cpp:value>__attribute__ ((__unused__))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UNUSED_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>oom</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>oom</name></cpp:macro> <cpp:value>abort</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
}</block></struct></type> <name>UT_string</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_reserve</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>amt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((s)-&gt;n - (s)-&gt;i) &lt; (size_t)(amt)) { (s)-&gt;d = (char*)realloc((s)-&gt;d, (s)-&gt;n + amt); if ((s)-&gt;d == NULL) oom(); else {(s)-&gt;n += amt; if ((s)-&gt;pd) *((s)-&gt;pd) = (s)-&gt;d;} } } while(0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_init</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (s)-&gt;n = 0; (s)-&gt;i = 0; (s)-&gt;d = NULL; utstring_reserve(s,128); (s)-&gt;d[0] = '\0'; } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_done</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((s)-&gt;d != NULL) free((s)-&gt;d); (s)-&gt;n = 0; } while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_free</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { utstring_done(s); free(s); } while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_new</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { s = (UT_string*)calloc(1, sizeof(UT_string)); if (!s) oom(); else utstring_init(s); } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_renew</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (s) { utstring_clear(s); } else { utstring_new(s); } } while(0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_clear</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (s)-&gt;i = 0; (s)-&gt;d[0] = '\0'; } while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_bincpy</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { utstring_reserve((s),(l)+1); if (l) memcpy(&amp;(s)-&gt;d[(s)-&gt;i], b, l); (s)-&gt;i += l; (s)-&gt;d[(s)-&gt;i]='\0'; } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_concat</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>,<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { utstring_reserve((dst),((src)-&gt;i)+1); if ((src)-&gt;i) memcpy(&amp;(dst)-&gt;d[(dst)-&gt;i], (src)-&gt;d, (src)-&gt;i); (dst)-&gt;i += (src)-&gt;i; (dst)-&gt;d[(dst)-&gt;i]='\0'; } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_len</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned)((s)-&gt;i))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_body</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;d)</cpp:value></cpp:define>

<function><type><name>_UNUSED_</name> <specifier>static</specifier> <name>void</name></type> <name>utstring_printf_va</name><parameter_list>(<parameter><decl><type><name>UT_string</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>cp</name></decl>;</decl_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vsnprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>d</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>n</name></name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>i</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>utstring_reserve</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>utstring_reserve</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>utstring_printf</name><parameter_list>(<parameter><decl><type><name>UT_string</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__ <parameter_list>(<parameter/></parameter_list>( format<parameter_list>( <parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>) ))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>_UNUSED_</name> <specifier>static</specifier> <name>void</name></type> <name>utstring_printf</name><parameter_list>(<parameter><decl><type><name>UT_string</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>utstring_printf_va</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_append_len</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { while ((dst)-&gt;n-(dst)-&gt;i &lt;= (len)) utstring_reserve((dst),((dst)-&gt;n)*2); memcpy(&amp;(dst)-&gt;d[(dst)-&gt;i], (src), (len)); (dst)-&gt;i+=(len); (dst)-&gt;d[(dst)-&gt;i]='\0'; } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utstring_append_c</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((dst)-&gt;n-(dst)-&gt;i &lt; 2) utstring_reserve((dst),((dst)-&gt;n)*2); (dst)-&gt;d[(dst)-&gt;i++] = (c); (dst)-&gt;d[(dst)-&gt;i]='\0'; } while(0)</cpp:value></cpp:define>










<function><type><name>_UNUSED_</name> <specifier>static</specifier> <name>void</name></type> <name>_utstring_BuildTable</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>P_Needle</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name></type> <name>P_NeedleLen</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>P_KMP_Table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>P_KMP_Table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>P_NeedleLen</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>( <expr><operator>(</operator><name>j</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>P_Needle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>P_Needle</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>P_KMP_Table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>P_NeedleLen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>P_Needle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>P_Needle</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>P_KMP_Table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>P_KMP_Table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>P_KMP_Table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>P_KMP_Table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return;</return>
</block_content>}</block></function>



<function><type><name>_UNUSED_</name> <specifier>static</specifier> <name>void</name></type> <name>_utstring_BuildTableR</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>P_Needle</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name></type> <name>P_NeedleLen</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>P_KMP_Table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>P_NeedleLen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>P_KMP_Table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>( <expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name>P_NeedleLen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>P_Needle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>P_Needle</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>P_KMP_Table</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>P_Needle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>P_Needle</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>P_KMP_Table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>P_KMP_Table</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>P_KMP_Table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>P_KMP_Table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return;</return>
</block_content>}</block></function>



<function><type><name>_UNUSED_</name> <specifier>static</specifier> <name>long</name></type> <name>_utstring_find</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>P_Haystack</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>P_HaystackLen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>P_Needle</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>P_NeedleLen</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>P_KMP_Table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>V_FindPosition</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>( <expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>P_HaystackLen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>P_HaystackLen</name> <operator>-</operator> <name>j</name><operator>)</operator> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&gt;=</operator> <name>P_NeedleLen</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<while>while <condition>( <expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>P_Needle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>P_Haystack</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>P_KMP_Table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>P_NeedleLen</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>V_FindPosition</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>V_FindPosition</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>_UNUSED_</name> <specifier>static</specifier> <name>long</name></type> <name>_utstring_findR</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>P_Haystack</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>P_HaystackLen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>P_Needle</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>P_NeedleLen</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>P_KMP_Table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>V_FindPosition</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>P_HaystackLen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>P_NeedleLen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>( <expr><operator>(</operator><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&gt;=</operator> <name>i</name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<while>while <condition>( <expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>P_NeedleLen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>P_Needle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>P_Haystack</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>P_KMP_Table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>V_FindPosition</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>V_FindPosition</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>_UNUSED_</name> <specifier>static</specifier> <name>long</name></type> <name>utstring_find</name><parameter_list>(
<parameter><decl><type><name>UT_string</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>P_StartPosition</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>P_Needle</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name></type> <name>P_NeedleLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>V_StartPosition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>V_HaystackLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>V_KMP_Table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>V_FindPosition</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>P_StartPosition</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>V_StartPosition</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i</name></name> <operator>+</operator> <name>P_StartPosition</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>V_StartPosition</name> <operator>=</operator> <name>P_StartPosition</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>V_HaystackLen</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i</name></name> <operator>-</operator> <name>V_StartPosition</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>V_HaystackLen</name> <operator>&gt;=</operator> <name>P_NeedleLen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>P_NeedleLen</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>V_KMP_Table</name> <operator>=</operator> <operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>P_NeedleLen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>V_KMP_Table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_utstring_BuildTable</name><argument_list>(<argument><expr><name>P_Needle</name></expr></argument>, <argument><expr><name>P_NeedleLen</name></expr></argument>, <argument><expr><name>V_KMP_Table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>V_FindPosition</name> <operator>=</operator> <call><name>_utstring_find</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>d</name></name> <operator>+</operator> <name>V_StartPosition</name></expr></argument>,
<argument><expr><name>V_HaystackLen</name></expr></argument>,
<argument><expr><name>P_Needle</name></expr></argument>,
<argument><expr><name>P_NeedleLen</name></expr></argument>,
<argument><expr><name>V_KMP_Table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>V_FindPosition</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>V_FindPosition</name> <operator>+=</operator> <name>V_StartPosition</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>V_KMP_Table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>V_FindPosition</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>_UNUSED_</name> <specifier>static</specifier> <name>long</name></type> <name>utstring_findR</name><parameter_list>(
<parameter><decl><type><name>UT_string</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>P_StartPosition</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>P_Needle</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name></type> <name>P_NeedleLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>V_StartPosition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>V_HaystackLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>V_KMP_Table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>V_FindPosition</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>P_StartPosition</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>V_StartPosition</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i</name></name> <operator>+</operator> <name>P_StartPosition</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>V_StartPosition</name> <operator>=</operator> <name>P_StartPosition</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>V_HaystackLen</name> <operator>=</operator> <name>V_StartPosition</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>V_HaystackLen</name> <operator>&gt;=</operator> <name>P_NeedleLen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>P_NeedleLen</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>V_KMP_Table</name> <operator>=</operator> <operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>P_NeedleLen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>V_KMP_Table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>_utstring_BuildTableR</name><argument_list>(<argument><expr><name>P_Needle</name></expr></argument>, <argument><expr><name>P_NeedleLen</name></expr></argument>, <argument><expr><name>V_KMP_Table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>V_FindPosition</name> <operator>=</operator> <call><name>_utstring_findR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>d</name></name></expr></argument>,
<argument><expr><name>V_HaystackLen</name></expr></argument>,
<argument><expr><name>P_Needle</name></expr></argument>,
<argument><expr><name>P_NeedleLen</name></expr></argument>,
<argument><expr><name>V_KMP_Table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>V_KMP_Table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>V_FindPosition</name></expr>;</return>
</block_content>}</block></function>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
