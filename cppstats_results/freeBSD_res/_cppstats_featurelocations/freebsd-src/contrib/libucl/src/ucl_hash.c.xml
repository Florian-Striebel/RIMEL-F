<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/src/ucl_hash.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"khash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kvec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mum.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<struct>struct <name>ucl_hash_elt</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ar_idx</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ucl_hash_struct</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>
<macro><name>kvec_t</name><argument_list>(<argument>const ucl_object_t *</argument>)</argument_list></macro> <expr_stmt><expr><name>ar</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>caseless</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>ucl_hash_seed</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>seed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>seed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UCL_RANDOM_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <name>UCL_RANDOM_FUNCTION</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <call><name>time</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>seed</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>lc_map</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x27</literal></expr>,
<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x2f</literal></expr>,
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x37</literal></expr>,
<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x3f</literal></expr>,
<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>,
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x6f</literal></expr>,
<expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
<expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x5f</literal></expr>,
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>,
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x6f</literal></expr>,
<expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
<expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,
<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x87</literal></expr>,
<expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x8f</literal></expr>,
<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x97</literal></expr>,
<expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x9f</literal></expr>,
<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xa7</literal></expr>,
<expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xaf</literal></expr>,
<expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xb7</literal></expr>,
<expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xbf</literal></expr>,
<expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xc7</literal></expr>,
<expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xcf</literal></expr>,
<expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xd7</literal></expr>,
<expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xdf</literal></expr>,
<expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xe7</literal></expr>,
<expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
<expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0xf7</literal></expr>,
<expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xff</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>WORD_BIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>WORD_BIT</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WORDSIZE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__WORDSIZE</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__amd64__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL64_BIT_HASH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>ucl_hash_func</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mum_hash</name> <argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>, <argument><expr><call><name>ucl_hash_seed</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ucl_hash_equal</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>k1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>k2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>k1</name><operator>-&gt;</operator><name>keylen</name></name> <operator>==</operator> <name><name>k2</name><operator>-&gt;</operator><name>keylen</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>k1</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>k2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>k1</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<macro><name>KHASH_INIT</name> <argument_list>(<argument>ucl_hash_node</argument>, <argument>const ucl_object_t *</argument>, <argument>struct ucl_hash_elt</argument>, <argument><literal type="number">1</literal></argument>,
<argument>ucl_hash_func</argument>, <argument>ucl_hash_equal</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>ucl_hash_caseless_func</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>keylen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>leftover</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>keylen</name></name> <operator>%</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>fp</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>o</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>, <decl><type ref="prev"/><name>c5</name></decl>, <decl><type ref="prev"/><name>c6</name></decl>, <decl><type ref="prev"/><name>c7</name></decl>, <decl><type ref="prev"/><name>c8</name></decl>;</decl_stmt>
}</block> <decl><name>c</name></decl>;</struct>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pp</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>leftover</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ucl_hash_seed</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>fp</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c1</name></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c2</name></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c3</name></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c4</name></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c5</name></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c6</name></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c7</name></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c8</name></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c1</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c1</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c2</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c2</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c3</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c3</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c4</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c4</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c5</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c5</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c6</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c6</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c7</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c7</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c8</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c8</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mum_hash_step</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>pp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>pp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>leftover</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c7</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c6</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c5</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c4</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c3</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c2</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>c</name><operator>.</operator><name>c1</name></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mum_hash_step</name> <argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>pp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><call><name>mum_hash_finish</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ucl_hash_caseless_equal</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>k1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>k2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>k1</name><operator>-&gt;</operator><name>keylen</name></name> <operator>==</operator> <name><name>k2</name><operator>-&gt;</operator><name>keylen</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>fp</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>k1</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>k2</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name></decl>;</decl_stmt>
}</block> <decl><name>cmp1</name></decl>, <decl><type ref="prev"/><name>cmp2</name></decl>;</union>
<decl_stmt><decl><type><name>size_t</name></type> <name>leftover</name> <init>= <expr><name><name>k1</name><operator>-&gt;</operator><name>keylen</name></name> <operator>%</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>k1</name><operator>-&gt;</operator><name>keylen</name></name> <operator>-</operator> <name>leftover</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>fp</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>c2</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>c3</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>c4</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp1</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp1</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp1</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c3</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp1</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c4</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>c2</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>c3</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>c4</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp2</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp2</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp2</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c3</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp2</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c4</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmp1</name><operator>.</operator><name>n</name></name> <operator>!=</operator> <name><name>cmp2</name><operator>.</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name>leftover</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lc_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>lc_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>leftover</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<macro><name>KHASH_INIT</name> <argument_list>(<argument>ucl_hash_caseless_node</argument>, <argument>const ucl_object_t *</argument>, <argument>struct ucl_hash_elt</argument>, <argument><literal type="number">1</literal></argument>,
<argument>ucl_hash_caseless_func</argument>, <argument>ucl_hash_caseless_equal</argument>)</argument_list></macro>

<function><type><name>ucl_hash_t</name><modifier>*</modifier></type>
<name>ucl_hash_create</name> <parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ignore_case</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_hash_t</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ucl_hash_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>kv_init</name> <argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>ar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>caseless</name></name> <operator>=</operator> <name>ignore_case</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ignore_case</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>kh_init</name> <argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>kh_init</name> <argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>UCL_FREE</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ucl_hash_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ucl_hash_destroy</name> <parameter_list>(<parameter><decl><type><name>ucl_hash_t</name><modifier>*</modifier></type> <name>hashlin</name></decl></parameter>, <parameter><decl><type><name>ucl_hash_free_func</name></type> <name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hashlin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <call><name>kh_begin</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>k</name> <operator>!=</operator> <call><name>kh_end</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>kh_exist</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><name>obj</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>func</name> <argument_list>(<argument><expr><call><name>__DECONST</name> <argument_list>(<argument><expr><name>ucl_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hashlin</name><operator>-&gt;</operator><name>caseless</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_destroy</name> <argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_destroy</name> <argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>kv_destroy</name> <argument_list>(<argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UCL_FREE</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>hashlin</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hashlin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_hash_insert</name> <parameter_list>(<parameter><decl><type><name>ucl_hash_t</name><modifier>*</modifier></type> <name>hashlin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_hash_elt</name></name> <modifier>*</modifier></type><name>elt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hashlin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hashlin</name><operator>-&gt;</operator><name>caseless</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>kh_put</name> <argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <operator>&amp;</operator><call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_push_safe</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>ucl_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elt</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elt</name><operator>-&gt;</operator><name>ar_idx</name></name> <operator>=</operator> <call><name>kv_size</name> <argument_list>(<argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>kh_put</name> <argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <operator>&amp;</operator><call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_push_safe</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>ucl_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elt</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elt</name><operator>-&gt;</operator><name>ar_idx</name></name> <operator>=</operator> <call><name>kv_size</name> <argument_list>(<argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>e0</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
<label><name>e0</name>:</label>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ucl_hash_replace</name> <parameter_list>(<parameter><decl><type><name>ucl_hash_t</name><modifier>*</modifier></type> <name>hashlin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>old</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_hash_elt</name></name></type> <name>elt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pelt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hashlin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hashlin</name><operator>-&gt;</operator><name>caseless</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>kh_put</name> <argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_del</name> <argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>kh_put</name> <argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pelt</name> <operator>=</operator> <operator>&amp;</operator><call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pelt</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pelt</name><operator>-&gt;</operator><name>ar_idx</name></name> <operator>=</operator> <name><name>elt</name><operator>.</operator><name>ar_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_A</name> <argument_list>(<argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name></name></expr></argument>, <argument><expr><name><name>elt</name><operator>.</operator><name>ar_idx</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>kh_put</name> <argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_del</name> <argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>kh_put</name> <argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pelt</name> <operator>=</operator> <operator>&amp;</operator><call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pelt</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pelt</name><operator>-&gt;</operator><name>ar_idx</name></name> <operator>=</operator> <name><name>elt</name><operator>.</operator><name>ar_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_A</name> <argument_list>(<argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name></name></expr></argument>, <argument><expr><name><name>elt</name><operator>.</operator><name>ar_idx</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<struct>struct <name>ucl_hash_real_iter</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UHI_SETERR</name><parameter_list>(<parameter><type><name>ep</name></type></parameter>, <parameter><type><name>ern</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if (ep != NULL) *ep = (ern);}</cpp:value></cpp:define>

<function><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type>
<name>ucl_hash_iterate2</name> <parameter_list>(<parameter><decl><type><name>ucl_hash_t</name> <modifier>*</modifier></type><name>hashlin</name></decl></parameter>, <parameter><decl><type><name>ucl_hash_iter_t</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_hash_real_iter</name></name> <modifier>*</modifier></type><name>it</name> <init>= <expr><operator>(</operator>struct <name>ucl_hash_real_iter</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>iter</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hashlin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>UHI_SETERR</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>UHI_SETERR</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UHI_SETERR</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>cur</name></name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><name><name>it</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>UCL_FREE</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>iter</name> <operator>=</operator> <name>it</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_hash_iter_has_next</name> <parameter_list>(<parameter><decl><type><name>ucl_hash_t</name> <modifier>*</modifier></type><name>hashlin</name></decl></parameter>, <parameter><decl><type><name>ucl_hash_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_hash_real_iter</name></name> <modifier>*</modifier></type><name>it</name> <init>= <expr><operator>(</operator>struct <name>ucl_hash_real_iter</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>iter</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>cur</name></name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_hash_search</name> <parameter_list>(<parameter><decl><type><name>ucl_hash_t</name><modifier>*</modifier></type> <name>hashlin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name></type> <name>search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_hash_elt</name></name> <modifier>*</modifier></type><name>elt</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>search</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>search</name><operator>.</operator><name>keylen</name></name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hashlin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hashlin</name><operator>-&gt;</operator><name>caseless</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>kh_get</name> <argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>search</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <call><name>kh_end</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <operator>&amp;</operator><call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>elt</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>kh_get</name> <argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>search</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <call><name>kh_end</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <operator>&amp;</operator><call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>elt</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_hash_delete</name> <parameter_list>(<parameter><decl><type><name>ucl_hash_t</name><modifier>*</modifier></type> <name>hashlin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khiter_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_hash_elt</name></name> <modifier>*</modifier></type><name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hashlin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hashlin</name><operator>-&gt;</operator><name>caseless</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>kh_get</name> <argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <call><name>kh_end</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <operator>&amp;</operator><call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>elt</name><operator>-&gt;</operator><name>ar_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_del</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>ucl_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name></name></expr></argument>, <argument><expr><name><name>elt</name><operator>-&gt;</operator><name>ar_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_del</name> <argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <operator>&amp;</operator><call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elt</name><operator>-&gt;</operator><name>ar_idx</name></name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>kh_get</name> <argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <call><name>kh_end</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <operator>&amp;</operator><call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>elt</name><operator>-&gt;</operator><name>ar_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_del</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>ucl_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name></name></expr></argument>, <argument><expr><name><name>elt</name><operator>-&gt;</operator><name>ar_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_del</name> <argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <operator>&amp;</operator><call><name>kh_value</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elt</name><operator>-&gt;</operator><name>ar_idx</name></name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ucl_hash_reserve</name> <parameter_list>(<parameter><decl><type><name>ucl_hash_t</name> <modifier>*</modifier></type><name>hashlin</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hashlin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>m</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kv_resize_safe</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>ucl_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hashlin</name><operator>-&gt;</operator><name>caseless</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(
<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_resize</name> <argument_list>(<argument><expr><name>ucl_hash_caseless_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sz</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><name>h</name> <operator>=</operator> <operator>(</operator><call><name>khash_t</name><argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator>
<name><name>hashlin</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kh_resize</name> <argument_list>(<argument><expr><name>ucl_hash_node</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sz</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
<label><name>e0</name>:</label>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ucl_lc_cmp</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fp</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name></decl>;</decl_stmt>
}</block> <decl><name>cmp1</name></decl>, <decl><type ref="prev"/><name>cmp2</name></decl>;</union>
<decl_stmt><decl><type><name>size_t</name></type> <name>leftover</name> <init>= <expr><name>l</name> <operator>%</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>l</name> <operator>-</operator> <name>leftover</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>fp</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>c2</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>c3</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>c4</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp1</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp1</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp1</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c3</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp1</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c4</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>c2</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>c3</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>c4</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp2</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp2</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp2</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c3</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmp2</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>lc_map</name><index>[<expr><name>c4</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmp1</name><operator>.</operator><name>n</name></name> <operator>!=</operator> <name><name>cmp2</name><operator>.</operator><name>n</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>cmp1</name><operator>.</operator><name>n</name></name> <operator>-</operator> <name><name>cmp2</name><operator>.</operator><name>n</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name>leftover</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lc_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>lc_map</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>leftover</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ucl_hash_cmp_icase</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>oa</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>ucl_object_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>ucl_object_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oa</name><operator>-&gt;</operator><name>keylen</name></name> <operator>==</operator> <name><name>ob</name><operator>-&gt;</operator><name>keylen</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ucl_lc_cmp</name> <argument_list>(<argument><expr><name><name>oa</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>oa</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>oa</name><operator>-&gt;</operator><name>keylen</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>ob</name><operator>-&gt;</operator><name>keylen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ucl_hash_cmp_case_sens</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>oa</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>ucl_object_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>ucl_object_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oa</name><operator>-&gt;</operator><name>keylen</name></name> <operator>==</operator> <name><name>ob</name><operator>-&gt;</operator><name>keylen</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>oa</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>oa</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>oa</name><operator>-&gt;</operator><name>keylen</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>ob</name><operator>-&gt;</operator><name>keylen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_hash_sort</name> <parameter_list>(<parameter><decl><type><name>ucl_hash_t</name> <modifier>*</modifier></type><name>hashlin</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_object_keys_sort_flags</name></name></type> <name>fl</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fl</name> <operator>&amp;</operator> <name>UCL_SORT_KEYS_ICASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>qsort</name> <argument_list>(<argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ucl_object_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ucl_hash_cmp_icase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>qsort</name> <argument_list>(<argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>ucl_object_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ucl_hash_cmp_case_sens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fl</name> <operator>&amp;</operator> <name>UCL_SORT_KEYS_RECURSIVE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_object_type</name> <argument_list>(<argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_hash_sort</name> <argument_list>(<argument><expr><name><name>hashlin</name><operator>-&gt;</operator><name>ar</name><operator>.</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>ov</name></name></expr></argument>, <argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
