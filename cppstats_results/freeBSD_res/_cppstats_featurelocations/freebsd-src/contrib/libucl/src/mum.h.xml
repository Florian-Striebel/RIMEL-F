<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/src/mum.h">









































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MUM_HASH__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MUM_HASH__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>__int16</name></type> <name>uint16_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int32</name></type> <name>uint32_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MUM_USE_INT128</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>UINT_MAX</name> <operator>!=</operator> <name>ULONG_MAX</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_USE_INT128</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_USE_INT128</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">9</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>__GNUC__</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_FRESH_GCC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__llvm__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MUM_FRESH_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_ATTRIBUTE_UNUSED</name></cpp:macro> <cpp:value>__attribute__((unused))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_OPTIMIZE</name><parameter_list>(<parameter><type><name>opts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__optimize__ (opts)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_TARGET</name><parameter_list>(<parameter><type><name>opts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__target__ (opts)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_ATTRIBUTE_UNUSED</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_OPTIMIZE</name><parameter_list>(<parameter><type><name>opts</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_TARGET</name><parameter_list>(<parameter><type><name>opts</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>_mum_hash_step_prime</name> <init>= <expr><literal type="number">0x2e0bb864e9ea7df5ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>_mum_key_step_prime</name> <init>= <expr><literal type="number">0xcdb32970830fcaa1ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>_mum_block_start_prime</name> <init>= <expr><literal type="number">0xc42b5e2e6480b23bULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>_mum_unroll_prime</name> <init>= <expr><literal type="number">0x7b51ec3d22f7096fULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>_mum_tail_prime</name> <init>= <expr><literal type="number">0xaf47d47c99b1461bULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>_mum_finish_prime1</name> <init>= <expr><literal type="number">0xa9a7ae7ceff79f3fULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>_mum_finish_prime2</name> <init>= <expr><literal type="number">0xaf47d47c99b1461bULL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name><name>_mum_primes</name> <index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0X9ebdcae10d981691</literal></expr>, <expr><literal type="number">0X32b9b9b97a27ac7d</literal></expr>, <expr><literal type="number">0X29b5584d83d35bbd</literal></expr>, <expr><literal type="number">0X4b04e0e61401255f</literal></expr>,
<expr><literal type="number">0X25e8f7b1f1c9d027</literal></expr>, <expr><literal type="number">0X80d4c8c000f3e881</literal></expr>, <expr><literal type="number">0Xbd1255431904b9dd</literal></expr>, <expr><literal type="number">0X8a3bd4485eee6d81</literal></expr>,
<expr><literal type="number">0X3bc721b2aad05197</literal></expr>, <expr><literal type="number">0X71b1a19b907d6e33</literal></expr>, <expr><literal type="number">0X525e6c1084a8534b</literal></expr>, <expr><literal type="number">0X9e4c2cd340c1299f</literal></expr>,
<expr><literal type="number">0Xde3add92e94caa37</literal></expr>, <expr><literal type="number">0X7e14eadb1f65311d</literal></expr>, <expr><literal type="number">0X3f5aa40f89812853</literal></expr>, <expr><literal type="number">0X33b15a3b587d15c9</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>_mum</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MUM_USE_INT128</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>p</name></expr><operator>,</operator> <expr><name>hi</name></expr>;</expr_stmt>
<asm>asm ("umulh %0, %1, %2" : "=r" (hi) : "r" (v), "r" (p));</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__uint128_t</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>__uint128_t</name><operator>)</operator> <name>v</name> <operator>*</operator> <operator>(</operator><name>__uint128_t</name><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>r</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>hv</name> <init>= <expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></init></decl>, <decl><type ref="prev"/><name>hp</name> <init>= <expr><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>lv</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>v</name></expr></init></decl>, <decl><type ref="prev"/><name>lp</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rh</name> <init>= <expr><name>hv</name> <operator>*</operator> <name>hp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rm_0</name> <init>= <expr><name>hv</name> <operator>*</operator> <name>lp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rm_1</name> <init>= <expr><name>hp</name> <operator>*</operator> <name>lv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rl</name> <init>= <expr><name>lv</name> <operator>*</operator> <name>lp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>t</name> <operator>=</operator> <name>rl</name> <operator>+</operator> <operator>(</operator><name>rm_0</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MUM_TARGET_INDEPENDENT_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>t</name> <operator>&lt;</operator> <name>rl</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>t</name> <operator>+</operator> <operator>(</operator><name>rm_1</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MUM_TARGET_INDEPENDENT_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>carry</name> <operator>+=</operator> <name>lo</name> <operator>&lt;</operator> <name>t</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>rh</name> <operator>+</operator> <operator>(</operator><name>rm_0</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>rm_1</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<return>return <expr><name>hi</name> <operator>+</operator> <name>lo</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mum_bswap_32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_byteswap_uint32_t (x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mum_bswap_64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_byteswap_uint64_t (x)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libkern/OSByteOrder.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mum_bswap_32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OSSwapInt32 (x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mum_bswap_64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OSSwapInt64 (x)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mum_bswap32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_bswap32 (x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mum_bswap64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_bswap64 (x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;byteswap.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mum_bswap32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap32 (x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mum_bswap64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap64 (x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>_mum_le</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__BYTE_ORDER__</name> <operator>==</operator> <name>__ORDER_LITTLE_ENDIAN__</name> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MUM_TARGET_INDEPENDENT_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>v</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BYTE_ORDER__</name> <operator>==</operator> <name>__ORDER_BIG_ENDIAN__</name></expr></cpp:elif>
<return>return <expr><call><name>_mum_bswap64</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unknown endianness"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>_mum_le32</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__BYTE_ORDER__</name> <operator>==</operator> <name>__ORDER_LITTLE_ENDIAN__</name> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MUM_TARGET_INDEPENDENT_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>v</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BYTE_ORDER__</name> <operator>==</operator> <name>__ORDER_BIG_ENDIAN__</name></expr></cpp:elif>
<return>return <expr><call><name>_mum_bswap32</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unknown endianness"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MUM_UNROLL_FACTOR_POWER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__PPC64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MUM_TARGET_INDEPENDENT_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_UNROLL_FACTOR_POWER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MUM_TARGET_INDEPENDENT_HASH</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_UNROLL_FACTOR_POWER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_UNROLL_FACTOR_POWER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MUM_UNROLL_FACTOR_POWER</name> <operator>&lt;</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"too small unroll factor"</cpp:literal></cpp:error>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_MUM_UNROLL_FACTOR_POWER</name> <operator>&gt;</operator> <literal type="number">4</literal></expr></cpp:elif>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"We have not enough primes for such unroll factor"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_UNROLL_FACTOR</name></cpp:macro> <cpp:value>(1 &lt;&lt; _MUM_UNROLL_FACTOR_POWER)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>_MUM_OPTIMIZE</name><argument_list>(<argument><expr><literal type="string">"unroll-loops"</literal></expr></argument>)</argument_list>
<name>_mum_hash_aligned</name> <argument_list>(<argument><expr><name>uint64_t</name> <name>start</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>result</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>_mum_block_start_prime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>_MUM_UNROLL_FACTOR</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_MUM_UNROLL_FACTOR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>^=</operator> <call><name>_mum</name> <argument_list>(<argument><expr><call><name>_mum_le</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>str</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>_mum_primes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>_MUM_UNROLL_FACTOR</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>_MUM_UNROLL_FACTOR</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>_mum_unroll_prime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>^=</operator> <call><name>_mum</name> <argument_list>(<argument><expr><call><name>_mum_le</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>str</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>_mum_primes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <expr_stmt><expr><name>str</name> <operator>+=</operator> <name>n</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>u64</name> <operator>=</operator> <call><name>_mum_le32</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u64</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>str</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u64</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>str</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u64</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>str</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>^</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>u64</name></expr></argument>, <argument><expr><name>_mum_tail_prime</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>u64</name> <operator>=</operator> <call><name>_mum_le32</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u64</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>str</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u64</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>str</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>^</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>u64</name></expr></argument>, <argument><expr><name>_mum_tail_prime</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>u64</name> <operator>=</operator> <call><name>_mum_le32</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>u64</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>str</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>^</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>u64</name></expr></argument>, <argument><expr><name>_mum_tail_prime</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>u64</name> <operator>=</operator> <call><name>_mum_le32</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>^</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>u64</name></expr></argument>, <argument><expr><name>_mum_tail_prime</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>u64</name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>u64</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>u64</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>^</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>u64</name></expr></argument>, <argument><expr><name>_mum_tail_prime</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>u64</name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>u64</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>^</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>u64</name></expr></argument>, <argument><expr><name>_mum_tail_prime</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>u64</name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>result</name> <operator>^</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>u64</name></expr></argument>, <argument><expr><name>_mum_tail_prime</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>_mum_final</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>_mum_finish_prime1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>_mum_finish_prime2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MUM_FRESH_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>_MUM_TARGET</name><argument_list>(<argument><expr><literal type="string">"arch=haswell"</literal></expr></argument>)</argument_list>
<name>_mum_hash_avx2</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator> <name>key</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>seed</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mum_final</name> <argument_list>(<argument><expr><call><name>_mum_hash_aligned</name> <argument_list>(<argument><expr><name>seed</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MUM_UNALIGNED_ACCESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PPC64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__m32c__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>cris</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CR16__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__vax__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__m68k__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_UNALIGNED_ACCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_UNALIGNED_ACCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MUM_BLOCK_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUM_BLOCK_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MUM_BLOCK_LEN</name> <operator>&lt;</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"too small block length"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_MUM_TARGET</name><argument_list>(<argument><expr><literal type="string">"inline-all-stringops"</literal></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>_mum_hash_default</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>seed</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>buf</name><index>[<expr><name>_MUM_BLOCK_LEN</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>seed</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>_MUM_UNALIGNED_ACCESS</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>str</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_mum_hash_aligned</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_len</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&lt;</operator> <name>_MUM_BLOCK_LEN</name></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name>_MUM_BLOCK_LEN</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_mum_hash_aligned</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>block_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>block_len</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>_mum_final</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>_mum_next_factor</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name>start</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>start</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>mum_hash_randomize</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>srand</name> <argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_mum_hash_step_prime</name> <operator>=</operator> <call><name>_mum_next_factor</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_mum_key_step_prime</name> <operator>=</operator> <call><name>_mum_next_factor</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_mum_finish_prime1</name> <operator>=</operator> <call><name>_mum_next_factor</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_mum_finish_prime2</name> <operator>=</operator> <call><name>_mum_next_factor</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_mum_block_start_prime</name> <operator>=</operator> <call><name>_mum_next_factor</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_mum_unroll_prime</name> <operator>=</operator> <call><name>_mum_next_factor</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_mum_tail_prime</name> <operator>=</operator> <call><name>_mum_next_factor</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>_mum_primes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>_mum_primes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>_mum_next_factor</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>mum_hash_init</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>seed</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>mum_hash_step</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_mum</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>_mum_hash_step_prime</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>_mum</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>_mum_key_step_prime</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>mum_hash_finish</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_mum_final</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>mum_hash64</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>mum_hash_finish</name> <argument_list>(<argument><expr><call><name>mum_hash_step</name> <argument_list>(<argument><expr><call><name>mum_hash_init</name> <argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>mum_hash</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MUM_FRESH_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>avx2_support</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>avx2_support</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_mum_hash_avx2</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator> <name>avx2_support</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_cpu_init</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avx2_support</name> <operator>=</operator> <ternary><condition><expr><call><name>__builtin_cpu_supports</name> <argument_list>(<argument><expr><literal type="string">"avx2"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avx2_support</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>_mum_hash_avx2</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>_mum_hash_default</name> <argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
