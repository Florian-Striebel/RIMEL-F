<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/src/ucl_emitter_streamline.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_chartable.h"</cpp:file></cpp:include>

<struct>struct <name>ucl_emitter_streamline_stack</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>is_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>empty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_streamline_stack</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ucl_emitter_context_streamline</name> <block>{


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_operations</name></name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>comments</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_streamline_stack</name></name> <modifier>*</modifier></type><name>containers</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_STREAMLINE</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(struct ucl_emitter_context_streamline *)(ctx)</cpp:value></cpp:define>

<function><type><name><name>struct</name> <name>ucl_emitter_context</name></name><modifier>*</modifier></type>
<name>ucl_object_emit_streamline_new</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_emitter</name></name></type> <name>emit_type</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_context_streamline</name></name> <modifier>*</modifier></type><name>sctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>ucl_emit_get_standard_context</name> <argument_list>(<argument><expr><name>emit_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sctx</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>sctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>emitter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ucl_object_emit_streamline_start_container</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>ucl_emitter_context</name> <operator>*</operator><operator>)</operator><name>sctx</name></expr></argument>,
<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator>struct <name>ucl_emitter_context</name> <operator>*</operator><operator>)</operator><name>sctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_object_emit_streamline_start_container</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_context_streamline</name></name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>TO_STREAMLINE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_streamline_stack</name></name> <modifier>*</modifier></type><name>st</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>print_key</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>top</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>containers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>top</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>top</name><operator>-&gt;</operator><name>is_array</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>print_key</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>empty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>is_array</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>sctx</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>ucl_emitter_start_array</name></name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>print_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>is_array</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>sctx</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>ucl_emitter_start_object</name></name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>print_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>LL_PREPEND</name> <argument_list>(<argument><expr><name><name>sctx</name><operator>-&gt;</operator><name>containers</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_object_emit_streamline_add_object</name> <parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_context_streamline</name></name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>TO_STREAMLINE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_array</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>is_first</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>containers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>containers</name><operator>-&gt;</operator><name>is_array</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_array</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>containers</name><operator>-&gt;</operator><name>empty</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_first</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>containers</name><operator>-&gt;</operator><name>empty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>sctx</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>ucl_emitter_write_elt</name></name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>is_first</name></expr></argument>, <argument><expr><operator>!</operator><name>is_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_object_emit_streamline_end_container</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_context_streamline</name></name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>TO_STREAMLINE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_streamline_stack</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>containers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>containers</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>is_array</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>sctx</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>ucl_emitter_end_array</name></name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>sctx</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>ucl_emitter_end_object</name></name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>containers</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_object_emit_streamline_finish</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_context_streamline</name></name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>TO_STREAMLINE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>containers</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_object_emit_streamline_end_container</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
