<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/src/ucl_msgpack.c">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENDIAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endian.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_ENDIAN_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/endian.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MACHINE_ENDIAN_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/endian.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__BIG_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__LITTLE_ENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LITTLE_ENDIAN__</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__BIG_ENDIAN</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__BIG_ENDIAN__</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_WIN32</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LITTLE_ENDIAN__</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP_LE_BE16</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint16_t) ( (uint16_t) ((uint16_t) (val) &gt;&gt; 8) | (uint16_t) ((uint16_t) (val) &lt;&lt; 8)))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__GNUC_MINOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP_LE_BE32</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)__builtin_bswap32 ((uint32_t)(val)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP_LE_BE64</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)__builtin_bswap64 ((uint64_t)(val)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP_LE_BE32</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)( (((uint32_t)(val) &amp; (uint32_t)0x000000ffU) &lt;&lt; 24) | (((uint32_t)(val) &amp; (uint32_t)0x0000ff00U) &lt;&lt; 8) | (((uint32_t)(val) &amp; (uint32_t)0x00ff0000U) &gt;&gt; 8) | (((uint32_t)(val) &amp; (uint32_t)0xff000000U) &gt;&gt; 24)))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP_LE_BE64</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint64_t)( (((uint64_t)(val) &amp; (uint64_t)(0x00000000000000ffULL)) &lt;&lt; 56) | (((uint64_t)(val) &amp; (uint64_t)(0x000000000000ff00ULL)) &lt;&lt; 40) | (((uint64_t)(val) &amp; (uint64_t)(0x0000000000ff0000ULL)) &lt;&lt; 24) | (((uint64_t)(val) &amp; (uint64_t) (0x00000000ff000000ULL)) &lt;&lt; 8) | (((uint64_t)(val) &amp; (uint64_t)(0x000000ff00000000ULL)) &gt;&gt; 8) | (((uint64_t)(val) &amp; (uint64_t)(0x0000ff0000000000ULL)) &gt;&gt; 24) | (((uint64_t)(val) &amp; (uint64_t)(0x00ff000000000000ULL)) &gt;&gt; 40) | (((uint64_t)(val) &amp; (uint64_t)(0xff00000000000000ULL)) &gt;&gt; 56)))</cpp:value></cpp:define>
















<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_BE16</name></cpp:macro> <cpp:value>SWAP_LE_BE16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_BE32</name></cpp:macro> <cpp:value>SWAP_LE_BE32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_BE64</name></cpp:macro> <cpp:value>SWAP_LE_BE64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_BE16</name></cpp:macro> <cpp:value>SWAP_LE_BE16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_BE32</name></cpp:macro> <cpp:value>SWAP_LE_BE32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_BE64</name></cpp:macro> <cpp:value>SWAP_LE_BE64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_BE16</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint16_t)(val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_BE32</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint32_t)(val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_BE64</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint64_t)(val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_BE16</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint16_t)(val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_BE32</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint32_t)(val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_BE64</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint64_t)(val)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>ucl_emitter_print_int_msgpack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>mask_positive</name> <init>= <expr><literal type="number">0x7f</literal></expr></init></decl>, <decl><type ref="prev"/><name>mask_negative</name> <init>= <expr><literal type="number">0xe0</literal></expr></init></decl>,
<decl><type ref="prev"/><name>uint8_ch</name> <init>= <expr><literal type="number">0xcc</literal></expr></init></decl>, <decl><type ref="prev"/><name>uint16_ch</name> <init>= <expr><literal type="number">0xcd</literal></expr></init></decl>, <decl><type ref="prev"/><name>uint32_ch</name> <init>= <expr><literal type="number">0xce</literal></expr></init></decl>, <decl><type ref="prev"/><name>uint64_ch</name> <init>= <expr><literal type="number">0xcf</literal></expr></init></decl>,
<decl><type ref="prev"/><name>int8_ch</name> <init>= <expr><literal type="number">0xd0</literal></expr></init></decl>, <decl><type ref="prev"/><name>int16_ch</name> <init>= <expr><literal type="number">0xd1</literal></expr></init></decl>, <decl><type ref="prev"/><name>int32_ch</name> <init>= <expr><literal type="number">0xd2</literal></expr></init></decl>, <decl><type ref="prev"/><name>int64_ch</name> <init>= <expr><literal type="number">0xd3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mask_positive</name> <operator>&amp;</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <name>UINT8_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uint8_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name> <init>= <expr><call><name>TO_BE16</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uint16_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><call><name>TO_BE32</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uint32_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><call><name>TO_BE64</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uint64_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>uval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>uval</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>^</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mask_negative</name> <operator>|</operator> <name>uval</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>uval</name> <operator>&lt;=</operator> <name>INT8_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>val</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>int8_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>uval</name> <operator>&lt;=</operator> <name>INT16_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name> <init>= <expr><call><name>TO_BE16</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>int16_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>uval</name> <operator>&lt;=</operator> <name>INT32_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><call><name>TO_BE32</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>int32_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><call><name>TO_BE64</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>int64_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_emitter_print_double_msgpack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>dbl_ch</name> <init>= <expr><literal type="number">0xcb</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>u</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>=</operator> <call><name>TO_BE64</name> <argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dbl_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>u</name><operator>.</operator><name>d</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_emitter_print_bool_msgpack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>true_ch</name> <init>= <expr><literal type="number">0xc3</literal></expr></init></decl>, <decl><type ref="prev"/><name>false_ch</name> <init>= <expr><literal type="number">0xc2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><name>true_ch</name></expr> </then><else>: <expr><name>false_ch</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_emitter_print_string_msgpack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>fix_mask</name> <init>= <expr><literal type="number">0xA0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l8_ch</name> <init>= <expr><literal type="number">0xd9</literal></expr></init></decl>, <decl><type ref="prev"/><name>l16_ch</name> <init>= <expr><literal type="number">0xda</literal></expr></init></decl>, <decl><type ref="prev"/><name>l32_ch</name> <init>= <expr><literal type="number">0xdb</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>blen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0x1F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>|</operator> <name>fix_mask</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l8_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bl</name> <init>= <expr><call><name>TO_BE16</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l16_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bl</name> <init>= <expr><call><name>TO_BE32</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l32_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_emitter_print_binary_string_msgpack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>l8_ch</name> <init>= <expr><literal type="number">0xc4</literal></expr></init></decl>, <decl><type ref="prev"/><name>l16_ch</name> <init>= <expr><literal type="number">0xc5</literal></expr></init></decl>, <decl><type ref="prev"/><name>l32_ch</name> <init>= <expr><literal type="number">0xc6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>blen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l8_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bl</name> <init>= <expr><call><name>TO_BE16</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l16_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bl</name> <init>= <expr><call><name>TO_BE32</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l32_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_emitter_print_null_msgpack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>nil</name> <init>= <expr><literal type="number">0xc0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><name>nil</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_emitter_print_key_msgpack</name> <parameter_list>(<parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>print_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_emitter_print_string_msgpack</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_emitter_print_array_msgpack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>fix_mask</name> <init>= <expr><literal type="number">0x90</literal></expr></init></decl>, <decl><type ref="prev"/><name>l16_ch</name> <init>= <expr><literal type="number">0xdc</literal></expr></init></decl>, <decl><type ref="prev"/><name>l32_ch</name> <init>= <expr><literal type="number">0xdd</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>blen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>|</operator> <name>fix_mask</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bl</name> <init>= <expr><call><name>TO_BE16</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l16_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bl</name> <init>= <expr><call><name>TO_BE32</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l32_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_emitter_print_object_msgpack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>fix_mask</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>, <decl><type ref="prev"/><name>l16_ch</name> <init>= <expr><literal type="number">0xde</literal></expr></init></decl>, <decl><type ref="prev"/><name>l32_ch</name> <init>= <expr><literal type="number">0xdf</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>blen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>|</operator> <name>fix_mask</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bl</name> <init>= <expr><call><name>TO_BE16</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l16_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bl</name> <init>= <expr><call><name>TO_BE32</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blen</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l32_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<enum>enum <name>ucl_msgpack_format</name> <block>{
<decl><name>msgpack_positive_fixint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>msgpack_fixmap</name></decl>,
<decl><name>msgpack_fixarray</name></decl>,
<decl><name>msgpack_fixstr</name></decl>,
<decl><name>msgpack_nil</name></decl>,
<decl><name>msgpack_false</name></decl>,
<decl><name>msgpack_true</name></decl>,
<decl><name>msgpack_bin8</name></decl>,
<decl><name>msgpack_bin16</name></decl>,
<decl><name>msgpack_bin32</name></decl>,
<decl><name>msgpack_ext8</name></decl>,
<decl><name>msgpack_ext16</name></decl>,
<decl><name>msgpack_ext32</name></decl>,
<decl><name>msgpack_float32</name></decl>,
<decl><name>msgpack_float64</name></decl>,
<decl><name>msgpack_uint8</name></decl>,
<decl><name>msgpack_uint16</name></decl>,
<decl><name>msgpack_uint32</name></decl>,
<decl><name>msgpack_uint64</name></decl>,
<decl><name>msgpack_int8</name></decl>,
<decl><name>msgpack_int16</name></decl>,
<decl><name>msgpack_int32</name></decl>,
<decl><name>msgpack_int64</name></decl>,
<decl><name>msgpack_fixext1</name></decl>,
<decl><name>msgpack_fixext2</name></decl>,
<decl><name>msgpack_fixext4</name></decl>,
<decl><name>msgpack_fixext8</name></decl>,
<decl><name>msgpack_fixext16</name></decl>,
<decl><name>msgpack_str8</name></decl>,
<decl><name>msgpack_str16</name></decl>,
<decl><name>msgpack_str32</name></decl>,
<decl><name>msgpack_array16</name></decl>,
<decl><name>msgpack_array32</name></decl>,
<decl><name>msgpack_map16</name></decl>,
<decl><name>msgpack_map32</name></decl>,
<decl><name>msgpack_negative_fixint</name></decl>,
<decl><name>msgpack_invalid</name></decl>
}</block>;</enum>

<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>ucl_msgpack_parse_function</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ucl_msgpack_parse_map</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ucl_msgpack_parse_array</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ucl_msgpack_parse_string</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ucl_msgpack_parse_int</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ucl_msgpack_parse_float</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ucl_msgpack_parse_bool</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ucl_msgpack_parse_null</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ucl_msgpack_parse_ignore</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSGPACK_FLAG_FIXED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSGPACK_FLAG_CONTAINER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSGPACK_FLAG_TYPEVALUE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSGPACK_FLAG_EXT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSGPACK_FLAG_ASSOC</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSGPACK_FLAG_KEY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>




<struct>struct <name>ucl_msgpack_parser</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>prefixlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_msgpack_parse_function</name></type> <name>func</name></decl>;</decl_stmt>
}</block> <decl><name><name>parsers</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><literal type="number">0xa0</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><name>msgpack_fixstr</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name><operator>|</operator><name>MSGPACK_FLAG_KEY</name></expr>,
<expr><name>ucl_msgpack_parse_string</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0x0</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><name>msgpack_positive_fixint</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name><operator>|</operator><name>MSGPACK_FLAG_TYPEVALUE</name></expr>,
<expr><name>ucl_msgpack_parse_int</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xe0</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><name>msgpack_negative_fixint</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name><operator>|</operator><name>MSGPACK_FLAG_TYPEVALUE</name></expr>,
<expr><name>ucl_msgpack_parse_int</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0x80</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><name>msgpack_fixmap</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name><operator>|</operator><name>MSGPACK_FLAG_CONTAINER</name><operator>|</operator><name>MSGPACK_FLAG_ASSOC</name></expr>,
<expr><name>ucl_msgpack_parse_map</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0x90</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><name>msgpack_fixarray</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name><operator>|</operator><name>MSGPACK_FLAG_CONTAINER</name></expr>,
<expr><name>ucl_msgpack_parse_array</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd9</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_str8</name></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><name>MSGPACK_FLAG_KEY</name></expr>,
<expr><name>ucl_msgpack_parse_string</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xc4</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_bin8</name></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><name>MSGPACK_FLAG_KEY</name></expr>,
<expr><name>ucl_msgpack_parse_string</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xcf</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_uint64</name></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name></expr>,
<expr><name>ucl_msgpack_parse_int</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd3</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_int64</name></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name></expr>,
<expr><name>ucl_msgpack_parse_int</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xce</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_uint32</name></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name></expr>,
<expr><name>ucl_msgpack_parse_int</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd2</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_int32</name></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name></expr>,
<expr><name>ucl_msgpack_parse_int</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xcb</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_float64</name></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name></expr>,
<expr><name>ucl_msgpack_parse_float</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xca</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_float32</name></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name></expr>,
<expr><name>ucl_msgpack_parse_float</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xc2</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_false</name></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name> <operator>|</operator> <name>MSGPACK_FLAG_TYPEVALUE</name></expr>,
<expr><name>ucl_msgpack_parse_bool</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xc3</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_true</name></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name> <operator>|</operator> <name>MSGPACK_FLAG_TYPEVALUE</name></expr>,
<expr><name>ucl_msgpack_parse_bool</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xcc</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_uint8</name></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name></expr>,
<expr><name>ucl_msgpack_parse_int</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xcd</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_uint16</name></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name></expr>,
<expr><name>ucl_msgpack_parse_int</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd0</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_int8</name></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name></expr>,
<expr><name>ucl_msgpack_parse_int</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd1</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_int16</name></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name></expr>,
<expr><name>ucl_msgpack_parse_int</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xc0</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_nil</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name> <operator>|</operator> <name>MSGPACK_FLAG_TYPEVALUE</name></expr>,
<expr><name>ucl_msgpack_parse_null</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xda</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_str16</name></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><name>MSGPACK_FLAG_KEY</name></expr>,
<expr><name>ucl_msgpack_parse_string</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xdb</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_str32</name></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><name>MSGPACK_FLAG_KEY</name></expr>,
<expr><name>ucl_msgpack_parse_string</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xc5</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_bin16</name></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><name>MSGPACK_FLAG_KEY</name></expr>,
<expr><name>ucl_msgpack_parse_string</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xc6</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_bin32</name></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><name>MSGPACK_FLAG_KEY</name></expr>,
<expr><name>ucl_msgpack_parse_string</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xdc</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_array16</name></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><name>MSGPACK_FLAG_CONTAINER</name></expr>,
<expr><name>ucl_msgpack_parse_array</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xdd</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_array32</name></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><name>MSGPACK_FLAG_CONTAINER</name></expr>,
<expr><name>ucl_msgpack_parse_array</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xde</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_map16</name></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><name>MSGPACK_FLAG_CONTAINER</name><operator>|</operator><name>MSGPACK_FLAG_ASSOC</name></expr>,
<expr><name>ucl_msgpack_parse_map</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xdf</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_map32</name></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><name>MSGPACK_FLAG_CONTAINER</name><operator>|</operator><name>MSGPACK_FLAG_ASSOC</name></expr>,
<expr><name>ucl_msgpack_parse_map</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xc7</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_ext8</name></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><name>MSGPACK_FLAG_EXT</name></expr>,
<expr><name>ucl_msgpack_parse_ignore</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xc8</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_ext16</name></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><name>MSGPACK_FLAG_EXT</name></expr>,
<expr><name>ucl_msgpack_parse_ignore</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xc9</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_ext32</name></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><name>MSGPACK_FLAG_EXT</name></expr>,
<expr><name>ucl_msgpack_parse_ignore</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd4</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_fixext1</name></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name> <operator>|</operator> <name>MSGPACK_FLAG_EXT</name></expr>,
<expr><name>ucl_msgpack_parse_ignore</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd5</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_fixext2</name></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name> <operator>|</operator> <name>MSGPACK_FLAG_EXT</name></expr>,
<expr><name>ucl_msgpack_parse_ignore</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd6</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_fixext4</name></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name> <operator>|</operator> <name>MSGPACK_FLAG_EXT</name></expr>,
<expr><name>ucl_msgpack_parse_ignore</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd7</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_fixext8</name></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name> <operator>|</operator> <name>MSGPACK_FLAG_EXT</name></expr>,
<expr><name>ucl_msgpack_parse_ignore</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xd8</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><name>msgpack_fixext16</name></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><name>MSGPACK_FLAG_FIXED</name> <operator>|</operator> <name>MSGPACK_FLAG_EXT</name></expr>,
<expr><name>ucl_msgpack_parse_ignore</name></expr>
}</block></expr>
}</block></expr></init></decl>;</struct>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MSGPACK_DEBUG_PARSER</name></cpp:undef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ucl_msgpack_parser</name></name> <modifier>*</modifier></type>
<name>ucl_msgpack_get_parser_from_type</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>parsers</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>parsers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>CHAR_BIT</name> <operator>-</operator> <name><name>parsers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prefixlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>parsers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prefix</name> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>t</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>parsers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type>
<name>ucl_msgpack_get_container</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_msgpack_parser</name></name> <modifier>*</modifier></type><name>obj_parser</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>obj_parser</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj_parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MSGPACK_FLAG_CONTAINER</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"no memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>stack</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"no memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name>stack</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSGPACK_DEBUG_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>stack</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>stack</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stack</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s -&gt; %d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>obj_parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MSGPACK_FLAG_ASSOC</name></expr> ?</condition><then> <expr><literal type="string">"object"</literal></expr> </then><else>: <expr><literal type="string">"array"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"bad top level object for msgpack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_msgpack_is_container_finished</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>container</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>container</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_msgpack_insert_object</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl>;</decl_stmt>

<expr_stmt><expr><name>container</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>container</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>container</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>container</name><operator>-&gt;</operator><name>obj</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>container</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name><name>container</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>container</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>keylen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"cannot insert object with no key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>keylen</name></name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_ZEROCOPY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_copy_key_trash</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_parser_process_object_element</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"bad container type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>container</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type>
<name>ucl_msgpack_get_next_container</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSGPACK_DEBUG_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"-%s -&gt; %d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name></expr> ?</condition><then> <expr><literal type="string">"object"</literal></expr> </then><else>: <expr><literal type="string">"array"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>ucl_msgpack_get_next_container</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>obj</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cur</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONSUME_RET</name></cpp:macro> <cpp:value>do { if (ret != -1) { p += ret; remain -= ret; obj_parser = NULL; assert (remain &gt;= 0); } else { ucl_create_err (&amp;parser-&gt;err, "cannot parse type %d of len %u", (int)obj_parser-&gt;fmt, (unsigned)len); return false; } } while(0)</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_NEXT_STATE</name></cpp:macro> <cpp:value>do { container = ucl_msgpack_get_next_container (parser); if (container == NULL) { ucl_create_err (&amp;parser-&gt;err, "empty container"); return false; } next_state = container-&gt;obj-&gt;type == UCL_OBJECT ? read_assoc_key : read_array_value; } while(0)</cpp:value></cpp:define>










<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_msgpack_consume</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl>;</decl_stmt>
<enum>enum <name>e_msgpack_parser_state</name> <block>{
<decl><name>read_type</name></decl>,
<decl><name>start_assoc</name></decl>,
<decl><name>start_array</name></decl>,
<decl><name>read_assoc_key</name></decl>,
<decl><name>read_assoc_value</name></decl>,
<decl><name>finish_assoc_value</name></decl>,
<decl><name>read_array_value</name></decl>,
<decl><name>finish_array_value</name></decl>,
<decl><name>error_state</name></decl>
}</block> <decl><name>state</name> <init>= <expr><name>read_type</name></expr></init></decl>, <decl><type ref="prev"/><name>next_state</name> <init>= <expr><name>error_state</name></expr></init></decl>;</enum>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_msgpack_parser</name></name> <modifier>*</modifier></type><name>obj_parser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>remain</name></decl>, <decl><type ref="prev"/><name>keylen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSGPACK_DEBUG_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>e_msgpack_parser_state</name></name></type> <name><name>hist</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>begin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>remain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>remain</name></expr>;</expr_stmt>


<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSGPACK_DEBUG_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>hist</name><index>[<expr><name>i</name><operator>++</operator> <operator>%</operator> <literal type="number">256</literal></expr>]</index></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>read_type</name></expr>:</case>
<expr_stmt><expr><name>obj_parser</name> <operator>=</operator> <call><name>ucl_msgpack_get_parser_from_type</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>obj_parser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"unknown msgpack format: %x"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj_parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MSGPACK_FLAG_FIXED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj_parser</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <operator>~</operator><name><name>obj_parser</name><operator>-&gt;</operator><name>prefix</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&lt;</operator> <name><name>obj_parser</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"not enough data remain to "</literal>
<literal type="string">"read object's length: %u remain, %u needed"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>remain</name></expr></argument>, <argument><expr><name><name>obj_parser</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>obj_parser</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obj_parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MSGPACK_FLAG_TYPEVALUE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>remain</name> <operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&lt;</operator> <name><name>obj_parser</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"not enough data remain to "</literal>
<literal type="string">"read object's length: %u remain, %u needed"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>remain</name></expr></argument>, <argument><expr><name><name>obj_parser</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>obj_parser</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FROM_BE16</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FROM_BE32</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FROM_BE64</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"invalid length of the length field: %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>obj_parser</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>obj_parser</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> <operator>-=</operator> <name><name>obj_parser</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj_parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MSGPACK_FLAG_ASSOC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>start_assoc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>obj_parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MSGPACK_FLAG_CONTAINER</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>start_array</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>next_state</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<break>break;</break>
<case>case <expr><name>start_assoc</name></expr>:</case>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>UCL_OBJECT</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ucl_msgpack_insert_object</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>container</name> <operator>=</operator> <call><name>ucl_msgpack_get_container</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>obj_parser</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>obj_parser</name><operator>-&gt;</operator><name>func</name></name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>obj_parser</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CONSUME_RET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>read_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>read_assoc_key</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>finish_assoc_value</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>start_array</name></expr>:</case>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>UCL_ARRAY</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ucl_msgpack_insert_object</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>container</name> <operator>=</operator> <call><name>ucl_msgpack_get_container</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>obj_parser</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>obj_parser</name><operator>-&gt;</operator><name>func</name></name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>obj_parser</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CONSUME_RET</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>read_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>read_array_value</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>finish_array_value</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>read_array_value</name></expr>:</case>




<expr_stmt><expr><name>container</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">"read assoc value when no container represented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>obj_parser</name><operator>-&gt;</operator><name>func</name></name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>obj_parser</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CONSUME_RET</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_msgpack_insert_object</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ucl_msgpack_is_container_finished</name> <argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>finish_array_value</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>read_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>read_array_value</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>read_assoc_key</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obj_parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MSGPACK_FLAG_KEY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"bad type for key: %u, expected "</literal>
<literal type="string">"string"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>obj_parser</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;</operator> <name>remain</name> <operator>||</operator> <name>keylen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"too long or empty key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>read_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>read_assoc_value</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>read_assoc_value</name></expr>:</case>




<expr_stmt><expr><name>container</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">"read assoc value when no container represented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>obj_parser</name><operator>-&gt;</operator><name>func</name></name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>obj_parser</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CONSUME_RET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_msgpack_insert_object</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ucl_msgpack_is_container_finished</name> <argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>finish_assoc_value</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>read_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>read_assoc_key</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>finish_array_value</name></expr>:</case>
<case>case <expr><name>finish_assoc_value</name></expr>:</case>
<expr_stmt><expr><name>GET_NEXT_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>read_type</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>error_state</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"invalid state machine state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>


<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>start_array</name></expr>:</case>
<case>case <expr><name>start_assoc</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">"invalid non-empty container at the end; len=%zu"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(
<argument><expr><ternary><condition><expr><name>state</name> <operator>==</operator> <name>start_array</name></expr> ?</condition><then> <expr><name>UCL_ARRAY</name></expr> </then><else>: <expr><name>UCL_OBJECT</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">"read assoc value when no container represented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_msgpack_insert_object</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>container</name> <operator>=</operator> <call><name>ucl_msgpack_get_container</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>obj_parser</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>obj_parser</name><operator>-&gt;</operator><name>func</name></name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>obj_parser</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>read_array_value</name></expr>:</case>
<case>case <expr><name>read_assoc_value</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"unfinished value at the end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>container</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">"read assoc value when no container represented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>obj_parser</name><operator>-&gt;</operator><name>func</name></name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>obj_parser</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CONSUME_RET</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_msgpack_insert_object</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>finish_array_value</name></expr>:</case>
<case>case <expr><name>finish_assoc_value</name></expr>:</case>
<case>case <expr><name>read_type</name></expr>:</case>

<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"invalid state machine finishing state: %d"</literal></expr></argument>,
<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>ucl_msgpack_get_next_container</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"incomplete container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_parse_msgpack</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>container</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>parser</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>begin</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>remain</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>begin</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>container</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">0xdc</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="number">0xdf</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"bad top level object for msgpack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_msgpack_consume</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ucl_msgpack_parse_map</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>container</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ucl_msgpack_parse_array</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>container</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ucl_msgpack_parse_string</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>remain</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>UCL_STRING</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>&gt;=</operator> <name>msgpack_bin8</name> <operator>&amp;&amp;</operator> <name>fmt</name> <operator>&lt;=</operator> <name>msgpack_bin32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_BINARY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_ZEROCOPY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_OBJECT_BINARY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>trash_stack</name><index>[<expr><name>UCL_TRASH_VALUE</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>trash_stack</name><index>[<expr><name>UCL_TRASH_VALUE</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>trash_stack</name><index>[<expr><name>UCL_TRASH_VALUE</name></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_copy_value_trash</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ucl_msgpack_parse_int</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>iv8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>iv16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>iv32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>iv64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>uiv16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>uiv32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>uiv64</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>remain</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>UCL_INT</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>msgpack_positive_fixint</name></expr>:</case>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pos</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_negative_fixint</name></expr>:</case>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name>pos</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_uint8</name></expr>:</case>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_int8</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>iv8</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iv8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>iv8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_int16</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>iv16</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iv16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iv16</name> <operator>=</operator> <call><name>FROM_BE16</name> <argument_list>(<argument><expr><name>iv16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>iv16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_uint16</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>uiv16</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uiv16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uiv16</name> <operator>=</operator> <call><name>FROM_BE16</name> <argument_list>(<argument><expr><name>uiv16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>uiv16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_int32</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>iv32</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iv32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iv32</name> <operator>=</operator> <call><name>FROM_BE32</name> <argument_list>(<argument><expr><name>iv32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>iv32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_uint32</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uiv32</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uiv32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uiv32</name> <operator>=</operator> <call><name>FROM_BE32</name><argument_list>(<argument><expr><name>uiv32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>uiv32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_int64</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>iv64</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>iv64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iv64</name> <operator>=</operator> <call><name>FROM_BE64</name> <argument_list>(<argument><expr><name>iv64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>iv64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_uint64</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uiv64</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uiv64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uiv64</name> <operator>=</operator> <call><name>FROM_BE64</name><argument_list>(<argument><expr><name>uiv64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>uiv64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ucl_msgpack_parse_float</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
}</block> <decl><name>d</name></decl>;</union>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>uiv64</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>remain</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>UCL_FLOAT</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>msgpack_float32</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>i</name></name> <operator>=</operator> <call><name>FROM_BE32</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>dv</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_float64</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uiv64</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uiv64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uiv64</name> <operator>=</operator> <call><name>FROM_BE64</name><argument_list>(<argument><expr><name>uiv64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>uiv64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ucl_msgpack_parse_bool</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>remain</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>UCL_BOOLEAN</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>msgpack_true</name></expr>:</case>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_false</name></expr>:</case>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ucl_msgpack_parse_null</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>remain</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>UCL_NULL</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ucl_msgpack_parse_ignore</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_msgpack_format</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>remain</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>msgpack_fixext1</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_fixext2</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_fixext4</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_fixext8</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_fixext16</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>msgpack_ext8</name></expr>:</case>
<case>case <expr><name>msgpack_ext16</name></expr>:</case>
<case>case <expr><name>msgpack_ext32</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"bad type: %x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
</unit>
