<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/src/ucl_parser.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_chartable.h"</cpp:file></cpp:include>






<struct>struct <name>ucl_parser_saved_state</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
}</block>;</struct>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ucl_chunk_skipc</name><parameter_list>(<parameter><type><name>chunk</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (*(p) == '\n') { (chunk)-&gt;line ++; (chunk)-&gt;column = 0; } else (chunk)-&gt;column ++; (p++); (chunk)-&gt;pos ++; (chunk)-&gt;remain --; } while (0)</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ucl_set_err</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>UT_string</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt_string</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>cur_file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>cur_file</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <literal type="string">"&lt;unknown&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isgraph</name> <argument_list>(<argument><expr><operator>*</operator><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fmt_string</name> <operator>=</operator> <literal type="string">"error while parsing %s: "</literal>
<literal type="string">"line: %d, column: %d - '%s', character: '%c'"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>fmt_string</name> <operator>=</operator> <literal type="string">"error while parsing %s: "</literal>
<literal type="string">"line: %d, column: %d - '%s', character: '0x%02x'"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>fmt_string</name></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>column</name></name></expr></argument>,
<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"error while parsing %s: at the end of chunk: %s"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>err_code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_save_comment</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>nobj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>begin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nobj</name> <operator>=</operator> <call><name>ucl_object_fromstring_common</name> <argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>last_comment</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DL_APPEND</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>last_comment</name></name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>last_comment</name></name> <operator>=</operator> <name>nobj</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_attach_comment</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>before</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>last_comment</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_object_insert_key</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>comments</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>last_comment</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>before</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>last_comment</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_INHERITED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>last_comment</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_skip_comments</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>beg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>comments_nested</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>quoted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<label><name>start</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>UCL_STATE_SCOMMENT</name> <operator>&amp;&amp;</operator>
<name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>UCL_STATE_MCOMMENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_SAVE_COMMENTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_save_comment</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>start</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>comments_nested</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quoted</name> <operator>=</operator> <operator>!</operator><name>quoted</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quoted</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>comments_nested</name> <operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comments_nested</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_SAVE_COMMENTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_save_comment</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>beg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>comments_nested</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>comments_nested</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ENESTED</name></expr></argument>,
<argument><expr><literal type="string">"unfinished multiline comment"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>beg</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <name>beg</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_SAVE_COMMENTS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_save_comment</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type>
<name>ucl_lex_num_multiplier</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<struct><specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mult_normal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>mult_bytes</name></decl>;</decl_stmt>
}</block> <decl><name><name>multipliers</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="char">'m'</literal></expr>, <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="char">'k'</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1024</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="char">'g'</literal></expr>, <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tolower</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>multipliers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_bytes</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>multipliers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mult_bytes</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>multipliers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mult_normal</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type>
<name>ucl_lex_time_multiplier</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<struct><specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>mult</name></decl>;</decl_stmt>
}</block> <decl><name><name>multipliers</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="char">'m'</literal></expr>, <expr><literal type="number">60</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="char">'h'</literal></expr>, <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="char">'w'</literal></expr>, <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">7</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="char">'y'</literal></expr>, <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">365</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tolower</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>multipliers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>multipliers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mult</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>ucl_lex_is_atom_end</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_VALUE_END</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>ucl_lex_is_comment</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ucl_check_variable_safe</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_variable</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dstlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_free</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>LL_FOREACH</name> <argument_list>(<argument>parser-&gt;variables</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>strict</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>remain</name> <operator>==</operator> <name><name>var</name><operator>-&gt;</operator><name>var_len</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>var_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>+=</operator> <name><name>var</name><operator>-&gt;</operator><name>value_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ptr</name> <operator>+</operator> <name><name>var</name><operator>-&gt;</operator><name>var_len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&gt;=</operator> <name><name>var</name><operator>-&gt;</operator><name>var_len</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>var_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>+=</operator> <name><name>var</name><operator>-&gt;</operator><name>value_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ptr</name> <operator>+</operator> <name><name>var</name><operator>-&gt;</operator><name>var_len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>found</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>var_handler</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>strict</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>parser</name><operator>-&gt;</operator><name>var_handler</name></name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_free</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>var_data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <name>dstlen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_free</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ptr</name> <operator>+</operator> <name>remain</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ucl_check_variable</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>vars_found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>remain</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_check_variable_safe</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>out_len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>vars_found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vars_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_check_variable_safe</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>vars_found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vars_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out_len</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out_len</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ucl_expand_single_variable</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>remain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>*</operator><name>dest</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_variable</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dstlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_free</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>strict</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> <operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>strict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>LL_FOREACH</name> <argument_list>(<argument>parser-&gt;variables</argument>, <argument>var</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&gt;=</operator> <name><name>var</name><operator>-&gt;</operator><name>var_len</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>var_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>value_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name><name>var</name><operator>-&gt;</operator><name>var_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <name><name>var</name><operator>-&gt;</operator><name>value_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>strict</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>var_handler</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>parser</name><operator>-&gt;</operator><name>var_handler</name></name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_free</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>var_data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>remain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>dstlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_free</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>strict</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ucl_expand_variable</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>src</name> <operator>+</operator> <name>in_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>out_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>vars_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_DISABLE_MACRO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>in_len</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ucl_check_variable</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vars_found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out_len</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vars_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>in_len</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><name>out_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>in_len</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ucl_expand_single_variable</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>out_len</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type>
<name>ucl_copy_or_store_ptr</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst_const</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_len</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>need_unescape</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_lowercase</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_expand</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>unescape_squote</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>tret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>need_unescape</name> <operator>||</operator> <name>need_lowercase</name> <operator>||</operator>
<operator>(</operator><name>need_expand</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>variables</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_ZEROCOPY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><name>in_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_EINTERNAL</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate memory for a string"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>need_lowercase</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_strlcpy_tolower</name> <argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>in_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_strlcpy_unsafe</name> <argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>in_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_unescape</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unescape_squote</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_unescape_json_string</name> <argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_unescape_squoted_string</name> <argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_expand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>*</operator><name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tret</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_expand_variable</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tret</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>UCL_FREE</name> <argument_list>(<argument><expr><name>in_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dst_const</name> <operator>=</operator> <operator>*</operator><name>dst</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_const</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>in_len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type>
<name>ucl_parser_add_container</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_array</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_obrace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>nobj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nobj</name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><ternary><condition><expr><name>is_array</name></expr> ?</condition><then> <expr><name>UCL_ARRAY</name></expr> </then><else>: <expr><name>UCL_OBJECT</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nobj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>enomem0</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>is_array</name></expr> ?</condition><then> <expr><name>UCL_OBJECT</name></expr> </then><else>: <expr><name>UCL_ARRAY</name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_EMERGE</name></expr></argument>,
<argument><expr><literal type="string">"cannot merge an object with an array"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nobj</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nobj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><name>is_array</name></expr> ?</condition><then> <expr><name>UCL_ARRAY</name></expr> </then><else>: <expr><name>UCL_OBJECT</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_array</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nobj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>ov</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nobj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>ov</name></name> <operator>=</operator> <call><name>ucl_hash_create</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_KEY_LOWERCASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nobj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>ov</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>enomem1</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_KEY</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>enomem1</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>nobj</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ENESTED</name></expr></argument>,
<argument><expr><literal type="string">"objects are nesting too deep (over 65535 limit)"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nobj</name> <operator>!=</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_obrace</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>UCL_STACK_HAS_OBRACE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LL_PREPEND</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name>nobj</name></expr>;</expr_stmt>

<return>return <expr><name>nobj</name></expr>;</return>
<label><name>enomem1</name>:</label>
<if_stmt><if>if <condition>(<expr><name>nobj</name> <operator>!=</operator> <name>obj</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>enomem0</name>:</label>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_EINTERNAL</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate memory for an object"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ucl_maybe_parse_number</name> <parameter_list>(<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>allow_double</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>number_bytes</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>allow_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>got_dot</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>got_exp</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>need_double</name> <init>= <expr><name>false</name></expr></init></decl>,
<decl><type ref="prev"/><name>is_time</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>valid_start</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>is_hex</name> <init>= <expr><name>false</name></expr></init></decl>,
<decl><type ref="prev"/><name>is_neg</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_neg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_hex</name> <operator>&amp;&amp;</operator> <call><name>isxdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>valid_start</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_hex</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_hex</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>allow_double</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>allow_double</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>got_dot</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>got_dot</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>need_double</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>got_exp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>got_exp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>need_double</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_double</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dv</name> <operator>=</operator> <call><name>strtod</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_hex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>strtoimax</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>strtoimax</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>ERANGE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>endptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ucl_lex_is_atom_end</name> <argument_list>(<argument><expr><operator>*</operator><name>endptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>endptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>endptr</name></expr>;</expr_stmt>
<goto>goto <name>set_obj</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>endptr</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>endptr</name> <operator>!=</operator> <name>start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>endptr</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_double</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_double</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dv</name> <operator>=</operator> <name>lv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>is_time</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dv</name> <operator>/=</operator> <literal type="number">1000.</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>dv</name> <operator>*=</operator> <call><name>ucl_lex_num_multiplier</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>set_obj</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>number_bytes</name> <operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>need_double</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_double</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lv</name> <operator>=</operator> <name>dv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lv</name> <operator>*=</operator> <call><name>ucl_lex_num_multiplier</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>set_obj</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ucl_lex_is_atom_end</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>need_double</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dv</name> <operator>*=</operator> <call><name>ucl_lex_num_multiplier</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>lv</name> <operator>*=</operator> <call><name>ucl_lex_num_multiplier</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>number_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>set_obj</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>allow_time</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tolower</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator>
<call><name>tolower</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator>
<call><name>tolower</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_double</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_double</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dv</name> <operator>=</operator> <name>lv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>is_time</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dv</name> <operator>*=</operator> <literal type="number">60.</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<goto>goto <name>set_obj</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>need_double</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dv</name> <operator>*=</operator> <call><name>ucl_lex_num_multiplier</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>lv</name> <operator>*=</operator> <call><name>ucl_lex_num_multiplier</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>number_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>set_obj</name>;</goto>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>allow_time</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p</name> <operator>==</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>ucl_lex_is_atom_end</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_double</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_double</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dv</name> <operator>=</operator> <name>lv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>is_time</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<goto>goto <name>set_obj</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>allow_time</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p</name> <operator>==</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>ucl_lex_is_atom_end</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_double</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_double</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dv</name> <operator>=</operator> <name>lv</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>is_time</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dv</name> <operator>*=</operator> <call><name>ucl_lex_time_multiplier</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>set_obj</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <call><name>ucl_test_character</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>ucl_lex_is_atom_end</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>set_obj</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>endptr</name> <operator>==</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>endptr</name></expr>;</expr_stmt>
<goto>goto <name>set_obj</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>EINVAL</name></expr>;</return>

<label><name>set_obj</name>:</label>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>allow_double</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>need_double</name> <operator>||</operator> <name>is_time</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UCL_FLOAT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UCL_TIME</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>dv</name></name> <operator>=</operator> <ternary><condition><expr><name>is_neg</name></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><name>dv</name><operator>)</operator></expr> </then><else>: <expr><name>dv</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UCL_INT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <ternary><condition><expr><name>is_neg</name></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><name>lv</name><operator>)</operator></expr> </then><else>: <expr><name>lv</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_lex_number</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_maybe_parse_number</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pos</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_NO_TIME</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>-=</operator> <name>pos</name> <operator>-</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>column</name></name> <operator>+=</operator> <name>pos</name> <operator>-</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"numeric value out of range"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_lex_json_string</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>need_unescape</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>ucl_escape</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>var_expand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x1F</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"unexpected newline"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"unexpected control character"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"unfinished escape character"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_ESCAPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isxdigit</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"invalid utf escape"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>,
<argument><expr><literal type="string">"unfinished escape character"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>need_unescape</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ucl_escape</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_UCL_UNSAFE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ucl_escape</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>var_expand</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>,
<argument><expr><literal type="string">"no quote at the end of json string"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_lex_squoted_string</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>need_unescape</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>,
<argument><expr><literal type="string">"unfinished escape character"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>need_unescape</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>,
<argument><expr><literal type="string">"no quote at the end of single quoted string"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_parser_append_elt</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>ucl_hash_t</name> <modifier>*</modifier></type><name>cont</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>nobj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_NO_IMPLICIT_ARRAYS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_MULTIVALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DL_APPEND</name> <argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>top</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_OBJECT_MULTIVALUE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>nobj</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nobj</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>top</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nobj</name><operator>-&gt;</operator><name>keylen</name></name> <operator>=</operator> <name><name>top</name><operator>-&gt;</operator><name>keylen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nobj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_MULTIVALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>nobj</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>nobj</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_hash_replace</name> <argument_list>(<argument><expr><name>cont</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_parser_process_object_element</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>nobj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_hash_t</name> <modifier>*</modifier></type><name>container</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>tobj</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsg</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>container</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>ov</name></name></expr>;</expr_stmt>

<macro><name>DL_FOREACH</name> <argument_list>(<argument>parser-&gt;stack-&gt;obj</argument>, <argument>cur</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>tobj</name> <operator>=</operator> <call><name>__DECONST</name> <argument_list>(<argument><expr><name>ucl_object_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>ucl_hash_search_obj</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>ov</name></name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tobj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><name>tobj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>container</name> <operator>=</operator> <call><name>ucl_hash_insert_object</name> <argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_KEY_LOWERCASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>nobj</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>nobj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nobj</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>priold</name> <init>= <expr><call><name>ucl_object_get_priority</name> <argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><type ref="prev"/><name>prinew</name> <init>= <expr><call><name>ucl_object_get_priority</name> <argument_list>(<argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>strategy</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>UCL_DUPLICATE_APPEND</name></expr>:</case>









<if_stmt><if>if <condition>(<expr><name><name>tobj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_OBJECT_INHERITED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prinew</name> <operator>=</operator> <name>priold</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>priold</name> <operator>==</operator> <name>prinew</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_parser_append_elt</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>priold</name> <operator>&gt;</operator> <name>prinew</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>DL_APPEND</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>trash_objs</name></name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_hash_replace</name> <argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>UCL_DUPLICATE_REWRITE</name></expr>:</case>

<expr_stmt><expr><call><name>ucl_hash_replace</name> <argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UCL_DUPLICATE_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"duplicate element for key '%s' found"</literal></expr></argument>,
<argument><expr><name><name>nobj</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_EMERGE</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>

<case>case <expr><name>UCL_DUPLICATE_MERGE</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><name><name>tobj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name> <operator>||</operator> <name><name>tobj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nobj</name> <operator>=</operator> <name>tobj</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>priold</name> <operator>==</operator> <name>prinew</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_parser_append_elt</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>priold</name> <operator>&gt;</operator> <name>prinew</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>DL_APPEND</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>trash_objs</name></name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_hash_replace</name> <argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>tobj</name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>tobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>ov</name></name> <operator>=</operator> <name>container</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name>nobj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_attach_comment</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_parse_key</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>next_key</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>end_of_object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>got_quote</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>got_eq</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>got_semicolon</name> <init>= <expr><name>false</name></expr></init></decl>,
<decl><type ref="prev"/><name>need_unescape</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>ucl_escape</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>var_expand</name> <init>= <expr><name>false</name></expr></init></decl>,
<decl><type ref="prev"/><name>got_content</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>got_sep</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>nobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>keylen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_DISABLE_MACRO</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_MACRO_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end_of_object</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>ucl_lex_is_comment</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_skip_comments</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE_UNSAFE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_KEY_START</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_content</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>got_quote</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_content</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end_of_object</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_MACRO_NAME</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"key must begin with a letter"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_quote</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_KEY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_content</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_KEY_SEP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"invalid character in a key"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_lex_json_string</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_unescape</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucl_escape</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_expand</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name> <operator>&amp;&amp;</operator> <name>got_content</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"unfinished key"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>got_content</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>end_of_object</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_eq</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_semicolon</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_eq</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"unexpected '=' character"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_eq</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_semicolon</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_semicolon</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"unexpected ':' character"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>ucl_lex_is_comment</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_skip_comments</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name> <operator>&amp;&amp;</operator> <name>got_content</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"unfinished key"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>got_sep</name> <operator>=</operator> <name>got_semicolon</name> <operator>||</operator> <name>got_eq</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_sep</name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name>t</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>next_key</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>t</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>!=</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>t</name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>t</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>next_key</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>nobj</name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>UCL_NULL</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nobj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>keylen</name> <operator>=</operator> <call><name>ucl_copy_or_store_ptr</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nobj</name><operator>-&gt;</operator><name>trash_stack</name><index>[<expr><name>UCL_TRASH_KEY</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><name>need_unescape</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_KEY_LOWERCASE</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>keylen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"empty keys are not allowed"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>nobj</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nobj</name><operator>-&gt;</operator><name>keylen</name></name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_parser_process_object_element</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ucl_escape</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nobj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_NEED_KEY_ESCAPE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_parse_string_value</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>var_expand</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>need_unescape</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>UCL_BRACE_ROUND</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UCL_BRACE_SQUARE</name></decl>,
<decl><name>UCL_BRACE_FIGURE</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><name>int</name></type> <name><name>braces</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>braces</name><index>[<expr><name>UCL_BRACE_FIGURE</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>braces</name><index>[<expr><name>UCL_BRACE_FIGURE</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>braces</name><index>[<expr><name>UCL_BRACE_FIGURE</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>braces</name><index>[<expr><name>UCL_BRACE_FIGURE</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>braces</name><index>[<expr><name>UCL_BRACE_SQUARE</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>braces</name><index>[<expr><name>UCL_BRACE_SQUARE</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>braces</name><index>[<expr><name>UCL_BRACE_SQUARE</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>braces</name><index>[<expr><name>UCL_BRACE_SQUARE</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>var_expand</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>need_unescape</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ucl_lex_is_atom_end</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>ucl_lex_is_comment</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>ucl_parse_multiline_string</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>term</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>term_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>beg</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>var_expand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>newline</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>newline</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <name>term_len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>term_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tend</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>term_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tend</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tend</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tend</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>-=</operator> <name>term_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>term_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <name>term_len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>beg</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>var_expand</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>newline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_parser_get_container</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>UCL_NULL</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_attach_comment</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_parse_value</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stripped_spaces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>str_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_unescape</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>ucl_escape</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>var_expand</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE_UNSAFE</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>ucl_lex_is_comment</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name> <operator>&amp;&amp;</operator> <call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE_UNSAFE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_skip_comments</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_lex_json_string</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_unescape</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucl_escape</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>var_expand</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_get_container</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str_len</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>c</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UCL_STRING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str_len</name> <operator>=</operator> <call><name>ucl_copy_or_store_ptr</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>trash_stack</name><index>[<expr><name>UCL_TRASH_VALUE</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>, <argument><expr><name>need_unescape</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>var_expand</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>str_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_AFTER_VALUE</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
<break>break;</break>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_lex_squoted_string</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_unescape</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_get_container</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str_len</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>c</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UCL_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_SQUOTED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str_len</name> <operator>=</operator> <call><name>ucl_copy_or_store_ptr</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>trash_stack</name><index>[<expr><name>UCL_TRASH_VALUE</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>, <argument><expr><name>need_unescape</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>var_expand</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>str_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_AFTER_VALUE</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
<break>break;</break>
<case>case <expr><literal type="char">'{'</literal></expr>:</case>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_get_container</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_add_container</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>level</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
<break>break;</break>
<case>case <expr><literal type="char">'['</literal></expr>:</case>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_get_container</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_add_container</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>level</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
<break>break;</break>
<case>case <expr><literal type="char">']'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_AFTER_VALUE</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<goto>goto <name>parse_string</name>;</goto>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_get_container</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>p</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator><literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>-=</operator> <name>p</name> <operator>-</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>line</name></name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str_len</name> <operator>=</operator> <call><name>ucl_parse_multiline_string</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><name>p</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_expand</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>,
<argument><expr><literal type="string">"unterminated multiline value"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UCL_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_MULTILINE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str_len</name> <operator>=</operator> <call><name>ucl_copy_or_store_ptr</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>trash_stack</name><index>[<expr><name>UCL_TRASH_VALUE</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>, <argument><expr><name>str_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>var_expand</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>str_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_AFTER_VALUE</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<default>default:</default>
<label><name>parse_string</name>:</label>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_get_container</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_VALUE_DIGIT_START</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_lex_number</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>UCL_STATE_ERROR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_AFTER_VALUE</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_parse_string_value</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_expand</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>need_unescape</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stripped_spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>stripped_spaces</name><operator>)</operator></expr></argument>,
<argument><expr><name>UCL_CHARACTER_WHITESPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stripped_spaces</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>str_len</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>c</name> <operator>-</operator> <name>stripped_spaces</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"string value must not be empty"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>str_len</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UCL_NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>str_len</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"nan"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UCL_FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>dv</name></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>str_len</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"inf"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UCL_FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>dv</name></name> <operator>=</operator> <name>INFINITY</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ucl_maybe_parse_boolean</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UCL_STRING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str_len</name> <operator>=</operator> <call><name>ucl_copy_or_store_ptr</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>trash_stack</name><index>[<expr><name>UCL_TRASH_VALUE</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>, <argument><expr><name>need_unescape</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>var_expand</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>str_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_AFTER_VALUE</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_parse_after_value</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>got_sep</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>ucl_lex_is_comment</name> <argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_skip_comments</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>got_sep</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_VALUE_END</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>,
<argument><expr><literal type="string">"end of array or object detected without corresponding start"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_STACK_HAS_OBRACE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>err_code</name></name> <operator>=</operator> <name>UCL_EUNPAIRED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">"%s:%d object closed with } is not opened with { at line %d"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>chunk</name><operator>-&gt;</operator><name>fname</name></name></expr> ?</condition><then> <expr><name><name>chunk</name><operator>-&gt;</operator><name>fname</name></name></expr> </then><else>: <expr><literal type="string">"memory"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UCL_FREE</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_stack</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_attach_comment</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>level</name></name> <operator>==</operator> <name><name>st</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UCL_FREE</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_stack</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>,
<argument><expr><literal type="string">"unexpected terminating symbol detected"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>got_sep</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>got_sep</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_sep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"delimiter is missing"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_skip_macro_as_comment</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>macro_skip_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>macro_has_symbols</name></decl>,
<decl><name>macro_has_obrace</name></decl>,
<decl><name>macro_has_quote</name></decl>,
<decl><name>macro_has_backslash</name></decl>,
<decl><name>macro_has_sqbrace</name></decl>,
<decl><name>macro_save</name></decl>
}</block> <decl><name>state</name> <init>= <expr><name>macro_skip_start</name></expr></init></decl>, <decl><type ref="prev"/><name>prev_state</name> <init>= <expr><name>macro_skip_start</name></expr></init></decl>;</enum>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>macro_skip_start</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_has_symbols</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE_UNSAFE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_save</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>macro_has_symbols</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_has_sqbrace</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_has_obrace</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_has_quote</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_save</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>macro_has_obrace</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev_state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_has_backslash</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_has_symbols</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>macro_has_sqbrace</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev_state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_has_backslash</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_save</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>macro_has_quote</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev_state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_has_backslash</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>macro_save</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>macro_has_backslash</name></expr>:</case>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>prev_state</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>macro_save</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_SAVE_COMMENTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_save_comment</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_parse_macro_value</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_macro</name></name> <modifier>*</modifier></type><name>macro</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>macro_start</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>macro_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_unescape</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>ucl_escape</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>var_expand</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_lex_json_string</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_unescape</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucl_escape</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var_expand</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>macro_start</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>macro_len</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>c</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE_UNSAFE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>macro_start</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>macro_len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_lex_is_atom_end</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>macro_start</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>macro_len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>



<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE_UNSAFE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type>
<name>ucl_parse_macro_arguments</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>params_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>obraces</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ebraces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>args_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_parser_saved_state</name></name></type> <name>saved</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>saved</name><operator>.</operator><name>column</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>column</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>saved</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>saved</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>saved</name><operator>.</operator><name>remain</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'('</literal> <operator>||</operator> <name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>p</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>chunk</name><operator>)</operator><operator>-&gt;</operator><name>end</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obraces</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ebraces</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obraces</name> <operator>==</operator> <name>ebraces</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">99</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>args_len</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>restore_chunk</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>restore_chunk</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>args_len</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">99</literal></expr>:</case>




<expr_stmt><expr><name>params_parser</name> <operator>=</operator> <call><name>ucl_parser_new</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_parser_add_chunk</name> <argument_list>(<argument><expr><name>params_parser</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>args_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"macro arguments parsing error"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_parser_get_object</name> <argument_list>(<argument><expr><name>params_parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ucl_parser_free</name> <argument_list>(<argument><expr><name>params_parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<return>return <expr><name>res</name></expr>;</return>

<label><name>restore_chunk</name>:</label>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <name><name>saved</name><operator>.</operator><name>column</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>saved</name><operator>.</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>saved</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>=</operator> <name><name>saved</name><operator>.</operator><name>remain</name></name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_SPACES_COMMENTS</name><parameter_list>(<parameter><type><name>parser</name></type></parameter>, <parameter><type><name>chunk</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { while ((p) &lt; (chunk)-&gt;end) { if (!ucl_test_character (*(p), UCL_CHARACTER_WHITESPACE_UNSAFE)) { if ((chunk)-&gt;remain &gt;= 2 &amp;&amp; ucl_lex_is_comment ((p)[0], (p)[1])) { if (!ucl_skip_comments (parser)) { return false; } p = (chunk)-&gt;pos; } break; } ucl_chunk_skipc (chunk, p); } } while(0)</cpp:value></cpp:define>



















<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_state_machine</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>macro_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>macro_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>macro_escaped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>macro_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_macro</name></name> <modifier>*</modifier></type><name>macro</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>next_key</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>end_of_object</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_INIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UCL_STATE_INIT</name></expr>:</case>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_skip_comments</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>seen_obrace</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name> <operator>&amp;&amp;</operator> <call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>,
<argument><expr><name>UCL_CHARACTER_WHITESPACE_UNSAFE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_obrace</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_KEY_OBRACE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_obrace</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_KEY</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>UCL_STATE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_add_container</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>seen_obrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_add_container</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>seen_obrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>UCL_STATE_KEY</name></expr>:</case>
<case>case <expr><name>UCL_STATE_KEY_OBRACE</name></expr>:</case>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name> <operator>&amp;&amp;</operator> <call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE_UNSAFE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>chunk</name><operator>-&gt;</operator><name>end</name></name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_AFTER_VALUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_ESYNTAX</name></expr></argument>, <argument><expr><literal type="string">"top object is finished but the parser "</literal>
<literal type="string">"expects a key"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_parse_key</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_of_object</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_of_object</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_AFTER_VALUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>UCL_STATE_MACRO_NAME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>next_key</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_add_container</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr></argument>,
<argument><expr><name>parser</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>UCL_STATE_KEY_OBRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UCL_STATE_VALUE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>||</operator> <operator>!</operator><call><name>ucl_parse_value</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UCL_STATE_AFTER_VALUE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_parse_after_value</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_KEY</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UCL_STATE_MACRO_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_DISABLE_MACRO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_skip_macro_as_comment</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">"error at %s:%d at column %d: invalid macro"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>chunk</name><operator>-&gt;</operator><name>fname</name></name></expr> ?</condition><then> <expr><name><name>chunk</name><operator>-&gt;</operator><name>fname</name></name></expr> </then><else>: <expr><literal type="string">"memory"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>line</name></name></expr></argument>,
<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>prev_state</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_test_character</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>UCL_CHARACTER_WHITESPACE_UNSAFE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>-</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>macro_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HASH_FIND</name> <argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>macroes</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>macro_len</name></expr></argument>, <argument><expr><name>macro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>macro</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">"error at %s:%d at column %d: "</literal>
<literal type="string">"unknown macro: '%.*s', character: '%c'"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>chunk</name><operator>-&gt;</operator><name>fname</name></name></expr> ?</condition><then> <expr><name><name>chunk</name><operator>-&gt;</operator><name>fname</name></name></expr> </then><else>: <expr><literal type="string">"memory"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>line</name></name></expr></argument>,
<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>column</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>c</name><operator>)</operator></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><operator>*</operator><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SKIP_SPACES_COMMENTS</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_MACRO</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">"error at %s:%d at column %d: invalid macro name"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>chunk</name><operator>-&gt;</operator><name>fname</name></name></expr> ?</condition><then> <expr><name><name>chunk</name><operator>-&gt;</operator><name>fname</name></name></expr> </then><else>: <expr><literal type="string">"memory"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>line</name></name></expr></argument>,
<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>UCL_STATE_MACRO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>macro_args</name> <operator>=</operator> <call><name>ucl_parse_macro_arguments</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>macro_args</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SKIP_SPACES_COMMENTS</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>macro_args</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_parse_macro_value</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>macro</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>macro_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>macro_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>macro_len</name> <operator>=</operator> <call><name>ucl_expand_variable</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>macro_escaped</name></expr></argument>,
<argument><expr><name>macro_start</name></expr></argument>, <argument><expr><name>macro_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>prev_state</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>macro_escaped</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>macro</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>macro</name><operator>-&gt;</operator><name>is_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>macro</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>context_handler</name></name> <argument_list>(<argument><expr><name>macro_start</name></expr></argument>, <argument><expr><name>macro_len</name></expr></argument>,
<argument><expr><name>macro_args</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name></expr></argument>,
<argument><expr><name><name>macro</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>macro</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>handler</name></name> <argument_list>(<argument><expr><name>macro_start</name></expr></argument>, <argument><expr><name>macro_len</name></expr></argument>, <argument><expr><name>macro_args</name></expr></argument>,
<argument><expr><name><name>macro</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>macro</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>macro</name><operator>-&gt;</operator><name>is_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>macro</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>context_handler</name></name> <argument_list>(<argument><expr><name>macro_escaped</name></expr></argument>, <argument><expr><name>macro_len</name></expr></argument>,
<argument><expr><name>macro_args</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name></expr></argument>,
<argument><expr><name><name>macro</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>macro</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>handler</name></name> <argument_list>(<argument><expr><name>macro_escaped</name></expr></argument>, <argument><expr><name>macro_len</name></expr></argument>, <argument><expr><name>macro_args</name></expr></argument>,
<argument><expr><name><name>macro</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>UCL_FREE</name> <argument_list>(<argument><expr><name>macro_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>macro_escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_EINTERNAL</name></expr></argument>,
<argument><expr><literal type="string">"internal error: parser has macro undefined"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>macro_args</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>macro_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ucl_set_err</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>UCL_EINTERNAL</name></expr></argument>,
<argument><expr><literal type="string">"internal error: parser is in an unknown state"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>last_comment</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_attach_comment</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_obj</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_attach_comment</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_attach_comment</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>last_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>UCL_STATE_ERROR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>LL_FOREACH</name> <argument_list>(<argument>parser-&gt;stack</argument>, <argument>st</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>chunk</name></name> <operator>!=</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_STACK_HAS_OBRACE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>utstring_new</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>utstring_printf</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"%s:%d unmatched open brace at %d; "</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>chunk</name><operator>-&gt;</operator><name>fname</name></name></expr> ?</condition><then> <expr><name><name>chunk</name><operator>-&gt;</operator><name>fname</name></name></expr> </then><else>: <expr><literal type="string">"memory"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>line</name></name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>has_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>has_error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>err_code</name></name> <operator>=</operator> <name>UCL_EUNPAIRED</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPRM_SAFE</name><parameter_list>(<parameter><type><name>fn</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>el</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!fn(a, b, c, a)) goto el; } while (0)</cpp:value></cpp:define>




<function><type><name><name>struct</name> <name>ucl_parser</name></name><modifier>*</modifier></type>
<name>ucl_parser_new</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>

<expr_stmt><expr><name>parser</name> <operator>=</operator> <call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_parser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_parser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPRM_SAFE</name><argument_list>(<argument><expr><name>ucl_parser_register_macro</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"include"</literal></expr></argument>, <argument><expr><name>ucl_include_handler</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPRM_SAFE</name><argument_list>(<argument><expr><name>ucl_parser_register_macro</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"try_include"</literal></expr></argument>, <argument><expr><name>ucl_try_include_handler</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPRM_SAFE</name><argument_list>(<argument><expr><name>ucl_parser_register_macro</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"includes"</literal></expr></argument>, <argument><expr><name>ucl_includes_handler</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPRM_SAFE</name><argument_list>(<argument><expr><name>ucl_parser_register_macro</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"priority"</literal></expr></argument>, <argument><expr><name>ucl_priority_handler</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPRM_SAFE</name><argument_list>(<argument><expr><name>ucl_parser_register_macro</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"load"</literal></expr></argument>, <argument><expr><name>ucl_load_handler</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPRM_SAFE</name><argument_list>(<argument><expr><name>ucl_parser_register_context_macro</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"inherit"</literal></expr></argument>, <argument><expr><name>ucl_inherit_handler</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>includepaths</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>UCL_PARSER_SAVE_COMMENTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>comments</name></name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UCL_PARSER_NO_FILEVARS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ucl_parser_set_filevars</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>parser</name></expr>;</return>
<label><name>e0</name>:</label>
<expr_stmt><expr><call><name>ucl_parser_free</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_parser_set_default_priority</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>prio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>default_priority</name></name> <operator>=</operator> <name>prio</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ucl_parser_get_default_priority</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>parser</name><operator>-&gt;</operator><name>default_priority</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_parser_register_macro</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>macro</name></decl></parameter>,
<parameter><decl><type><name>ucl_macro_handler</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_macro</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>macro</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>handler</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_macro</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_macro</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>UCL_FREE</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_macro</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ud</name></name> <operator>=</operator> <name>ud</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HASH_ADD_KEYPTR</name> <argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>macroes</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_parser_register_context_macro</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>macro</name></decl></parameter>,
<parameter><decl><type><name>ucl_context_macro_handler</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_macro</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>macro</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>handler</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_macro</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_macro</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>context_handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>UCL_FREE</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_macro</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>ud</name></name> <operator>=</operator> <name>ud</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>is_context</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HASH_ADD_KEYPTR</name> <argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>macroes</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_parser_register_variable</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_variable</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<macro><name>LL_FOREACH</name> <argument_list>(<argument>parser-&gt;variables</argument>, <argument>cur</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>var</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DL_DELETE</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>variables</name></name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UCL_FREE</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_variable</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_variable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_variable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>var</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>var_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>value_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DL_APPEND</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>variables</name></name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>value_len</name></name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucl_parser_set_variables_handler</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>ucl_variable_handler</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>var_handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>var_data</name></name> <operator>=</operator> <name>ud</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_parser_add_chunk_full</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_duplicate_strategy</name></name></type> <name>strat</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_parse_type</name></name></type> <name>parse_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_parser_special_handler</name></name> <modifier>*</modifier></type><name>special_handler</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"invalid chunk added"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>UCL_STATE_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>ucl_chunk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chunk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"cannot allocate chunk structure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>chunk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>LL_FOREACH</name> <argument_list>(<argument>parser-&gt;special_handlers</argument>, <argument>special_handler</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>special_handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_SPECIAL_HANDLER_PREPROCESS_ALL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>len</name> <operator>&gt;=</operator> <name><name>special_handler</name><operator>-&gt;</operator><name>magic_len</name></name> <operator>&amp;&amp;</operator>
<call><name>memcmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>special_handler</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name><name>special_handler</name><operator>-&gt;</operator><name>magic_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ndata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>special_handler</name><operator>-&gt;</operator><name>handler</name></name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ndata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlen</name></expr></argument>,
<argument><expr><name><name>special_handler</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"call for external handler failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ucl_parser_special_handler_chain</name></name> <modifier>*</modifier></type><name>nchain</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nchain</name> <operator>=</operator> <call><name>UCL_ALLOC</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>nchain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nchain</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>ndata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nchain</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>nlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nchain</name><operator>-&gt;</operator><name>special_handler</name></name> <operator>=</operator> <name>special_handler</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LL_PREPEND</name> <argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>special_handlers</name></name></expr></argument>, <argument><expr><name>nchain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>ndata</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>nlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>parse_type</name> <operator>==</operator> <name>UCL_PARSE_AUTO</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>data</name> <operator>&gt;=</operator> <literal type="number">0xdc</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>data</name> <operator>&lt;=</operator> <literal type="number">0xdf</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parse_type</name> <operator>=</operator> <name>UCL_PARSE_MSGPACK</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parse_type</name> <operator>=</operator> <name>UCL_PARSE_CSEXP</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>parse_type</name> <operator>=</operator> <name>UCL_PARSE_UCL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>remain</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>begin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>begin</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <name>strat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>parse_type</name></name> <operator>=</operator> <name>parse_type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>cur_file</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>cur_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LL_PREPEND</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>recursion</name></name> <operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>recursion</name></name> <operator>&gt;</operator> <name>UCL_MAX_RECURSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"maximum include nesting limit is reached: %d"</literal></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>recursion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>parse_type</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>UCL_PARSE_UCL</name></expr>:</case>
<return>return <expr><call><name>ucl_state_machine</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>UCL_PARSE_MSGPACK</name></expr>:</case>
<return>return <expr><call><name>ucl_parse_msgpack</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>UCL_PARSE_CSEXP</name></expr>:</case>
<return>return <expr><call><name>ucl_parse_csexp</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name> <operator>=</operator> <call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>UCL_OBJECT</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"a parser is in an invalid state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_parser_add_chunk_priority</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ucl_parser_add_chunk_full</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>priority</name></expr></argument>, <argument><expr><name>UCL_DUPLICATE_APPEND</name></expr></argument>, <argument><expr><name>UCL_PARSE_UCL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_parser_add_chunk</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ucl_parser_add_chunk_full</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>default_priority</name></name></expr></argument>, <argument><expr><name>UCL_DUPLICATE_APPEND</name></expr></argument>, <argument><expr><name>UCL_PARSE_UCL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_parser_insert_chunk</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UCL_STATE_INIT</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>e</name><operator>.</operator><name>params</name><operator>.</operator><name>level</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_parser_add_chunk_full</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>,
<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>strategy</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>parse_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chunk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_chunk_free</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>recursion</name></name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_parser_add_string_priority</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>priority</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"invalid string added"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ucl_parser_add_chunk_priority</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>priority</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_parser_add_string</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ucl_parser_add_string_priority</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>default_priority</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_set_include_path</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>paths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>paths</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>includepaths</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>includepaths</name></name> <operator>=</operator> <call><name>ucl_object_copy</name> <argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>includepaths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>includepaths</name></name> <operator>=</operator> <call><name>ucl_object_copy</name> <argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>includepaths</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name></type> <name>ucl_parser_chunk_peek</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator> <operator>*</operator><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>pos</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ucl_parser_chunk_skip</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ucl_chunk_skipc</name><argument_list>( <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_parser_get_current_stack_object</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>stack</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>stack</name><operator>-&gt;</operator><name>obj</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ucl_object_type</name> <argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>UCL_OBJECT</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name>stack</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>stack</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>stack</name><operator>-&gt;</operator><name>obj</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ucl_object_type</name> <argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>UCL_OBJECT</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_object_ref</name> <argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

</unit>
