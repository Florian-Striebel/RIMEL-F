<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/src/ucl_schema.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utlist.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDARG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_REGEX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ucl_schema_validate</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>try_array</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>ext_ref</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ucl_schema_create_error</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_schema_error_code</name></name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__ <parameter_list>(<parameter/></parameter_list>( format<parameter_list>( <parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>4<operator>,</operator> 5</function_decl>) ))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ucl_schema_create_error</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ucl_schema_error_code</name></name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>err</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsnprintf</name> <argument_list>(<argument><expr><name><name>err</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>err</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type>
<name>ucl_schema_test_pattern</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recursive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_REGEX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>regex_t</name></type> <name>reg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regcomp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_NOSUB</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>elt</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>regexec</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>, <argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>elt</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>regexec</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>, <argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>regfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_schema_validate_dependencies</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>deps</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>ext_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur_dep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>piter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cur</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>deps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>piter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cur_dep</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>piter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ucl_object_tostring</name> <argument_list>(<argument><expr><name>cur_dep</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_MISSING_DEPENDENCY</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>,
<argument><expr><literal type="string">"dependency %s is missing for key %s"</literal></expr></argument>,
<argument><expr><call><name>ucl_object_tostring</name> <argument_list>(<argument><expr><name>cur_dep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>ext_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_schema_validate_object</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>ext_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prop</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>found</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>additional_schema</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>required</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pelt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>piter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>allow_additional</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>minmax</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>elt</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"properties"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>piter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>prop</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>piter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>,
<argument><expr><name>ext_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"additionalProperties"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_BOOLEAN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_object_toboolean</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>allow_additional</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>additional_schema</name> <operator>=</operator> <name>elt</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>,
<argument><expr><literal type="string">"additionalProperties attribute is invalid in schema"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"required"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>required</name> <operator>=</operator> <name>elt</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>,
<argument><expr><literal type="string">"required attribute is invalid in schema"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"minProperties"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>ucl_object_toint_safe</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minmax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>minmax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"object has not enough properties: %u, minimum is: %u"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"maxProperties"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>ucl_object_toint_safe</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minmax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>minmax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"object has too many properties: %u, maximum is: %u"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"patternProperties"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>vobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>viter</name></decl>;</decl_stmt>
<expr_stmt><expr><name>piter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>prop</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>piter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>viter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>vobj</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>viter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>ucl_schema_test_pattern</name> <argument_list>(<argument><expr><name>vobj</name></expr></argument>, <argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>,
<argument><expr><name>ext_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dependencies"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_schema_validate_dependencies</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>,
<argument><expr><name>ext_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_additional</name> <operator>||</operator> <name>additional_schema</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>ucl_object_iterate_new</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prop</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"properties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>elt</name> <operator>=</operator> <call><name>ucl_object_iterate_safe</name> <argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"patternProperties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>piter</name> <operator>=</operator> <call><name>ucl_object_iterate_new</name> <argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>pelt</name> <operator>=</operator> <call><name>ucl_object_iterate_safe</name> <argument_list>(<argument><expr><name>piter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>ucl_schema_test_pattern</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>pelt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ucl_object_iterate_free</name> <argument_list>(<argument><expr><name>piter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>piter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_additional</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"object has non-allowed property %s"</literal></expr></argument>,
<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>additional_schema</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>additional_schema</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>ext_ref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ucl_object_iterate_free</name> <argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>required</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>elt</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>required</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ucl_object_tostring</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_MISSING_PROPERTY</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"object has missing property %s"</literal></expr></argument>,
<argument><expr><call><name>ucl_object_tostring</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_schema_validate_number</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>test</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>exclusive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>constraint</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>alpha</name> <init>= <expr><literal type="number">1e-16</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>elt</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_FLOAT</name> <operator>||</operator> <name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_INT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"multipleOf"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>constraint</name> <operator>=</operator> <call><name>ucl_object_todouble</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>constraint</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>,
<argument><expr><literal type="string">"multipleOf must be greater than zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ucl_object_todouble</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name> <argument_list>(<argument><expr><call><name>remainder</name> <argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>alpha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"number %.4f is not multiple of %.4f, remainder is %.7f"</literal></expr></argument>,
<argument><expr><name>val</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>, <argument><expr><call><name>remainder</name> <argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_FLOAT</name> <operator>||</operator> <name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_INT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"maximum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>constraint</name> <operator>=</operator> <call><name>ucl_object_todouble</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"exclusiveMaximum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>test</name> <operator>&amp;&amp;</operator> <name><name>test</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_BOOLEAN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exclusive</name> <operator>=</operator> <call><name>ucl_object_toboolean</name> <argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ucl_object_todouble</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>constraint</name> <operator>||</operator> <operator>(</operator><name>exclusive</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&gt;=</operator> <name>constraint</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"number is too big: %.3f, maximum is: %.3f"</literal></expr></argument>,
<argument><expr><name>val</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_FLOAT</name> <operator>||</operator> <name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_INT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"minimum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>constraint</name> <operator>=</operator> <call><name>ucl_object_todouble</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"exclusiveMinimum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>test</name> <operator>&amp;&amp;</operator> <name><name>test</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_BOOLEAN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exclusive</name> <operator>=</operator> <call><name>ucl_object_toboolean</name> <argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ucl_object_todouble</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>constraint</name> <operator>||</operator> <operator>(</operator><name>exclusive</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <name>constraint</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"number is too small: %.3f, minimum is: %.3f"</literal></expr></argument>,
<argument><expr><name>val</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_schema_validate_string</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>constraint</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_REGEX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>regex_t</name></type> <name>re</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>elt</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_INT</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"maxLength"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>constraint</name> <operator>=</operator> <call><name>ucl_object_toint</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>constraint</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"string is too big: %u, maximum is: %"</literal> <name>PRId64</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_INT</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"minLength"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>constraint</name> <operator>=</operator> <call><name>ucl_object_toint</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>constraint</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"string is too short: %u, minimum is: %"</literal> <name>PRId64</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_REGEX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_STRING</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pattern"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>regcomp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>re</name></expr></argument>, <argument><expr><call><name>ucl_object_tostring</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_NOSUB</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>,
<argument><expr><literal type="string">"cannot compile pattern %s"</literal></expr></argument>, <argument><expr><call><name>ucl_object_tostring</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>regexec</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>re</name></expr></argument>, <argument><expr><call><name>ucl_object_tostring</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"string doesn't match regexp %s"</literal></expr></argument>,
<argument><expr><call><name>ucl_object_tostring</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>regfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>ucl_compare_node</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<macro><name>TREE_ENTRY</name><argument_list>(<argument>ucl_compare_node</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_compare_node</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <macro><name>TREE_HEAD</name><argument_list>(<argument>_tree</argument>, <argument>ucl_compare_node</argument>)</argument_list></macro> <expr_stmt><expr><name>ucl_compare_tree_t</name></expr>;</expr_stmt></typedef>

<macro><name>TREE_DEFINE</name><argument_list>(<argument>ucl_compare_node</argument>, <argument>link</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ucl_schema_elt_compare</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_compare_node</name></name> <modifier>*</modifier></type><name>n1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_compare_node</name></name> <modifier>*</modifier></type><name>n2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>o1</name> <init>= <expr><name><name>n1</name><operator>-&gt;</operator><name>obj</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o2</name> <init>= <expr><name><name>n2</name><operator>-&gt;</operator><name>obj</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ucl_object_compare</name> <argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_schema_array_is_unique</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_compare_tree_t</name></type> <name>tree</name> <init>= <expr><call><name>TREE_INITIALIZER</name> <argument_list>(<argument><expr><name>ucl_schema_elt_compare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_compare_node</name></name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"/><name>test</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nodes</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>elt</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>test</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>elt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>TREE_FIND</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>ucl_compare_node</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>,
<argument><expr><literal type="string">"duplicate values detected while uniqueItems is true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_UNKNOWN</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>,
<argument><expr><literal type="string">"cannot allocate tree node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>elt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TREE_INSERT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tree</name></expr></argument>, <argument><expr><name>ucl_compare_node</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LL_PREPEND</name> <argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<macro><name>LL_FOREACH_SAFE</name> <argument_list>(<argument>nodes</argument>, <argument>node</argument>, <argument>tmp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_schema_validate_array</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>ext_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>it</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>found</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>additional_schema</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>first_unvalidated</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>piter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>allow_additional</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>need_unique</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>minmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>elt</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"items"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>ucl_array_head</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>it</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>piter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><name>root</name></expr></argument>, <argument><expr><name>ext_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>ucl_array_find_index</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>++</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first_unvalidated</name> <operator>=</operator> <name>found</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>it</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>piter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>,
<argument><expr><name>ext_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>,
<argument><expr><literal type="string">"items attribute is invalid in schema"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"additionalItems"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_BOOLEAN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_object_toboolean</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>allow_additional</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>additional_schema</name> <operator>=</operator> <name>elt</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>,
<argument><expr><literal type="string">"additionalItems attribute is invalid in schema"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_BOOLEAN</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"uniqueItems"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_unique</name> <operator>=</operator> <call><name>ucl_object_toboolean</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"minItems"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>ucl_object_toint_safe</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minmax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>minmax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"array has not enough items: %u, minimum is: %u"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><call><name>ucl_object_key</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"maxItems"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>ucl_object_toint_safe</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minmax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>minmax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"array has too many items: %u, maximum is: %u"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>minmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_additional</name> <operator>||</operator> <name>additional_schema</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first_unvalidated</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_additional</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"array has undefined item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>additional_schema</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_array_find_index</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>elt</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>additional_schema</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>ext_ref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_array_find_index</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>idx</name> <operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name>need_unique</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_schema_array_is_unique</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_schema_type_is_allowed</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_type_t</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>elt</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_schema_type_is_allowed</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type_str</name> <operator>=</operator> <call><name>ucl_object_tostring</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_object_string_to_type</name> <argument_list>(<argument><expr><name>type_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><literal type="string">"Type attribute is invalid in schema"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>t</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_TIME</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>==</operator> <name>UCL_FLOAT</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_INT</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>==</operator> <name>UCL_FLOAT</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_TYPE_MISMATCH</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"Invalid type of %s, expected %s"</literal></expr></argument>,
<argument><expr><call><name>ucl_object_type_to_string</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ucl_object_type_to_string</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_schema_validate_enum</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>en</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>elt</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>en</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_object_compare</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"object is not one of enumerated patterns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type>
<name>ucl_schema_resolve_ref_component</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_object_lookup_len</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>refc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>,
<argument><expr><literal type="string">"reference %s is invalid, missing path component"</literal></expr></argument>, <argument><expr><name>refc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>strtoul</name> <argument_list>(<argument><expr><name>refc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err_str</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err_str</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>err_str</name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>err_str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>,
<argument><expr><literal type="string">"reference %s is invalid, invalid item number"</literal></expr></argument>, <argument><expr><name>refc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_array_head</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>num</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>,
<argument><expr><literal type="string">"reference %s is invalid, item number %d does not exist"</literal></expr></argument>,
<argument><expr><name>refc</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>res</name></expr></argument>,
<argument><expr><literal type="string">"reference %s is invalid, contains primitive object in the path"</literal></expr></argument>,
<argument><expr><name>refc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type>
<name>ucl_schema_resolve_ref</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>ext_ref</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type> <name>nroot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UT_string</name> <modifier>*</modifier></type><name>url_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ext_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>url_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hash_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>url_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>url_buflen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hash_ptr</name> <operator>=</operator> <call><name>strrchr</name> <argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>url_copy</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>hash_ptr</name> <operator>-</operator> <name>ref</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>url_copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name>root</name></expr></argument>,
<argument><expr><literal type="string">"cannot allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_strlcpy</name> <argument_list>(<argument><expr><name>url_copy</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>hash_ptr</name> <operator>-</operator> <name>ref</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>url_copy</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ext_obj</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>ext_ref</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ext_obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_strnstr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_fetch_url</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url_buflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url_err</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>,
<argument><expr><name>root</name></expr></argument>,
<argument><expr><literal type="string">"cannot fetch reference %s: %s"</literal></expr></argument>,
<argument><expr><name>p</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>url_err</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>utstring_body</name> <argument_list>(<argument><expr><name>url_err</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>url_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_fetch_file</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url_buflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url_err</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>,
<argument><expr><name>root</name></expr></argument>,
<argument><expr><literal type="string">"cannot fetch reference %s: %s"</literal></expr></argument>,
<argument><expr><name>p</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>url_err</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>utstring_body</name> <argument_list>(<argument><expr><name>url_err</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>url_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>parser</name> <operator>=</operator> <call><name>ucl_parser_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_parser_add_chunk</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>url_buf</name></expr></argument>, <argument><expr><name>url_buflen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>root</name></expr></argument>,
<argument><expr><literal type="string">"cannot fetch reference %s: %s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><call><name>ucl_parser_get_error</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_parser_free</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>url_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>url_obj</name> <operator>=</operator> <call><name>ucl_parser_get_object</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ext_obj</name> <operator>=</operator> <name>url_obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_insert_key</name> <argument_list>(<argument><expr><name>ext_ref</name></expr></argument>, <argument><expr><name>url_obj</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>url_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>url_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>hash_ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ref</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>ext_obj</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>ext_obj</name></expr> </then><else>: <expr><name>root</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nroot</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>res</name></expr></argument>,
<argument><expr><literal type="string">"reference %s is invalid, empty path component"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_schema_resolve_ref_component</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_schema_resolve_ref_component</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>res</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>res</name></expr></argument>,
<argument><expr><literal type="string">"reference %s is invalid, cannot find specified object"</literal></expr></argument>,
<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_schema_validate_values</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>constraint</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"maxValues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_INT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>constraint</name> <operator>=</operator> <call><name>ucl_object_toint</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>constraint</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"object has more values than defined: %ld"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"minValues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_INT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>constraint</name> <operator>=</operator> <call><name>ucl_object_toint</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>constraint</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>constraint</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_CONSTRAINT</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
<argument><expr><literal type="string">"object has less values than defined: %ld"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucl_schema_validate</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>try_array</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>external_refs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>elt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>schema</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_schema_create_error</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>UCL_SCHEMA_INVALID_SCHEMA</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>,
<argument><expr><literal type="string">"schema is %s instead of object"</literal></expr></argument>,
<argument><expr><call><name>ucl_object_type_to_string</name> <argument_list>(<argument><expr><name><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>try_array</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_schema_validate_values</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>LL_FOREACH</name> <argument_list>(<argument>obj</argument>, <argument>cur</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>external_refs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_schema_validate_enum</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"allOf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>external_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"anyOf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>external_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>err</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>UCL_SCHEMA_OK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"oneOf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>external_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>external_refs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"not"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>elt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_OBJECT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>external_refs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>err</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>UCL_SCHEMA_OK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"$ref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ref_root</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>ucl_schema_resolve_ref</name> <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name>ucl_object_tostring</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>err</name></expr></argument>, <argument><expr><name>external_refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>try_array</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>ref_root</name></expr></argument>,
<argument><expr><name>external_refs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_lookup</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_schema_type_is_allowed</name> <argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UCL_OBJECT</name></expr>:</case>
<return>return <expr><call><name>ucl_schema_validate_object</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>external_refs</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<case>case <expr><name>UCL_ARRAY</name></expr>:</case>
<return>return <expr><call><name>ucl_schema_validate_array</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>external_refs</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<case>case <expr><name>UCL_INT</name></expr>:</case>
<case>case <expr><name>UCL_FLOAT</name></expr>:</case>
<return>return <expr><call><name>ucl_schema_validate_number</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<case>case <expr><name>UCL_STRING</name></expr>:</case>
<return>return <expr><call><name>ucl_schema_validate_string</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_object_validate</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ucl_object_validate_root_ext</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_object_validate_root</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ucl_object_validate_root_ext</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_object_validate_root_ext</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
<parameter><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>ext_refs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_schema_error</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>need_unref</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ext_refs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ext_refs</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_unref</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ucl_schema_validate</name> <argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>ext_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_unref</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>ext_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
