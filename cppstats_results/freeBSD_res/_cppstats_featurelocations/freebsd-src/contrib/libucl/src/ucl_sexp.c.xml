<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/src/ucl_sexp.c">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ucl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utlist.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_STATE</name></cpp:macro> <cpp:value>do { if (p &gt;= end) { if (state != read_ebrace) { ucl_create_err (&amp;parser-&gt;err,"extra data");state = parse_err; } } else { switch (*p) { case '(': state = read_obrace; break; case ')': state = read_ebrace; break; default: len = 0; mult = 1; state = read_length; break; } } } while(0)</cpp:value></cpp:define>
























<function><type><name>bool</name></type>
<name>ucl_parse_csexp</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_stack</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mult</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>start_parse</name></decl>,
<decl><name>read_obrace</name></decl>,
<decl><name>read_length</name></decl>,
<decl><name>read_value</name></decl>,
<decl><name>read_ebrace</name></decl>,
<decl><name>parse_err</name></decl>
}</block> <decl><name>state</name> <init>= <expr><name>start_parse</name></expr></init></decl>;</enum>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>parser</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>begin</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>remain</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>begin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name><name>parser</name><operator>-&gt;</operator><name>chunks</name><operator>-&gt;</operator><name>remain</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>start_parse</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>read_obrace</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"bad starting character for "</literal>
<literal type="string">"sexp block: %x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>parse_err</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>read_obrace</name></expr>:</case>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"no memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>parse_err</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>obj</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"no memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>parse_err</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>top_obj</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>LL_PREPEND</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT_STATE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>read_length</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"zero length element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>parse_err</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>read_value</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <name>mult</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mult</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"too big length of an "</literal>
<literal type="string">"element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>parse_err</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"bad length character: %x"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>parse_err</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>read_value</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>&gt;</operator> <name>len</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"invalid length: %llu, %ld "</literal>
<literal type="string">"remain"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>unsigned</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>parse_err</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_BINARY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_PARSER_ZEROCOPY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_copy_value_trash</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT_STATE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>read_ebrace</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"invalid length: %llu, %ld "</literal>
<literal type="string">"remain"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>unsigned</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>parse_err</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"bad container object, array "</literal>
<literal type="string">"expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>parse_err</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>NEXT_STATE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>parse_err</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>read_ebrace</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_create_err</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>parser</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"invalid finishing state: %d"</literal></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
