<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/src/tree.h">








































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__tree_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__tree_h</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_DELTA_MAX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_HU_FUNCTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HU_FUNCTION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__unused__)) x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HU_FUNCTION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_ENTRY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { struct type *avl_left; struct type *avl_right; int avl_height; }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { struct type *th_root; int (*th_cmp)(struct type *lhs, struct type *rhs); }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_INITIALIZER</name><parameter_list>(<parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ 0, cmp }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_DELTA</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(( (((self)-&gt;field.avl_left) ? (self)-&gt;field.avl_left-&gt;field.avl_height : 0)) - (((self)-&gt;field.avl_right) ? (self)-&gt;field.avl_right-&gt;field.avl_height : 0))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_DEFINE</name><parameter_list>(<parameter><type><name>node</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static struct node *_HU_FUNCTION(TREE_BALANCE_##node##_##field)(struct node *); static struct node *_HU_FUNCTION(TREE_ROTL_##node##_##field)(struct node *self) { struct node *r= self-&gt;field.avl_right; self-&gt;field.avl_right= r-&gt;field.avl_left; r-&gt;field.avl_left= TREE_BALANCE_##node##_##field(self); return TREE_BALANCE_##node##_##field(r); } static struct node *_HU_FUNCTION(TREE_ROTR_##node##_##field)(struct node *self) { struct node *l= self-&gt;field.avl_left; self-&gt;field.avl_left= l-&gt;field.avl_right; l-&gt;field.avl_right= TREE_BALANCE_##node##_##field(self); return TREE_BALANCE_##node##_##field(l); } static struct node *_HU_FUNCTION(TREE_BALANCE_##node##_##field)(struct node *self) { int delta= TREE_DELTA(self, field); if (delta &lt; -TREE_DELTA_MAX) { if (TREE_DELTA(self-&gt;field.avl_right, field) &gt; 0) self-&gt;field.avl_right= TREE_ROTR_##node##_##field(self-&gt;field.avl_right); return TREE_ROTL_##node##_##field(self); } else if (delta &gt; TREE_DELTA_MAX) { if (TREE_DELTA(self-&gt;field.avl_left, field) &lt; 0) self-&gt;field.avl_left= TREE_ROTL_##node##_##field(self-&gt;field.avl_left); return TREE_ROTR_##node##_##field(self); } self-&gt;field.avl_height= 0; if (self-&gt;field.avl_left &amp;&amp; (self-&gt;field.avl_left-&gt;field.avl_height &gt; self-&gt;field.avl_height)) self-&gt;field.avl_height= self-&gt;field.avl_left-&gt;field.avl_height; if (self-&gt;field.avl_right &amp;&amp; (self-&gt;field.avl_right-&gt;field.avl_height &gt; self-&gt;field.avl_height)) self-&gt;field.avl_height= self-&gt;field.avl_right-&gt;field.avl_height; self-&gt;field.avl_height += 1; return self; } static struct node *_HU_FUNCTION(TREE_INSERT_##node##_##field) (struct node *self, struct node *elm, int (*compare)(struct node *lhs, struct node *rhs)) { if (!self) return elm; if (compare(elm, self) &lt; 0) self-&gt;field.avl_left= TREE_INSERT_##node##_##field(self-&gt;field.avl_left, elm, compare); else self-&gt;field.avl_right= TREE_INSERT_##node##_##field(self-&gt;field.avl_right, elm, compare); return TREE_BALANCE_##node##_##field(self); } static struct node *_HU_FUNCTION(TREE_FIND_##node##_##field) (struct node *self, struct node *elm, int (*compare)(struct node *lhs, struct node *rhs)) { if (!self) return 0; if (compare(elm, self) == 0) return self; if (compare(elm, self) &lt; 0) return TREE_FIND_##node##_##field(self-&gt;field.avl_left, elm, compare); else return TREE_FIND_##node##_##field(self-&gt;field.avl_right, elm, compare); } static struct node *_HU_FUNCTION(TREE_MOVE_RIGHT)(struct node *self, struct node *rhs) { if (!self) return rhs; self-&gt;field.avl_right= TREE_MOVE_RIGHT(self-&gt;field.avl_right, rhs); return TREE_BALANCE_##node##_##field(self); } static struct node *_HU_FUNCTION(TREE_REMOVE_##node##_##field) (struct node *self, struct node *elm, int (*compare)(struct node *lhs, struct node *rhs)) { if (!self) return 0; if (compare(elm, self) == 0) { struct node *tmp= TREE_MOVE_RIGHT(self-&gt;field.avl_left, self-&gt;field.avl_right); self-&gt;field.avl_left= 0; self-&gt;field.avl_right= 0; return tmp; } if (compare(elm, self) &lt; 0) self-&gt;field.avl_left= TREE_REMOVE_##node##_##field(self-&gt;field.avl_left, elm, compare); else self-&gt;field.avl_right= TREE_REMOVE_##node##_##field(self-&gt;field.avl_right, elm, compare); return TREE_BALANCE_##node##_##field(self); } static void _HU_FUNCTION(TREE_FORWARD_APPLY_ALL_##node##_##field) (struct node *self, void (*function)(struct node *node, void *data), void *data) { if (self) { TREE_FORWARD_APPLY_ALL_##node##_##field(self-&gt;field.avl_left, function, data); function(self, data); TREE_FORWARD_APPLY_ALL_##node##_##field(self-&gt;field.avl_right, function, data); } } static void _HU_FUNCTION(TREE_REVERSE_APPLY_ALL_##node##_##field) (struct node *self, void (*function)(struct node *node, void *data), void *data) { if (self) { TREE_REVERSE_APPLY_ALL_##node##_##field(self-&gt;field.avl_right, function, data); function(self, data); TREE_REVERSE_APPLY_ALL_##node##_##field(self-&gt;field.avl_left, function, data); } }</cpp:value></cpp:define>






















































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_INSERT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>node</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;th_root= TREE_INSERT_##node##_##field((head)-&gt;th_root, (elm), (head)-&gt;th_cmp))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_FIND</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>node</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(TREE_FIND_##node##_##field((head)-&gt;th_root, (elm), (head)-&gt;th_cmp))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_REMOVE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>node</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;th_root= TREE_REMOVE_##node##_##field((head)-&gt;th_root, (elm), (head)-&gt;th_cmp))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_DEPTH</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;th_root-&gt;field.avl_height)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_FORWARD_APPLY</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>node</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>function</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TREE_FORWARD_APPLY_ALL_##node##_##field((head)-&gt;th_root, function, data)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_REVERSE_APPLY</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>node</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>function</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TREE_REVERSE_APPLY_ALL_##node##_##field((head)-&gt;th_root, function, data)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREE_INIT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (head)-&gt;th_root= 0; (head)-&gt;th_cmp= (cmp); } while (0)</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
