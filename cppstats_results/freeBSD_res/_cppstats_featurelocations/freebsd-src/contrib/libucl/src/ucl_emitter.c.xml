<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/src/ucl_emitter.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_chartable.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FLOAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ucl_emitter_common_elt</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compact</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_EMIT_TYPE_OPS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void ucl_emit_ ##type ##_elt (struct ucl_emitter_context *ctx, const ucl_object_t *obj, bool first, bool print_key); static void ucl_emit_ ##type ##_start_obj (struct ucl_emitter_context *ctx, const ucl_object_t *obj, bool print_key); static void ucl_emit_ ##type##_start_array (struct ucl_emitter_context *ctx, const ucl_object_t *obj, bool print_key); static void ucl_emit_ ##type##_end_object (struct ucl_emitter_context *ctx, const ucl_object_t *obj); static void ucl_emit_ ##type##_end_array (struct ucl_emitter_context *ctx, const ucl_object_t *obj)</cpp:value></cpp:define>














<expr_stmt><expr><call><name>UCL_EMIT_TYPE_OPS</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UCL_EMIT_TYPE_OPS</name><argument_list>(<argument><expr><name>json_compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UCL_EMIT_TYPE_OPS</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UCL_EMIT_TYPE_OPS</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UCL_EMIT_TYPE_OPS</name><argument_list>(<argument><expr><name>msgpack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_EMIT_TYPE_CONTENT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .ucl_emitter_write_elt = ucl_emit_ ##type ##_elt, .ucl_emitter_start_object = ucl_emit_ ##type ##_start_obj, .ucl_emitter_start_array = ucl_emit_ ##type ##_start_array, .ucl_emitter_end_object = ucl_emit_ ##type ##_end_object, .ucl_emitter_end_array = ucl_emit_ ##type ##_end_array }</cpp:value></cpp:define>







<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_operations</name></name></type> <name><name>ucl_standartd_emitter_ops</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>UCL_EMIT_JSON</name></expr>]</index> <operator>=</operator> <call><name>UCL_EMIT_TYPE_CONTENT</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>UCL_EMIT_JSON_COMPACT</name></expr>]</index> <operator>=</operator> <call><name>UCL_EMIT_TYPE_CONTENT</name><argument_list>(<argument><expr><name>json_compact</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>UCL_EMIT_CONFIG</name></expr>]</index> <operator>=</operator> <call><name>UCL_EMIT_TYPE_CONTENT</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>UCL_EMIT_YAML</name></expr>]</index> <operator>=</operator> <call><name>UCL_EMIT_TYPE_CONTENT</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>UCL_EMIT_MSGPACK</name></expr>]</index> <operator>=</operator> <macro><name>UCL_EMIT_TYPE_CONTENT</name><argument_list>(<argument>msgpack</argument>)</argument_list></macro></expr>
}</block></expr></init></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_EMIT_IDENT_TOP_OBJ</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ctx)-&gt;top != (obj) || ((ctx)-&gt;id == UCL_EMIT_JSON_COMPACT || (ctx)-&gt;id == UCL_EMIT_JSON))</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ucl_add_tabs</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tabs</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>compact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compact</name> <operator>&amp;&amp;</operator> <name>tabs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>tabs</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emitter_print_key</name> <parameter_list>(<parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>print_key</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>UCL_EMIT_CONFIG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_OBJECT_NEED_KEY_ESCAPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_elt_string_write_json</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>UCL_OBJECT</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">" = "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>UCL_EMIT_YAML</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>keylen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_OBJECT_NEED_KEY_ESCAPE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_elt_string_write_json</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>keylen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>keylen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_elt_string_write_json</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compact</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emitter_finish_object</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compact</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>UCL_EMIT_CONFIG</name> <operator>&amp;&amp;</operator> <name>obj</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>top</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>UCL_OBJECT</name> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_array</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">";\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emitter_common_end_object</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UCL_EMIT_IDENT_TOP_OBJ</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>indent</name></name> <operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>compact</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>UCL_EMIT_CONFIG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_add_tabs</name> <argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_emitter_finish_object</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emitter_common_end_array</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>indent</name></name> <operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>compact</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>UCL_EMIT_CONFIG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_add_tabs</name> <argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ucl_emitter_finish_object</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emitter_common_start_array</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ucl_emitter_print_key</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compact</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">"[\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>indent</name></name> <operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UCL_ARRAY</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_emitter_common_elt</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_emitter_common_elt</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>


</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emitter_common_start_object</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_hash_iter_t</name></type> <name>it</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ucl_emitter_print_key</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>UCL_EMIT_IDENT_TOP_OBJ</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>compact</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">"{\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>indent</name></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>ucl_hash_iterate</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>ov</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>UCL_EMIT_CONFIG</name></expr>)</condition> <block>{<block_content>
<macro><name>LL_FOREACH</name> <argument_list>(<argument>cur</argument>, <argument>elt</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_emitter_common_elt</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>compact</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_add_tabs</name> <argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_common_start_array</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_common_end_array</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_emitter_common_elt</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emitter_common_elt</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_object_userdata</name></name> <modifier>*</modifier></type><name>ud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur_comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ud_out</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>UCL_EMIT_CONFIG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>compact</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>UCL_EMIT_YAML</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>indent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_add_tabs</name> <argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>comments</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>UCL_EMIT_CONFIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>comment</name> <operator>=</operator> <call><name>ucl_object_lookup_len</name> <argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>comments</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>obj</name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comment</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>comment</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_OBJECT_INHERITED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<macro><name>DL_FOREACH</name> <argument_list>(<argument>comment</argument>, <argument>cur_comment</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name><name>cur_comment</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>,
<argument><expr><name><name>cur_comment</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
<argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_add_tabs</name> <argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>comment</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UCL_INT</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_int</name></name> <argument_list>(<argument><expr><call><name>ucl_object_toint</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_finish_object</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>, <argument><expr><operator>!</operator><name>print_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UCL_FLOAT</name></expr>:</case>
<case>case <expr><name>UCL_TIME</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_double</name></name> <argument_list>(<argument><expr><call><name>ucl_object_todouble</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_finish_object</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>, <argument><expr><operator>!</operator><name>print_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UCL_BOOLEAN</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>ucl_object_toboolean</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ucl_emitter_finish_object</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>, <argument><expr><operator>!</operator><name>print_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UCL_STRING</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>UCL_EMIT_CONFIG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ucl_maybe_long_string</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_elt_string_write_multiline</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_OBJECT_SQUOTED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_elt_string_write_squoted</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_elt_string_write_json</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_elt_string_write_json</name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ucl_emitter_finish_object</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>, <argument><expr><operator>!</operator><name>print_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UCL_NULL</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_finish_object</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>, <argument><expr><operator>!</operator><name>print_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UCL_OBJECT</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_common_start_object</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_common_end_object</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UCL_ARRAY</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_common_start_array</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_common_end_array</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UCL_USERDATA</name></expr>:</case>
<expr_stmt><expr><name>ud</name> <operator>=</operator> <operator>(</operator>struct <name>ucl_object_userdata</name> <operator>*</operator><operator>)</operator><name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_print_key</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ud</name><operator>-&gt;</operator><name>emitter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ud_out</name> <operator>=</operator> <call><name><name>ud</name><operator>-&gt;</operator><name>emitter</name></name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ud_out</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ud_out</name> <operator>=</operator> <literal type="string">"null"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_elt_string_write_json</name> <argument_list>(<argument><expr><name>ud_out</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>ud_out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_finish_object</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>, <argument><expr><operator>!</operator><name>print_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>comment</name></expr>)</condition> <block>{<block_content>
<macro><name>DL_FOREACH</name> <argument_list>(<argument>comment</argument>, <argument>cur_comment</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_len</name></name> <argument_list>(<argument><expr><name><name>cur_comment</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>,
<argument><expr><name><name>cur_comment</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
<argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>func</name><operator>-&gt;</operator><name>ucl_emitter_append_character</name></name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_comment</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_add_tabs</name> <argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>, <argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCL_EMIT_TYPE_IMPL</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>compact</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void ucl_emit_ ##type ##_elt (struct ucl_emitter_context *ctx, const ucl_object_t *obj, bool first, bool print_key) { ucl_emitter_common_elt (ctx, obj, first, print_key, (compact)); } static void ucl_emit_ ##type ##_start_obj (struct ucl_emitter_context *ctx, const ucl_object_t *obj, bool print_key) { ucl_emitter_common_start_object (ctx, obj, print_key, (compact)); } static void ucl_emit_ ##type##_start_array (struct ucl_emitter_context *ctx, const ucl_object_t *obj, bool print_key) { ucl_emitter_common_start_array (ctx, obj, print_key, (compact)); } static void ucl_emit_ ##type##_end_object (struct ucl_emitter_context *ctx, const ucl_object_t *obj) { ucl_emitter_common_end_object (ctx, obj, (compact)); } static void ucl_emit_ ##type##_end_array (struct ucl_emitter_context *ctx, const ucl_object_t *obj) { ucl_emitter_common_end_array (ctx, obj, (compact)); }</cpp:value></cpp:define>





















<macro><name>UCL_EMIT_TYPE_IMPL</name><argument_list>(<argument>json</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>UCL_EMIT_TYPE_IMPL</name><argument_list>(<argument>json_compact</argument>, <argument>true</argument>)</argument_list></macro>
<macro><name>UCL_EMIT_TYPE_IMPL</name><argument_list>(<argument>config</argument>, <argument>false</argument>)</argument_list></macro>
<macro><name>UCL_EMIT_TYPE_IMPL</name><argument_list>(<argument>yaml</argument>, <argument>false</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emit_msgpack_elt</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_iter_t</name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_object_userdata</name></name> <modifier>*</modifier></type><name>ud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ud_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>celt</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UCL_INT</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key_msgpack</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_print_int_msgpack</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ucl_object_toint</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>UCL_FLOAT</name></expr>:</case>
<case>case <expr><name>UCL_TIME</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key_msgpack</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_print_double_msgpack</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ucl_object_todouble</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>UCL_BOOLEAN</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key_msgpack</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_print_bool_msgpack</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ucl_object_toboolean</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>UCL_STRING</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key_msgpack</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UCL_OBJECT_BINARY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_emitter_print_binary_string_msgpack</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ucl_emitter_print_string_msgpack</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>UCL_NULL</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key_msgpack</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_print_null_msgpack</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>UCL_OBJECT</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key_msgpack</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emit_msgpack_start_obj</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>print_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>it</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<macro><name>LL_FOREACH</name> <argument_list>(<argument>cur</argument>, <argument>celt</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_emit_msgpack_elt</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>celt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<break>break;</break>
</block_content>}</block>
</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>UCL_ARRAY</name></expr>:</case>
<expr_stmt><expr><call><name>ucl_emitter_print_key_msgpack</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emit_msgpack_start_array</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>print_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>it</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>=</operator> <call><name>ucl_object_iterate</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_emit_msgpack_elt</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>UCL_USERDATA</name></expr>:</case>
<expr_stmt><expr><name>ud</name> <operator>=</operator> <operator>(</operator>struct <name>ucl_object_userdata</name> <operator>*</operator><operator>)</operator><name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_emitter_print_key_msgpack</name> <argument_list>(<argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ud</name><operator>-&gt;</operator><name>emitter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ud_out</name> <operator>=</operator> <call><name><name>ud</name><operator>-&gt;</operator><name>emitter</name></name> <argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>ud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ud_out</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ud_out</name> <operator>=</operator> <literal type="string">"null"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_emitter_print_string_msgpack</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>sv</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emit_msgpack_start_obj</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ucl_emitter_print_object_msgpack</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emit_msgpack_start_array</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ucl_emitter_print_array_msgpack</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emit_msgpack_end_object</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucl_emit_msgpack_end_array</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>ucl_object_emit</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_emitter</name></name></type> <name>emit_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ucl_object_emit_len</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>emit_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>ucl_object_emit_len</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_emitter</name></name></type> <name>emit_type</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UT_string</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>ucl_object_emit_memory_funcs</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>func</name><operator>-&gt;</operator><name>ud</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_emit_full</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>emit_type</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ucl_object_emit_funcs_free</name> <argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucl_object_emit_full</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ucl_emitter</name></name></type> <name>emit_type</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ucl_emitter_functions</name></name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ucl_object_t</name> <modifier>*</modifier></type><name>comments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ucl_emitter_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_emitter_context</name></name></type> <name>my_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>ucl_emit_get_standard_context</name> <argument_list>(<argument><expr><name>emit_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>my_ctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>my_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_ctx</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>emitter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_ctx</name><operator>.</operator><name>indent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_ctx</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_ctx</name><operator>.</operator><name>comments</name></name> <operator>=</operator> <name>comments</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>my_ctx</name><operator>.</operator><name>ops</name><operator>-&gt;</operator><name>ucl_emitter_write_elt</name></name> <argument_list>(<argument><expr><operator>&amp;</operator><name>my_ctx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
