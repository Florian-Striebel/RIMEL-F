<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/tests/fuzzers/ucl_msgpack_fuzzer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>ucl_object_t</name><modifier>*</modifier></type> (<modifier>*</modifier><name>ucl_msgpack_test</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<function><type><name>int</name></type> <name>LLVMFuzzerTestOneInput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>size</name><operator>&lt;</operator><literal type="number">3</literal></expr>)</condition><block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>ucl_object_new_full</name> <argument_list>(<argument><expr><name>UCL_OBJECT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UCL_OBJECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parser</name> <operator>=</operator> <call><name>ucl_parser_new</name><argument_list>(<argument><expr><name>UCL_PARSER_KEY_LOWERCASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>ucl_parser_add_chunk_full</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UCL_DUPLICATE_APPEND</name></expr></argument>, <argument><expr><name>UCL_PARSE_MSGPACK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ucl_parser_free</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
