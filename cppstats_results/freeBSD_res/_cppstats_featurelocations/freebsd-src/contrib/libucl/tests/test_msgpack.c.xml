<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libucl/tests/test_msgpack.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ucl_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>niter</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>ntests</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>nelt</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>ucl_object_t</name><modifier>*</modifier></type> (<modifier>*</modifier><name>ucl_msgpack_test</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_test_integer</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_test_string</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_test_boolean</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_test_map</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_test_array</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_test_large_map</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_test_large_array</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_test_large_string</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type> <name>ucl_test_null</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ucl_msgpack_test</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>ucl_test_integer</name></expr>,
<expr><name>ucl_test_string</name></expr>,
<expr><name>ucl_test_boolean</name></expr>,
<expr><name>ucl_test_map</name></expr>,
<expr><name>ucl_test_array</name></expr>,
<expr><name>ucl_test_null</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTESTS</name></cpp:macro> <cpp:value>(sizeof(tests) / sizeof(tests[0]))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>inc</name></decl>;</decl_stmt>
}</block></struct></type> <name>pcg32_random_t</name>;</typedef>

<decl_stmt><decl><type><name>pcg32_random_t</name></type> <name>rng</name></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>pcg32_random</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>oldstate</name> <init>= <expr><name><name>rng</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rng</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>oldstate</name> <operator>*</operator> <literal type="number">6364136223846793005ULL</literal> <operator>+</operator> <operator>(</operator><name><name>rng</name><operator>.</operator><name>inc</name></name> <operator>|</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>xorshifted</name> <init>= <expr><operator>(</operator><operator>(</operator><name>oldstate</name> <operator>&gt;&gt;</operator> <literal type="number">18u</literal><operator>)</operator> <operator>^</operator> <name>oldstate</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">27u</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rot</name> <init>= <expr><name>oldstate</name> <operator>&gt;&gt;</operator> <literal type="number">59u</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>xorshifted</name> <operator>&gt;&gt;</operator> <name>rot</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>xorshifted</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><operator>-</operator><name>rot</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>random_key</name> <parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>keybuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keylen</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>isgraph</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><name><name>keybuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>
<return>return <expr><name>keybuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucl_parser</name></name> <modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>klen</name></decl>, <decl><type ref="prev"/><name>elen</name></decl>, <decl><type ref="prev"/><name>elen2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>emitted</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>emitted2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>fname_out</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name> <argument_list>(<argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>read</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rng</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>rng</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>niter</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fname_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fopen</name> <argument_list>(<argument><expr><name>fname_out</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><operator>-</operator><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ntests</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sel</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>NTESTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>random_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recursion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <name><name>tests</name><index>[<expr><name>sel</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>elt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>klen</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ucl_object_insert_key</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>random_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_test_large_array</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_insert_key</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>random_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_test_large_map</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_insert_key</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>random_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_test_large_string</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_insert_key</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>emitted</name> <operator>=</operator> <call><name>ucl_object_emit_len</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>UCL_EMIT_MSGPACK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>emitted</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%*.s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>elen</name></expr></argument>, <argument><expr><name>emitted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parser</name> <operator>=</operator> <call><name>ucl_parser_new</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ucl_parser_add_chunk_full</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>emitted</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>UCL_DUPLICATE_APPEND</name></expr></argument>, <argument><expr><name>UCL_PARSE_MSGPACK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error parsing input: %s"</literal></expr></argument>,
<argument><expr><call><name>ucl_parser_get_error</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ucl_parser_get_object</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>emitted2</name> <operator>=</operator> <call><name>ucl_object_emit_len</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>UCL_EMIT_MSGPACK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>emitted2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>elen2</name> <operator>==</operator> <name>elen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>emitted</name></expr></argument>, <argument><expr><name>emitted2</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ucl_parser_free</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_object_unref</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>emitted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>emitted2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_test_integer</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>curf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>nelt</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromint</name> <argument_list>(<argument><expr><name>cur</name> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromint</name> <argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>cur</name> <operator>%</operator> <literal type="number">128</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromint</name> <argument_list>(<argument><expr><name>cur</name> <operator>%</operator> <name>UINT16_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromint</name> <argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>cur</name> <operator>%</operator> <name>INT16_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromint</name> <argument_list>(<argument><expr><name>cur</name> <operator>%</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromint</name> <argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>cur</name> <operator>%</operator> <name>INT32_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromint</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromint</name> <argument_list>(<argument><expr><operator>-</operator><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curf</name> <operator>=</operator> <operator>(</operator><name>cur</name> <operator>%</operator> <literal type="number">128</literal><operator>)</operator> <operator>/</operator> <literal type="number">19</literal> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromdouble</name> <argument_list>(<argument><expr><name>curf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curf</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>cur</name> <operator>%</operator> <literal type="number">128</literal><operator>)</operator> <operator>/</operator> <literal type="number">19</literal> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromdouble</name> <argument_list>(<argument><expr><name>curf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curf</name> <operator>=</operator> <operator>(</operator><name>cur</name> <operator>%</operator> <literal type="number">65536</literal><operator>)</operator> <operator>/</operator> <literal type="number">19</literal> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromdouble</name> <argument_list>(<argument><expr><name>curf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromdouble</name> <argument_list>(<argument><expr><operator>-</operator><name>curf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curf</name> <operator>=</operator> <operator>(</operator><name>cur</name> <operator>%</operator> <name>INT32_MAX</name><operator>)</operator> <operator>/</operator> <literal type="number">19</literal> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromdouble</name> <argument_list>(<argument><expr><name>curf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>curf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>curf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromint</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_test_string</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>nelt</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>cur_len</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">128</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>cur_len</name> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromstring_common</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>cur_len</name> <operator>%</operator> <literal type="number">128</literal></expr></argument>,
<argument><expr><name>UCL_STRING_RAW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cur_len</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">512</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>cur_len</name> <operator>%</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_fromstring_common</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>cur_len</name> <operator>%</operator> <literal type="number">512</literal></expr></argument>,
<argument><expr><name>UCL_STRING_RAW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cur_len</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">128</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>cur_len</name> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_fromstring_common</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>cur_len</name> <operator>%</operator> <literal type="number">128</literal></expr></argument>,
<argument><expr><name>UCL_STRING_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_BINARY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cur_len</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">512</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>cur_len</name> <operator>%</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_fromstring_common</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>cur_len</name> <operator>%</operator> <literal type="number">512</literal></expr></argument>,
<argument><expr><name>UCL_STRING_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_BINARY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><literal type="number">65537</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name>ucl_object_fromstring_common</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">65537</literal></expr></argument>,
<argument><expr><name>UCL_STRING_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>elt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_BINARY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_test_boolean</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>nelt</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>ucl_object_frombool</name> <argument_list>(<argument><expr><call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_test_map</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_len</name></decl>, <decl><type ref="prev"/><name>sel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>nelt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>recursion</name> <operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>recursion</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>sel</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>NTESTS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tests</name><index>[<expr><name>sel</name></expr>]</index></name> <operator>!=</operator> <name>ucl_test_map</name> <operator>&amp;&amp;</operator>
<name><name>tests</name><index>[<expr><name>sel</name></expr>]</index></name> <operator>!=</operator> <name>ucl_test_array</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sel</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>NTESTS</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>random_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>tests</name><index>[<expr><name>sel</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>klen</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ucl_object_insert_key</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>tests</name><index>[<expr><name>sel</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ucl_object_insert_key</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_test_large_map</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">65537</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>recursion</name> <operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>random_key</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>ucl_test_boolean</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>klen</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ucl_object_insert_key</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_test_array</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_len</name></decl>, <decl><type ref="prev"/><name>sel</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>nelt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>recursion</name> <operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>recursion</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>sel</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>NTESTS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tests</name><index>[<expr><name>sel</name></expr>]</index></name> <operator>!=</operator> <name>ucl_test_map</name> <operator>&amp;&amp;</operator>
<name><name>tests</name><index>[<expr><name>sel</name></expr>]</index></name> <operator>!=</operator> <name>ucl_test_array</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sel</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call> <operator>%</operator> <name>NTESTS</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>tests</name><index>[<expr><name>sel</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_test_large_array</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">65537</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>recursion</name> <operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>ucl_test_boolean</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ucl_array_append</name> <argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_test_large_string</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ucl_object_t</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_len</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cur_len</name> <operator>=</operator> <call><name>pcg32_random</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">100000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>cur_len</name> <operator>%</operator> <literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucl_object_fromstring_common</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>cur_len</name> <operator>%</operator> <literal type="number">100000</literal></expr></argument>,
<argument><expr><name>UCL_STRING_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UCL_OBJECT_BINARY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ucl_object_t</name><modifier>*</modifier></type>
<name>ucl_test_null</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ucl_object_typed_new</name> <argument_list>(<argument><expr><name>UCL_NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
