<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libdivsufsort/include/divsufsort_private.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DIVSUFSORT_PRIVATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DIVSUFSORT_PRIVATE_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRING_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MEMORY_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STDDEF_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRINGS_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INTTYPES_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STDINT_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BUILD_DIVSUFSORT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"divsufsort64.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SAIDX_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAIDX_T</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>saidx_t</name></cpp:macro> <cpp:value>saidx64_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRIdSAIDX_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdSAIDX_T</name></cpp:macro> <cpp:value>PRIdSAIDX64_T</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>divsufsort</name></cpp:macro> <cpp:value>divsufsort64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>divbwt</name></cpp:macro> <cpp:value>divbwt64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>divsufsort_version</name></cpp:macro> <cpp:value>divsufsort64_version</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bw_transform</name></cpp:macro> <cpp:value>bw_transform64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inverse_bw_transform</name></cpp:macro> <cpp:value>inverse_bw_transform64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sufcheck</name></cpp:macro> <cpp:value>sufcheck64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sa_search</name></cpp:macro> <cpp:value>sa_search64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sa_simplesearch</name></cpp:macro> <cpp:value>sa_simplesearch64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sssort</name></cpp:macro> <cpp:value>sssort64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trsort</name></cpp:macro> <cpp:value>trsort64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"divsufsort.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UINT8_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT8_MAX</name></cpp:macro> <cpp:value>(255)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALPHABET_SIZE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>ALPHABET_SIZE</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ALPHABET_SIZE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALPHABET_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHABET_SIZE</name></cpp:macro> <cpp:value>(UINT8_MAX + 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_A_SIZE</name></cpp:macro> <cpp:value>(ALPHABET_SIZE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_B_SIZE</name></cpp:macro> <cpp:value>(ALPHABET_SIZE * ALPHABET_SIZE)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SS_INSERTIONSORT_THRESHOLD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_INSERTIONSORT_THRESHOLD</name> <operator>&lt;</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SS_INSERTIONSORT_THRESHOLD</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_INSERTIONSORT_THRESHOLD</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_INSERTIONSORT_THRESHOLD</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SS_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_BLOCKSIZE</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SS_BLOCKSIZE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_BLOCKSIZE</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">32768</literal> <operator>&lt;=</operator> <name>SS_BLOCKSIZE</name></expr></cpp:elif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SS_BLOCKSIZE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_BLOCKSIZE</name></cpp:macro> <cpp:value>(32767)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_BLOCKSIZE</name></cpp:macro> <cpp:value>(1024)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_BLOCKSIZE</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BUILD_DIVSUFSORT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_MISORT_STACKSIZE</name></cpp:macro> <cpp:value>(96)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_MISORT_STACKSIZE</name></cpp:macro> <cpp:value>(64)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SS_BLOCKSIZE</name> <operator>&lt;=</operator> <literal type="number">4096</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_MISORT_STACKSIZE</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_MISORT_STACKSIZE</name></cpp:macro> <cpp:value>(24)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BUILD_DIVSUFSORT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_SMERGE_STACKSIZE</name></cpp:macro> <cpp:value>(64)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_SMERGE_STACKSIZE</name></cpp:macro> <cpp:value>(32)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_INSERTIONSORT_THRESHOLD</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BUILD_DIVSUFSORT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_STACKSIZE</name></cpp:macro> <cpp:value>(96)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_STACKSIZE</name></cpp:macro> <cpp:value>(64)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SWAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP</name><parameter_list>(<parameter><type><name>_a</name></type></parameter>, <parameter><type><name>_b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { t = (_a); (_a) = (_b); (_b) = t; } while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>_a</name></type></parameter>, <parameter><type><name>_b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((_a) &lt; (_b)) ? (_a) : (_b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>_a</name></type></parameter>, <parameter><type><name>_b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((_a) &gt; (_b)) ? (_a) : (_b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH</name><parameter_list>(<parameter><type><name>_a</name></type></parameter>, <parameter><type><name>_b</name></type></parameter>, <parameter><type><name>_c</name></type></parameter>, <parameter><type><name>_d</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {assert(ssize &lt; STACK_SIZE);stack[ssize].a = (_a), stack[ssize].b = (_b),stack[ssize].c = (_c), stack[ssize++].d = (_d);} while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_PUSH5</name><parameter_list>(<parameter><type><name>_a</name></type></parameter>, <parameter><type><name>_b</name></type></parameter>, <parameter><type><name>_c</name></type></parameter>, <parameter><type><name>_d</name></type></parameter>, <parameter><type><name>_e</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {assert(ssize &lt; STACK_SIZE);stack[ssize].a = (_a), stack[ssize].b = (_b),stack[ssize].c = (_c), stack[ssize].d = (_d), stack[ssize++].e = (_e);} while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POP</name><parameter_list>(<parameter><type><name>_a</name></type></parameter>, <parameter><type><name>_b</name></type></parameter>, <parameter><type><name>_c</name></type></parameter>, <parameter><type><name>_d</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {assert(0 &lt;= ssize);if(ssize == 0) { return; }(_a) = stack[--ssize].a, (_b) = stack[ssize].b,(_c) = stack[ssize].c, (_d) = stack[ssize].d;} while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_POP5</name><parameter_list>(<parameter><type><name>_a</name></type></parameter>, <parameter><type><name>_b</name></type></parameter>, <parameter><type><name>_c</name></type></parameter>, <parameter><type><name>_d</name></type></parameter>, <parameter><type><name>_e</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {assert(0 &lt;= ssize);if(ssize == 0) { return; }(_a) = stack[--ssize].a, (_b) = stack[ssize].b,(_c) = stack[ssize].c, (_d) = stack[ssize].d, (_e) = stack[ssize].e;} while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_A</name><parameter_list>(<parameter><type><name>_c0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bucket_A[(_c0)]</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ALPHABET_SIZE</name> <operator>==</operator> <literal type="number">256</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_B</name><parameter_list>(<parameter><type><name>_c0</name></type></parameter>, <parameter><type><name>_c1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bucket_B[((_c1) &lt;&lt; 8) | (_c0)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_BSTAR</name><parameter_list>(<parameter><type><name>_c0</name></type></parameter>, <parameter><type><name>_c1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bucket_B[((_c0) &lt;&lt; 8) | (_c1)])</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_B</name><parameter_list>(<parameter><type><name>_c0</name></type></parameter>, <parameter><type><name>_c1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bucket_B[(_c1) * ALPHABET_SIZE + (_c0)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_BSTAR</name><parameter_list>(<parameter><type><name>_c0</name></type></parameter>, <parameter><type><name>_c1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bucket_B[(_c0) * ALPHABET_SIZE + (_c1)])</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><name>void</name></type>
<name>sssort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>Td</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>bufsize</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>saint_t</name></type> <name>lastsuffix</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>trsort</name><parameter_list>(<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>ISA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
