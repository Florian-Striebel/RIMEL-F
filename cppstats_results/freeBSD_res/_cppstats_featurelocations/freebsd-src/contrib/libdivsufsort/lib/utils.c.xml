<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libdivsufsort/lib/utils.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"divsufsort_private.h"</cpp:file></cpp:include>





<function><type><specifier>static</specifier>
<name>saidx_t</name></type>
<name>binarysearch_lower</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>half</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>half</name> <operator>=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>size</name></expr>;</condition>
<incr><expr><name>size</name> <operator>=</operator> <name>half</name></expr><operator>,</operator> <expr><name>half</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>A</name><index>[<expr><name>i</name> <operator>+</operator> <name>half</name></expr>]</index></name> <operator>&lt;</operator> <name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>half</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>half</name> <operator>-=</operator> <operator>(</operator><name>size</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>saint_t</name></type>
<name>bw_transform</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>sauchar_t</name> <modifier>*</modifier></type><name>U</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>A</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>c</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>T</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>U</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>idx</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>U</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>T</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>A</name> <operator>=</operator> <name>SA</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>divbwt</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>saint_t</name><operator>)</operator><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>T</name> <operator>==</operator> <name>U</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>U</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>j</name> <operator>&lt;=</operator> <name>p</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>T</name><index>[<expr><name>p</name></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name>sauchar_t</name><operator>)</operator><name><name>A</name><index>[<expr><name>p</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>U</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>j</name> <operator>&lt;=</operator> <name>p</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>T</name><index>[<expr><name>p</name></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name>sauchar_t</name><operator>)</operator><name><name>A</name><index>[<expr><name>p</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>U</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>T</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>U</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>T</name><index>[<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><operator>++</operator><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>U</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>T</name><index>[<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>SA</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>saint_t</name></type>
<name>inverse_bw_transform</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>sauchar_t</name> <modifier>*</modifier></type><name>U</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>A</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name><name>C</name><index>[<expr><name>ALPHABET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sauchar_t</name></type> <name><name>D</name><index>[<expr><name>ALPHABET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>B</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>T</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>U</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>n</name> <operator>&lt;</operator> <name>idx</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <name>n</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>idx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>B</name> <operator>=</operator> <name>A</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>B</name> <operator>=</operator> <operator>(</operator><name>saidx_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>saidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return> </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>ALPHABET_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>C</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><operator>++</operator><name><name>C</name><index>[<expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for>
<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>ALPHABET_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>C</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>C</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><index>[<expr><name>d</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sauchar_t</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>B</name><index>[<expr><name><name>C</name><index>[<expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> </block_content>}</block></for>
<for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>B</name><index>[<expr><name><name>C</name><index>[<expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></for>
<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>C</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><name><name>D</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>U</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>D</name><index>[<expr><call><name>binarysearch_lower</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>B</name><index>[<expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>saint_t</name></type>
<name>sufcheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>saint_t</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name><name>C</name><index>[<expr><name>ALPHABET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sufcheck: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>T</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SA</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid arguments.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&lt;=</operator> <name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Out of the range [0,%"</literal> <name>PRIdSAIDX_T</name> <literal type="string">"].\n"</literal>
<literal type="string">" SA[%"</literal> <name>PRIdSAIDX_T</name> <literal type="string">"]=%"</literal> <name>PRIdSAIDX_T</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>T</name><index>[<expr><name><name>SA</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>T</name><index>[<expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Suffixes in wrong order.\n"</literal>
<literal type="string">" T[SA[%"</literal> <name>PRIdSAIDX_T</name> <literal type="string">"]=%"</literal> <name>PRIdSAIDX_T</name> <literal type="string">"]=%d"</literal>
<literal type="string">" &gt; T[SA[%"</literal> <name>PRIdSAIDX_T</name> <literal type="string">"]=%"</literal> <name>PRIdSAIDX_T</name> <literal type="string">"]=%d\n"</literal></expr></argument>,
<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>SA</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>T</name><index>[<expr><name><name>SA</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>T</name><index>[<expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ALPHABET_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><operator>++</operator><name><name>C</name><index>[<expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ALPHABET_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>C</name><index>[<expr><name><name>T</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>C</name><index>[<expr><name><name>T</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>T</name><index>[<expr><operator>--</operator><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>C</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>p</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>p</name> <operator>!=</operator> <name><name>SA</name><index>[<expr><name>t</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Suffix in wrong position.\n"</literal>
<literal type="string">" SA[%"</literal> <name>PRIdSAIDX_T</name> <literal type="string">"]=%"</literal> <name>PRIdSAIDX_T</name> <literal type="string">" or\n"</literal>
<literal type="string">" SA[%"</literal> <name>PRIdSAIDX_T</name> <literal type="string">"]=%"</literal> <name>PRIdSAIDX_T</name> <literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>t</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>t</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>SA</name><index>[<expr><name>t</name></expr>]</index></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>t</name> <operator>!=</operator> <name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>C</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>n</name> <operator>&lt;=</operator> <name><name>C</name><index>[<expr><name>c</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>T</name><index>[<expr><name><name>SA</name><index>[<expr><name><name>C</name><index>[<expr><name>c</name></expr>]</index></name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>C</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>verbose</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier>
<name>int</name></type>
<name>_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>Tsize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>Psize</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>suf</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>match</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>r</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>suf</name> <operator>+</operator> <operator>*</operator><name>match</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <operator>*</operator><name>match</name></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>Tsize</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name>Psize</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>P</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content> </block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>match</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><operator>(</operator><name>j</name> <operator>!=</operator> <name>Psize</name><operator>)</operator></expr> </then><else>: <expr><name>r</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>saidx_t</name></type>
<name>sa_search</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>Tsize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>Psize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>SAsize</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>lsize</name></decl>, <decl><type ref="prev"/><name>rsize</name></decl>, <decl><type ref="prev"/><name>half</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>match</name></decl>, <decl><type ref="prev"/><name>lmatch</name></decl>, <decl><type ref="prev"/><name>rmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>llmatch</name></decl>, <decl><type ref="prev"/><name>lrmatch</name></decl>, <decl><type ref="prev"/><name>rlmatch</name></decl>, <decl><type ref="prev"/><name>rrmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>T</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>P</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SA</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>Tsize</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Psize</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SAsize</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>Tsize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SAsize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>Psize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <if_stmt><if>if<condition>(<expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt> <return>return <expr><name>SAsize</name></expr>;</return> </block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <name>k</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>lmatch</name> <operator>=</operator> <name>rmatch</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <name>SAsize</name></expr><operator>,</operator> <expr><name>half</name> <operator>=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>size</name></expr>;</condition>
<incr><expr><name>size</name> <operator>=</operator> <name>half</name></expr><operator>,</operator> <expr><name>half</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>lmatch</name></expr></argument>, <argument><expr><name>rmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_compare</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Tsize</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>Psize</name></expr></argument>, <argument><expr><name><name>SA</name><index>[<expr><name>i</name> <operator>+</operator> <name>half</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>half</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>half</name> <operator>-=</operator> <operator>(</operator><name>size</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lmatch</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rmatch</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lsize</name> <operator>=</operator> <name>half</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>rsize</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>half</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>half</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>llmatch</name> <operator>=</operator> <name>lmatch</name></expr><operator>,</operator> <expr><name>lrmatch</name> <operator>=</operator> <name>match</name></expr><operator>,</operator> <expr><name>half</name> <operator>=</operator> <name>lsize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>lsize</name></expr>;</condition>
<incr><expr><name>lsize</name> <operator>=</operator> <name>half</name></expr><operator>,</operator> <expr><name>half</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>lmatch</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>llmatch</name></expr></argument>, <argument><expr><name>lrmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_compare</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Tsize</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>Psize</name></expr></argument>, <argument><expr><name><name>SA</name><index>[<expr><name>j</name> <operator>+</operator> <name>half</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>half</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>half</name> <operator>-=</operator> <operator>(</operator><name>lsize</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>llmatch</name> <operator>=</operator> <name>lmatch</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lrmatch</name> <operator>=</operator> <name>lmatch</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<for>for<control>(<init><expr><name>rlmatch</name> <operator>=</operator> <name>match</name></expr><operator>,</operator> <expr><name>rrmatch</name> <operator>=</operator> <name>rmatch</name></expr><operator>,</operator> <expr><name>half</name> <operator>=</operator> <name>rsize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>rsize</name></expr>;</condition>
<incr><expr><name>rsize</name> <operator>=</operator> <name>half</name></expr><operator>,</operator> <expr><name>half</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rmatch</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>rlmatch</name></expr></argument>, <argument><expr><name>rrmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_compare</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Tsize</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>Psize</name></expr></argument>, <argument><expr><name><name>SA</name><index>[<expr><name>k</name> <operator>+</operator> <name>half</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>half</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>half</name> <operator>-=</operator> <operator>(</operator><name>rsize</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rlmatch</name> <operator>=</operator> <name>rmatch</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rrmatch</name> <operator>=</operator> <name>rmatch</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>k</name> <operator>-</operator> <name>j</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<return>return <expr><name>k</name> <operator>-</operator> <name>j</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>saidx_t</name></type>
<name>sa_simplesearch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>Tsize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>SAsize</name></decl></parameter>,
<parameter><decl><type><name>saint_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>lsize</name></decl>, <decl><type ref="prev"/><name>rsize</name></decl>, <decl><type ref="prev"/><name>half</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>T</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SA</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Tsize</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SAsize</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>Tsize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SAsize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <name>k</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <name>SAsize</name></expr><operator>,</operator> <expr><name>half</name> <operator>=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>size</name></expr>;</condition>
<incr><expr><name>size</name> <operator>=</operator> <name>half</name></expr><operator>,</operator> <expr><name>half</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>SA</name><index>[<expr><name>i</name> <operator>+</operator> <name>half</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>p</name> <operator>&lt;</operator> <name>Tsize</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>T</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name>c</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>half</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>half</name> <operator>-=</operator> <operator>(</operator><name>size</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lsize</name> <operator>=</operator> <name>half</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>rsize</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>half</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>half</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>half</name> <operator>=</operator> <name>lsize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>lsize</name></expr>;</condition>
<incr><expr><name>lsize</name> <operator>=</operator> <name>half</name></expr><operator>,</operator> <expr><name>half</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>SA</name><index>[<expr><name>j</name> <operator>+</operator> <name>half</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>p</name> <operator>&lt;</operator> <name>Tsize</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>T</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name>c</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>half</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>half</name> <operator>-=</operator> <operator>(</operator><name>lsize</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for<control>(<init><expr><name>half</name> <operator>=</operator> <name>rsize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>rsize</name></expr>;</condition>
<incr><expr><name>rsize</name> <operator>=</operator> <name>half</name></expr><operator>,</operator> <expr><name>half</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>SA</name><index>[<expr><name>k</name> <operator>+</operator> <name>half</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>p</name> <operator>&lt;</operator> <name>Tsize</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>T</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name>c</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>half</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>half</name> <operator>-=</operator> <operator>(</operator><name>rsize</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>k</name> <operator>-</operator> <name>j</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<return>return <expr><name>k</name> <operator>-</operator> <name>j</name></expr>;</return>
</block_content>}</block></function>
</unit>
