<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libdivsufsort/lib/divsufsort.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"divsufsort_private.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OPENMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;omp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier>
<name>saidx_t</name></type>
<name>sort_typeBstar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>bucket_A</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>bucket_B</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>PAb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ISAb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OPENMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>curbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>l</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>bufsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OPENMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>saint_t</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUCKET_A_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>bucket_A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUCKET_B_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>bucket_B</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></for>




<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>m</name> <operator>=</operator> <name>n</name></expr><operator>,</operator> <expr><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<do>do <block>{<block_content> <expr_stmt><expr><operator>++</operator><call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c1</name> <operator>=</operator> <name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <operator>--</operator><name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <name>c1</name><operator>)</operator></expr>)</condition>;</do>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><call><name>BUCKET_BSTAR</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SA</name><index>[<expr><operator>--</operator><name>m</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><operator>--</operator><name>i</name></expr><operator>,</operator> <expr><name>c1</name> <operator>=</operator> <name>c0</name></expr>;</init> <condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;=</operator> <name>c1</name><operator>)</operator></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr><operator>,</operator> <expr><name>c1</name> <operator>=</operator> <name>c0</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><call><name>BUCKET_B</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>m</name></expr>;</expr_stmt>







<for>for<control>(<init><expr><name>c0</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c0</name> <operator>&lt;</operator> <name>ALPHABET_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>c0</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>i</name> <operator>+</operator> <call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c0</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>t</name> <operator>+</operator> <call><name>BUCKET_B</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>c1</name> <operator>=</operator> <name>c0</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c1</name> <operator>&lt;</operator> <name>ALPHABET_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>c1</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <call><name>BUCKET_BSTAR</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUCKET_BSTAR</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>BUCKET_B</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>PAb</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <name>n</name> <operator>-</operator> <name>m</name></expr>;</expr_stmt> <expr_stmt><expr><name>ISAb</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <name>m</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>PAb</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>t</name></expr>]</index></name></expr><operator>,</operator> <expr><name>c1</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SA</name><index>[<expr><operator>--</operator><call><name>BUCKET_BSTAR</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>PAb</name><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>t</name></expr>]</index></name></expr><operator>,</operator> <expr><name>c1</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SA</name><index>[<expr><operator>--</operator><call><name>BUCKET_BSTAR</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OPENMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>omp_get_max_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <name>m</name></expr><operator>,</operator> <expr><name>bufsize</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>m</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <name>ALPHABET_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>c1</name> <operator>=</operator> <name>ALPHABET_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:clause><omp:name>default</omp:name><omp:argument_list>(<omp:argument><omp:expr>shared</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>private</omp:name><omp:argument_list>(<omp:argument><omp:expr>curbuf</omp:expr></omp:argument>, <omp:argument><omp:expr>k</omp:expr></omp:argument>, <omp:argument><omp:expr>l</omp:expr></omp:argument>, <omp:argument><omp:expr>d0</omp:expr></omp:argument>, <omp:argument><omp:expr>d1</omp:expr></omp:argument>, <omp:argument><omp:expr>tmp</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>omp_get_thread_num</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>tmp</name> <operator>*</operator> <name>bufsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>critical</omp:name><omp:argument_list>(<omp:argument><omp:expr>sssort_lock</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>l</name> <operator>=</operator> <name>j</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>c0</name></expr><operator>,</operator> <expr><name>d1</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>BUCKET_BSTAR</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>--</operator><name>d1</name> <operator>&lt;=</operator> <name>d0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>ALPHABET_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>--</operator><name>d0</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><operator>(</operator><operator>(</operator><name>l</name> <operator>-</operator> <name>k</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>l</name> <operator>=</operator> <name>k</name><operator>)</operator><operator>)</operator></expr>)</condition>;</do>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <name>d0</name></expr><operator>,</operator> <expr><name>c1</name> <operator>=</operator> <name>d1</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if<condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sssort</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PAb</name></expr></argument>, <argument><expr><name>SA</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>SA</name> <operator>+</operator> <name>l</name></expr></argument>,
<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>SA</name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <name>m</name></expr><operator>,</operator> <expr><name>bufsize</name> <operator>=</operator> <name>n</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>c0</name> <operator>=</operator> <name>ALPHABET_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>m</name></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><operator>--</operator><name>c0</name></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>c1</name> <operator>=</operator> <name>ALPHABET_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c0</name> <operator>&lt;</operator> <name>c1</name></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><operator>--</operator><name>c1</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>BUCKET_BSTAR</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>j</name> <operator>-</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sssort</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PAb</name></expr></argument>, <argument><expr><name>SA</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>SA</name> <operator>+</operator> <name>j</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>SA</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<do>do <block>{<block_content> <expr_stmt><expr><name><name>ISAb</name><index>[<expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <operator>--</operator><name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition>;</do>
<expr_stmt><expr><name><name>SA</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<do>do <block>{<block_content> <expr_stmt><expr><name><name>ISAb</name><index>[<expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><name><name>SA</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><name><name>ISAb</name><index>[<expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>trsort</name><argument_list>(<argument><expr><name>ISAb</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>m</name></expr><operator>,</operator> <expr><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<for>for<control>(<init><expr><operator>--</operator><name>i</name></expr><operator>,</operator> <expr><name>c1</name> <operator>=</operator> <name>c0</name></expr>;</init> <condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <name>c1</name><operator>)</operator></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr><operator>,</operator> <expr><name>c1</name> <operator>=</operator> <name>c0</name></expr></incr>)</control> <block>{<block_content> </block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><operator>--</operator><name>i</name></expr><operator>,</operator> <expr><name>c1</name> <operator>=</operator> <name>c0</name></expr>;</init> <condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;=</operator> <name>c1</name><operator>)</operator></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr><operator>,</operator> <expr><name>c1</name> <operator>=</operator> <name>c0</name></expr></incr>)</control> <block>{<block_content> </block_content>}</block></for>
<expr_stmt><expr><name><name>SA</name><index>[<expr><name><name>ISAb</name><index>[<expr><operator>--</operator><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>t</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>t</name> <operator>-</operator> <name>i</name><operator>)</operator><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>t</name></expr> </then><else>: <expr><operator>~</operator><name>t</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>BUCKET_B</name><argument_list>(<argument><expr><name>ALPHABET_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ALPHABET_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>c0</name> <operator>=</operator> <name>ALPHABET_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>c0</name></expr>;</condition> <incr><expr><operator>--</operator><name>c0</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>c1</name> <operator>=</operator> <name>ALPHABET_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c0</name> <operator>&lt;</operator> <name>c1</name></expr>;</condition> <incr><expr><operator>--</operator><name>c1</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>i</name> <operator>-</operator> <call><name>BUCKET_B</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUCKET_B</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>i</name></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>t</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <call><name>BUCKET_BSTAR</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>j</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition>
<incr><expr><operator>--</operator><name>i</name></expr><operator>,</operator> <expr><operator>--</operator><name>k</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>SA</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>BUCKET_BSTAR</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>i</name> <operator>-</operator> <call><name>BUCKET_B</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUCKET_B</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier>
<name>void</name></type>
<name>construct_SA</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>bucket_A</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>bucket_B</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>j</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>


<for>for<control>(<init><expr><name>c1</name> <operator>=</operator> <name>ALPHABET_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>c1</name></expr>;</condition> <incr><expr><operator>--</operator><name>c1</name></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <call><name>BUCKET_BSTAR</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><name>j</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>c2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition>
<incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>j</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>n</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>T</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>T</name><index>[<expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>T</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>j</name> <operator>=</operator> <operator>~</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><operator>--</operator><name>s</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <name>s</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>T</name><index>[<expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>c0</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>~</operator><name>s</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>!=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>c2</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>BUCKET_B</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>k</name> <operator>-</operator> <name>SA</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <call><name>BUCKET_B</name><argument_list>(<argument><expr><name>c2</name> <operator>=</operator> <name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>k</name><operator>--</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>s</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>T</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name>c1</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>j</name> <operator>=</operator> <operator>~</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>k</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c2</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>k</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>T</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <name>c2</name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>SA</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>T</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><operator>--</operator><name>s</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>s</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>T</name><index>[<expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>c0</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>~</operator><name>s</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>!=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>k</name> <operator>-</operator> <name>SA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c2</name> <operator>=</operator> <name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>k</name><operator>++</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>i</name> <operator>=</operator> <operator>~</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier>
<name>saidx_t</name></type>
<name>construct_BWT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>bucket_A</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>bucket_B</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>j</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>k</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>


<for>for<control>(<init><expr><name>c1</name> <operator>=</operator> <name>ALPHABET_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>c1</name></expr>;</condition> <incr><expr><operator>--</operator><name>c1</name></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <call><name>BUCKET_BSTAR</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><name>j</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>c2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition>
<incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>j</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>n</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>T</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>T</name><index>[<expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>T</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><operator>--</operator><name>s</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>j</name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>saidx_t</name><operator>)</operator><name>c0</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <name>s</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>T</name><index>[<expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>c0</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>~</operator><name>s</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>!=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>c2</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>BUCKET_B</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>k</name> <operator>-</operator> <name>SA</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <call><name>BUCKET_B</name><argument_list>(<argument><expr><name>c2</name> <operator>=</operator> <name>c0</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>k</name><operator>--</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>j</name> <operator>=</operator> <operator>~</operator><name>s</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>k</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c2</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>k</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>T</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <name>c2</name><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><operator>(</operator><operator>(</operator><name>saidx_t</name><operator>)</operator><name><name>T</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>SA</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <name>n</name></expr><operator>,</operator> <expr><name>orig</name> <operator>=</operator> <name>SA</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>T</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <name><name>T</name><index>[<expr><operator>--</operator><name>s</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>i</name> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <name>s</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>T</name><index>[<expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>c0</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>saidx_t</name><operator>)</operator><name><name>T</name><index>[<expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>!=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>k</name> <operator>-</operator> <name>SA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <call><name>BUCKET_A</name><argument_list>(<argument><expr><name>c2</name> <operator>=</operator> <name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>k</name><operator>++</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>i</name> <operator>=</operator> <operator>~</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>orig</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>orig</name> <operator>-</operator> <name>SA</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>saint_t</name></type>
<name>divsufsort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>bucket_A</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bucket_B</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>T</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SA</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>SA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name><name>T</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>T</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>SA</name><index>[<expr><name>m</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name><name>SA</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bucket_A</name> <operator>=</operator> <operator>(</operator><name>saidx_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>BUCKET_A_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>saidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bucket_B</name> <operator>=</operator> <operator>(</operator><name>saidx_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>BUCKET_B_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>saidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>bucket_A</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bucket_B</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>sort_typeBstar</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><name>bucket_A</name></expr></argument>, <argument><expr><name>bucket_B</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>construct_SA</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><name>bucket_A</name></expr></argument>, <argument><expr><name>bucket_B</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bucket_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bucket_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>saidx_t</name></type>
<name>divbwt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>sauchar_t</name> <modifier>*</modifier></type><name>U</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>B</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>bucket_A</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bucket_B</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>pidx</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>T</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>U</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>U</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>T</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt> <return>return <expr><name>n</name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>B</name> <operator>=</operator> <name>A</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><name>saidx_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>saidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bucket_A</name> <operator>=</operator> <operator>(</operator><name>saidx_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>BUCKET_A_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>saidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bucket_B</name> <operator>=</operator> <operator>(</operator><name>saidx_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>BUCKET_B_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>saidx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>B</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bucket_A</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bucket_B</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>sort_typeBstar</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>bucket_A</name></expr></argument>, <argument><expr><name>bucket_B</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pidx</name> <operator>=</operator> <call><name>construct_BWT</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>bucket_A</name></expr></argument>, <argument><expr><name>bucket_B</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>U</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>T</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pidx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>U</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sauchar_t</name><operator>)</operator><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>U</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sauchar_t</name><operator>)</operator><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for>
<expr_stmt><expr><name>pidx</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pidx</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bucket_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bucket_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<return>return <expr><name>pidx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>divsufsort_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>PROJECT_VERSION_FULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
