<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libdivsufsort/lib/sssort.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"divsufsort_private.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>saint_t</name></type> <name><name>lg_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name><init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,
<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,
<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SS_BLOCKSIZE</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SS_INSERTIONSORT_THRESHOLD</name> <operator>&lt;</operator> <name>SS_BLOCKSIZE</name><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saint_t</name></type>
<name>ss_ilg</name><parameter_list>(<parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><name>SS_BLOCKSIZE</name> <operator>==</operator> <literal type="number">0</literal></expr></condition></ternary></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>BUILD_DIVSUFSORT64</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">56</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">48</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">40</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">32</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">24</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">16</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">8</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">0</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">24</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">16</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">8</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">0</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SS_BLOCKSIZE</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></cpp:elif>
<return>return <expr><name><name>lg_table</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">8</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">0</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_BLOCKSIZE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>saint_t</name></type> <name><name>sqq_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">61</literal></expr>,
<expr><literal type="number">64</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">89</literal></expr>,
<expr><literal type="number">90</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">109</literal></expr>,
<expr><literal type="number">110</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">126</literal></expr>,
<expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">142</literal></expr>,
<expr><literal type="number">143</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">155</literal></expr>,
<expr><literal type="number">156</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">161</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">164</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">168</literal></expr>,
<expr><literal type="number">169</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">177</literal></expr>, <expr><literal type="number">178</literal></expr>, <expr><literal type="number">178</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">180</literal></expr>,
<expr><literal type="number">181</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">188</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">191</literal></expr>,
<expr><literal type="number">192</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">194</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">196</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">199</literal></expr>, <expr><literal type="number">199</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">201</literal></expr>, <expr><literal type="number">201</literal></expr>,
<expr><literal type="number">202</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">207</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">210</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">211</literal></expr>,
<expr><literal type="number">212</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="number">214</literal></expr>, <expr><literal type="number">214</literal></expr>, <expr><literal type="number">215</literal></expr>, <expr><literal type="number">215</literal></expr>, <expr><literal type="number">216</literal></expr>, <expr><literal type="number">217</literal></expr>, <expr><literal type="number">217</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">220</literal></expr>, <expr><literal type="number">221</literal></expr>,
<expr><literal type="number">221</literal></expr>, <expr><literal type="number">222</literal></expr>, <expr><literal type="number">222</literal></expr>, <expr><literal type="number">223</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">226</literal></expr>, <expr><literal type="number">226</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">228</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">230</literal></expr>,
<expr><literal type="number">230</literal></expr>, <expr><literal type="number">231</literal></expr>, <expr><literal type="number">231</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">233</literal></expr>, <expr><literal type="number">234</literal></expr>, <expr><literal type="number">234</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">236</literal></expr>, <expr><literal type="number">236</literal></expr>, <expr><literal type="number">237</literal></expr>, <expr><literal type="number">237</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">238</literal></expr>,
<expr><literal type="number">239</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">241</literal></expr>, <expr><literal type="number">241</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">246</literal></expr>, <expr><literal type="number">246</literal></expr>, <expr><literal type="number">247</literal></expr>,
<expr><literal type="number">247</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">249</literal></expr>, <expr><literal type="number">249</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><literal type="number">251</literal></expr>, <expr><literal type="number">251</literal></expr>, <expr><literal type="number">252</literal></expr>, <expr><literal type="number">252</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">254</literal></expr>, <expr><literal type="number">254</literal></expr>, <expr><literal type="number">255</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saidx_t</name></type>
<name>ss_isqrt</name><parameter_list>(<parameter><decl><type><name>saidx_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&gt;=</operator> <operator>(</operator><name>SS_BLOCKSIZE</name> <operator>*</operator> <name>SS_BLOCKSIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><name>SS_BLOCKSIZE</name></expr>;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">24</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">16</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">8</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">0</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>sqq_table</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>e</name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>/</operator> <name>y</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>/</operator> <name>y</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name><name>sqq_table</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>e</name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name><name>sqq_table</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>y</name> <operator>*</operator> <name>y</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saint_t</name></type>
<name>ss_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>U1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>U2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>U1n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>U2n</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>U1</name> <operator>=</operator> <name>T</name> <operator>+</operator> <name>depth</name> <operator>+</operator> <operator>*</operator><name>p1</name></expr><operator>,</operator>
<expr><name>U2</name> <operator>=</operator> <name>T</name> <operator>+</operator> <name>depth</name> <operator>+</operator> <operator>*</operator><name>p2</name></expr><operator>,</operator>
<expr><name>U1n</name> <operator>=</operator> <name>T</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>p1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr><operator>,</operator>
<expr><name>U2n</name> <operator>=</operator> <name>T</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>p2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</init>
<condition><expr><operator>(</operator><name>U1</name> <operator>&lt;</operator> <name>U1n</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>U2</name> <operator>&lt;</operator> <name>U2n</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>U1</name> <operator>==</operator> <operator>*</operator><name>U2</name><operator>)</operator></expr>;</condition>
<incr><expr><operator>++</operator><name>U1</name></expr><operator>,</operator> <expr><operator>++</operator><name>U2</name></expr></incr>)</control> <block>{<block_content>
</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><name>U1</name> <operator>&lt;</operator> <name>U1n</name></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><name>U2</name> <operator>&lt;</operator> <name>U2n</name></expr> ?</condition><then> <expr><operator>*</operator><name>U1</name> <operator>-</operator> <operator>*</operator><name>U2</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name>U2</name> <operator>&lt;</operator> <name>U2n</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SS_BLOCKSIZE</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>SS_INSERTIONSORT_THRESHOLD</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>


<function><type><specifier>static</specifier>
<name>void</name></type>
<name>ss_insertionsort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>r</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>last</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>first</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>i</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <operator>(</operator><name>r</name> <operator>=</operator> <call><name>ss_compare</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name> <operator>+</operator> <name>t</name></expr></argument>, <argument><expr><name>PA</name> <operator>+</operator> <operator>*</operator><name>j</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <operator>*</operator><name>j</name></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><operator>(</operator><operator>++</operator><name>j</name> <operator>&lt;</operator> <name>last</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>;</do>
<if_stmt><if>if<condition>(<expr><name>last</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>j</name> <operator>=</operator> <operator>~</operator><operator>*</operator><name>j</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SS_BLOCKSIZE</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SS_INSERTIONSORT_THRESHOLD</name> <operator>&lt;</operator> <name>SS_BLOCKSIZE</name><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>INLINE</name>
<name>void</name></type>
<name>ss_fixdown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>Td</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>v</name> <operator>=</operator> <name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr>;</init> <condition><expr><operator>(</operator><name>j</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>SA</name><index>[<expr><name>k</name></expr>]</index></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><name><name>SA</name><index>[<expr><name>k</name> <operator>=</operator> <name>j</name><operator>++</operator></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>&lt;</operator> <operator>(</operator><name>e</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><name><name>SA</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>&lt;=</operator> <name>c</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier>
<name>void</name></type>
<name>ss_heapsort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>Td</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><name><name>SA</name><index>[<expr><name>m</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><name><name>SA</name><index>[<expr><name>m</name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>SA</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>SA</name><index>[<expr><name>m</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>m</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>ss_fixdown</name><argument_list>(<argument><expr><name>Td</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>SA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>SA</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ss_fixdown</name><argument_list>(<argument><expr><name>Td</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>SA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>SA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ss_fixdown</name><argument_list>(<argument><expr><name>Td</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saidx_t</name> <modifier>*</modifier></type>
<name>ss_median3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>Td</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v3</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v1</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v2</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v2</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v3</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v1</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v3</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content> <return>return <expr><name>v1</name></expr>;</return> </block_content>}</block></if>
<else>else <block>{<block_content> <return>return <expr><name>v3</name></expr>;</return> </block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>v2</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saidx_t</name> <modifier>*</modifier></type>
<name>ss_median5</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>Td</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v3</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v4</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v5</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v2</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v3</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v4</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v5</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><name>v5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v2</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v4</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><name>v5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v1</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v3</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v1</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v4</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><name>v5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v3</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>v4</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content> <return>return <expr><name>v4</name></expr>;</return> </block_content>}</block></if></if_stmt>
<return>return <expr><name>v3</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saidx_t</name> <modifier>*</modifier></type>
<name>ss_pivot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>Td</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>middle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><name>middle</name> <operator>=</operator> <name>first</name> <operator>+</operator> <name>t</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name> <operator>&lt;=</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>t</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ss_median3</name><argument_list>(<argument><expr><name>Td</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><call><name>ss_median5</name><argument_list>(<argument><expr><name>Td</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>first</name> <operator>+</operator> <name>t</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>t</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>ss_median3</name><argument_list>(<argument><expr><name>Td</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>first</name> <operator>+</operator> <name>t</name></expr></argument>, <argument><expr><name>first</name> <operator>+</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>middle</name> <operator>=</operator> <call><name>ss_median3</name><argument_list>(<argument><expr><name>Td</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>middle</name> <operator>-</operator> <name>t</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>middle</name> <operator>+</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>ss_median3</name><argument_list>(<argument><expr><name>Td</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>t</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ss_median3</name><argument_list>(<argument><expr><name>Td</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saidx_t</name> <modifier>*</modifier></type>
<name>ss_partition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>a</name> <operator>=</operator> <name>first</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>last</name></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><operator>++</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>PA</name><index>[<expr><operator>*</operator><name>a</name></expr>]</index></name> <operator>+</operator> <name>depth</name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name><name>PA</name><index>[<expr><operator>*</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <operator>~</operator><operator>*</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block></for>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><name>a</name> <operator>&lt;</operator> <operator>--</operator><name>b</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>PA</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name> <operator>+</operator> <name>depth</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>PA</name><index>[<expr><operator>*</operator><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content> </block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>b</name> <operator>&lt;=</operator> <name>a</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>~</operator><operator>*</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>first</name> <operator>&lt;</operator> <name>a</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <operator>~</operator><operator>*</operator><name>first</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier>
<name>void</name></type>
<name>ss_mintrosort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_SIZE</name></cpp:macro> <cpp:value>SS_MISORT_STACKSIZE</cpp:value></cpp:define>
<struct>struct <block>{ <decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>saint_t</name></type> <name>d</name></decl>;</decl_stmt> }</block> <decl><name><name>stack</name><index>[<expr><name>STACK_SIZE</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>Td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>ssize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>ssize</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <call><name>ss_ilg</name><argument_list>(<argument><expr><name>last</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <name>SS_INSERTIONSORT_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal> <operator>&lt;</operator> <name>SS_INSERTIONSORT_THRESHOLD</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>ss_insertionsort</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>STACK_POP</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Td</name> <operator>=</operator> <name>T</name> <operator>+</operator> <name>depth</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>limit</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>ss_heapsort</name><argument_list>(<argument><expr><name>Td</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>limit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>a</name> <operator>=</operator> <name>first</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>first</name></expr>]</index></name></expr>]</index></name></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><operator>++</operator><name>a</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>x</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>a</name></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>v</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>first</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>ss_partition</name><argument_list>(<argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>depth</name> <operator>+=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <call><name>ss_ilg</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ss_ilg</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>depth</name> <operator>+=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <call><name>ss_ilg</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ss_pivot</name><argument_list>(<argument><expr><name>Td</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>a</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>, <argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>b</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><operator>(</operator><operator>++</operator><name>b</name> <operator>&lt;</operator> <name>last</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content> </block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>a</name> <operator>=</operator> <name>b</name><operator>)</operator> <operator>&lt;</operator> <name>last</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <name>v</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><operator>++</operator><name>b</name> <operator>&lt;</operator> <name>last</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>&lt;=</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><operator>(</operator><name>b</name> <operator>&lt;</operator> <operator>--</operator><name>c</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>c</name></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content> </block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>b</name> <operator>&lt;</operator> <operator>(</operator><name>d</name> <operator>=</operator> <name>c</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&gt;</operator> <name>v</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><name>b</name> <operator>&lt;</operator> <operator>--</operator><name>c</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>c</name></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>d</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>c</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><operator>++</operator><name>b</name> <operator>&lt;</operator> <name>c</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>&lt;=</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><name>b</name> <operator>&lt;</operator> <operator>--</operator><name>c</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>c</name></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>d</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>d</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>t</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>s</name></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>s</name></expr>;</condition> <incr><expr><operator>--</operator><name>s</name></expr><operator>,</operator> <expr><operator>++</operator><name>e</name></expr><operator>,</operator> <expr><operator>++</operator><name>f</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <name>d</name> <operator>-</operator> <name>c</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>t</name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>d</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>s</name></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>s</name></expr>;</condition> <incr><expr><operator>--</operator><name>s</name></expr><operator>,</operator> <expr><operator>++</operator><name>e</name></expr><operator>,</operator> <expr><operator>++</operator><name>f</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>first</name> <operator>+</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>last</name> <operator>-</operator> <operator>(</operator><name>d</name> <operator>-</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v</name> <operator>&lt;=</operator> <name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>a</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>ss_partition</name><argument_list>(<argument><expr><name>PA</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>last</name> <operator>-</operator> <name>c</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>c</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ss_ilg</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>c</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ss_ilg</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>c</name></expr><operator>,</operator> <expr><name>depth</name> <operator>+=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <call><name>ss_ilg</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>c</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ss_ilg</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>(</operator><name>last</name> <operator>-</operator> <name>c</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>c</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ss_ilg</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>c</name></expr><operator>,</operator> <expr><name>depth</name> <operator>+=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <call><name>ss_ilg</name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>limit</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>Td</name><index>[<expr><name><name>PA</name><index>[<expr><operator>*</operator><name>first</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>ss_partition</name><argument_list>(<argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>ss_ilg</name><argument_list>(<argument><expr><name>last</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>depth</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STACK_SIZE</name></cpp:undef>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_BLOCKSIZE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>INLINE</name>
<name>void</name></type>
<name>ss_blockswap</name><parameter_list>(<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>;</decl_stmt>
<for>for<control>(<init>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr><operator>,</operator> <expr><operator>++</operator><name>a</name></expr><operator>,</operator> <expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>a</name></expr><operator>,</operator> <expr><operator>*</operator><name>a</name> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>INLINE</name>
<name>void</name></type>
<name>ss_rotate</name><parameter_list>(<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>middle</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>middle</name> <operator>-</operator> <name>first</name></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>middle</name></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <name>l</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <name>r</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>ss_blockswap</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>last</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>middle</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>b</name> <operator>&lt;</operator> <name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>r</name> <operator>-=</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>l</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>-=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>middle</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>middle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last</name> <operator>&lt;=</operator> <name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>l</name> <operator>-=</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>r</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>middle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier>
<name>void</name></type>
<name>ss_inplacemerge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>middle</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>half</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>x</name></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>(</operator><name>last</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>~</operator><operator>*</operator><operator>(</operator><name>last</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> </block_content>}</block></if>
<else>else <block>{<block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>last</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
<for>for<control>(<init><expr><name>a</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <name>middle</name> <operator>-</operator> <name>first</name></expr><operator>,</operator> <expr><name>half</name> <operator>=</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init>
<condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>len</name></expr>;</condition>
<incr><expr><name>len</name> <operator>=</operator> <name>half</name></expr><operator>,</operator> <expr><name>half</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>half</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>ss_compare</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <operator>*</operator><name>b</name><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>b</name></expr> </then><else>: <expr><operator>~</operator><operator>*</operator><name>b</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>q</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>half</name> <operator>-=</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <name>middle</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <operator>~</operator><operator>*</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ss_rotate</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>-=</operator> <name>middle</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>middle</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>first</name> <operator>==</operator> <name>middle</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>last</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <while>while<condition>(<expr><operator>*</operator><operator>--</operator><name>last</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> </block_content>}</block></while> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>middle</name> <operator>==</operator> <name>last</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>ss_mergeforward</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>middle</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bufend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><name>middle</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ss_blockswap</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>t</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>a</name> <operator>=</operator> <name>first</name><operator>)</operator></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>buf</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>middle</name></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ss_compare</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name> <operator>+</operator> <operator>*</operator><name>b</name></expr></argument>, <argument><expr><name>PA</name> <operator>+</operator> <operator>*</operator><name>c</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bufend</name> <operator>&lt;=</operator> <name>b</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>bufend</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><operator>*</operator><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>c</name></expr><operator>,</operator> <expr><operator>*</operator><name>c</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last</name> <operator>&lt;=</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>b</name> <operator>&lt;</operator> <name>bufend</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><operator>*</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <operator>~</operator><operator>*</operator><name>c</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bufend</name> <operator>&lt;=</operator> <name>b</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>bufend</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><operator>*</operator><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>c</name></expr><operator>,</operator> <expr><operator>*</operator><name>c</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last</name> <operator>&lt;=</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>b</name> <operator>&lt;</operator> <name>bufend</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><operator>*</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier>
<name>void</name></type>
<name>ss_mergebackward</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>middle</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bufend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bufend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>middle</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ss_blockswap</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <name>middle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufend</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>~</operator><operator>*</operator><name>bufend</name></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if>
<else>else <block>{<block_content> <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>*</operator><name>bufend</name></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>(</operator><name>middle</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>~</operator><operator>*</operator><operator>(</operator><name>middle</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt> </block_content>}</block></if>
<else>else <block>{<block_content> <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>middle</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
<for>for<control>(<init><expr><name>t</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>a</name> <operator>=</operator> <name>last</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>bufend</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name>middle</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ss_compare</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>a</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><operator>*</operator><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do> <expr_stmt><expr><name>x</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>b</name> <operator>&lt;=</operator> <name>buf</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>~</operator><operator>*</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if>
<else>else <block>{<block_content> <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>a</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>c</name></expr><operator>,</operator> <expr><operator>*</operator><name>c</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><operator>*</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do> <expr_stmt><expr><name>x</name> <operator>^=</operator> <literal type="number">2</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>c</name></expr><operator>,</operator> <expr><operator>*</operator><name>c</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>first</name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>a</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>~</operator><operator>*</operator><name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt> </block_content>}</block></if>
<else>else <block>{<block_content> <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>a</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><operator>*</operator><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do> <expr_stmt><expr><name>x</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>--</operator> <operator>=</operator> <operator>~</operator><operator>*</operator><name>b</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>b</name> <operator>&lt;=</operator> <name>buf</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>a</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>c</name></expr><operator>,</operator> <expr><operator>*</operator><name>c</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><operator>*</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do> <expr_stmt><expr><name>x</name> <operator>^=</operator> <literal type="number">2</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>c</name></expr><operator>,</operator> <expr><operator>*</operator><name>c</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>first</name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>b</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>a</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <operator>*</operator><name>b</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>~</operator><operator>*</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if>
<else>else <block>{<block_content> <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>~</operator><operator>*</operator><name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt> </block_content>}</block></if>
<else>else <block>{<block_content> <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>PA</name> <operator>+</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier>
<name>void</name></type>
<name>ss_swapmerge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>middle</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_SIZE</name></cpp:macro> <cpp:value>SS_SMERGE_STACKSIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETIDX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((0 &lt;= (a)) ? (a) : (~(a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_CHECK</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {if(((c) &amp; 1) ||(((c) &amp; 2) &amp;&amp; (ss_compare(T, PA + GETIDX(*((a) - 1)), PA + *(a), depth) == 0))) {*(a) = ~*(a);}if(((c) &amp; 4) &amp;&amp; ((ss_compare(T, PA + GETIDX(*((b) - 1)), PA + *(b), depth) == 0))) {*(b) = ~*(b);}} while(0)</cpp:value></cpp:define>









<struct>struct <block>{ <decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>saint_t</name></type> <name>d</name></decl>;</decl_stmt> }</block> <decl><name><name>stack</name><index>[<expr><name>STACK_SIZE</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>half</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>ssize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>check</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>check</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ssize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>last</name> <operator>-</operator> <name>middle</name><operator>)</operator> <operator>&lt;=</operator> <name>bufsize</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>first</name> <operator>&lt;</operator> <name>middle</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>middle</name> <operator>&lt;</operator> <name>last</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ss_mergebackward</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MERGE_CHECK</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_POP</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>middle</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <name>bufsize</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>first</name> <operator>&lt;</operator> <name>middle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ss_mergeforward</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MERGE_CHECK</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_POP</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>middle</name> <operator>-</operator> <name>first</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <name>middle</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>half</name> <operator>=</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>len</name></expr>;</condition>
<incr><expr><name>len</name> <operator>=</operator> <name>half</name></expr><operator>,</operator> <expr><name>half</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>ss_compare</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name> <operator>+</operator> <call><name>GETIDX</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>middle</name> <operator>+</operator> <name>m</name> <operator>+</operator> <name>half</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>PA</name> <operator>+</operator> <call><name>GETIDX</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>middle</name> <operator>-</operator> <name>m</name> <operator>-</operator> <name>half</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <name>half</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>half</name> <operator>-=</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lm</name> <operator>=</operator> <name>middle</name> <operator>-</operator> <name>m</name></expr><operator>,</operator> <expr><name>rm</name> <operator>=</operator> <name>middle</name> <operator>+</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ss_blockswap</name><argument_list>(<argument><expr><name>lm</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>r</name> <operator>=</operator> <name>middle</name></expr><operator>,</operator> <expr><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rm</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>rm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rm</name> <operator>=</operator> <operator>~</operator><operator>*</operator><name>rm</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>first</name> <operator>&lt;</operator> <name>lm</name></expr>)</condition> <block>{<block_content> <for>for<control>(<init>;</init> <condition><expr><operator>*</operator><operator>--</operator><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{<block_content> </block_content>}</block></for> <expr_stmt><expr><name>next</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>first</name> <operator>&lt;</operator> <name>lm</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block>{<block_content> </block_content>}</block></for>
<expr_stmt><expr><name>next</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>l</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>r</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>(</operator><name>next</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>check</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>middle</name> <operator>=</operator> <name>lm</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>l</name></expr><operator>,</operator> <expr><name>check</name> <operator>=</operator> <operator>(</operator><name>check</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>next</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>next</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>middle</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>next</name> <operator>^=</operator> <literal type="number">6</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STACK_PUSH</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>lm</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>check</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>next</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>r</name></expr><operator>,</operator> <expr><name>middle</name> <operator>=</operator> <name>rm</name></expr><operator>,</operator> <expr><name>check</name> <operator>=</operator> <operator>(</operator><name>next</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>check</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>ss_compare</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name> <operator>+</operator> <call><name>GETIDX</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>middle</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PA</name> <operator>+</operator> <operator>*</operator><name>middle</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>middle</name> <operator>=</operator> <operator>~</operator><operator>*</operator><name>middle</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MERGE_CHECK</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_POP</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STACK_SIZE</name></cpp:undef>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>void</name></type>
<name>sssort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sauchar_t</name> <modifier>*</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>PA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>bufsize</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>saint_t</name></type> <name>lastsuffix</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_BLOCKSIZE</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>middle</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>curbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>curbufsize</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>lastsuffix</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>++</operator><name>first</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_BLOCKSIZE</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<expr_stmt><expr><call><name>ss_mintrosort</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>bufsize</name> <operator>&lt;</operator> <name>SS_BLOCKSIZE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>bufsize</name> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>bufsize</name> <operator>&lt;</operator> <operator>(</operator><name>limit</name> <operator>=</operator> <call><name>ss_isqrt</name><argument_list>(<argument><expr><name>last</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>SS_BLOCKSIZE</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>limit</name> <operator>=</operator> <name>SS_BLOCKSIZE</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>middle</name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>limit</name></expr><operator>,</operator> <expr><name>bufsize</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>middle</name> <operator>=</operator> <name>last</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for<control>(<init><expr><name>a</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>SS_BLOCKSIZE</name> <operator>&lt;</operator> <operator>(</operator><name>middle</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>;</condition> <incr><expr><name>a</name> <operator>+=</operator> <name>SS_BLOCKSIZE</name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_INSERTIONSORT_THRESHOLD</name> <operator>&lt;</operator> <name>SS_BLOCKSIZE</name></expr></cpp:if>
<expr_stmt><expr><call><name>ss_mintrosort</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>SS_BLOCKSIZE</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal> <operator>&lt;</operator> <name>SS_BLOCKSIZE</name></expr></cpp:elif>
<expr_stmt><expr><call><name>ss_insertionsort</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>SS_BLOCKSIZE</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>curbufsize</name> <operator>=</operator> <name>last</name> <operator>-</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>SS_BLOCKSIZE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>SS_BLOCKSIZE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>curbufsize</name> <operator>&lt;=</operator> <name>bufsize</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>curbufsize</name> <operator>=</operator> <name>bufsize</name></expr><operator>,</operator> <expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>b</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name>SS_BLOCKSIZE</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>b</name> <operator>-=</operator> <name>k</name></expr><operator>,</operator> <expr><name>k</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ss_swapmerge</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>b</name> <operator>-</operator> <name>k</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>curbufsize</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_INSERTIONSORT_THRESHOLD</name> <operator>&lt;</operator> <name>SS_BLOCKSIZE</name></expr></cpp:if>
<expr_stmt><expr><call><name>ss_mintrosort</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal> <operator>&lt;</operator> <name>SS_BLOCKSIZE</name></expr></cpp:elif>
<expr_stmt><expr><call><name>ss_insertionsort</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <name>SS_BLOCKSIZE</name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ss_swapmerge</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>a</name> <operator>-</operator> <name>k</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>limit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_INSERTIONSORT_THRESHOLD</name> <operator>&lt;</operator> <name>SS_BLOCKSIZE</name></expr></cpp:if>
<expr_stmt><expr><call><name>ss_mintrosort</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal> <operator>&lt;</operator> <name>SS_BLOCKSIZE</name></expr></cpp:elif>
<expr_stmt><expr><call><name>ss_insertionsort</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ss_inplacemerge</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>lastsuffix</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>saidx_t</name></type> <name><name>PAi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> <expr_stmt><expr><name><name>PAi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>PA</name><index>[<expr><operator>*</operator><operator>(</operator><name>first</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr><operator>,</operator> <expr><name><name>PAi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>a</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>first</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init>
<condition><expr><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>last</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <call><name>ss_compare</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>PAi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>PA</name> <operator>+</operator> <operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</condition>
<incr><expr><operator>++</operator><name>a</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
