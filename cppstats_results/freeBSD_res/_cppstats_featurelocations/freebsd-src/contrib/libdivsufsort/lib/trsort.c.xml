<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libdivsufsort/lib/trsort.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"divsufsort_private.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>saint_t</name></type> <name><name>lg_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name><init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,
<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,
<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saint_t</name></type>
<name>tr_ilg</name><parameter_list>(<parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>BUILD_DIVSUFSORT64</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">56</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">48</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">40</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">32</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">24</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">16</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">8</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">0</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">24</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">16</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">8</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr> </then><else>:
<expr><literal type="number">0</literal> <operator>+</operator> <name><name>lg_table</name><index>[<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier>
<name>void</name></type>
<name>tr_insertionsort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>ISAd</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>a</name> <operator>=</operator> <name>first</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><operator>++</operator><name>a</name></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>a</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&gt;</operator> <operator>(</operator><name>r</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><name>t</name></expr>]</index></name> <operator>-</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><operator>(</operator><name>first</name> <operator>&lt;=</operator> <operator>--</operator><name>b</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>;</do>
<if_stmt><if>if<condition>(<expr><name>b</name> <operator>&lt;</operator> <name>first</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <operator>~</operator><operator>*</operator><name>b</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>INLINE</name>
<name>void</name></type>
<name>tr_fixdown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>ISAd</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>v</name> <operator>=</operator> <name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</init> <condition><expr><operator>(</operator><name>j</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>SA</name><index>[<expr><name>k</name></expr>]</index></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><name><name>SA</name><index>[<expr><name>k</name> <operator>=</operator> <name>j</name><operator>++</operator></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>&lt;</operator> <operator>(</operator><name>e</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><name><name>SA</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>&lt;=</operator> <name>c</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier>
<name>void</name></type>
<name>tr_heapsort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>ISAd</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ISAd</name><index>[<expr><name><name>SA</name><index>[<expr><name>m</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>ISAd</name><index>[<expr><name><name>SA</name><index>[<expr><name>m</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>SA</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>SA</name><index>[<expr><name>m</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>m</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>tr_fixdown</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>SA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>SA</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>tr_fixdown</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>SA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>SA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tr_fixdown</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saidx_t</name> <modifier>*</modifier></type>
<name>tr_median3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>ISAd</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v3</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ISAd</name><index>[<expr><operator>*</operator><name>v1</name></expr>]</index></name> <operator>&gt;</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>v2</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ISAd</name><index>[<expr><operator>*</operator><name>v2</name></expr>]</index></name> <operator>&gt;</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>v3</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ISAd</name><index>[<expr><operator>*</operator><name>v1</name></expr>]</index></name> <operator>&gt;</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>v3</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <return>return <expr><name>v1</name></expr>;</return> </block_content>}</block></if>
<else>else <block>{<block_content> <return>return <expr><name>v3</name></expr>;</return> </block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>v2</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saidx_t</name> <modifier>*</modifier></type>
<name>tr_median5</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>ISAd</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v3</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v4</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>v5</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ISAd</name><index>[<expr><operator>*</operator><name>v2</name></expr>]</index></name> <operator>&gt;</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>v3</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ISAd</name><index>[<expr><operator>*</operator><name>v4</name></expr>]</index></name> <operator>&gt;</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>v5</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><name>v5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ISAd</name><index>[<expr><operator>*</operator><name>v2</name></expr>]</index></name> <operator>&gt;</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>v4</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><name>v5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ISAd</name><index>[<expr><operator>*</operator><name>v1</name></expr>]</index></name> <operator>&gt;</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>v3</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ISAd</name><index>[<expr><operator>*</operator><name>v1</name></expr>]</index></name> <operator>&gt;</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>v4</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><name>v5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ISAd</name><index>[<expr><operator>*</operator><name>v3</name></expr>]</index></name> <operator>&gt;</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>v4</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <return>return <expr><name>v4</name></expr>;</return> </block_content>}</block></if></if_stmt>
<return>return <expr><name>v3</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saidx_t</name> <modifier>*</modifier></type>
<name>tr_pivot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>ISAd</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>middle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><name>middle</name> <operator>=</operator> <name>first</name> <operator>+</operator> <name>t</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name> <operator>&lt;=</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>t</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>tr_median3</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><call><name>tr_median5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>first</name> <operator>+</operator> <name>t</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>t</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>tr_median3</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>first</name> <operator>+</operator> <name>t</name></expr></argument>, <argument><expr><name>first</name> <operator>+</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>middle</name> <operator>=</operator> <call><name>tr_median3</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>middle</name> <operator>-</operator> <name>t</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>middle</name> <operator>+</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>tr_median3</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>t</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tr_median3</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<typedef>typedef <type><name><name>struct</name> <name>_trbudget_t</name></name></type> <name>trbudget_t</name>;</typedef>
<struct>struct <name>_trbudget_t</name> <block>{
<decl_stmt><decl><type><name>saidx_t</name></type> <name>chance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>remain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>incval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>INLINE</name>
<name>void</name></type>
<name>trbudget_init</name><parameter_list>(<parameter><decl><type><name>trbudget_t</name> <modifier>*</modifier></type><name>budget</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>chance</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>incval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>budget</name><operator>-&gt;</operator><name>chance</name></name> <operator>=</operator> <name>chance</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>budget</name><operator>-&gt;</operator><name>remain</name></name> <operator>=</operator> <name><name>budget</name><operator>-&gt;</operator><name>incval</name></name> <operator>=</operator> <name>incval</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>INLINE</name>
<name>saint_t</name></type>
<name>trbudget_check</name><parameter_list>(<parameter><decl><type><name>trbudget_t</name> <modifier>*</modifier></type><name>budget</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;=</operator> <name><name>budget</name><operator>-&gt;</operator><name>remain</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>budget</name><operator>-&gt;</operator><name>remain</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>budget</name><operator>-&gt;</operator><name>chance</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>budget</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>budget</name><operator>-&gt;</operator><name>remain</name></name> <operator>+=</operator> <name><name>budget</name><operator>-&gt;</operator><name>incval</name></name> <operator>-</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>budget</name><operator>-&gt;</operator><name>chance</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>INLINE</name>
<name>void</name></type>
<name>tr_partition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>ISAd</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>middle</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>b</name> <operator>=</operator> <name>middle</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><operator>++</operator><name>b</name> <operator>&lt;</operator> <name>last</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content> </block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>a</name> <operator>=</operator> <name>b</name><operator>)</operator> <operator>&lt;</operator> <name>last</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <name>v</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><operator>++</operator><name>b</name> <operator>&lt;</operator> <name>last</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name><operator>)</operator> <operator>&lt;=</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><operator>(</operator><name>b</name> <operator>&lt;</operator> <operator>--</operator><name>c</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>c</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content> </block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>b</name> <operator>&lt;</operator> <operator>(</operator><name>d</name> <operator>=</operator> <name>c</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&gt;</operator> <name>v</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><name>b</name> <operator>&lt;</operator> <operator>--</operator><name>c</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>c</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>d</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>c</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><operator>++</operator><name>b</name> <operator>&lt;</operator> <name>c</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name><operator>)</operator> <operator>&lt;=</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><name>b</name> <operator>&lt;</operator> <operator>--</operator><name>c</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>c</name></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <name>v</name><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>v</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>d</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>d</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>t</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>s</name></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>s</name></expr>;</condition> <incr><expr><operator>--</operator><name>s</name></expr><operator>,</operator> <expr><operator>++</operator><name>e</name></expr><operator>,</operator> <expr><operator>++</operator><name>f</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <name>d</name> <operator>-</operator> <name>c</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>t</name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>d</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>s</name></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>s</name></expr>;</condition> <incr><expr><operator>--</operator><name>s</name></expr><operator>,</operator> <expr><operator>++</operator><name>e</name></expr><operator>,</operator> <expr><operator>++</operator><name>f</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>
<expr_stmt><expr><name>first</name> <operator>+=</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr><operator>,</operator> <expr><name>last</name> <operator>-=</operator> <operator>(</operator><name>d</name> <operator>-</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pa</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><operator>*</operator><name>pb</name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>tr_copy</name><parameter_list>(<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>ISA</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>


<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>SA</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>c</name> <operator>-</operator> <name>depth</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ISA</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name>v</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>d</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ISA</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>-</operator> <name>SA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>last</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>e</name> <operator>=</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <name>b</name></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><operator>--</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>c</name> <operator>-</operator> <name>depth</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ISA</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name>v</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>d</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ISA</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>-</operator> <name>SA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>tr_partialcopy</name><parameter_list>(<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>ISA</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>rank</name></decl>, <decl><type ref="prev"/><name>lastrank</name></decl>, <decl><type ref="prev"/><name>newrank</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>SA</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lastrank</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>c</name> <operator>-</operator> <name>depth</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ISA</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name>v</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>d</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rank</name> <operator>=</operator> <name><name>ISA</name><index>[<expr><name>s</name> <operator>+</operator> <name>depth</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>lastrank</name> <operator>!=</operator> <name>rank</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>lastrank</name> <operator>=</operator> <name>rank</name></expr>;</expr_stmt> <expr_stmt><expr><name>newrank</name> <operator>=</operator> <name>d</name> <operator>-</operator> <name>SA</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ISA</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>newrank</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>lastrank</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</init> <condition><expr><name>first</name> <operator>&lt;=</operator> <name>e</name></expr>;</condition> <incr><expr><operator>--</operator><name>e</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rank</name> <operator>=</operator> <name><name>ISA</name><index>[<expr><operator>*</operator><name>e</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>lastrank</name> <operator>!=</operator> <name>rank</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>lastrank</name> <operator>=</operator> <name>rank</name></expr>;</expr_stmt> <expr_stmt><expr><name>newrank</name> <operator>=</operator> <name>e</name> <operator>-</operator> <name>SA</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>newrank</name> <operator>!=</operator> <name>rank</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>ISA</name><index>[<expr><operator>*</operator><name>e</name></expr>]</index></name> <operator>=</operator> <name>newrank</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>lastrank</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>last</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>e</name> <operator>=</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <name>b</name></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><operator>--</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>c</name> <operator>-</operator> <name>depth</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ISA</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name>v</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>d</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rank</name> <operator>=</operator> <name><name>ISA</name><index>[<expr><name>s</name> <operator>+</operator> <name>depth</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>lastrank</name> <operator>!=</operator> <name>rank</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>lastrank</name> <operator>=</operator> <name>rank</name></expr>;</expr_stmt> <expr_stmt><expr><name>newrank</name> <operator>=</operator> <name>d</name> <operator>-</operator> <name>SA</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ISA</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>newrank</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type>
<name>tr_introsort</name><parameter_list>(<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>ISA</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>ISAd</name></decl></parameter>,
<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,
<parameter><decl><type><name>trbudget_t</name> <modifier>*</modifier></type><name>budget</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_SIZE</name></cpp:macro> <cpp:value>TR_STACKSIZE</cpp:value></cpp:define>
<struct>struct <block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>saint_t</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt> }</block><decl><name><name>stack</name><index>[<expr><name>STACK_SIZE</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>incr</name> <init>= <expr><name>ISAd</name> <operator>-</operator> <name>ISA</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>limit</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saint_t</name></type> <name>ssize</name></decl>, <decl><type ref="prev"/><name>trlink</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>ssize</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <call><name>tr_ilg</name><argument_list>(<argument><expr><name>last</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>limit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>limit</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tr_partition</name><argument_list>(<argument><expr><name>ISAd</name> <operator>-</operator> <name>incr</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <name>SA</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>SA</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>a</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>ISA</name><index>[<expr><operator>*</operator><name>c</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>b</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>SA</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>b</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>ISA</name><index>[<expr><operator>*</operator><name>c</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name> <operator>-</operator> <name>incr</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trlink</name> <operator>=</operator> <name>ssize</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><call><name>tr_ilg</name><argument_list>(<argument><expr><name>last</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <call><name>tr_ilg</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <call><name>tr_ilg</name><argument_list>(<argument><expr><name>last</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_POP5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>tr_ilg</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <call><name>tr_ilg</name><argument_list>(<argument><expr><name>last</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <call><name>tr_ilg</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_POP5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>limit</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>stack</name><index>[<expr><operator>--</operator><name>ssize</name></expr>]</index></name><operator>.</operator><name>b</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name><name>stack</name><index>[<expr><name>ssize</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>stack</name><index>[<expr><name>ssize</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tr_copy</name><argument_list>(<argument><expr><name>ISA</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>ISAd</name> <operator>-</operator> <name>ISA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>trlink</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>stack</name><index>[<expr><name>trlink</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>tr_partialcopy</name><argument_list>(<argument><expr><name>ISA</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>ISAd</name> <operator>-</operator> <name>ISA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>STACK_POP5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <operator>*</operator><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
<do>do <block>{<block_content> <expr_stmt><expr><name><name>ISA</name><index>[<expr><operator>*</operator><name>a</name></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>SA</name></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><operator>(</operator><operator>++</operator><name>a</name> <operator>&lt;</operator> <name>last</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <operator>*</operator><name>a</name><operator>)</operator></expr>)</condition>;</do>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>first</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt> <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <operator>~</operator><operator>*</operator><name>a</name></expr>;</expr_stmt> </block_content>}</block> while<condition>(<expr><operator>*</operator><operator>++</operator><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><name>next</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ISA</name><index>[<expr><operator>*</operator><name>a</name></expr>]</index></name> <operator>!=</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>a</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>tr_ilg</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>first</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>++</operator><name>a</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content> <for>for<control>(<init><expr><name>b</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>SA</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>a</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>ISA</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></for> </block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>trbudget_check</name><argument_list>(<argument><expr><name>budget</name></expr></argument>, <argument><expr><name>a</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ISAd</name> <operator>+=</operator> <name>incr</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name> <operator>+</operator> <name>incr</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ISAd</name> <operator>+=</operator> <name>incr</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>trlink</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>stack</name><index>[<expr><name>trlink</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_POP5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_POP5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <name>TR_INSERTIONSORT_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tr_insertionsort</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>limit</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tr_heapsort</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>a</name> <operator>=</operator> <name>last</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>first</name> <operator>&lt;</operator> <name>a</name></expr>;</condition> <incr><expr><name>a</name> <operator>=</operator> <name>b</name></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>a</name></expr>]</index></name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>first</name> <operator>&lt;=</operator> <name>b</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ISAd</name><index>[<expr><operator>*</operator><name>b</name></expr>]</index></name> <operator>==</operator> <name>x</name><operator>)</operator></expr>;</condition> <incr><expr><operator>--</operator><name>b</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <operator>~</operator><operator>*</operator><name>b</name></expr>;</expr_stmt> </block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>tr_pivot</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>, <argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ISAd</name><index>[<expr><operator>*</operator><name>first</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>tr_partition</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>first</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ISA</name><index>[<expr><operator>*</operator><name>a</name></expr>]</index></name> <operator>!=</operator> <name>v</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>tr_ilg</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>first</name></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>SA</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>a</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>ISA</name><index>[<expr><operator>*</operator><name>c</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>b</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content> <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>SA</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>b</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>ISA</name><index>[<expr><operator>*</operator><name>c</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></for> </block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>trbudget_check</name><argument_list>(<argument><expr><name>budget</name></expr></argument>, <argument><expr><name>b</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name> <operator>+</operator> <name>incr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name> <operator>+</operator> <name>incr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ISAd</name> <operator>+=</operator> <name>incr</name></expr><operator>,</operator> <expr><name>first</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name> <operator>+</operator> <name>incr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ISAd</name> <operator>+=</operator> <name>incr</name></expr><operator>,</operator> <expr><name>first</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ISAd</name> <operator>+=</operator> <name>incr</name></expr><operator>,</operator> <expr><name>first</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name> <operator>+</operator> <name>incr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name> <operator>+</operator> <name>incr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ISAd</name> <operator>+=</operator> <name>incr</name></expr><operator>,</operator> <expr><name>first</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name> <operator>+</operator> <name>incr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ISAd</name> <operator>+=</operator> <name>incr</name></expr><operator>,</operator> <expr><name>first</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ISAd</name> <operator>+=</operator> <name>incr</name></expr><operator>,</operator> <expr><name>first</name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>limit</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>trlink</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>stack</name><index>[<expr><name>trlink</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_POP5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STACK_PUSH5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_POP5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>trbudget_check</name><argument_list>(<argument><expr><name>budget</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>tr_ilg</name><argument_list>(<argument><expr><name>last</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>ISAd</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>trlink</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>stack</name><index>[<expr><name>trlink</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STACK_POP5</name><argument_list>(<argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>trlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STACK_SIZE</name></cpp:undef>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>trsort</name><parameter_list>(<parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>ISA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>SA</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>saidx_t</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>ISAd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name> <modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>trbudget_t</name></type> <name>budget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saidx_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>skip</name></decl>, <decl><type ref="prev"/><name>unsorted</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>trbudget_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>budget</name></expr></argument>, <argument><expr><call><name>tr_ilg</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ISAd</name> <operator>=</operator> <name>ISA</name> <operator>+</operator> <name>depth</name></expr>;</init> <condition><expr><operator>-</operator><name>n</name> <operator>&lt;</operator> <operator>*</operator><name>SA</name></expr>;</condition> <incr><expr><name>ISAd</name> <operator>+=</operator> <name>ISAd</name> <operator>-</operator> <name>ISA</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>SA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>unsorted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <operator>*</operator><name>first</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>first</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name>skip</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt> </block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>skip</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>first</name> <operator>+</operator> <name>skip</name><operator>)</operator> <operator>=</operator> <name>skip</name></expr>;</expr_stmt> <expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>SA</name> <operator>+</operator> <name><name>ISA</name><index>[<expr><name>t</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>budget</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tr_introsort</name><argument_list>(<argument><expr><name>ISA</name></expr></argument>, <argument><expr><name>ISAd</name></expr></argument>, <argument><expr><name>SA</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>budget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>budget</name><operator>.</operator><name>count</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>unsorted</name> <operator>+=</operator> <name><name>budget</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt> </block_content>}</block></if>
<else>else <block>{<block_content> <expr_stmt><expr><name>skip</name> <operator>=</operator> <name>first</name> <operator>-</operator> <name>last</name></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while<condition>(<expr><name>first</name> <operator>&lt;</operator> <operator>(</operator><name>SA</name> <operator>+</operator> <name>n</name><operator>)</operator></expr>)</condition>;</do>
<if_stmt><if>if<condition>(<expr><name>skip</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>first</name> <operator>+</operator> <name>skip</name><operator>)</operator> <operator>=</operator> <name>skip</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>unsorted</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
