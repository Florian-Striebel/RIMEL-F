<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ee/ee.c">























































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ee_copyright_message</name> <init>=
<expr><literal type="string">"Copyright (c) 1986, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 2009 Hugh Mahon "</literal></expr></init></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ee_version.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>version</name> <init>= <expr><literal type="string">"@(#) ee, version "</literal> <name>EE_VERSION</name> <literal type="string">" $Revision: 1.104 $"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"new_curse.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAS_NCURSES</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curses.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_SYS_WAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_STDLIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_STDARG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_UNISTD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CATGETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nl_types.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>nl_catd</name></type> <name>catalog</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>catgetlocal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(b)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGCHLD</name></cpp:macro> <cpp:value>SIGCLD</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a &gt; b ? a : b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a &lt; b ? a : b)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTROL_KEYS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMANDS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>text</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>next_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>prev_line</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>first_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>dlt_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>curr_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>tmp_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>srch_line</name></decl>;</decl_stmt>

<struct>struct <name>files</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>files</name></name> <modifier>*</modifier></type><name>next_name</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>files</name></name> <modifier>*</modifier></type><name>top_of_stack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d_wrd_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scr_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scr_vert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scr_horz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>absolute_lin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_vert</name></decl>, <decl><type ref="prev"/><name>tmp_horz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>recv_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>edit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fildes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>case_sen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>horiz_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clear_com_win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_changes</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>get_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>info_window</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>info_type</name> <init>= <expr><name>CONTROL_KEYS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expand_tabs</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>right_margin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>observ_margins</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shell_fork</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_stdin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_stdout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_stderr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pipe_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pipe_in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_pipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_pipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>formatted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>auto_format</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>restricted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nohighlight</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eightbit</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>local_LINES</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>local_COLS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curses_initialized</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emacs_keys_mode</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ee_chinese</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srch_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>u_srch_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srch_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srch_2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srch_3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in_file_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d_word</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>in_string</name><index>[<expr><literal type="number">513</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>print_command</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"lpr"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start_at_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>temp_fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>bit_bucket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>table</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"^@"</literal></expr>, <expr><literal type="string">"^A"</literal></expr>, <expr><literal type="string">"^B"</literal></expr>, <expr><literal type="string">"^C"</literal></expr>, <expr><literal type="string">"^D"</literal></expr>, <expr><literal type="string">"^E"</literal></expr>, <expr><literal type="string">"^F"</literal></expr>, <expr><literal type="string">"^G"</literal></expr>, <expr><literal type="string">"^H"</literal></expr>, <expr><literal type="string">"\t"</literal></expr>, <expr><literal type="string">"^J"</literal></expr>,
<expr><literal type="string">"^K"</literal></expr>, <expr><literal type="string">"^L"</literal></expr>, <expr><literal type="string">"^M"</literal></expr>, <expr><literal type="string">"^N"</literal></expr>, <expr><literal type="string">"^O"</literal></expr>, <expr><literal type="string">"^P"</literal></expr>, <expr><literal type="string">"^Q"</literal></expr>, <expr><literal type="string">"^R"</literal></expr>, <expr><literal type="string">"^S"</literal></expr>, <expr><literal type="string">"^T"</literal></expr>, <expr><literal type="string">"^U"</literal></expr>,
<expr><literal type="string">"^V"</literal></expr>, <expr><literal type="string">"^W"</literal></expr>, <expr><literal type="string">"^X"</literal></expr>, <expr><literal type="string">"^Y"</literal></expr>, <expr><literal type="string">"^Z"</literal></expr>, <expr><literal type="string">"^["</literal></expr>, <expr><literal type="string">"^\\"</literal></expr>, <expr><literal type="string">"^]"</literal></expr>, <expr><literal type="string">"^^"</literal></expr>, <expr><literal type="string">"^_"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>com_win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>text_win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>help_win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>info_win</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





















<struct>struct <name>menu_entries</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>item_string</name></decl>;</decl_stmt>
<macro><name>int</name> <argument_list>(<argument>*procedure</argument>)</argument_list></macro><expr_stmt><expr><call><name>P_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>menu_entries</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>menu_entries</name></name> <modifier>*</modifier></type><name>ptr_argument</name></decl>;</decl_stmt>
<macro><name>int</name> <argument_list>(<argument>*iprocedure</argument>)</argument_list></macro><expr_stmt><expr><call><name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>void</name> <argument_list>(<argument>*nprocedure</argument>)</argument_list></macro><expr_stmt><expr><call><name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argument</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> main <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>argc</name><operator>,</operator> <name>char</name> <operator>*</operator><name><name>argv</name><index>[]</index></name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><name>resiz_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>factor</name><operator>,</operator> struct <name>text</name> <operator>*</operator><name>rline</name><operator>,</operator> <name>int</name> <name>rpos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>insert</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>character</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>delete</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>disp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>scanline</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>tabshift</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>temp_int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>out_char</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>character</name><operator>,</operator> <name>int</name> <name>column</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>len_char</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>character</name><operator>,</operator> <name>int</name> <name>column</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>draw_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>vertical</name><operator>,</operator> <name>int</name> <name>horiz</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ptr</name><operator>,</operator> <name>int</name> <name>t_pos</name><operator>,</operator> <name>int</name> <name>length</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>insert_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>disp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier><name>txtalloc</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>files</name></name> <modifier>*</modifier><name>name_alloc</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><name>next_word</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><name>string</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>prev_word</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>control</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>emacs_control</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>bottom</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>top</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>nextline</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>prevline</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>left</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>disp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>right</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>disp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>find_pos</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>up</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>down</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>function_key</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>print_buffer</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>command_prompt</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>command</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>cmd_str1</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>scan</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>line</name><operator>,</operator> <name>int</name> <name>offset</name><operator>,</operator> <name>int</name> <name>column</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><name>get_string</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>prompt</name><operator>,</operator> <name>int</name> <name>advance</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>compare</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>string1</name><operator>,</operator> <name>char</name> <operator>*</operator><name>string2</name><operator>,</operator> <name>int</name> <name>sensitive</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>goto_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>cmd_str</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>midscreen</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>line</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pnt</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>get_options</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>numargs</name><operator>,</operator> <name>char</name> <operator>*</operator><name><name>arguments</name><index>[]</index></name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>check_fp</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>get_file</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>file_name</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>get_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>length</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>in_string</name><operator>,</operator> <name>int</name> <operator>*</operator><name>append</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>draw_screen</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>finish</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>quit</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>noverify</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>edit_abort</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>delete_text</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>write_file</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>file_name</name><operator>,</operator> <name>int</name> <name>warn_if_exists</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>search</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>display_message</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>search_prompt</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>del_char</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>undel_char</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>del_word</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>undel_word</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>del_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>undel_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>adv_word</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>move_rel</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>direction</name><operator>,</operator> <name>int</name> <name>lines</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>eol</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>bol</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>adv_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>sh_command</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>string</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>set_up_term</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>resize_check</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>menu_op</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>menu_entries</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>paint_menu</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>menu_entries</name> <name><name>menu_list</name><index>[]</index></name><operator>,</operator> <name>int</name> <name>max_width</name><operator>,</operator> <name>int</name> <name>max_height</name><operator>,</operator> <name>int</name> <name>list_size</name><operator>,</operator> <name>int</name> <name>top_offset</name><operator>,</operator> <name>WINDOW</name> <operator>*</operator><name>menu_win</name><operator>,</operator> <name>int</name> <name>off_start</name><operator>,</operator> <name>int</name> <name>vert_size</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>help</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>paint_info_win</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>no_info_window</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>create_info_window</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>file_op</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>shell_op</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>leave_op</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>redraw</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>Blank_Line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>text</name> <operator>*</operator><name>test_line</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>Format</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>ee_init</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>dump_ee_conf</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>echo_string</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>string</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>spell_op</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>ispell_op</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>first_word_len</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>text</name> <operator>*</operator><name>test_line</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>Auto_Format</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>modes_op</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><name>is_in_string</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>string</name><operator>,</operator> <name>char</name> <operator>*</operator><name>substring</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><name>resolve_name</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>name</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>restrict_mode</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>unique_test</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>string</name><operator>,</operator> <name>char</name> <operator>*</operator><name><name>list</name><index>[]</index></name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>strings_init</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P_</name></cpp:undef>




<decl_stmt><decl><type><name><name>struct</name> <name>menu_entries</name></name></type> <name><name>modes_menu</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>dump_ee_conf</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>mode_strings</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_MODES_ITEMS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>menu_entries</name></name></type> <name><name>config_dump_menu</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>menu_entries</name></name></type> <name><name>leave_menu</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>finish</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>quit</name></expr>, <expr><name>NULL</name></expr>, <expr><name>TRUE</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_FILE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_FILE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVE_FILE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>menu_entries</name></name></type> <name><name>file_menu</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>file_op</name></expr>, <expr><name>NULL</name></expr>, <expr><name>READ_FILE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>file_op</name></expr>, <expr><name>NULL</name></expr>, <expr><name>WRITE_FILE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>file_op</name></expr>, <expr><name>NULL</name></expr>, <expr><name>SAVE_FILE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>print_buffer</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>menu_entries</name></name></type> <name><name>search_menu</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>search_prompt</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>search</name></expr>, <expr><name>NULL</name></expr>, <expr><name>TRUE</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>menu_entries</name></name></type> <name><name>spell_menu</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>spell_op</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ispell_op</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>menu_entries</name></name></type> <name><name>misc_menu</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>Format</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>shell_op</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>menu_op</name></expr>, <expr><name>spell_menu</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>menu_entries</name></name></type> <name><name>main_menu</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>leave_op</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>help</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>menu_op</name></expr>, <expr><name>file_menu</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>redraw</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>modes_op</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>menu_op</name></expr>, <expr><name>search_menu</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>menu_op</name></expr>, <expr><name>misc_menu</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>help_text</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>control_keys</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>emacs_help_text</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>emacs_control_keys</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>command_strings</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>commands</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>init_strings</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_WARN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max_alpha_char</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>com_win_message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>no_file_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ascii_code_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>printer_msg_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>command_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_write_prompt_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_read_prompt_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>char_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unkn_cmd_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>non_unique_cmd_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line_num_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line_len_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>current_file_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>usage0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>usage1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>usage2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>usage3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>usage4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_is_dir_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_file_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cant_open_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>open_file_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_read_fin_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reading_file_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>read_only_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_read_lines_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>save_file_name_prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_not_saved_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>changes_made_prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>yes_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_exists_prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>create_file_fail_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>writing_file_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_written_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>searching_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_not_found_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>search_prompt_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exec_err_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>continue_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>menu_cancel_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>menu_size_err_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>press_any_key_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shell_prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>formatting_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shell_echo_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>spell_in_prog_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>margin_prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>restricted_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ON</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>OFF</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>HELP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>WRITE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>READ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>LINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>FILE_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>CHARACTER</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>REDRAW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>RESEQUENCE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>AUTHOR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>VERSION</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>CASE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>NOCASE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>EXPAND</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>NOEXPAND</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Exit_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>QUIT_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>INFO</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>NOINFO</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>MARGINS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>NOMARGINS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>AUTOFORMAT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>NOAUTOFORMAT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Echo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>PRINTCOMMAND</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>RIGHTMARGIN</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>HIGHLIGHT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>NOHIGHLIGHT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>EIGHTBIT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>NOEIGHTBIT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>EMACS_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>NOEMACS_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>conf_dump_err_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>conf_dump_success_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>conf_not_saved_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ree_no_file_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cancel_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>menu_too_lrg_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>more_above_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>more_below_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>separator</name> <init>= <expr><literal type="string">"==============================================================================="</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chinese_cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nochinese_cmd</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAS_STDLIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>malloc</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>realloc</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>getenv</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>fopen</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>argc</name></type></decl></parameter>, <parameter><decl><type><name>argv</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>counter</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>counter</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"ee's standard input and output must be a terminal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>edit_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d_char</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d_word</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d_line</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dlt_line</name> <operator>=</operator> <call><name>txtalloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlt_line</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>d_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlt_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name>first_line</name> <operator>=</operator> <call><name>txtalloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>point</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>max_length</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u_srch_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_vert</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_horz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>absolute_lin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_bucket</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>edit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gold</name> <operator>=</operator> <name>case_sen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shell_fork</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strings_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ee_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_up_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>right_margin</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>right_margin</name> <operator>=</operator> <name>COLS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>top_of_stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>restrict_mode</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>ree_no_file_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>edit_abort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>no_file_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_fp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>edit</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>info_window</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nohighlight</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wstandout</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><literal type="string">"line %d col %d lines from top %d "</literal></expr></argument>,
<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_number</name></name></expr></argument>, <argument><expr><name>scr_horz</name></expr></argument>, <argument><expr><name>absolute_lin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wstandend</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>wgetch</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>resize_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_com_win</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info_window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>com_win_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>function_key</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>in</name> <operator>==</operator> <literal type="char">'\10'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>in</name> <operator>==</operator> <literal type="number">127</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>in</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>in</name> <operator>==</operator> <literal type="number">9</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>in</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>in</name> <operator>&lt;=</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>emacs_keys_mode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emacs_control</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>control</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>resiz_line</name><parameter_list>(<parameter><decl><type><name>factor</name></type></decl></parameter>, <parameter><decl><type><name>rline</name></type></decl></parameter>, <parameter><decl><type><name>rpos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>rline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rpos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>resiz_var</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rline</name><operator>-&gt;</operator><name>max_length</name></name> <operator>+=</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rpoint</name> <operator>=</operator> <name><name>rline</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>rline</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>rline</name><operator>-&gt;</operator><name>max_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>resiz_var</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><operator>(</operator><name>resiz_var</name> <operator>&lt;</operator> <name>rpos</name><operator>)</operator></expr> ;</condition> <incr><expr><name>resiz_var</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>rpoint</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<return>return<expr><operator>(</operator><name>rpoint</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>insert</name><parameter_list>(<parameter><decl><type><name>character</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>character</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>temp2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>character</name> <operator>==</operator> <literal type="char">'\011'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>expand_tabs</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <call><name>len_char</name><argument_list>(<argument><expr><literal type="char">'\011'</literal></expr></argument>, <argument><expr><name>scr_horz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>counter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>counter</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>auto_format</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Auto_Format</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>text_changes</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>max_length</name></name> <operator>-</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>point</name> <operator>=</operator> <call><name>resiz_line</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>curr_line</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>counter</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>point</name> <operator>&lt;</operator> <name>temp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp2</name><operator>=</operator><name>temp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>temp</name><operator>=</operator> <operator>*</operator><name>temp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>point</name> <operator>=</operator> <name>character</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>character</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name> <operator>+=</operator> <call><name>out_char</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>character</name></expr></argument>, <argument><expr><name>scr_horz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>character</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <operator>++</operator><name>scr_horz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>observ_margins</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>right_margin</name> <operator>&lt;</operator> <name>scr_pos</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>scr_pos</name> <operator>&gt;</operator> <name>right_margin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prev_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>scr_pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>position</name> <operator>&lt;</operator> <name>counter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>counter</name> <operator>-=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>value</name> <operator>&lt;</operator> <name>counter</name></expr>;</condition> <incr><expr><name>value</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator> <operator>&gt;</operator> <name>last_col</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>horiz_offset</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>auto_format</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>character</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>formatted</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Auto_Format</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>character</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>character</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>formatted</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>scr_horz</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>delete</name><parameter_list>(<parameter><decl><type><name>disp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>disp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>temp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>temp_buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_vert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>del_width</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>point</name> <operator>!=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>text_changes</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp2</name> <operator>=</operator> <name>tp</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ee_chinese</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>position</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>point</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>del_width</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tp</name> <operator>-=</operator> <name>del_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>-=</operator> <name>del_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>-=</operator> <name>del_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_pos</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>-=</operator> <name>del_width</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>tp</name> <operator>&lt;</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>tp</name> <operator>&gt;=</operator> <literal type="number">127</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scanline</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>scr_horz</name> <operator>-=</operator> <name>del_width</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>del_width</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d_char</name> <operator>=</operator> <operator>*</operator><name>point</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>point</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>point</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><name>del_width</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>temp_pos</name> <operator>&lt;=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp_pos</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <operator>*</operator><name>temp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scr_horz</name> <operator>&lt;</operator> <name>horiz_offset</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>horiz_offset</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>horiz_offset</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>text_changes</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_buff</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <call><name>resiz_line</name><argument_list>(<argument><expr><name><name>temp_buff</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>, <argument><expr><name>curr_line</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>temp_buff</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp_buff</name><operator>-&gt;</operator><name>next_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>=</operator> <name><name>temp_buff</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp2</name> <operator>=</operator> <name><name>temp_buff</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>temp_pos</name> <operator>&lt;</operator> <name><name>temp_buff</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_pos</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <operator>*</operator><name>temp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>temp_buff</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>temp_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_buff</name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_vert</name> <operator>=</operator> <name>scr_vert</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scr_vert</name> <operator>&lt;</operator> <name>last_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wdeleteln</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>temp_buff</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>temp_vert</name> <operator>&lt;</operator> <name>last_line</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp_buff</name> <operator>=</operator> <name><name>temp_buff</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_vert</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp_vert</name> <operator>==</operator> <name>last_line</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>temp_buff</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>temp_buff</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>last_line</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtobot</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>last_line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>temp_buff</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>scr_horz</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>formatted</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>scanline</name><parameter_list>(<parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>pos</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name> <operator>+=</operator> <call><name>tabshift</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>&gt;=</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>&lt;=</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>&gt;=</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>&lt;</operator> <literal type="number">127</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>eightbit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>scr_horz</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator> <operator>&gt;</operator> <name>last_col</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>horiz_offset</name> <operator>=</operator> <operator>(</operator><name>scr_horz</name> <operator>-</operator> <operator>(</operator><name>scr_horz</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><name>COLS</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>scr_horz</name> <operator>&lt;</operator> <name>horiz_offset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>horiz_offset</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <operator>(</operator><name>scr_horz</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tabshift</name><parameter_list>(<parameter><decl><type><name>temp_int</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>temp_int</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>leftover</name></decl>;</decl_stmt>

<expr_stmt><expr><name>leftover</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>temp_int</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>leftover</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">9</literal> <operator>-</operator> <name>leftover</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>out_char</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>character</name></type></decl></parameter>, <parameter><decl><type><name>column</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>character</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>string2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>character</name> <operator>==</operator> <name>TAB</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <call><name>tabshift</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><operator>(</operator><name>i2</name> <operator>&lt;</operator> <name>i1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>column</name><operator>+</operator><name>i2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><name>horiz_offset</name><operator>)</operator> <operator>&lt;</operator> <name>last_col</name><operator>)</operator></expr>;</condition> <incr><expr><name>i2</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return<expr><operator>(</operator><name>i1</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>character</name> <operator>&gt;=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>character</name> <operator>&lt;</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <name><name>table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name>character</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>character</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>character</name> <operator>&gt;=</operator> <literal type="number">127</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>character</name> <operator>==</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <literal type="string">"^?"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>eightbit</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>string2</name></expr></argument>, <argument><expr><literal type="string">"&lt;%d&gt;"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>character</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>character</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr> </then><else>: <expr><name>character</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name> <operator>=</operator> <name>string2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>character</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>character</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>string</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>column</name><operator>+</operator><name>i2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><name>horiz_offset</name><operator>)</operator> <operator>&lt;</operator> <name>last_col</name><operator>)</operator></expr>;</condition> <incr><expr><name>i2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>string</name><index>[<expr><name>i2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return<expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>len_char</name><parameter_list>(<parameter><decl><type><name>character</name></type></decl></parameter>, <parameter><decl><type><name>column</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>character</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>character</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>tabshift</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>character</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>character</name> <operator>&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>character</name> <operator>&gt;=</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>character</name> <operator>&lt;=</operator> <literal type="number">126</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>character</name> <operator>==</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>character</name> <operator>&gt;</operator> <literal type="number">126</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>character</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>eightbit</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return<expr><operator>(</operator><name>length</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>draw_line</name><parameter_list>(<parameter><decl><type><name>vertical</name></type></decl></parameter>, <parameter><decl><type><name>horiz</name></type></decl></parameter>, <parameter><decl><type><name>ptr</name></type></decl></parameter>, <parameter><decl><type><name>t_pos</name></type></decl></parameter>, <parameter><decl><type><name>length</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>vertical</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>horiz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abs_column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>posit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>abs_column</name> <operator>=</operator> <name>horiz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>column</name> <operator>=</operator> <name>horiz</name> <operator>-</operator> <name>horiz_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name>vertical</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>posit</name> <operator>=</operator> <name>t_pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>column</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>column</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>len_char</name><argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>, <argument><expr><name>abs_column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>abs_column</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>column</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>posit</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>posit</name> <operator>&lt;</operator> <name>length</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>column</name> <operator>&lt;=</operator> <name>last_col</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>column</name> <operator>+=</operator> <call><name>len_char</name><argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>, <argument><expr><name>abs_column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>abs_column</name> <operator>+=</operator> <call><name>out_char</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><operator>*</operator><name>temp</name></expr></argument>, <argument><expr><name>abs_column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>abs_column</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>column</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>posit</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>column</name> <operator>&lt;</operator> <name>last_col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>vertical</name></expr></argument>, <argument><expr><operator>(</operator><name>horiz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>insert_line</name><parameter_list>(<parameter><decl><type><name>disp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>disp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>temp_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_pos2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>temp_nod</name></decl>;</decl_stmt>

<expr_stmt><expr><name>text_changes</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_nod</name><operator>=</operator> <call><name>txtalloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_nod</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>extra</name><operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_nod</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_nod</name><operator>-&gt;</operator><name>max_length</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_nod</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_nod</name><operator>-&gt;</operator><name>next_line</name></name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>temp_nod</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp_nod</name><operator>-&gt;</operator><name>next_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>=</operator> <name>temp_nod</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>temp_nod</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>=</operator> <name>temp_nod</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_pos2</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>temp_pos2</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp_pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>temp_pos2</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>temp_nod</name><operator>-&gt;</operator><name>max_length</name></name> <operator>-</operator> <name><name>temp_nod</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator><operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <call><name>resiz_line</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>temp_nod</name></expr></argument>, <argument><expr><name>temp_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>temp_nod</name><operator>-&gt;</operator><name>line_length</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_pos</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_pos2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name><operator>=</operator> <operator>*</operator><name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extra</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>temp</name><operator>=</operator><name>point</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>temp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>resiz_line</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>temp_nod</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator></expr></argument>, <argument><expr><name>curr_line</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>temp</name> <operator>-</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name>absolute_lin</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name>temp_nod</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name><operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>disp</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>scr_vert</name> <operator>&lt;</operator> <name>last_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>scr_vert</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winsertln</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wdeleteln</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>last_line</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtobot</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>horiz_offset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>horiz_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>scr_horz</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>position</name></expr></argument>,
<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>txtalloc</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator><operator>(</operator>struct <name>text</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>text</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>files</name></name> <modifier>*</modifier></type><name>name_alloc</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return<expr><operator>(</operator><operator>(</operator>struct <name>files</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>files</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next_word</name><parameter_list>(<parameter><decl><type><name>string</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>string</name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>string</name> <operator>==</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return<expr><operator>(</operator><name>string</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>prev_word</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>position</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>point</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>point</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>position</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>point</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>position</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><operator>(</operator><name>position</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>point</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>position</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>control</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>ascii_code_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bottom</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>command_prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>down</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>search_prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undel_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>move_rel</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>last_line</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>move_rel</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>last_line</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">18</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">19</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>top</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>up</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undel_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>search</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">26</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undel_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">27</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>menu_op</name><argument_list>(<argument><expr><name>main_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>emacs_control</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>command_prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>move_rel</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>last_line</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undel_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undel_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>down</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>ascii_code_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>up</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">18</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undel_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">19</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>top</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bottom</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>move_rel</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>last_line</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>search</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>search_prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">26</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adv_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">27</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>menu_op</name><argument_list>(<argument><expr><name>main_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bottom</name><parameter_list>()</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>absolute_lin</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>horiz_offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>horiz_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>last_line</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>top</name><parameter_list>()</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>absolute_lin</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>horiz_offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>horiz_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nextline</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>absolute_lin</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scr_vert</name> <operator>==</operator> <name>last_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wdeleteln</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>last_line</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtobot</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>last_line</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>point</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>scr_vert</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>prevline</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>absolute_lin</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scr_vert</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>winsertln</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>point</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>scr_vert</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>position</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>left</name><parameter_list>(<parameter><decl><type><name>disp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>disp</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>point</name> <operator>!=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ee_chinese</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>position</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>point</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>point</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>point</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scanline</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>absolute_lin</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prevline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scanline</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>right</name><parameter_list>(<parameter><decl><type><name>disp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>disp</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ee_chinese</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>-</operator> <name>position</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>point</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>point</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scanline</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>disp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>absolute_lin</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>horiz_offset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>horiz_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>find_pos</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>scr_horz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>scr_horz</name> <operator>&lt;</operator> <name>scr_pos</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>point</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scr_horz</name> <operator>+=</operator> <call><name>tabshift</name><argument_list>(<argument><expr><name>scr_horz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>point</name> <operator>&lt;</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scr_horz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>ee_chinese</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>-</operator> <name>position</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>scr_horz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>scr_horz</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>position</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator> <operator>&gt;</operator> <name>last_col</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>horiz_offset</name> <operator>=</operator> <operator>(</operator><name>scr_horz</name> <operator>-</operator> <operator>(</operator><name>scr_horz</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><name>COLS</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>scr_horz</name> <operator>&lt;</operator> <name>horiz_offset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>horiz_offset</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <operator>(</operator><name>scr_horz</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>up</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>prevline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>down</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>function_key</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_HOME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_UP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>up</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_DOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>down</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_NPAGE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>move_rel</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><call><name>max</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>last_line</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_PPAGE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>move_rel</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>last_line</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_DL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_DC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_BACKSPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <name>KEY_IL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gold</name> <operator>=</operator> <operator>!</operator><name>gold</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gold</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undel_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undel_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gold</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undel_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gold</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paint_info_win</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adv_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gold</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>search_prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>search</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gold</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bottom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>top</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gold</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in</name> <operator>==</operator> <call><name>KEY_F</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gold</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>command_prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adv_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>print_buffer</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"&gt;!%s"</literal></expr></argument>, <argument><expr><name>print_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>printer_msg_str</name></expr></argument>, <argument><expr><name>print_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>command</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>command_prompt</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>info_type</name> <operator>=</operator> <name>COMMANDS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paint_info_win</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_str</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>command_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>unique_test</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>commands</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>unkn_cmd_str</name></expr></argument>, <argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>non_unique_cmd_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info_type</name> <operator>=</operator> <name>CONTROL_KEYS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paint_info_win</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>command</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info_type</name> <operator>=</operator> <name>CONTROL_KEYS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paint_info_win</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>command</name><parameter_list>(<parameter><decl><type><name>cmd_str1</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd_str1</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd_str2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd_str</name> <init>= <expr><name>cmd_str1</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>HELP</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>help</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>WRITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>restrict_mode</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cmd_str</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd_str</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cmd_str</name> <operator>=</operator> <name>cmd_str2</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>file_write_prompt_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp_file</name> <operator>=</operator> <call><name>resolve_name</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_file</name> <operator>!=</operator> <name>cmd_str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>READ</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>restrict_mode</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cmd_str</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd_str</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cmd_str</name> <operator>=</operator> <name>cmd_str2</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>file_read_prompt_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp_file</name> <operator>=</operator> <name>cmd_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>recv_file</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_file</name> <operator>=</operator> <call><name>resolve_name</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_fp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_file</name> <operator>!=</operator> <name>cmd_str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>LINE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>line_num_str</name></expr></argument>, <argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>line_len_str</name></expr></argument>, <argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>FILE_str</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in_file_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>no_file_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>current_file_str</name></expr></argument>, <argument><expr><name>in_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>cmd_str</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>cmd_str</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>goto_line</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>CHARACTER</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>char_str</name></expr></argument>, <argument><expr><operator>*</operator><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>REDRAW</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>RESEQUENCE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmp_line</name> <operator>=</operator> <name><name>first_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tmp_line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tmp_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <name><name>tmp_line</name><operator>-&gt;</operator><name>prev_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_line</name> <operator>=</operator> <name><name>tmp_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>AUTHOR</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="string">"written by Hugh Mahon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>CASE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>case_sen</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>NOCASE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>case_sen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>EXPAND</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expand_tabs</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>NOEXPAND</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expand_tabs</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>Exit_string</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>chinese_cmd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ee_chinese</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>nc_setattrib</name><argument_list>(<argument><expr><name>A_NC_BIG5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>nochinese_cmd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ee_chinese</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>nc_clearattrib</name><argument_list>(<argument><expr><name>A_NC_BIG5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>, <argument><expr><name>QUIT_string</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd_str</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cmd_str</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>cmd_str</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>cmd_str</name> <operator>==</operator> <literal type="number">9</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd_str</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sh_command</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>cmd_str</name> <operator>==</operator> <literal type="char">'&lt;'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>in_pipe</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in_pipe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shell_fork</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_str</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>cmd_str</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>cmd_str</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd_str</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>command</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_pipe</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shell_fork</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>cmd_str</name> <operator>==</operator> <literal type="char">'&gt;'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>out_pipe</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>out_pipe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_str</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>cmd_str</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>cmd_str</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd_str</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>command</name><argument_list>(<argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_pipe</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>unkn_cmd_str</name></expr></argument>, <argument><expr><name>cmd_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd_str2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd_str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>scan</name><parameter_list>(<parameter><decl><type><name>line</name></type></decl></parameter>, <parameter><decl><type><name>offset</name></type></decl></parameter>, <parameter><decl><type><name>column</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stemp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stemp</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <call><name>len_char</name><argument_list>(<argument><expr><operator>*</operator><name>stemp</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><name>j</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>get_string</name><parameter_list>(<parameter><decl><type><name>prompt</name></type></decl></parameter>, <parameter><decl><type><name>advance</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>advance</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nam_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>g_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_int</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g_horz</name></decl>, <decl><type ref="prev"/><name>g_position</name></decl>, <decl><type ref="prev"/><name>g_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>esc_flag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>g_point</name> <operator>=</operator> <name>tmp_string</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nam_str</name> <operator>=</operator> <name>tmp_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_horz</name> <operator>=</operator> <name>g_position</name> <operator>=</operator> <call><name>scan</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>esc_flag</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>wgetch</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>in</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>in</name> <operator>==</operator> <literal type="number">127</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>in</name> <operator>==</operator> <name>KEY_BACKSPACE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>g_pos</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmp_int</name> <operator>=</operator> <name>g_horz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_pos</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g_horz</name> <operator>=</operator> <call><name>scan</name><argument_list>(<argument><expr><name>g_point</name></expr></argument>, <argument><expr><name>g_pos</name></expr></argument>, <argument><expr><name>g_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_int</name> <operator>=</operator> <name>tmp_int</name> <operator>-</operator> <name>g_horz</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>tmp_int</name></expr>;</condition> <incr><expr><name>tmp_int</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>g_horz</name><operator>+</operator><name>tmp_int</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>last_col</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="char">'\010'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="char">'\010'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>nam_str</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>in</name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>in</name> <operator>!=</operator> <literal type="number">127</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>in</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>in</name> <operator>!=</operator> <literal type="char">'\r'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>in</name> <operator>&lt;</operator> <literal type="number">256</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="char">'\026'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>esc_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>wgetch</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>nam_str</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_pos</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>in</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>g_horz</name> <operator>&lt;</operator> <operator>(</operator><name>last_col</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g_horz</name> <operator>+=</operator> <call><name>out_char</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>g_horz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>g_horz</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g_horz</name> <operator>&lt;</operator> <operator>(</operator><name>last_col</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nam_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>esc_flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>in</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>in</name> <operator>!=</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>nam_str</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nam_str</name> <operator>=</operator> <name>tmp_string</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>nam_str</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>nam_str</name> <operator>==</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>advance</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nam_str</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><name>nam_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nam_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>nam_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>string</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>compare</name><parameter_list>(<parameter><decl><type><name>string1</name></type></decl></parameter>, <parameter><decl><type><name>string2</name></type></decl></parameter>, <parameter><decl><type><name>sensitive</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sensitive</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strng1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strng2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>equal</name></decl>;</decl_stmt>

<expr_stmt><expr><name>strng1</name> <operator>=</operator> <name>string1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>strng2</name> <operator>=</operator> <name>string2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>strng1</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>strng2</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>strng1</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>strng2</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>FALSE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>equal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>equal</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sensitive</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>strng1</name> <operator>!=</operator> <operator>*</operator><name>strng2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>equal</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>strng1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>strng2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>equal</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>strng1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>strng2</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>strng1</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>strng2</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>strng1</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>strng2</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><name>equal</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>goto_line</name><parameter_list>(<parameter><decl><type><name>cmd_str</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd_str</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>direction</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>t_line</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>cmd_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>&gt;=</operator><literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>number</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t_line</name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>t_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>&gt;</operator> <name>number</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>t_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t_line</name> <operator>=</operator> <name><name>t_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>direction</name> <operator>=</operator> <literal type="char">'u'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><operator>(</operator><name><name>t_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>&lt;</operator> <name>number</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>t_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>direction</name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t_line</name> <operator>=</operator> <name><name>t_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>move_rel</name><argument_list>(<argument><expr><name>direction</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>!=</operator> <literal type="char">'d'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>absolute_lin</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>absolute_lin</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name>t_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><operator>(</operator><name>last_line</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>line_num_str</name></expr></argument>, <argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>midscreen</name><parameter_list>(<parameter><decl><type><name>line</name></type></decl></parameter>, <parameter><decl><type><name>pnt</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pnt</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>mid_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>last_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mid_line</name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>line</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>scr_vert</name> <operator>=</operator> <name>scr_horz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_vert</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name>mid_line</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scanline</name><argument_list>(<argument><expr><name>pnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>get_options</name><parameter_list>(<parameter><decl><type><name>numargs</name></type></decl></parameter>, <parameter><decl><type><name>arguments</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>numargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>arguments</name><index>[]</index></name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>files</name></name> <modifier>*</modifier></type><name>temp_names</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_more_opts</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>arguments</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>arguments</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ree"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>restricted</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top_of_stack</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>input_file</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>recv_file</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>count</name> <operator>&lt;</operator> <name>numargs</name><operator>)</operator><operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>no_more_opts</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>buff</name> <operator>=</operator> <name><name>arguments</name><index>[<expr><name>count</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-i"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>info_window</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-e"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>expand_tabs</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-h"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>nohighlight</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-?"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>usage0</name></expr></argument>, <argument><expr><name><name>arguments</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>usage1</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>usage2</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>usage3</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>usage4</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>buff</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>start_at_line</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>buff</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>start_at_line</name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>no_more_opts</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>no_more_opts</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>numargs</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>buff</name> <operator>=</operator> <name><name>arguments</name><index>[<expr><name>count</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>top_of_stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp_names</name> <operator>=</operator> <name>top_of_stack</name> <operator>=</operator> <call><name>name_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>temp_names</name><operator>-&gt;</operator><name>next_name</name></name> <operator>=</operator> <call><name>name_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_names</name> <operator>=</operator> <name><name>temp_names</name><operator>-&gt;</operator><name>next_name</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>temp_names</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>buff</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <operator>*</operator><name>buff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buff</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_names</name><operator>-&gt;</operator><name>next_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>input_file</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>recv_file</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>check_fp</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>line_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_vert</name> <operator>=</operator> <name>scr_vert</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_horz</name> <operator>=</operator> <name>scr_horz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_line</name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input_file</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in_file_name</name> <operator>=</operator> <name>tmp_file</name> <operator>=</operator> <name><name>top_of_stack</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>top_of_stack</name> <operator>=</operator> <name><name>top_of_stack</name><operator>-&gt;</operator><name>next_name</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">07777</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><operator>.</operator><name>st_mode</name></name> <operator>!=</operator> <literal type="number">0100000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><operator>.</operator><name>st_mode</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>file_is_dir_msg</name></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input_file</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>get_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input_file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>new_file_msg</name></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>cant_open_msg</name></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recv_file</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>input_file</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_file</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>recv_file</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line_num</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_vert</name> <operator>=</operator> <name>tmp_vert</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_horz</name> <operator>=</operator> <name>tmp_horz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input_file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_line</name><operator>=</operator> <name>first_line</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name>tmp_line</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input_file</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>input_file</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start_at_line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>line_num</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>start_at_line</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>move_rel</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><name>line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start_at_line</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text_changes</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp_file</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>tmp_file</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>file_read_fin_msg</name></expr></argument>, <argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>get_file</name><parameter_list>(<parameter><decl><type><name>file_name</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_name</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>can_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>append</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>temp_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ro_flag</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recv_file</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>reading_file_msg</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>ENOTDIR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EACCES</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EROFS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>ETXTBSY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EFAULT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>read_only_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ro_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>append</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>append</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>can_read</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>(</operator><name>length</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>get_fd</name></expr></argument>, <argument><expr><name>in_string</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>length</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>can_read</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_line</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>in_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>can_read</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp_line</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>temp_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp_line</name><operator>-&gt;</operator><name>next_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>=</operator> <name>temp_line</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>curr_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name>temp_line</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>input_file</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>file_read_lines_msg</name></expr></argument>, <argument><expr><name>in_file_name</name></expr></argument>, <argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ro_flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>read_only_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>can_read</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>text_changes</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>recv_file</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>get_line</name><parameter_list>(<parameter><decl><type><name>length</name></type></decl></parameter>, <parameter><decl><type><name>in_string</name></type></decl></parameter>, <parameter><decl><type><name>append</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>append</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>char_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>tline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_time</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str2</name> <operator>=</operator> <name>in_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>first_time</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>num</name> <operator>&lt;</operator> <name>length</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_time</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <name>length</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>first_time</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>str1</name> <operator>=</operator> <name>str2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>str2</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <name>length</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>char_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>append</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tline</name> <operator>=</operator> <call><name>txtalloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tline</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tline</name><operator>-&gt;</operator><name>next_line</name></name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tline</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>=</operator> <name>tline</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tline</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tline</name><operator>-&gt;</operator><name>next_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>=</operator> <name>tline</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name>tline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>point</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>char_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <name>char_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>max_length</name></name> <operator>=</operator> <name>char_count</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>point</name> <operator>=</operator> <call><name>resiz_line</name><argument_list>(<argument><expr><name>char_count</name></expr></argument>, <argument><expr><name>curr_line</name></expr></argument>, <argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>+=</operator> <operator>(</operator><name>char_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>temp_counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>temp_counter</name> <operator>&lt;</operator> <name>char_count</name></expr>;</condition> <incr><expr><name>temp_counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>point</name> <operator>=</operator> <operator>*</operator><name>str1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>str1</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>point</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>append</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>==</operator> <name>length</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str2</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>append</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>draw_screen</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>temp_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>line_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_vert</name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp_line</name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_vert</name> <operator>=</operator> <name>scr_vert</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtobot</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>temp_line</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>temp_vert</name> <operator>&lt;=</operator> <name>last_line</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>line_out</name> <operator>=</operator> <name><name>temp_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>temp_vert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line_out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>temp_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_vert</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_line</name> <operator>=</operator> <name><name>temp_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>temp_vert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>finish</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_name</name> <init>= <expr><name>in_file_name</name></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file_name</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>file_name</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>file_name</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>save_file_name_prompt</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file_name</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>file_name</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>file_not_saved_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp_file</name> <operator>=</operator> <call><name>resolve_name</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_file</name> <operator>!=</operator> <name>file_name</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_name</name> <operator>=</operator> <name>tmp_file</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_file</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>text_changes</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>quit</name><parameter_list>(<parameter><decl><type><name>noverify</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>noverify</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ans</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>touchwin</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text_changes</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>noverify</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>changes_made_prompt</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ans</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>yes_char</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>text_changes</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>top_of_stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>info_window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>endwin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>delete_text</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recv_file</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>input_file</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_fp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>edit_abort</name><parameter_list>(<parameter><decl><type><name>arg</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>endwin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>delete_text</name><parameter_list>()</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name>curr_line</name> <operator>!=</operator> <name>first_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>absolute_lin</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_vert</name> <operator>=</operator> <name>scr_horz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>write_file</name><parameter_list>(<parameter><decl><type><name>file_name</name></type></decl></parameter>, <parameter><decl><type><name>warn_if_exists</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>warn_if_exists</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>out_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>, <decl><type ref="prev"/><name>charac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>write_flag</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>charac</name> <operator>=</operator> <name>lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>warn_if_exists</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>in_file_name</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>in_file_name</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp_fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmp_point</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>file_exists_prompt</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>tmp_point</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>yes_char</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>write_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>write_flag</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>temp_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>write_flag</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp_fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>create_file_fail_msg</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>FALSE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>writing_file_msg</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out_line</name> <operator>=</operator> <name>first_line</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>out_line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp_pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_point</name><operator>=</operator> <name><name>out_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>temp_pos</name> <operator>&lt;</operator> <name><name>out_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>tmp_point</name></expr></argument>, <argument><expr><name>temp_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_point</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>charac</name> <operator>+=</operator> <name><name>out_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_line</name> <operator>=</operator> <name><name>out_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>temp_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lines</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>temp_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>file_written_msg</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>charac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>FALSE</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>search</name><parameter_list>(<parameter><decl><type><name>display_message</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>display_message</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lines_moved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srch_str</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>srch_str</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>FALSE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>display_message</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>searching_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lines_moved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_line</name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_1</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>srch_1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>position</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>!</operator><name>found</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>srch_line</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>iter</name> <operator>&lt;</operator> <name><name>srch_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>found</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>srch_2</name> <operator>=</operator> <name>srch_1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>case_sen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>srch_3</name> <operator>=</operator> <name>srch_str</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>srch_2</name> <operator>==</operator> <operator>*</operator><name>srch_3</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>srch_3</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_3</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>srch_3</name> <operator>=</operator> <name>u_srch_str</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><call><name>toupper</name><argument_list>(<argument><expr><operator>*</operator><name>srch_2</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>*</operator><name>srch_3</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>srch_3</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_3</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>srch_3</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>found</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>&lt;</operator> <name><name>srch_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>srch_1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>iter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>srch_line</name> <operator>=</operator> <name><name>srch_line</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>srch_line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>srch_1</name> <operator>=</operator> <name><name>srch_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>iter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lines_moved</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>display_message</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lines_moved</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>position</name> <operator>&lt;</operator> <name>iter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lines_moved</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>move_rel</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><name>lines_moved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>position</name> <operator>&lt;</operator> <name>iter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>absolute_lin</name> <operator>+=</operator> <name>lines_moved</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name>srch_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name>srch_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scanline</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><operator>(</operator><name>last_line</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>display_message</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>str_not_found_msg</name></expr></argument>, <argument><expr><name>srch_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>,<argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return<expr><operator>(</operator><name>found</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>search_prompt</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>srch_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>srch_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>u_srch_str</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>u_srch_str</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>u_srch_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>srch_str</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>search_prompt_str</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_3</name> <operator>=</operator> <name>srch_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_1</name> <operator>=</operator> <name>u_srch_str</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>srch_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>srch_3</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>srch_1</name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>*</operator><name>srch_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_3</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>srch_1</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>search</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>del_char</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ee_chinese</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>-</operator> <name>position</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>point</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>position</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scanline</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>undel_char</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>del_word</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tposit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>difference</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d_word2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d_word3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d_word</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d_word</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>d_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word3</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word2</name> <operator>=</operator> <name>d_word</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tposit</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>tposit</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>*</operator><name>d_word3</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>d_word3</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tposit</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d_word2</name> <operator>=</operator> <operator>*</operator><name>d_word3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word3</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><operator>(</operator><name>tposit</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>*</operator><name>d_word3</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>d_word3</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tposit</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d_word2</name> <operator>=</operator> <operator>*</operator><name>d_word3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word3</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>d_word2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d_wrd_len</name> <operator>=</operator> <name>difference</name> <operator>=</operator> <name>d_word2</name> <operator>-</operator> <name>d_word</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word2</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tposit</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tposit</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d_word2</name> <operator>=</operator> <operator>*</operator><name>d_word3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word3</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>-=</operator> <name>difference</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d_word2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>scr_horz</name></expr></argument>,<argument><expr><name>point</name></expr></argument>,<argument><expr><name>position</name></expr></argument>,<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>text_changes</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>formatted</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>undel_word</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tposit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp_old_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp_space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d_word_ptr</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>max_length</name></name> <operator>-</operator> <operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>+</operator> <name>d_wrd_len</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>point</name> <operator>=</operator> <call><name>resiz_line</name><argument_list>(<argument><expr><name>d_wrd_len</name></expr></argument>, <argument><expr><name>curr_line</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <name>tmp_space</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>+</operator> <name>d_wrd_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word_ptr</name> <operator>=</operator> <name>d_word</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<while>while <condition>(<expr><name>temp</name> <operator>&lt;=</operator> <name>d_wrd_len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tmp_ptr</name> <operator>=</operator> <operator>*</operator><name>d_word_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>tmp_old_ptr</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tposit</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>




<while>while <condition>(<expr><name>tposit</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tposit</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tmp_ptr</name> <operator>=</operator> <operator>*</operator><name>tmp_old_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_old_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>+=</operator> <name>d_wrd_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_old_ptr</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tmp_ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <name>tmp_space</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tposit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<while>while <condition>(<expr><name>tposit</name> <operator>&lt;</operator> <name>temp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tposit</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tmp_old_ptr</name> <operator>=</operator> <operator>*</operator><name>tmp_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_old_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>tmp_old_ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>scr_horz</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>del_line</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dl1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dl2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tposit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d_line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d_line</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dl1</name> <operator>=</operator> <name>d_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dl2</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tposit</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tposit</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dl1</name> <operator>=</operator> <operator>*</operator><name>dl2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dl1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dl2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tposit</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>dlt_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>tposit</name> <operator>-</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dl1</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>point</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>text_changes</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>undel_line</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ud1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ud2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tposit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dlt_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <call><name>resiz_line</name><argument_list>(<argument><expr><name><name>dlt_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>, <argument><expr><name>curr_line</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>+=</operator> <name><name>dlt_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ud1</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ud2</name> <operator>=</operator> <name>d_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tposit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tposit</name> <operator>&lt;</operator> <name><name>dlt_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tposit</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ud1</name> <operator>=</operator> <operator>*</operator><name>ud2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ud1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ud2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>ud1</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>scr_horz</name></expr></argument>,<argument><expr><name>point</name></expr></argument>,<argument><expr><name>position</name></expr></argument>,<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>adv_word</name><parameter_list>()</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>point</name> <operator>!=</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>!=</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><operator>(</operator><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>move_rel</name><parameter_list>(<parameter><decl><type><name>direction</name></type></decl></parameter>, <parameter><decl><type><name>lines</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>direction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>position</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>up</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>last_line</name> <operator>&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>scr_vert</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_line</name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><operator>(</operator><name>i</name><operator>&lt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>up</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>scr_vert</name> <operator>=</operator> <name>scr_vert</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name>tmp_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>absolute_lin</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scanline</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>position</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <name>scr_horz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>horiz_offset</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>horiz_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adv_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>down</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>last_line</name> <operator>&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>scr_vert</name> <operator>&gt;</operator> <operator>(</operator><name>last_line</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_line</name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name><operator>&lt;</operator><literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>down</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>absolute_lin</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_vert</name> <operator>=</operator> <name>scr_vert</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name>tmp_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scanline</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><operator>(</operator><name>scr_horz</name> <operator>-</operator> <name>horiz_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>eol</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bol</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>point</name> <operator>!=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>point</name> <operator>!=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>up</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>adv_line</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>point</name> <operator>!=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>scr_pos</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>scr_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>down</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>from_top</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>tmpline</name> <init>= <expr><name>first_line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tmpline</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmpline</name> <operator>!=</operator> <name>curr_line</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpline</name> <operator>=</operator> <name><name>tmpline</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>absolute_lin</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sh_command</name><parameter_list>(<parameter><decl><type><name>string</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last_slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>return_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>line_holder</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>restrict_mode</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>path</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SHELL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="string">"/bin/sh"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_slash</name> <operator>=</operator> <name>temp_point</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>temp_point</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>temp_point</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_slash</name> <operator>=</operator> <operator>++</operator><name>temp_point</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>temp_point</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_pipe</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>echo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>noraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>resetty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NCURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>endwin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_pipe</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pipe</name><argument_list>(<argument><expr><name>pipe_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>in_pipe</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>



<expr_stmt><expr><name>temp_stdout</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dup</name><argument_list>(<argument><expr><name><name>pipe_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>temp_stderr</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dup</name><argument_list>(<argument><expr><name><name>pipe_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipe_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




</block_content>}</block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line_holder</name> <operator>=</operator> <name>curr_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_vert</name> <operator>=</operator> <name>scr_vert</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipe_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>get_fd</name> <operator>=</operator> <name><name>pipe_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_file</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipe_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_vert</name> <operator>=</operator> <name>tmp_vert</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scr_horz</name> <operator>=</operator> <name>scr_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_line</name> <operator>=</operator> <name>line_holder</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>from_top</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>point</name> <operator>=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_pipe</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_pipe</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out_pipe</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pipe</name><argument_list>(<argument><expr><name>pipe_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shell_fork</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out_pipe</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dup</name><argument_list>(<argument><expr><name><name>pipe_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipe_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipe_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>value</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>value</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>;</condition> <incr><expr><name>value</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>execl</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>last_slash</name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>exec_err_msg</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_pipe</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipe_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line_holder</name> <operator>=</operator> <name>first_line</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>line_holder</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>pipe_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>line_holder</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>line_holder</name><operator>-&gt;</operator><name>line_length</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>pipe_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line_holder</name> <operator>=</operator> <name><name>line_holder</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipe_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_pipe</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>return_val</name> <operator>=</operator> <call><name>wait</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><operator>(</operator><name>return_val</name> <operator>!=</operator> <name>parent</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>return_val</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>;</do>










<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shell_fork</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>edit_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shell_fork</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>continue_msg</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>in</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_pipe</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fixterm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>noecho</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nonl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>info_window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearok</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>set_up_term</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curses_initialized</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>initscr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>savetty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>noecho</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nonl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curses_initialized</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>LINES</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>COLS</name> <operator>&gt;=</operator> <literal type="number">80</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>info_window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_line</name> <operator>=</operator> <name>LINES</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>info_window</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_line</name> <operator>=</operator> <name>LINES</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>idlok</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>com_win</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><operator>(</operator><name>LINES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>idlok</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info_window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>text_win</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><operator>(</operator><name>LINES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>text_win</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><operator>(</operator><name>LINES</name> <operator>-</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>idlok</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>help_win</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><operator>(</operator><name>LINES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>help_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>idlok</name><argument_list>(<argument><expr><name>help_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>info_window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>info_type</name> <operator>=</operator> <name>CONTROL_KEYS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>info_win</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paint_info_win</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_col</name> <operator>=</operator> <name>COLS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>local_LINES</name> <operator>=</operator> <name>LINES</name></expr>;</expr_stmt>
<expr_stmt><expr><name>local_COLS</name> <operator>=</operator> <name>COLS</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ee_chinese</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nc_setattrib</name><argument_list>(<argument><expr><name>A_NC_BIG5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>resize_check</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>LINES</name> <operator>==</operator> <name>local_LINES</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>COLS</name> <operator>==</operator> <name>local_COLS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>info_window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>help_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_up_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>item_alpha</name><index>[]</index></name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz0123456789 "</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>menu_op</name><parameter_list>(<parameter><decl><type><name>menu_list</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>menu_entries</name></name></type> <name><name>menu_list</name><index>[]</index></name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>temp_win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_width</name></decl>, <decl><type ref="prev"/><name>max_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_off</name></decl>, <decl><type ref="prev"/><name>y_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>list_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vert_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vert_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off_start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><name>list_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>menu_list</name><index>[<expr><name>list_size</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>list_size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>max_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>counter</name> <operator>&lt;=</operator> <name>list_size</name></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>max_width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_width</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>max_width</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max_width</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>max_width</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>menu_cancel_msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_width</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>max_width</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>more_above_str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>more_below_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_width</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>max_width</name> <operator>&gt;</operator> <name>COLS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>menu_too_lrg_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>top_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list_size</name> <operator>&gt;</operator> <name>LINES</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>max_height</name> <operator>=</operator> <name>LINES</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max_height</name> <operator>&gt;</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vert_size</name> <operator>=</operator> <name>max_height</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>vert_size</name> <operator>=</operator> <name>max_height</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>vert_size</name> <operator>=</operator> <name>list_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_height</name> <operator>=</operator> <name>list_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>LINES</name> <operator>&gt;=</operator> <operator>(</operator><name>vert_size</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>menu_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>argument</name> <operator>!=</operator> <name>MENU_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_height</name> <operator>=</operator> <name>vert_size</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>max_height</name> <operator>=</operator> <name>vert_size</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>top_offset</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x_off</name> <operator>=</operator> <operator>(</operator><name>COLS</name> <operator>-</operator> <name>max_width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y_off</name> <operator>=</operator> <operator>(</operator><name>LINES</name> <operator>-</operator> <name>max_height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_win</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>max_height</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>, <argument><expr><name>x_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>temp_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>paint_menu</name><argument_list>(<argument><expr><name>menu_list</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>max_height</name></expr></argument>, <argument><expr><name>list_size</name></expr></argument>, <argument><expr><name>top_offset</name></expr></argument>, <argument><expr><name>temp_win</name></expr></argument>, <argument><expr><name>off_start</name></expr></argument>, <argument><expr><name>vert_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vert_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>off_start</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>temp_win</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>counter</name> <operator>+</operator> <name>top_offset</name> <operator>-</operator> <name>off_start</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>temp_win</name></expr></argument>, <argument><expr><operator>(</operator><name>counter</name> <operator>+</operator> <name>top_offset</name> <operator>-</operator> <name>off_start</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>temp_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>wgetch</name><argument_list>(<argument><expr><name>temp_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isascii</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isalnum</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'z'</literal> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>input</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&lt;=</operator> <name>list_size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>input</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<switch>switch <condition>(<expr><name>input</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'\004'</literal></expr>:</case>
<case>case <expr><name>KEY_RIGHT</name></expr>:</case>
<case>case <expr><name>KEY_DOWN</name></expr>:</case>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&gt;</operator> <name>list_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\010'</literal></expr>:</case>
<case>case <expr><literal type="char">'\025'</literal></expr>:</case>
<case>case <expr><literal type="number">127</literal></expr>:</case>
<case>case <expr><name>KEY_BACKSPACE</name></expr>:</case>
<case>case <expr><name>KEY_LEFT</name></expr>:</case>
<case>case <expr><name>KEY_UP</name></expr>:</case>
<expr_stmt><expr><name>counter</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <name>list_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\033'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>menu_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>argument</name> <operator>!=</operator> <name>MENU_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\014'</literal></expr>:</case>
<case>case <expr><literal type="char">'\022'</literal></expr>:</case>
<expr_stmt><expr><call><name>paint_menu</name><argument_list>(<argument><expr><name>menu_list</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>max_height</name></expr></argument>,
<argument><expr><name>list_size</name></expr></argument>, <argument><expr><name>top_offset</name></expr></argument>, <argument><expr><name>temp_win</name></expr></argument>,
<argument><expr><name>off_start</name></expr></argument>, <argument><expr><name>vert_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>list_size</name> <operator>-</operator> <name>off_start</name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name>vert_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>counter</name> <operator>&gt;</operator> <operator>(</operator><name>off_start</name> <operator>+</operator> <name>vert_size</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>off_start</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>==</operator> <name>list_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off_start</name> <operator>=</operator> <operator>(</operator><name>list_size</name> <operator>-</operator> <name>vert_size</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>off_start</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>paint_menu</name><argument_list>(<argument><expr><name>menu_list</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>max_height</name></expr></argument>,
<argument><expr><name>list_size</name></expr></argument>, <argument><expr><name>top_offset</name></expr></argument>, <argument><expr><name>temp_win</name></expr></argument>, <argument><expr><name>off_start</name></expr></argument>,
<argument><expr><name>vert_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>list_size</name> <operator>!=</operator> <name>vert_size</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>counter</name> <operator>&gt;</operator> <operator>(</operator><name>off_start</name> <operator>+</operator> <name>vert_size</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>==</operator> <name>list_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off_start</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>list_size</name> <operator>-</operator> <name>vert_size</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>off_start</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off_start</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>off_start</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>paint_menu</name><argument_list>(<argument><expr><name>menu_list</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>max_height</name></expr></argument>,
<argument><expr><name>list_size</name></expr></argument>, <argument><expr><name>top_offset</name></expr></argument>, <argument><expr><name>temp_win</name></expr></argument>, <argument><expr><name>off_start</name></expr></argument>,
<argument><expr><name>vert_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>counter</name> <operator>&lt;</operator> <name>off_start</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off_start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>off_start</name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>paint_menu</name><argument_list>(<argument><expr><name>menu_list</name></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>max_height</name></expr></argument>,
<argument><expr><name>list_size</name></expr></argument>, <argument><expr><name>top_offset</name></expr></argument>, <argument><expr><name>temp_win</name></expr></argument>, <argument><expr><name>off_start</name></expr></argument>,
<argument><expr><name>vert_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
while <condition>(<expr><operator>(</operator><name>input</name> <operator>!=</operator> <literal type="char">'\r'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>input</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>;</do>

<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>temp_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>temp_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>temp_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>procedure</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>iprocedure</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>nprocedure</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>argument</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>iprocedure</name><operator>)</operator><operator>(</operator><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>argument</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>ptr_argument</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>procedure</name><operator>)</operator><operator>(</operator><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>ptr_argument</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>nprocedure</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>info_window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paint_info_win</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><name>counter</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>paint_menu</name><parameter_list>(<parameter><decl><type><name>menu_list</name></type></decl></parameter>, <parameter><decl><type><name>max_width</name></type></decl></parameter>, <parameter><decl><type><name>max_height</name></type></decl></parameter>, <parameter><decl><type><name>list_size</name></type></decl></parameter>, <parameter><decl><type><name>top_offset</name></type></decl></parameter>, <parameter><decl><type><name>menu_win</name></type></decl></parameter>,
<parameter><decl><type><name>off_start</name></type></decl></parameter>, <parameter><decl><type><name>vert_size</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>menu_entries</name></name></type> <name><name>menu_list</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_width</name></decl>, <decl><type ref="prev"/><name>max_height</name></decl>, <decl><type ref="prev"/><name>list_size</name></decl>, <decl><type ref="prev"/><name>top_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>menu_win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off_start</name></decl>, <decl><type ref="prev"/><name>vert_size</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>, <decl><type ref="prev"/><name>temp_int</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>max_height</name> <operator>&gt;</operator> <name>vert_size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nohighlight</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wstandout</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>counter</name> <operator>&lt;</operator> <operator>(</operator><name>max_width</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><operator>(</operator><name>max_height</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>counter</name> <operator>&lt;</operator> <operator>(</operator><name>max_width</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wstandend</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><name><name>menu_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><operator>(</operator><name>max_height</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>menu_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>argument</name> <operator>!=</operator> <name>MENU_WARN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><name>menu_cancel_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nohighlight</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wstandout</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>counter</name> <operator>&lt;</operator> <operator>(</operator><name>vert_size</name> <operator>+</operator> <name>top_offset</name><operator>)</operator></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>top_offset</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp_int</name> <operator>=</operator> <name>counter</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>temp_int</name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><name>temp_int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><name>temp_int</name></expr></argument>, <argument><expr><operator>(</operator><name>max_width</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>wstandend</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list_size</name> <operator>&gt;</operator> <name>vert_size</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>off_start</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp_int</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><name>top_offset</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><name>more_above_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>temp_int</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <name>off_start</name></expr>;</init>
<condition><expr><operator>(</operator><operator>(</operator><name>temp_int</name> <operator>+</operator> <name>counter</name> <operator>-</operator> <name>off_start</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>vert_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</condition>
<incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><operator>(</operator><name>top_offset</name> <operator>+</operator> <name>temp_int</name> <operator>+</operator>
<operator>(</operator><name>counter</name> <operator>-</operator> <name>off_start</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list_size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="string">"%c) "</literal></expr></argument>, <argument><expr><name><name>item_alpha</name><index>[<expr><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>counter</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>max_alpha_char</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><operator>(</operator><name>top_offset</name> <operator>+</operator> <operator>(</operator><name>vert_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>==</operator> <name>list_size</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>list_size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="string">"%c) "</literal></expr></argument>, <argument><expr><name><name>item_alpha</name><index>[<expr><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>counter</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>max_alpha_char</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><name>more_below_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>counter</name> <operator>&lt;=</operator> <name>list_size</name></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><operator>(</operator><name>top_offset</name> <operator>+</operator> <name>counter</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list_size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><literal type="string">"%c) "</literal></expr></argument>, <argument><expr><name><name>item_alpha</name><index>[<expr><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>counter</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>max_alpha_char</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>menu_win</name></expr></argument>, <argument><expr><name><name>menu_list</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>help</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>help_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearok</name><argument_list>(<argument><expr><name>help_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>counter</name> <operator>&lt;</operator> <literal type="number">22</literal></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>help_win</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>help_win</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>emacs_keys_mode</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>emacs_help_text</name><index>[<expr><name>counter</name></expr>]</index></name></expr> </then><else>: <expr><name><name>help_text</name><index>[<expr><name>counter</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>help_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>press_any_key_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <call><name>wgetch</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>help_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>help_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>paint_info_win</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info_window</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>counter</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>info_type</name> <operator>==</operator> <name>CONTROL_KEYS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>emacs_keys_mode</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>emacs_control_keys</name><index>[<expr><name>counter</name></expr>]</index></name></expr> </then><else>: <expr><name><name>control_keys</name><index>[<expr><name>counter</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>info_type</name> <operator>==</operator> <name>COMMANDS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><name><name>command_strings</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nohighlight</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wstandout</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wstandend</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>no_info_window</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info_window</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info_window</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_line</name> <operator>=</operator> <name>LINES</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>text_win</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><operator>(</operator><name>LINES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>idlok</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearok</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>create_info_window</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>info_window</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_line</name> <operator>=</operator> <name>LINES</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text_win</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><operator>(</operator><name>LINES</name> <operator>-</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>idlok</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info_window</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>info_win</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info_type</name> <operator>=</operator> <name>CONTROL_KEYS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>last_line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearok</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paint_info_win</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>file_op</name><parameter_list>(<parameter><decl><type><name>arg</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>restrict_mode</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>READ_FILE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>file_read_prompt_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recv_file</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_file</name> <operator>=</operator> <call><name>resolve_name</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_fp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_file</name> <operator>!=</operator> <name>string</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>arg</name> <operator>==</operator> <name>WRITE_FILE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>file_write_prompt_str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_file</name> <operator>=</operator> <call><name>resolve_name</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_file</name> <operator>!=</operator> <name>string</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>arg</name> <operator>==</operator> <name>SAVE_FILE</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>in_file_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>in_file_name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>string</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>save_file_name_prompt</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>string</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>file_not_saved_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmp_file</name> <operator>=</operator> <call><name>resolve_name</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_file</name> <operator>!=</operator> <name>string</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name> <operator>=</operator> <name>tmp_file</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_file</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in_file_name</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name>text_changes</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>shell_op</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>string</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>shell_prompt</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>string</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sh_command</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>leave_op</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>text_changes</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>menu_op</name><argument_list>(<argument><expr><name>leave_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>redraw</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>info_window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clearok</name><argument_list>(<argument><expr><name>info_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>paint_info_win</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearok</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>Blank_Line</name><parameter_list>(<parameter><decl><type><name>test_line</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>test_line</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>test_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'&gt;'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>length</name> <operator>&lt;</operator> <name><name>test_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <name><name>test_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>FALSE</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Format</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>string_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_case</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_af</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp_srchstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>temp1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>temp_dword</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>temp_d_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temp_d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_d_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>d_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>observ_margins</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>Blank_Line</name><argument_list>(<argument><expr><name>curr_line</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>formatting_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>tmp_af</name> <operator>=</operator> <name>auto_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name>auto_format</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prev_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>temp_dword</name> <operator>=</operator> <name>d_word</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_case</name> <operator>=</operator> <name>case_sen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>case_sen</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_srchstr</name> <operator>=</operator> <name>srch_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp2</name> <operator>=</operator> <name>srch_str</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>-</operator> <name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adv_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>temp1</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>temp1</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>temp1</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>temp1</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>temp2</name> <operator>=</operator> <operator>*</operator><name>temp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>temp2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>Blank_Line</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>string_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>!=</operator> <name>point</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>search</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>formatting_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>Blank_Line</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>observ_margins</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>







<while>while <condition>(<expr><operator>!</operator><call><name>Blank_Line</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>point</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>del_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>







<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adv_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>point</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>





<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>point</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>del_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>observ_margins</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>formatting_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<while>while <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>scr_pos</name> <operator>&lt;</operator> <name>right_margin</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>prev_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adv_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>





<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>Blank_Line</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>





<while>while <condition>(<expr><operator>(</operator><name>status</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>string_count</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>search</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_count</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>





<while>while <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>offset</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>





<if_stmt><if>if <condition>(<expr><name>d_word</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d_word</name> <operator>=</operator> <name>temp_dword</name></expr>;</expr_stmt>
<expr_stmt><expr><name>case_sen</name> <operator>=</operator> <name>temp_case</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>srch_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_str</name> <operator>=</operator> <name>tmp_srchstr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_d_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>auto_format</name> <operator>=</operator> <name>tmp_af</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>init_name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"/usr/share/misc/init.ee"</literal></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="string">".init.ee"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>ee_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>init_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_int</name></decl>;</decl_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string</name> <operator>=</operator> <literal type="string">"/tmp"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str1</name> <operator>=</operator> <name>home</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>home</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>home</name></expr></argument>, <argument><expr><literal type="string">"/.init.ee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>home</name></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>counter</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>access</name><argument_list>(<argument><expr><name><name>init_name</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>init_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>init_name</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>str2</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>init_file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str1</name> <operator>=</operator> <name>str2</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>str2</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>str2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unique_test</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>init_strings</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>CASE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>case_sen</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>NOCASE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>case_sen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>EXPAND</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expand_tabs</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>NOEXPAND</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expand_tabs</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>INFO</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>info_window</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>NOINFO</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>info_window</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>MARGINS</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>observ_margins</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>NOMARGINS</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>observ_margins</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>AUTOFORMAT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>auto_format</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>observ_margins</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>NOAUTOFORMAT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>auto_format</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>Echo</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str1</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str1</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>echo_string</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>PRINTCOMMAND</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str1</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>print_command</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>print_command</name></expr></argument>, <argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>RIGHTMARGIN</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str1</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>str1</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str1</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp_int</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>temp_int</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>right_margin</name> <operator>=</operator> <name>temp_int</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>HIGHLIGHT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nohighlight</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>NOHIGHLIGHT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nohighlight</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>EIGHTBIT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eightbit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>NOEIGHTBIT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>eightbit</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ee_chinese</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>EMACS_string</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>emacs_keys_mode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>NOEMACS_string</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>emacs_keys_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>chinese_cmd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ee_chinese</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eightbit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>nochinese_cmd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ee_chinese</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"zh_TW.big5"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ee_chinese</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eightbit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>dump_ee_conf</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>init_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>old_init_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_name</name> <init>= <expr><literal type="string">".init.ee"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home_dir</name> <init>= <expr><literal type="string">"~/.init.ee"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>restrict_mode</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>menu_op</name><argument_list>(<argument><expr><name>config_dump_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>conf_not_saved_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>file_name</name> <operator>=</operator> <call><name>resolve_name</name><argument_list>(<argument><expr><name>home_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s.old"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>link</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_init_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>init_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>init_file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>conf_dump_err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_init_file</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<while>while <condition>(<expr><operator>(</operator><name>string</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>old_init_file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unique_test</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>init_strings</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>Echo</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>old_init_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>case_sen</name></expr> ?</condition><then> <expr><name>CASE</name></expr> </then><else>: <expr><name>NOCASE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>expand_tabs</name></expr> ?</condition><then> <expr><name>EXPAND</name></expr> </then><else>: <expr><name>NOEXPAND</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>info_window</name></expr> ?</condition><then> <expr><name>INFO</name></expr> </then><else>: <expr><name>NOINFO</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>observ_margins</name></expr> ?</condition><then> <expr><name>MARGINS</name></expr> </then><else>: <expr><name>NOMARGINS</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>auto_format</name></expr> ?</condition><then> <expr><name>AUTOFORMAT</name></expr> </then><else>: <expr><name>NOAUTOFORMAT</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>PRINTCOMMAND</name></expr></argument>, <argument><expr><name>print_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s %d\n"</literal></expr></argument>, <argument><expr><name>RIGHTMARGIN</name></expr></argument>, <argument><expr><name>right_margin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>nohighlight</name></expr> ?</condition><then> <expr><name>NOHIGHLIGHT</name></expr> </then><else>: <expr><name>HIGHLIGHT</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>eightbit</name></expr> ?</condition><then> <expr><name>EIGHTBIT</name></expr> </then><else>: <expr><name>NOEIGHTBIT</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>emacs_keys_mode</name></expr> ?</condition><then> <expr><name>EMACS_string</name></expr> </then><else>: <expr><name>NOEMACS_string</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>ee_chinese</name></expr> ?</condition><then> <expr><name>chinese_cmd</name></expr> </then><else>: <expr><name>nochinese_cmd</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>init_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>conf_dump_success_msg</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>option</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>file_name</name> <operator>!=</operator> <name>home_dir</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>echo_string</name><parameter_list>(<parameter><decl><type><name>string</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Counter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>temp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\033'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>temp</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>temp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>temp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>temp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>temp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Counter</name> <operator>=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>Counter</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>temp</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>Counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>spell_op</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>restrict_mode</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>top</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>top</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>command</name><argument_list>(<argument><expr><name>shell_echo_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adv_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>spell_in_prog_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>command</name><argument_list>(<argument><expr><literal type="string">"&lt;&gt;!spell"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ispell_op</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>template</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>string</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>restrict_mode</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>template</name></expr></argument>, <argument><expr><literal type="string">"/tmp/ee.XXXXXXXX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>create_file_fail_msg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write_file</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"ispell %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sh_command</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delete_text</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_file</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>recv_file</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_fp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>first_word_len</name><parameter_list>(<parameter><decl><type><name>test_line</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>text</name></name> <modifier>*</modifier></type><name>test_line</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>test_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pnt</name> <operator>=</operator> <name><name>test_line</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pnt</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>pnt</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>pnt</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>pnt</name> <operator>==</operator> <literal type="char">'&gt;'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pnt</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>pnt</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pnt</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><name>pnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pnt</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>pnt</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pnt</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>pnt</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pnt</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>pnt</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pnt</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>pnt</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pnt</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><name>counter</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Auto_Format</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>string_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_case</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>word_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_dwl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_d_line_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>leave_loop</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>not_blank</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp_srchstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>temp1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>temp_dword</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>temp_d_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp_d_line</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>temp_d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_d_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>d_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>observ_margins</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>Blank_Line</name><argument_list>(<argument><expr><name>curr_line</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><name>tmp_d_line</name> <operator>=</operator> <name>d_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_d_line_length</name> <operator>=</operator> <name><name>dlt_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_line</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>auto_format</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>position</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>position</name> <operator>==</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prev_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>temp_dword</name> <operator>=</operator> <name>d_word</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_dwl</name> <operator>=</operator> <name>d_wrd_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_wrd_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d_word</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_case</name> <operator>=</operator> <name>case_sen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>case_sen</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_srchstr</name> <operator>=</operator> <name>srch_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp2</name> <operator>=</operator> <name>srch_str</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>-</operator> <name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adv_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>temp1</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>temp1</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>temp1</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>temp1</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>counter</name> <operator>&lt;</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>temp2</name> <operator>=</operator> <operator>*</operator><name>temp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>temp2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>Blank_Line</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>string_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>!=</operator> <name>point</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>search</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>





<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>Blank_Line</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>








<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>leave_loop</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <name><name>curr_line</name><operator>-&gt;</operator><name>line_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>point</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>not_blank</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>






<while>while <condition>(<expr><operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>word_len</name> <operator>=</operator> <call><name>first_word_len</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>scr_pos</name> <operator>+</operator> <name>word_len</name><operator>)</operator> <operator>&lt;</operator> <name>right_margin</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>adv_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adv_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>del_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>Blank_Line</name><argument_list>(<argument><expr><name>curr_line</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>curr_line</name><operator>-&gt;</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&gt;'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>del_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>not_blank</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>not_blank</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undel_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>point</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>





<while>while <condition>(<expr><name>right_margin</name> <operator>&lt;=</operator> <name>scr_pos</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>prev_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>del_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>Blank_Line</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adv_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>point</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adv_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>undel_word</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>not_blank</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>Blank_Line</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>next_line</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>not_blank</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>adv_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>leave_loop</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>





<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>counter</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>Blank_Line</name><argument_list>(<argument><expr><name><name>curr_line</name><operator>-&gt;</operator><name>prev_line</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bol</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>





<expr_stmt><expr><name>status</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>status</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>string_count</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>search</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_count</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>





<while>while <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>offset</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>right</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>string_count</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>left</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>d_word</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d_word</name> <operator>=</operator> <name>temp_dword</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_wrd_len</name> <operator>=</operator> <name>temp_dwl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>case_sen</name> <operator>=</operator> <name>temp_case</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>srch_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srch_str</name> <operator>=</operator> <name>tmp_srchstr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_d_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_d_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_d_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>auto_format</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dlt_line</name><operator>-&gt;</operator><name>line_length</name></name> <operator>=</operator> <name>tmp_d_line_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d_line</name> <operator>=</operator> <name>tmp_d_line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>formatted</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>midscreen</name><argument_list>(<argument><expr><name>scr_vert</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>modes_op</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>modes_menu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>mode_strings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>expand_tabs</name></expr> ?</condition><then> <expr><name>ON</name></expr> </then><else>: <expr><name>OFF</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>modes_menu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>mode_strings</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>case_sen</name></expr> ?</condition><then> <expr><name>ON</name></expr> </then><else>: <expr><name>OFF</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>modes_menu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>mode_strings</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>observ_margins</name></expr> ?</condition><then> <expr><name>ON</name></expr> </then><else>: <expr><name>OFF</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>modes_menu</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>mode_strings</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>auto_format</name></expr> ?</condition><then> <expr><name>ON</name></expr> </then><else>: <expr><name>OFF</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>modes_menu</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>mode_strings</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>eightbit</name></expr> ?</condition><then> <expr><name>ON</name></expr> </then><else>: <expr><name>OFF</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>modes_menu</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>mode_strings</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>info_window</name></expr> ?</condition><then> <expr><name>ON</name></expr> </then><else>: <expr><name>OFF</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>modes_menu</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>mode_strings</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>emacs_keys_mode</name></expr> ?</condition><then> <expr><name>ON</name></expr> </then><else>: <expr><name>OFF</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>modes_menu</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>, <argument><expr><literal type="string">"%s %d"</literal></expr></argument>, <argument><expr><name><name>mode_strings</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>right_margin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>modes_menu</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>item_string</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>mode_strings</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>ee_chinese</name></expr> ?</condition><then> <expr><name>ON</name></expr> </then><else>: <expr><name>OFF</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret_value</name> <operator>=</operator> <call><name>menu_op</name><argument_list>(<argument><expr><name>modes_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ret_value</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>expand_tabs</name> <operator>=</operator> <operator>!</operator><name>expand_tabs</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>case_sen</name> <operator>=</operator> <operator>!</operator><name>case_sen</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>observ_margins</name> <operator>=</operator> <operator>!</operator><name>observ_margins</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>auto_format</name> <operator>=</operator> <operator>!</operator><name>auto_format</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>auto_format</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>observ_margins</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>eightbit</name> <operator>=</operator> <operator>!</operator><name>eightbit</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eightbit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ee_chinese</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ee_chinese</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nc_setattrib</name><argument_list>(<argument><expr><name>A_NC_BIG5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nc_clearattrib</name><argument_list>(<argument><expr><name>A_NC_BIG5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>text_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>info_window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>no_info_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>create_info_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>emacs_keys_mode</name> <operator>=</operator> <operator>!</operator><name>emacs_keys_mode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>info_window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paint_info_win</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>get_string</name><argument_list>(<argument><expr><name>margin_prompt</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>right_margin</name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><name>ee_chinese</name> <operator>=</operator> <operator>!</operator><name>ee_chinese</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ee_chinese</name> <operator>!=</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>eightbit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NCURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ee_chinese</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nc_setattrib</name><argument_list>(<argument><expr><name>A_NC_BIG5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nc_clearattrib</name><argument_list>(<argument><expr><name>A_NC_BIG5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>
while <condition>(<expr><name>ret_value</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>is_in_string</name><parameter_list>(<parameter><decl><type><name>string</name></type></decl></parameter>, <parameter><decl><type><name>substring</name></type></decl></parameter>)</parameter_list>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>string</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>substring</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>full</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sub</name> <operator>=</operator> <name>substring</name></expr>;</init> <condition><expr><operator>(</operator><name>sub</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>sub</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</condition> <incr><expr><name>sub</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>full</name> <operator>=</operator> <name>string</name></expr>;</init> <condition><expr><operator>(</operator><name>full</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>full</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</condition>
<incr><expr><name>full</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sub</name> <operator>==</operator> <operator>*</operator><name>full</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>full</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>char</name> <modifier>*</modifier></type>
<name>resolve_name</name><parameter_list>(<parameter><decl><type><name>name</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>long_buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>short_buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start_of_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>getuid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>user</name> <operator>=</operator> <operator>(</operator>struct <name>passwd</name> <operator>*</operator><operator>)</operator> <call><name>getpwuid</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <name>name</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>name</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>user</name> <operator>=</operator> <operator>(</operator>struct <name>passwd</name> <operator>*</operator><operator>)</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><operator>(</operator><name>name</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return<expr><operator>(</operator><name>name</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>pw_dir</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>slash</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>user</name><operator>-&gt;</operator><name>pw_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_in_string</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>index</name> <operator>&lt;</operator> <literal type="number">1024</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'$'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>index</name> <operator>&lt;</operator> <literal type="number">1024</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>long_buffer</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'$'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>index</name> <operator>&lt;</operator> <literal type="number">1024</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start_of_var</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'}'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>counter</name> <operator>&lt;</operator> <literal type="number">128</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>short_buffer</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'$'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>counter</name> <operator>&lt;</operator> <literal type="number">128</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>short_buffer</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>short_buffer</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>slash</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>short_buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>index</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>long_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>start_of_var</name> <operator>!=</operator> <name>tmp</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>index</name> <operator>&lt;</operator> <literal type="number">1024</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>long_buffer</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>start_of_var</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start_of_var</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>buffer</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>long_buffer</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>long_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator><name>buffer</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>restrict_mode</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>restricted</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>FALSE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wprintw</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>, <argument><expr><name>restricted_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrefresh</name><argument_list>(<argument><expr><name>com_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_com_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>unique_test</name><parameter_list>(<parameter><decl><type><name>string</name></type></decl></parameter>, <parameter><decl><type><name>list</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>list</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>compare</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_match</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><name>num_match</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CATGETS</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>char</name> <modifier>*</modifier></type>
<name>catgetlocal</name><parameter_list>(<parameter><decl><type><name>number</name></type></decl></parameter>, <parameter><decl><type><name>string</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <call><name>catgets</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>temp1</name> <operator>!=</operator> <name>string</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp2</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>temp2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><name>temp1</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>void</name></type>
<name>strings_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CATGETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>catalog</name> <operator>=</operator> <call><name>catopen</name><argument_list>(<argument><expr><literal type="string">"ee"</literal></expr></argument>, <argument><expr><name>NL_CAT_LOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>modes_menu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"modes menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode_strings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"tabs to spaces "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode_strings</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"case sensitive search"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode_strings</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"margins observed "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode_strings</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"auto-paragraph format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode_strings</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"eightbit characters "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode_strings</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"info window "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode_strings</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"right margin "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leave_menu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"leave menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leave_menu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"save changes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>leave_menu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"no save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_menu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"file menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_menu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="string">"read a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_menu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="string">"write a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_menu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"save file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_menu</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"print editor contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>search_menu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="string">"search menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>search_menu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="string">"search for ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>search_menu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="string">"search"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spell_menu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"spell menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spell_menu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="string">"use 'spell'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spell_menu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="string">"use 'ispell'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>misc_menu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="string">"miscellaneous menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>misc_menu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="string">"format paragraph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>misc_menu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="string">"shell command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>misc_menu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="string">"check spelling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_menu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="string">"main menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_menu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="string">"leave editor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_menu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_menu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"file operations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_menu</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="string">"redraw screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_menu</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_menu</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="string">"search"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>main_menu</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="string">"miscellaneous"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="string">"Control keys: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="string">"^a ascii code ^i tab ^r right "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><literal type="string">"^b bottom of text ^j newline ^t top of text "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">38</literal></expr></argument>, <argument><expr><literal type="string">"^c command ^k delete char ^u up "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="string">"^d down ^l left ^v undelete word "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="string">"^e search prompt ^m newline ^w delete word "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="string">"^f undelete char ^n next page ^x search "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="string">"^g begin of line ^o end of line ^y delete line "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">43</literal></expr></argument>, <argument><expr><literal type="string">"^h backspace ^p prev page ^z undelete line "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="string">"^[ (escape) menu ESC-Enter: exit ee "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">46</literal></expr></argument>, <argument><expr><literal type="string">"Commands: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">47</literal></expr></argument>, <argument><expr><literal type="string">"help : get this info file : print file name "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="string">"read : read a file char : ascii code of char "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">49</literal></expr></argument>, <argument><expr><literal type="string">"write : write a file case : case sensitive search "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="string">"exit : leave and save nocase : case insensitive search "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">51</literal></expr></argument>, <argument><expr><literal type="string">"quit : leave, no save !cmd : execute \"cmd\" in shell "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">52</literal></expr></argument>, <argument><expr><literal type="string">"line : display line #0-9 : go to line \"#\" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">53</literal></expr></argument>, <argument><expr><literal type="string">"expand : expand tabs noexpand: do not expand tabs "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">54</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><literal type="string">" ee [+#] [-i] [-e] [-h] [file(s)] "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>help_text</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><literal type="string">"+#:go to line #-i :no info window -e : don't expand tabs -h :no highlight"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>control_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">57</literal></expr></argument>, <argument><expr><literal type="string">"^[ (escape) menu ^e search prompt ^y delete line ^u up ^p prev page "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>control_keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">58</literal></expr></argument>, <argument><expr><literal type="string">"^a ascii code ^x search ^z undelete line ^d down ^n next page "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>control_keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="string">"^b bottom of text ^g begin of line ^w delete word ^l left "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>control_keys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="string">"^t top of text ^o end of line ^v undelete word ^r right "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>control_keys</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">61</literal></expr></argument>, <argument><expr><literal type="string">"^c command ^k delete char ^f undelete char ESC-Enter: exit ee "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command_strings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">62</literal></expr></argument>, <argument><expr><literal type="string">"help : get help info |file : print file name |line : print line #"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command_strings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">63</literal></expr></argument>, <argument><expr><literal type="string">"read : read a file |char : ascii code of char |0-9 : go to line \"#\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command_strings</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"write: write a file |case : case sensitive search |exit : leave and save "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command_strings</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><literal type="string">"!cmd : shell \"cmd\" |nocase: ignore case in search |quit : leave, no save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command_strings</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">66</literal></expr></argument>, <argument><expr><literal type="string">"expand: expand tabs |noexpand: do not expand tabs "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>com_win_message</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">67</literal></expr></argument>, <argument><expr><literal type="string">" press Escape (^[) for menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_file_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">68</literal></expr></argument>, <argument><expr><literal type="string">"no file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ascii_code_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">69</literal></expr></argument>, <argument><expr><literal type="string">"ascii code: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>printer_msg_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><literal type="string">"sending contents of buffer to \"%s\" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>command_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">71</literal></expr></argument>, <argument><expr><literal type="string">"command: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_write_prompt_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">72</literal></expr></argument>, <argument><expr><literal type="string">"name of file to write: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_read_prompt_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">73</literal></expr></argument>, <argument><expr><literal type="string">"name of file to read: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>char_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">74</literal></expr></argument>, <argument><expr><literal type="string">"character = %d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>unkn_cmd_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">75</literal></expr></argument>, <argument><expr><literal type="string">"unknown command \"%s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>non_unique_cmd_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">76</literal></expr></argument>, <argument><expr><literal type="string">"entered command is not unique"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line_num_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">77</literal></expr></argument>, <argument><expr><literal type="string">"line %d "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line_len_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">78</literal></expr></argument>, <argument><expr><literal type="string">"length = %d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_file_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">79</literal></expr></argument>, <argument><expr><literal type="string">"current file is \"%s\" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usage0</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="string">"usage: %s [-i] [-e] [-h] [+line_number] [file(s)]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usage1</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">81</literal></expr></argument>, <argument><expr><literal type="string">" -i turn off info window\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usage2</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">82</literal></expr></argument>, <argument><expr><literal type="string">" -e do not convert tabs to spaces\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usage3</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">83</literal></expr></argument>, <argument><expr><literal type="string">" -h do not use highlighting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_is_dir_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="string">"file \"%s\" is a directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_file_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">85</literal></expr></argument>, <argument><expr><literal type="string">"new file \"%s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cant_open_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">86</literal></expr></argument>, <argument><expr><literal type="string">"can't open \"%s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>open_file_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">87</literal></expr></argument>, <argument><expr><literal type="string">"file \"%s\", %d lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_read_fin_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">88</literal></expr></argument>, <argument><expr><literal type="string">"finished reading file \"%s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reading_file_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">89</literal></expr></argument>, <argument><expr><literal type="string">"reading file \"%s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>read_only_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">90</literal></expr></argument>, <argument><expr><literal type="string">", read only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_read_lines_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">91</literal></expr></argument>, <argument><expr><literal type="string">"file \"%s\", %d lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>save_file_name_prompt</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">92</literal></expr></argument>, <argument><expr><literal type="string">"enter name of file: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_not_saved_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">93</literal></expr></argument>, <argument><expr><literal type="string">"no filename entered: file not saved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>changes_made_prompt</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">94</literal></expr></argument>, <argument><expr><literal type="string">"changes have been made, are you sure? (y/n [n]) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yes_char</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">95</literal></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_exists_prompt</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">96</literal></expr></argument>, <argument><expr><literal type="string">"file already exists, overwrite? (y/n) [n] "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>create_file_fail_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="string">"unable to create file \"%s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>writing_file_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">98</literal></expr></argument>, <argument><expr><literal type="string">"writing file \"%s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_written_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="string">"\"%s\" %d lines, %d characters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>searching_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">" ...searching"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str_not_found_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><literal type="string">"string \"%s\" not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>search_prompt_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">102</literal></expr></argument>, <argument><expr><literal type="string">"search for: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exec_err_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">103</literal></expr></argument>, <argument><expr><literal type="string">"could not exec %s\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>continue_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">104</literal></expr></argument>, <argument><expr><literal type="string">"press return to continue "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>menu_cancel_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">105</literal></expr></argument>, <argument><expr><literal type="string">"press Esc to cancel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>menu_size_err_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">106</literal></expr></argument>, <argument><expr><literal type="string">"menu too large for window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>press_any_key_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">107</literal></expr></argument>, <argument><expr><literal type="string">"press any key to continue "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shell_prompt</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">108</literal></expr></argument>, <argument><expr><literal type="string">"shell command: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>formatting_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">109</literal></expr></argument>, <argument><expr><literal type="string">"...formatting paragraph..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shell_echo_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"&lt;!echo 'list of unrecognized words'; echo -=-=-=-=-=-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>spell_in_prog_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">111</literal></expr></argument>, <argument><expr><literal type="string">"sending contents of edit buffer to 'spell'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>margin_prompt</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">112</literal></expr></argument>, <argument><expr><literal type="string">"right margin is: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>restricted_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">113</literal></expr></argument>, <argument><expr><literal type="string">"restricted mode: unable to perform requested operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ON</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">114</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>OFF</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">115</literal></expr></argument>, <argument><expr><literal type="string">"OFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>HELP</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">116</literal></expr></argument>, <argument><expr><literal type="string">"HELP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>WRITE</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">117</literal></expr></argument>, <argument><expr><literal type="string">"WRITE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>READ</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">118</literal></expr></argument>, <argument><expr><literal type="string">"READ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>LINE</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">119</literal></expr></argument>, <argument><expr><literal type="string">"LINE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>FILE_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="string">"FILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CHARACTER</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">121</literal></expr></argument>, <argument><expr><literal type="string">"CHARACTER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>REDRAW</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">122</literal></expr></argument>, <argument><expr><literal type="string">"REDRAW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESEQUENCE</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"RESEQUENCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>AUTHOR</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">124</literal></expr></argument>, <argument><expr><literal type="string">"AUTHOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>VERSION</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CASE</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">126</literal></expr></argument>, <argument><expr><literal type="string">"CASE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NOCASE</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="string">"NOCASE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>EXPAND</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"EXPAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NOEXPAND</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">129</literal></expr></argument>, <argument><expr><literal type="string">"NOEXPAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Exit_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><literal type="string">"EXIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>QUIT_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">131</literal></expr></argument>, <argument><expr><literal type="string">"QUIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>INFO</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">132</literal></expr></argument>, <argument><expr><literal type="string">"INFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NOINFO</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">133</literal></expr></argument>, <argument><expr><literal type="string">"NOINFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MARGINS</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">134</literal></expr></argument>, <argument><expr><literal type="string">"MARGINS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NOMARGINS</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">135</literal></expr></argument>, <argument><expr><literal type="string">"NOMARGINS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>AUTOFORMAT</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">136</literal></expr></argument>, <argument><expr><literal type="string">"AUTOFORMAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NOAUTOFORMAT</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">137</literal></expr></argument>, <argument><expr><literal type="string">"NOAUTOFORMAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Echo</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">138</literal></expr></argument>, <argument><expr><literal type="string">"ECHO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PRINTCOMMAND</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">139</literal></expr></argument>, <argument><expr><literal type="string">"PRINTCOMMAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RIGHTMARGIN</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><literal type="string">"RIGHTMARGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>HIGHLIGHT</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">141</literal></expr></argument>, <argument><expr><literal type="string">"HIGHLIGHT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NOHIGHLIGHT</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">142</literal></expr></argument>, <argument><expr><literal type="string">"NOHIGHLIGHT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>EIGHTBIT</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">143</literal></expr></argument>, <argument><expr><literal type="string">"EIGHTBIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NOEIGHTBIT</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">144</literal></expr></argument>, <argument><expr><literal type="string">"NOEIGHTBIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>mode_strings</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">145</literal></expr></argument>, <argument><expr><literal type="string">"emacs key bindings "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">146</literal></expr></argument>, <argument><expr><literal type="string">"^a beginning of line ^i tab ^r restore word "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">147</literal></expr></argument>, <argument><expr><literal type="string">"^b back 1 char ^j undel char ^t top of text "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">148</literal></expr></argument>, <argument><expr><literal type="string">"^c command ^k delete line ^u bottom of text "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">149</literal></expr></argument>, <argument><expr><literal type="string">"^d delete char ^l undelete line ^v next page "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="string">"^e end of line ^m newline ^w delete word "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">151</literal></expr></argument>, <argument><expr><literal type="string">"^f forward 1 char ^n next line ^x search "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">152</literal></expr></argument>, <argument><expr><literal type="string">"^g go back 1 page ^o ascii char insert ^y search prompt "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">153</literal></expr></argument>, <argument><expr><literal type="string">"^h backspace ^p prev line ^z next word "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_help_text</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <name><name>help_text</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_control_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">154</literal></expr></argument>, <argument><expr><literal type="string">"^[ (escape) menu ^y search prompt ^k delete line ^p prev li ^g prev page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_control_keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">155</literal></expr></argument>, <argument><expr><literal type="string">"^o ascii code ^x search ^l undelete line ^n next li ^v next page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_control_keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">156</literal></expr></argument>, <argument><expr><literal type="string">"^u end of file ^a begin of line ^w delete word ^b back 1 char ^z next word"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_control_keys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">157</literal></expr></argument>, <argument><expr><literal type="string">"^t top of text ^e end of line ^r restore word ^f forward char "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emacs_control_keys</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">158</literal></expr></argument>, <argument><expr><literal type="string">"^c command ^d delete char ^j undelete char ESC-Enter: exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>EMACS_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">159</literal></expr></argument>, <argument><expr><literal type="string">"EMACS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NOEMACS_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><literal type="string">"NOEMACS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usage4</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">161</literal></expr></argument>, <argument><expr><literal type="string">" +#put cursor at line #\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>conf_dump_err_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">162</literal></expr></argument>, <argument><expr><literal type="string">"unable to open .init.ee for writing, no configuration saved!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>conf_dump_success_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">163</literal></expr></argument>, <argument><expr><literal type="string">"ee configuration saved in file %s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>modes_menu</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">164</literal></expr></argument>, <argument><expr><literal type="string">"save editor configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config_dump_menu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">165</literal></expr></argument>, <argument><expr><literal type="string">"save ee configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config_dump_menu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">166</literal></expr></argument>, <argument><expr><literal type="string">"save in current directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config_dump_menu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">167</literal></expr></argument>, <argument><expr><literal type="string">"save in home directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>conf_not_saved_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">168</literal></expr></argument>, <argument><expr><literal type="string">"ee configuration not saved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ree_no_file_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">169</literal></expr></argument>, <argument><expr><literal type="string">"must specify a file when invoking ree"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>menu_too_lrg_msg</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">180</literal></expr></argument>, <argument><expr><literal type="string">"menu too large for window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>more_above_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">181</literal></expr></argument>, <argument><expr><literal type="string">"^^more^^"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>more_below_str</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">182</literal></expr></argument>, <argument><expr><literal type="string">"VVmoreVV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode_strings</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">183</literal></expr></argument>, <argument><expr><literal type="string">"16 bit characters "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chinese_cmd</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">184</literal></expr></argument>, <argument><expr><literal type="string">"16BIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nochinese_cmd</name> <operator>=</operator> <call><name>catgetlocal</name><argument_list>( <argument><expr><literal type="number">185</literal></expr></argument>, <argument><expr><literal type="string">"NO16BIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>HELP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>WRITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>READ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>LINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>FILE_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>REDRAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>RESEQUENCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>AUTHOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>CASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>NOCASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>EXPAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>NOEXPAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>Exit_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>QUIT_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"&lt;"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"&gt;"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"!"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"2"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"3"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"4"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"5"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"6"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"7"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"8"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"9"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <name>CHARACTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <name>chinese_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <name>nochinese_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NOCASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>EXPAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NOEXPAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>INFO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>NOINFO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>MARGINS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>NOMARGINS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>AUTOFORMAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>NOAUTOFORMAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>Echo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>PRINTCOMMAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>RIGHTMARGIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>HIGHLIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>NOHIGHLIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>EIGHTBIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name>NOEIGHTBIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name>EMACS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name>NOEMACS_string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <name>chinese_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <name>nochinese_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>init_strings</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>counter</name> <operator>&lt;</operator> <name>NUM_MODES_ITEMS</name></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>modes_menu</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>item_string</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CATGETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>catclose</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
