<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ee/new_curse.c">








































<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>copyright_message</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"Copyright (c) 1986, 1987, 1988, 1991, 1992, 1993, 1994, 1995, 2009 Hugh Mahon"</literal></expr>,
<expr><literal type="string">"All rights are reserved."</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>new_curse_name</name><init>= <expr><literal type="string">"@(#) new_curse.c $Revision: 1.54 $"</literal></expr></init></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"new_curse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSD_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SLCT_HDR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_STDLIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;varargs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_UNISTD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_SYS_IOCTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>curscr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>WINDOW</name> <modifier>*</modifier></type><name>virtual_scr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>stdscr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>last_window_refreshed</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGWINSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>ws</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a &lt; b ? a : b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>highbitset</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; 0x80)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>String_Out</name><parameter_list>(<parameter><type><name>table</name></type></parameter>, <parameter><type><name>stack</name></type></parameter>, <parameter><type><name>place</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Info_Out(table, stack, place)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>String_Out</name><parameter_list>(<parameter><type><name>table</name></type></parameter>, <parameter><type><name>stack</name></type></parameter>, <parameter><type><name>place</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Cap_Out(table, stack, place)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bw__</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>am__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xb__</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xs__</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xn__</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eo__</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gn__</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hc__</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>km__</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hs__</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in__</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>da__</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db__</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mi__</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms__</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>os__</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>es__</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xt__</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hz__</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ul__</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xo__</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chts__</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nxon__</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nrrmc__</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>npc__</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mc5i__</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>co__</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>it__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>li__</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lm__</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sg__</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb__</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vt__</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ws__</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cols__</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lines__</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmc__</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vt__</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wsl__</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nlab__</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lh__</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lw__</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bt__</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bl__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cr__</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cs__</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ct__</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cl__</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ce__</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cd__</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ch__</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC__</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cm__</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do__</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ho__</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi__</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>le__</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CM__</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ve__</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd__</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll__</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>up__</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vs__</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dc__</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dl__</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ds__</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hd__</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as__</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mb__</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>md__</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ti__</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dm__</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mh__</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>im__</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk__</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp__</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mr__</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>so__</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>us__</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ec__</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ae__</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>me__</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>te__</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ed__</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ei__</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se__</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ue__</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vb__</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff__</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs__</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i1__</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i2__</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i3__</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>if__</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ic__</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>al__</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ip__</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kb__</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ka__</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kC__</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kt__</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kD__</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kL__</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kd__</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kM__</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kE__</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kS__</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k0__</name></cpp:macro> <cpp:value>65</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k1__</name></cpp:macro> <cpp:value>66</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf10__</name></cpp:macro> <cpp:value>67</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k2__</name></cpp:macro> <cpp:value>68</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k3__</name></cpp:macro> <cpp:value>69</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k4__</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k5__</name></cpp:macro> <cpp:value>71</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k6__</name></cpp:macro> <cpp:value>72</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k7__</name></cpp:macro> <cpp:value>73</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k8__</name></cpp:macro> <cpp:value>74</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k9__</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh__</name></cpp:macro> <cpp:value>76</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kI__</name></cpp:macro> <cpp:value>77</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kA__</name></cpp:macro> <cpp:value>78</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kl__</name></cpp:macro> <cpp:value>79</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kH__</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kN__</name></cpp:macro> <cpp:value>81</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kP__</name></cpp:macro> <cpp:value>82</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kr__</name></cpp:macro> <cpp:value>83</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kF__</name></cpp:macro> <cpp:value>84</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kR__</name></cpp:macro> <cpp:value>85</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kT__</name></cpp:macro> <cpp:value>86</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ku__</name></cpp:macro> <cpp:value>87</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ke__</name></cpp:macro> <cpp:value>88</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ks__</name></cpp:macro> <cpp:value>89</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l0__</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l1__</name></cpp:macro> <cpp:value>91</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>la__</name></cpp:macro> <cpp:value>92</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l2__</name></cpp:macro> <cpp:value>93</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l3__</name></cpp:macro> <cpp:value>94</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l4__</name></cpp:macro> <cpp:value>95</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l5__</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l6__</name></cpp:macro> <cpp:value>97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l7__</name></cpp:macro> <cpp:value>98</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l8__</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l9__</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mo__</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mm__</name></cpp:macro> <cpp:value>102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nw__</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pc__</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC__</name></cpp:macro> <cpp:value>105</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DL__</name></cpp:macro> <cpp:value>106</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO__</name></cpp:macro> <cpp:value>107</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IC__</name></cpp:macro> <cpp:value>118</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF__</name></cpp:macro> <cpp:value>109</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL__</name></cpp:macro> <cpp:value>110</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LE__</name></cpp:macro> <cpp:value>111</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI__</name></cpp:macro> <cpp:value>112</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SR__</name></cpp:macro> <cpp:value>113</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UP__</name></cpp:macro> <cpp:value>114</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pk__</name></cpp:macro> <cpp:value>115</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pl__</name></cpp:macro> <cpp:value>116</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>px__</name></cpp:macro> <cpp:value>117</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ps__</name></cpp:macro> <cpp:value>118</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf__</name></cpp:macro> <cpp:value>119</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>po__</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rp__</name></cpp:macro> <cpp:value>121</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r1__</name></cpp:macro> <cpp:value>122</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r2__</name></cpp:macro> <cpp:value>123</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r3__</name></cpp:macro> <cpp:value>124</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rf__</name></cpp:macro> <cpp:value>125</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc__</name></cpp:macro> <cpp:value>126</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cv__</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc__</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf__</name></cpp:macro> <cpp:value>129</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sr__</name></cpp:macro> <cpp:value>130</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sa__</name></cpp:macro> <cpp:value>131</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st__</name></cpp:macro> <cpp:value>132</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wi__</name></cpp:macro> <cpp:value>133</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ta__</name></cpp:macro> <cpp:value>134</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ts__</name></cpp:macro> <cpp:value>135</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uc__</name></cpp:macro> <cpp:value>136</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hu__</name></cpp:macro> <cpp:value>137</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iP__</name></cpp:macro> <cpp:value>138</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K1__</name></cpp:macro> <cpp:value>139</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K2__</name></cpp:macro> <cpp:value>140</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K3__</name></cpp:macro> <cpp:value>141</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K4__</name></cpp:macro> <cpp:value>142</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K5__</name></cpp:macro> <cpp:value>143</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pO__</name></cpp:macro> <cpp:value>144</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ml__</name></cpp:macro> <cpp:value>145</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mu__</name></cpp:macro> <cpp:value>146</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rmp__</name></cpp:macro> <cpp:value>145</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>acsc__</name></cpp:macro> <cpp:value>146</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pln__</name></cpp:macro> <cpp:value>147</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kcbt__</name></cpp:macro> <cpp:value>148</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>smxon__</name></cpp:macro> <cpp:value>149</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rmxon__</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>smam__</name></cpp:macro> <cpp:value>151</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rmam__</name></cpp:macro> <cpp:value>152</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xonc__</name></cpp:macro> <cpp:value>153</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xoffc__</name></cpp:macro> <cpp:value>154</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>enacs__</name></cpp:macro> <cpp:value>155</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>smln__</name></cpp:macro> <cpp:value>156</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rmln__</name></cpp:macro> <cpp:value>157</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kbeg__</name></cpp:macro> <cpp:value>158</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kcan__</name></cpp:macro> <cpp:value>159</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kclo__</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kcmd__</name></cpp:macro> <cpp:value>161</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kcpy__</name></cpp:macro> <cpp:value>162</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kcrt__</name></cpp:macro> <cpp:value>163</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kend__</name></cpp:macro> <cpp:value>164</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kent__</name></cpp:macro> <cpp:value>165</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kext__</name></cpp:macro> <cpp:value>166</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kfnd__</name></cpp:macro> <cpp:value>167</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>khlp__</name></cpp:macro> <cpp:value>168</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmrk__</name></cpp:macro> <cpp:value>169</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmsg__</name></cpp:macro> <cpp:value>170</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmov__</name></cpp:macro> <cpp:value>171</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>knxt__</name></cpp:macro> <cpp:value>172</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kopn__</name></cpp:macro> <cpp:value>173</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kopt__</name></cpp:macro> <cpp:value>174</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kprv__</name></cpp:macro> <cpp:value>175</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kprt__</name></cpp:macro> <cpp:value>176</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>krdo__</name></cpp:macro> <cpp:value>177</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kref__</name></cpp:macro> <cpp:value>178</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>krfr__</name></cpp:macro> <cpp:value>179</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>krpl__</name></cpp:macro> <cpp:value>180</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>krst__</name></cpp:macro> <cpp:value>181</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kres__</name></cpp:macro> <cpp:value>182</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ksav__</name></cpp:macro> <cpp:value>183</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kspd__</name></cpp:macro> <cpp:value>184</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kund__</name></cpp:macro> <cpp:value>185</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kBEG__</name></cpp:macro> <cpp:value>186</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCAN__</name></cpp:macro> <cpp:value>187</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCMD__</name></cpp:macro> <cpp:value>188</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCPY__</name></cpp:macro> <cpp:value>189</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCRT__</name></cpp:macro> <cpp:value>190</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kDC__</name></cpp:macro> <cpp:value>191</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kDL__</name></cpp:macro> <cpp:value>192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kslt__</name></cpp:macro> <cpp:value>193</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kEND__</name></cpp:macro> <cpp:value>194</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kEOL__</name></cpp:macro> <cpp:value>195</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kEXT__</name></cpp:macro> <cpp:value>196</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kFND__</name></cpp:macro> <cpp:value>197</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHLP__</name></cpp:macro> <cpp:value>198</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kHOM__</name></cpp:macro> <cpp:value>199</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kIC__</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kLFT__</name></cpp:macro> <cpp:value>201</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kMSG__</name></cpp:macro> <cpp:value>202</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kMOV__</name></cpp:macro> <cpp:value>203</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kNXT__</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kOPT__</name></cpp:macro> <cpp:value>205</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kPRV__</name></cpp:macro> <cpp:value>206</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kPRT__</name></cpp:macro> <cpp:value>207</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kRDO__</name></cpp:macro> <cpp:value>208</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kRPL__</name></cpp:macro> <cpp:value>209</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kRIT__</name></cpp:macro> <cpp:value>210</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kRES__</name></cpp:macro> <cpp:value>211</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kSAV__</name></cpp:macro> <cpp:value>212</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kSPD__</name></cpp:macro> <cpp:value>213</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kUND__</name></cpp:macro> <cpp:value>214</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rfi__</name></cpp:macro> <cpp:value>215</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf11__</name></cpp:macro> <cpp:value>216</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf12__</name></cpp:macro> <cpp:value>217</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf13__</name></cpp:macro> <cpp:value>218</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf14__</name></cpp:macro> <cpp:value>219</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf15__</name></cpp:macro> <cpp:value>220</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf16__</name></cpp:macro> <cpp:value>221</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf17__</name></cpp:macro> <cpp:value>222</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf18__</name></cpp:macro> <cpp:value>223</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf19__</name></cpp:macro> <cpp:value>224</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf20__</name></cpp:macro> <cpp:value>225</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf21__</name></cpp:macro> <cpp:value>226</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf22__</name></cpp:macro> <cpp:value>227</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf23__</name></cpp:macro> <cpp:value>228</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf24__</name></cpp:macro> <cpp:value>229</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf25__</name></cpp:macro> <cpp:value>230</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf26__</name></cpp:macro> <cpp:value>231</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf27__</name></cpp:macro> <cpp:value>232</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf28__</name></cpp:macro> <cpp:value>233</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf29__</name></cpp:macro> <cpp:value>234</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf30__</name></cpp:macro> <cpp:value>235</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf31__</name></cpp:macro> <cpp:value>236</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf32__</name></cpp:macro> <cpp:value>237</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf33__</name></cpp:macro> <cpp:value>238</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf34__</name></cpp:macro> <cpp:value>239</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf35__</name></cpp:macro> <cpp:value>240</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf36__</name></cpp:macro> <cpp:value>241</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf37__</name></cpp:macro> <cpp:value>242</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf38__</name></cpp:macro> <cpp:value>243</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf39__</name></cpp:macro> <cpp:value>244</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf40__</name></cpp:macro> <cpp:value>245</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf41__</name></cpp:macro> <cpp:value>246</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf42__</name></cpp:macro> <cpp:value>247</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf43__</name></cpp:macro> <cpp:value>248</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf44__</name></cpp:macro> <cpp:value>249</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf45__</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf46__</name></cpp:macro> <cpp:value>251</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf47__</name></cpp:macro> <cpp:value>252</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf48__</name></cpp:macro> <cpp:value>253</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf49__</name></cpp:macro> <cpp:value>254</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf50__</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf51__</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf52__</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf53__</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf54__</name></cpp:macro> <cpp:value>259</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf55__</name></cpp:macro> <cpp:value>260</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf56__</name></cpp:macro> <cpp:value>261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf57__</name></cpp:macro> <cpp:value>262</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf58__</name></cpp:macro> <cpp:value>263</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf59__</name></cpp:macro> <cpp:value>264</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf60__</name></cpp:macro> <cpp:value>265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf61__</name></cpp:macro> <cpp:value>266</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf62__</name></cpp:macro> <cpp:value>267</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kf63__</name></cpp:macro> <cpp:value>268</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>el1__</name></cpp:macro> <cpp:value>269</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mgc__</name></cpp:macro> <cpp:value>270</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>smgl__</name></cpp:macro> <cpp:value>271</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>smgr__</name></cpp:macro> <cpp:value>272</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>Boolean_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"bw"</literal></expr>, <expr><literal type="string">"am"</literal></expr>, <expr><literal type="string">"xb"</literal></expr>, <expr><literal type="string">"xs"</literal></expr>, <expr><literal type="string">"xn"</literal></expr>, <expr><literal type="string">"eo"</literal></expr>, <expr><literal type="string">"gn"</literal></expr>, <expr><literal type="string">"hc"</literal></expr>, <expr><literal type="string">"km"</literal></expr>, <expr><literal type="string">"hs"</literal></expr>, <expr><literal type="string">"in"</literal></expr>, <expr><literal type="string">"da"</literal></expr>, <expr><literal type="string">"db"</literal></expr>,
<expr><literal type="string">"mi"</literal></expr>, <expr><literal type="string">"ms"</literal></expr>, <expr><literal type="string">"os"</literal></expr>, <expr><literal type="string">"es"</literal></expr>, <expr><literal type="string">"xt"</literal></expr>, <expr><literal type="string">"hz"</literal></expr>, <expr><literal type="string">"ul"</literal></expr>, <expr><literal type="string">"xo"</literal></expr>, <expr><literal type="string">"HC"</literal></expr>, <expr><literal type="string">"nx"</literal></expr>, <expr><literal type="string">"NR"</literal></expr>, <expr><literal type="string">"NP"</literal></expr>, <expr><literal type="string">"5i"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>Number_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"co#"</literal></expr>, <expr><literal type="string">"it#"</literal></expr>, <expr><literal type="string">"li#"</literal></expr>, <expr><literal type="string">"lm#"</literal></expr>, <expr><literal type="string">"sg#"</literal></expr>, <expr><literal type="string">"pb#"</literal></expr>, <expr><literal type="string">"vt#"</literal></expr>, <expr><literal type="string">"ws#"</literal></expr>, <expr><literal type="string">"Nl#"</literal></expr>, <expr><literal type="string">"lh#"</literal></expr>, <expr><literal type="string">"lw#"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>String_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"bt="</literal></expr>, <expr><literal type="string">"bl="</literal></expr>, <expr><literal type="string">"cr="</literal></expr>, <expr><literal type="string">"cs="</literal></expr>, <expr><literal type="string">"ct="</literal></expr>, <expr><literal type="string">"cl="</literal></expr>, <expr><literal type="string">"ce="</literal></expr>, <expr><literal type="string">"cd="</literal></expr>, <expr><literal type="string">"ch="</literal></expr>, <expr><literal type="string">"CC="</literal></expr>, <expr><literal type="string">"cm="</literal></expr>,
<expr><literal type="string">"do="</literal></expr>, <expr><literal type="string">"ho="</literal></expr>, <expr><literal type="string">"vi="</literal></expr>, <expr><literal type="string">"le="</literal></expr>, <expr><literal type="string">"CM="</literal></expr>, <expr><literal type="string">"ve="</literal></expr>, <expr><literal type="string">"nd="</literal></expr>, <expr><literal type="string">"ll="</literal></expr>, <expr><literal type="string">"up="</literal></expr>, <expr><literal type="string">"vs="</literal></expr>, <expr><literal type="string">"dc="</literal></expr>,
<expr><literal type="string">"dl="</literal></expr>, <expr><literal type="string">"ds="</literal></expr>, <expr><literal type="string">"hd="</literal></expr>, <expr><literal type="string">"as="</literal></expr>, <expr><literal type="string">"mb="</literal></expr>, <expr><literal type="string">"md="</literal></expr>, <expr><literal type="string">"ti="</literal></expr>, <expr><literal type="string">"dm="</literal></expr>, <expr><literal type="string">"mh="</literal></expr>, <expr><literal type="string">"im="</literal></expr>, <expr><literal type="string">"mk="</literal></expr>,
<expr><literal type="string">"mp="</literal></expr>, <expr><literal type="string">"mr="</literal></expr>, <expr><literal type="string">"so="</literal></expr>, <expr><literal type="string">"us="</literal></expr>, <expr><literal type="string">"ec="</literal></expr>, <expr><literal type="string">"ae="</literal></expr>, <expr><literal type="string">"me="</literal></expr>, <expr><literal type="string">"te="</literal></expr>, <expr><literal type="string">"ed="</literal></expr>, <expr><literal type="string">"ei="</literal></expr>, <expr><literal type="string">"se="</literal></expr>,
<expr><literal type="string">"ue="</literal></expr>, <expr><literal type="string">"vb="</literal></expr>, <expr><literal type="string">"ff="</literal></expr>, <expr><literal type="string">"fs="</literal></expr>, <expr><literal type="string">"i1="</literal></expr>, <expr><literal type="string">"i2="</literal></expr>, <expr><literal type="string">"i3="</literal></expr>, <expr><literal type="string">"if="</literal></expr>, <expr><literal type="string">"ic="</literal></expr>, <expr><literal type="string">"al="</literal></expr>, <expr><literal type="string">"ip="</literal></expr>,
<expr><literal type="string">"kb="</literal></expr>, <expr><literal type="string">"ka="</literal></expr>, <expr><literal type="string">"kC="</literal></expr>, <expr><literal type="string">"kt="</literal></expr>, <expr><literal type="string">"kD="</literal></expr>, <expr><literal type="string">"kL="</literal></expr>, <expr><literal type="string">"kd="</literal></expr>, <expr><literal type="string">"kM="</literal></expr>, <expr><literal type="string">"kE="</literal></expr>, <expr><literal type="string">"kS="</literal></expr>, <expr><literal type="string">"k0="</literal></expr>,
<expr><literal type="string">"k1="</literal></expr>, <expr><literal type="string">"k;="</literal></expr>, <expr><literal type="string">"k2="</literal></expr>, <expr><literal type="string">"k3="</literal></expr>, <expr><literal type="string">"k4="</literal></expr>, <expr><literal type="string">"k5="</literal></expr>, <expr><literal type="string">"k6="</literal></expr>, <expr><literal type="string">"k7="</literal></expr>, <expr><literal type="string">"k8="</literal></expr>, <expr><literal type="string">"k9="</literal></expr>, <expr><literal type="string">"kh="</literal></expr>,
<expr><literal type="string">"kI="</literal></expr>, <expr><literal type="string">"kA="</literal></expr>, <expr><literal type="string">"kl="</literal></expr>, <expr><literal type="string">"kH="</literal></expr>, <expr><literal type="string">"kN="</literal></expr>, <expr><literal type="string">"kP="</literal></expr>, <expr><literal type="string">"kr="</literal></expr>, <expr><literal type="string">"kF="</literal></expr>, <expr><literal type="string">"kR="</literal></expr>, <expr><literal type="string">"kT="</literal></expr>, <expr><literal type="string">"ku="</literal></expr>,
<expr><literal type="string">"ke="</literal></expr>, <expr><literal type="string">"ks="</literal></expr>, <expr><literal type="string">"l0="</literal></expr>, <expr><literal type="string">"l1="</literal></expr>, <expr><literal type="string">"la="</literal></expr>, <expr><literal type="string">"l2="</literal></expr>, <expr><literal type="string">"l3="</literal></expr>, <expr><literal type="string">"l4="</literal></expr>, <expr><literal type="string">"l5="</literal></expr>, <expr><literal type="string">"l6="</literal></expr>, <expr><literal type="string">"l7="</literal></expr>,
<expr><literal type="string">"l8="</literal></expr>, <expr><literal type="string">"l9="</literal></expr>, <expr><literal type="string">"mo="</literal></expr>, <expr><literal type="string">"mm="</literal></expr>, <expr><literal type="string">"nw="</literal></expr>, <expr><literal type="string">"pc="</literal></expr>, <expr><literal type="string">"DC="</literal></expr>, <expr><literal type="string">"DL="</literal></expr>, <expr><literal type="string">"DO="</literal></expr>, <expr><literal type="string">"IC="</literal></expr>, <expr><literal type="string">"SF="</literal></expr>,
<expr><literal type="string">"AL="</literal></expr>, <expr><literal type="string">"LE="</literal></expr>, <expr><literal type="string">"RI="</literal></expr>, <expr><literal type="string">"SR="</literal></expr>, <expr><literal type="string">"UP="</literal></expr>, <expr><literal type="string">"pk="</literal></expr>, <expr><literal type="string">"pl="</literal></expr>, <expr><literal type="string">"px="</literal></expr>, <expr><literal type="string">"ps="</literal></expr>, <expr><literal type="string">"pf="</literal></expr>, <expr><literal type="string">"po="</literal></expr>,
<expr><literal type="string">"rp="</literal></expr>, <expr><literal type="string">"r1="</literal></expr>, <expr><literal type="string">"r2="</literal></expr>, <expr><literal type="string">"r3="</literal></expr>, <expr><literal type="string">"rf="</literal></expr>, <expr><literal type="string">"rc="</literal></expr>, <expr><literal type="string">"cv="</literal></expr>, <expr><literal type="string">"sc="</literal></expr>, <expr><literal type="string">"sf="</literal></expr>, <expr><literal type="string">"sr="</literal></expr>, <expr><literal type="string">"sa="</literal></expr>,
<expr><literal type="string">"st="</literal></expr>, <expr><literal type="string">"wi="</literal></expr>, <expr><literal type="string">"ta="</literal></expr>, <expr><literal type="string">"ts="</literal></expr>, <expr><literal type="string">"uc="</literal></expr>, <expr><literal type="string">"hu="</literal></expr>, <expr><literal type="string">"iP="</literal></expr>, <expr><literal type="string">"K1="</literal></expr>, <expr><literal type="string">"K3="</literal></expr>, <expr><literal type="string">"K2="</literal></expr>, <expr><literal type="string">"K4="</literal></expr>,
<expr><literal type="string">"K5="</literal></expr>, <expr><literal type="string">"pO="</literal></expr>, <expr><literal type="string">"rP="</literal></expr>, <expr><literal type="string">"ac="</literal></expr>, <expr><literal type="string">"pn="</literal></expr>, <expr><literal type="string">"kB="</literal></expr>, <expr><literal type="string">"SX="</literal></expr>, <expr><literal type="string">"RX="</literal></expr>, <expr><literal type="string">"SA="</literal></expr>, <expr><literal type="string">"RA="</literal></expr>, <expr><literal type="string">"XN="</literal></expr>,
<expr><literal type="string">"XF="</literal></expr>, <expr><literal type="string">"eA="</literal></expr>, <expr><literal type="string">"LO="</literal></expr>, <expr><literal type="string">"LF="</literal></expr>, <expr><literal type="string">"@1="</literal></expr>, <expr><literal type="string">"@2="</literal></expr>, <expr><literal type="string">"@3="</literal></expr>, <expr><literal type="string">"@4="</literal></expr>, <expr><literal type="string">"@5="</literal></expr>, <expr><literal type="string">"@6="</literal></expr>, <expr><literal type="string">"@7="</literal></expr>,
<expr><literal type="string">"@8="</literal></expr>, <expr><literal type="string">"@9="</literal></expr>, <expr><literal type="string">"@0="</literal></expr>, <expr><literal type="string">"%1="</literal></expr>, <expr><literal type="string">"%2="</literal></expr>, <expr><literal type="string">"%3="</literal></expr>, <expr><literal type="string">"%4="</literal></expr>, <expr><literal type="string">"%5="</literal></expr>, <expr><literal type="string">"%6="</literal></expr>, <expr><literal type="string">"%7="</literal></expr>, <expr><literal type="string">"%8="</literal></expr>,
<expr><literal type="string">"%9="</literal></expr>, <expr><literal type="string">"%0="</literal></expr>, <expr><literal type="string">"&amp;1="</literal></expr>, <expr><literal type="string">"&amp;2="</literal></expr>, <expr><literal type="string">"&amp;3="</literal></expr>, <expr><literal type="string">"&amp;4="</literal></expr>, <expr><literal type="string">"&amp;5="</literal></expr>, <expr><literal type="string">"&amp;6="</literal></expr>, <expr><literal type="string">"&amp;7="</literal></expr>, <expr><literal type="string">"&amp;8="</literal></expr>, <expr><literal type="string">"&amp;9="</literal></expr>,
<expr><literal type="string">"&amp;0="</literal></expr>, <expr><literal type="string">"*1="</literal></expr>, <expr><literal type="string">"*2="</literal></expr>, <expr><literal type="string">"*3="</literal></expr>, <expr><literal type="string">"*4="</literal></expr>, <expr><literal type="string">"*5="</literal></expr>, <expr><literal type="string">"*6="</literal></expr>, <expr><literal type="string">"*7="</literal></expr>, <expr><literal type="string">"*8="</literal></expr>, <expr><literal type="string">"*9="</literal></expr>, <expr><literal type="string">"*0="</literal></expr>,
<expr><literal type="string">"#1="</literal></expr>, <expr><literal type="string">"#2="</literal></expr>, <expr><literal type="string">"#3="</literal></expr>, <expr><literal type="string">"#4="</literal></expr>, <expr><literal type="string">"%a="</literal></expr>, <expr><literal type="string">"%b="</literal></expr>, <expr><literal type="string">"%c="</literal></expr>, <expr><literal type="string">"%d="</literal></expr>, <expr><literal type="string">"%e="</literal></expr>, <expr><literal type="string">"%f="</literal></expr>, <expr><literal type="string">"%g="</literal></expr>,
<expr><literal type="string">"%h="</literal></expr>, <expr><literal type="string">"%i="</literal></expr>, <expr><literal type="string">"%j="</literal></expr>, <expr><literal type="string">"!1="</literal></expr>, <expr><literal type="string">"!2="</literal></expr>, <expr><literal type="string">"!3="</literal></expr>, <expr><literal type="string">"RF="</literal></expr>, <expr><literal type="string">"F1="</literal></expr>, <expr><literal type="string">"F2="</literal></expr>, <expr><literal type="string">"F3="</literal></expr>, <expr><literal type="string">"F4="</literal></expr>,
<expr><literal type="string">"F5="</literal></expr>, <expr><literal type="string">"F6="</literal></expr>, <expr><literal type="string">"F7="</literal></expr>, <expr><literal type="string">"F8="</literal></expr>, <expr><literal type="string">"F9="</literal></expr>, <expr><literal type="string">"FA="</literal></expr>, <expr><literal type="string">"FB="</literal></expr>, <expr><literal type="string">"FC="</literal></expr>, <expr><literal type="string">"FD="</literal></expr>, <expr><literal type="string">"FE="</literal></expr>, <expr><literal type="string">"FF="</literal></expr>,
<expr><literal type="string">"FG="</literal></expr>, <expr><literal type="string">"FH="</literal></expr>, <expr><literal type="string">"FI="</literal></expr>, <expr><literal type="string">"FJ="</literal></expr>, <expr><literal type="string">"FK="</literal></expr>, <expr><literal type="string">"FL="</literal></expr>, <expr><literal type="string">"FM="</literal></expr>, <expr><literal type="string">"FN="</literal></expr>, <expr><literal type="string">"FO="</literal></expr>, <expr><literal type="string">"FP="</literal></expr>, <expr><literal type="string">"FQ="</literal></expr>,
<expr><literal type="string">"FR="</literal></expr>, <expr><literal type="string">"FS="</literal></expr>, <expr><literal type="string">"FT="</literal></expr>, <expr><literal type="string">"FU="</literal></expr>, <expr><literal type="string">"FV="</literal></expr>, <expr><literal type="string">"FW="</literal></expr>, <expr><literal type="string">"FX="</literal></expr>, <expr><literal type="string">"FY="</literal></expr>, <expr><literal type="string">"FZ="</literal></expr>, <expr><literal type="string">"Fa="</literal></expr>, <expr><literal type="string">"Fb="</literal></expr>,
<expr><literal type="string">"Fc="</literal></expr>, <expr><literal type="string">"Fd="</literal></expr>, <expr><literal type="string">"Fe="</literal></expr>, <expr><literal type="string">"Ff="</literal></expr>, <expr><literal type="string">"Fg="</literal></expr>, <expr><literal type="string">"Fh="</literal></expr>, <expr><literal type="string">"Fi="</literal></expr>, <expr><literal type="string">"Fj="</literal></expr>, <expr><literal type="string">"Fk="</literal></expr>, <expr><literal type="string">"Fl="</literal></expr>, <expr><literal type="string">"Fm="</literal></expr>,
<expr><literal type="string">"Fn="</literal></expr>, <expr><literal type="string">"Fo="</literal></expr>, <expr><literal type="string">"Fp="</literal></expr>, <expr><literal type="string">"Fq="</literal></expr>, <expr><literal type="string">"Fr="</literal></expr>, <expr><literal type="string">"cb="</literal></expr>, <expr><literal type="string">"MC="</literal></expr>, <expr><literal type="string">"ML="</literal></expr>, <expr><literal type="string">"MR="</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_curse</name> <init>= <expr><literal type="string">"October 1987"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>in_buff</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bufp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>TERMINAL_TYPE</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>CFOUND</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Data_Line_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Max_Key_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Data_Line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>TERM_PATH</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>TERM_data_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Term_File_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>TFP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Fildes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>STAND</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>TERM_INFO</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Time_Out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Curr_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Curr_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>LINES</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>COLS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Move_It</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>initialized</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>chars_per_millisecond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Repaint_screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Intr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Parity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Noblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Num_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Flip_Bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>interrupt_flag</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Strings</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TERMCAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERMCAP</name></cpp:macro> <cpp:value>"/etc/termcap"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>KEYS</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>KEY_STACK</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>KEYS</name></name> <modifier>*</modifier></type><name>element</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>KEY_STACK</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>KEY_STACK</name></name> <modifier>*</modifier></type><name>KEY_TOS</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>KEY_STACK</name></name> <modifier>*</modifier></type><name>KEY_POINT</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name><name>struct</name> <name>KEYS</name></name></type> <name><name>vt100</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[A"</literal></expr>, <expr><literal type="number">0403</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[C"</literal></expr>, <expr><literal type="number">0405</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[D"</literal></expr>, <expr><literal type="number">0404</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"\033[6~"</literal></expr>, <expr><literal type="number">0522</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"\033[5~"</literal></expr>, <expr><literal type="number">0523</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[["</literal></expr>, <expr><literal type="number">0550</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[@"</literal></expr>, <expr><literal type="number">0406</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"\033[2~"</literal></expr>, <expr><literal type="number">0513</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[y"</literal></expr>, <expr><literal type="number">0410</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[P"</literal></expr>, <expr><literal type="number">0411</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[Q"</literal></expr>, <expr><literal type="number">0412</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[R"</literal></expr>, <expr><literal type="number">0413</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[S"</literal></expr>, <expr><literal type="number">0414</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[t"</literal></expr>, <expr><literal type="number">0415</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[u"</literal></expr>, <expr><literal type="number">0416</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[v"</literal></expr>, <expr><literal type="number">0417</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[l"</literal></expr>, <expr><literal type="number">0420</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[w"</literal></expr>, <expr><literal type="number">0421</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[x"</literal></expr>, <expr><literal type="number">0422</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[10~"</literal></expr>, <expr><literal type="number">0410</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[11~"</literal></expr>, <expr><literal type="number">0411</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[12~"</literal></expr>, <expr><literal type="number">0412</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[13~"</literal></expr>, <expr><literal type="number">0413</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[14~"</literal></expr>, <expr><literal type="number">0414</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[15~"</literal></expr>, <expr><literal type="number">0415</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[17~"</literal></expr>, <expr><literal type="number">0416</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[18~"</literal></expr>, <expr><literal type="number">0417</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[19~"</literal></expr>, <expr><literal type="number">0420</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[20~"</literal></expr>, <expr><literal type="number">0421</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[21~"</literal></expr>, <expr><literal type="number">0422</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[23~"</literal></expr>, <expr><literal type="number">0423</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033[24~"</literal></expr>, <expr><literal type="number">0424</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[q"</literal></expr>, <expr><literal type="number">0534</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[s"</literal></expr>, <expr><literal type="number">0535</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[r"</literal></expr>, <expr><literal type="number">0536</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[p"</literal></expr>, <expr><literal type="number">0537</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033[n"</literal></expr>, <expr><literal type="number">0540</literal></expr> }</block></expr>,






<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033OA"</literal></expr>, <expr><literal type="number">0403</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033OC"</literal></expr>, <expr><literal type="number">0405</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033OD"</literal></expr>, <expr><literal type="number">0404</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033OB"</literal></expr>, <expr><literal type="number">0402</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"\033O6~"</literal></expr>, <expr><literal type="number">0522</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"\033O5~"</literal></expr>, <expr><literal type="number">0523</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033O["</literal></expr>, <expr><literal type="number">0550</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033O@"</literal></expr>, <expr><literal type="number">0406</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"\033O2~"</literal></expr>, <expr><literal type="number">0513</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033Oy"</literal></expr>, <expr><literal type="number">0410</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033OP"</literal></expr>, <expr><literal type="number">0411</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033OQ"</literal></expr>, <expr><literal type="number">0412</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033OR"</literal></expr>, <expr><literal type="number">0413</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033OS"</literal></expr>, <expr><literal type="number">0414</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033Ot"</literal></expr>, <expr><literal type="number">0415</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033Ou"</literal></expr>, <expr><literal type="number">0416</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033Ov"</literal></expr>, <expr><literal type="number">0417</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033Ol"</literal></expr>, <expr><literal type="number">0420</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033Ow"</literal></expr>, <expr><literal type="number">0421</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033Ox"</literal></expr>, <expr><literal type="number">0422</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O10~"</literal></expr>, <expr><literal type="number">0410</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O11~"</literal></expr>, <expr><literal type="number">0411</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O12~"</literal></expr>, <expr><literal type="number">0412</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O13~"</literal></expr>, <expr><literal type="number">0413</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O14~"</literal></expr>, <expr><literal type="number">0414</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O15~"</literal></expr>, <expr><literal type="number">0415</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O17~"</literal></expr>, <expr><literal type="number">0416</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O18~"</literal></expr>, <expr><literal type="number">0417</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O19~"</literal></expr>, <expr><literal type="number">0420</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O20~"</literal></expr>, <expr><literal type="number">0421</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O21~"</literal></expr>, <expr><literal type="number">0422</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O23~"</literal></expr>, <expr><literal type="number">0423</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"\033O24~"</literal></expr>, <expr><literal type="number">0424</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033Oq"</literal></expr>, <expr><literal type="number">0534</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033Os"</literal></expr>, <expr><literal type="number">0535</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033Or"</literal></expr>, <expr><literal type="number">0536</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033Op"</literal></expr>, <expr><literal type="number">0537</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"\033On"</literal></expr>, <expr><literal type="number">0540</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>Parameters</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Parameters</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name><name>Key_vals</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0407</literal></expr>, <expr><literal type="number">0526</literal></expr>, <expr><literal type="number">0515</literal></expr>, <expr><literal type="number">0525</literal></expr>, <expr><literal type="number">0512</literal></expr>, <expr><literal type="number">0510</literal></expr>, <expr><literal type="number">0402</literal></expr>, <expr><literal type="number">0514</literal></expr>, <expr><literal type="number">0517</literal></expr>, <expr><literal type="number">0516</literal></expr>, <expr><literal type="number">0410</literal></expr>, <expr><literal type="number">0411</literal></expr>,
<expr><literal type="number">0422</literal></expr>, <expr><literal type="number">0412</literal></expr>, <expr><literal type="number">0413</literal></expr>, <expr><literal type="number">0414</literal></expr>, <expr><literal type="number">0415</literal></expr>, <expr><literal type="number">0416</literal></expr>, <expr><literal type="number">0417</literal></expr>, <expr><literal type="number">0420</literal></expr>, <expr><literal type="number">0421</literal></expr>, <expr><literal type="number">0406</literal></expr>, <expr><literal type="number">0513</literal></expr>, <expr><literal type="number">0511</literal></expr>,
<expr><literal type="number">0404</literal></expr>, <expr><literal type="number">0533</literal></expr>, <expr><literal type="number">0522</literal></expr>, <expr><literal type="number">0523</literal></expr>, <expr><literal type="number">0405</literal></expr>, <expr><literal type="number">0520</literal></expr>, <expr><literal type="number">0521</literal></expr>, <expr><literal type="number">0524</literal></expr>, <expr><literal type="number">0403</literal></expr>,
<expr><literal type="number">0534</literal></expr>, <expr><literal type="number">0535</literal></expr>, <expr><literal type="number">0536</literal></expr>, <expr><literal type="number">0537</literal></expr>, <expr><literal type="number">0540</literal></expr>, <expr><literal type="number">0541</literal></expr>, <expr><literal type="number">0542</literal></expr>, <expr><literal type="number">0543</literal></expr>, <expr><literal type="number">0544</literal></expr>, <expr><literal type="number">0545</literal></expr>, <expr><literal type="number">0546</literal></expr>, <expr><literal type="number">0547</literal></expr>,
<expr><literal type="number">0550</literal></expr>, <expr><literal type="number">0527</literal></expr>, <expr><literal type="number">0551</literal></expr>, <expr><literal type="number">0552</literal></expr>, <expr><literal type="number">0553</literal></expr>, <expr><literal type="number">0554</literal></expr>, <expr><literal type="number">0555</literal></expr>, <expr><literal type="number">0556</literal></expr>, <expr><literal type="number">0557</literal></expr>, <expr><literal type="number">0560</literal></expr>, <expr><literal type="number">0561</literal></expr>, <expr><literal type="number">0562</literal></expr>,
<expr><literal type="number">0532</literal></expr>, <expr><literal type="number">0563</literal></expr>, <expr><literal type="number">0564</literal></expr>, <expr><literal type="number">0565</literal></expr>, <expr><literal type="number">0566</literal></expr>, <expr><literal type="number">0567</literal></expr>, <expr><literal type="number">0570</literal></expr>, <expr><literal type="number">0571</literal></expr>, <expr><literal type="number">0627</literal></expr>, <expr><literal type="number">0630</literal></expr>, <expr><literal type="number">0572</literal></expr>, <expr><literal type="number">0573</literal></expr>,
<expr><literal type="number">0574</literal></expr>, <expr><literal type="number">0575</literal></expr>, <expr><literal type="number">0576</literal></expr>, <expr><literal type="number">0577</literal></expr>, <expr><literal type="number">0600</literal></expr>, <expr><literal type="number">0601</literal></expr>, <expr><literal type="number">0602</literal></expr>, <expr><literal type="number">0603</literal></expr>, <expr><literal type="number">0604</literal></expr>, <expr><literal type="number">0605</literal></expr>, <expr><literal type="number">0606</literal></expr>, <expr><literal type="number">0607</literal></expr>,
<expr><literal type="number">0610</literal></expr>, <expr><literal type="number">0611</literal></expr>, <expr><literal type="number">0612</literal></expr>, <expr><literal type="number">0613</literal></expr>, <expr><literal type="number">0614</literal></expr>, <expr><literal type="number">0615</literal></expr>, <expr><literal type="number">0616</literal></expr>, <expr><literal type="number">0617</literal></expr>, <expr><literal type="number">0620</literal></expr>, <expr><literal type="number">0621</literal></expr>, <expr><literal type="number">0622</literal></expr>, <expr><literal type="number">0623</literal></expr>,
<expr><literal type="number">0624</literal></expr>, <expr><literal type="number">0625</literal></expr>, <expr><literal type="number">0626</literal></expr>, <expr><literal type="number">0423</literal></expr>, <expr><literal type="number">0424</literal></expr>, <expr><literal type="number">0425</literal></expr>, <expr><literal type="number">0426</literal></expr>, <expr><literal type="number">0427</literal></expr>, <expr><literal type="number">0430</literal></expr>, <expr><literal type="number">0431</literal></expr>,
<expr><literal type="number">0432</literal></expr>, <expr><literal type="number">0433</literal></expr>, <expr><literal type="number">0434</literal></expr>, <expr><literal type="number">0435</literal></expr>, <expr><literal type="number">0436</literal></expr>, <expr><literal type="number">0437</literal></expr>, <expr><literal type="number">0440</literal></expr>, <expr><literal type="number">0441</literal></expr>, <expr><literal type="number">0442</literal></expr>, <expr><literal type="number">0443</literal></expr>, <expr><literal type="number">0444</literal></expr>, <expr><literal type="number">0445</literal></expr>,
<expr><literal type="number">0446</literal></expr>, <expr><literal type="number">0447</literal></expr>, <expr><literal type="number">0450</literal></expr>, <expr><literal type="number">0451</literal></expr>, <expr><literal type="number">0452</literal></expr>, <expr><literal type="number">0453</literal></expr>, <expr><literal type="number">0454</literal></expr>, <expr><literal type="number">0455</literal></expr>, <expr><literal type="number">0456</literal></expr>, <expr><literal type="number">0457</literal></expr>, <expr><literal type="number">0460</literal></expr>, <expr><literal type="number">0461</literal></expr>,
<expr><literal type="number">0462</literal></expr>, <expr><literal type="number">0463</literal></expr>, <expr><literal type="number">0464</literal></expr>, <expr><literal type="number">0465</literal></expr>, <expr><literal type="number">0466</literal></expr>, <expr><literal type="number">0467</literal></expr>, <expr><literal type="number">0470</literal></expr>, <expr><literal type="number">0471</literal></expr>, <expr><literal type="number">0472</literal></expr>, <expr><literal type="number">0473</literal></expr>, <expr><literal type="number">0474</literal></expr>, <expr><literal type="number">0475</literal></expr>,
<expr><literal type="number">0476</literal></expr>, <expr><literal type="number">0477</literal></expr>, <expr><literal type="number">0500</literal></expr>, <expr><literal type="number">0501</literal></expr>, <expr><literal type="number">0502</literal></expr>, <expr><literal type="number">0503</literal></expr>, <expr><literal type="number">0504</literal></expr>, <expr><literal type="number">0505</literal></expr>, <expr><literal type="number">0506</literal></expr>, <expr><literal type="number">0507</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>attributes_set</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nc_attributes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>termio</name></name></type> <name>Terminal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>termio</name></name></type> <name>Saved_tty</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>sgttyb</name></name></type> <name>Terminal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sgttyb</name></name></type> <name>Saved_tty</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tc_</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>Booleans</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Numbers</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>String_table</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>virtual_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>nc_scrolling_ability</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>terminfo_path</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"/usr/lib/terminfo"</literal></expr>,
<expr><literal type="string">"/usr/share/lib/terminfo"</literal></expr>,
<expr><literal type="string">"/usr/share/terminfo"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name> <name>tc_Get_int</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>CAP_PARSE</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>Find_term</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P_</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAS_STDLIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>fgets</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>malloc</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>getenv</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>fopen</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>void</name></type>
<name>copy_window</name><parameter_list>(<parameter><decl><type><name>origin</name></type></decl></parameter>, <parameter><decl><type><name>destination</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>origin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>destination</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>orig</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>

<expr_stmt><expr><name>orig</name> <operator>=</operator> <name><name>origin</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>destination</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>row</name> <operator>&lt;</operator> <operator>(</operator><call><name>min</name><argument_list>(<argument><expr><name><name>origin</name><operator>-&gt;</operator><name>Num_lines</name></name></expr></argument>, <argument><expr><name><name>destination</name><operator>-&gt;</operator><name>Num_lines</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition>
<incr><expr><name>row</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>column</name> <operator>&lt;</operator> <operator>(</operator><call><name>min</name><argument_list>(<argument><expr><name><name>origin</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>, <argument><expr><name><name>destination</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition>
<incr><expr><name>column</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>column</name></expr>]</index></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>column</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>column</name></expr>]</index></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>column</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>changed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>scroll</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>last_char</name></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>orig</name><operator>-&gt;</operator><name>last_char</name></name></expr></argument>, <argument><expr><name><name>destination</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>orig</name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>dest</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>destination</name><operator>-&gt;</operator><name>LX</name></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name><name>destination</name><operator>-&gt;</operator><name>Num_cols</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>origin</name><operator>-&gt;</operator><name>LX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destination</name><operator>-&gt;</operator><name>LY</name></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name><name>destination</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>origin</name><operator>-&gt;</operator><name>LY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destination</name><operator>-&gt;</operator><name>Attrib</name></name> <operator>=</operator> <name><name>origin</name><operator>-&gt;</operator><name>Attrib</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destination</name><operator>-&gt;</operator><name>scroll_up</name></name> <operator>=</operator> <name><name>origin</name><operator>-&gt;</operator><name>scroll_up</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destination</name><operator>-&gt;</operator><name>scroll_down</name></name> <operator>=</operator> <name><name>origin</name><operator>-&gt;</operator><name>scroll_down</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>destination</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>=</operator> <name><name>origin</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>reinitscr</name><parameter_list>(<parameter><decl><type><name>foo</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>foo</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>local_virt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>local_std</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>local_cur</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>, <argument><expr><name>reinitscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGWINSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name> <operator>==</operator> <name>LINES</name> <operator>&amp;&amp;</operator> <name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>==</operator> <name>COLS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>LINES</name> <operator>=</operator> <name><name>ws</name><operator>.</operator><name>ws_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>COLS</name> <operator>=</operator> <name><name>ws</name><operator>.</operator><name>ws_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>local_virt</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>LINES</name></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>local_std</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>LINES</name></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>local_cur</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>LINES</name></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_window</name><argument_list>(<argument><expr><name>virtual_scr</name></expr></argument>, <argument><expr><name>local_virt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_window</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>local_std</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_window</name><argument_list>(<argument><expr><name>curscr</name></expr></argument>, <argument><expr><name>local_cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>virtual_scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>curscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual_scr</name> <operator>=</operator> <name>local_virt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stdscr</name> <operator>=</operator> <name>local_std</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curscr</name> <operator>=</operator> <name>local_cur</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>virtual_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual_lines</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>LINES</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>interrupt_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>initscr</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lines_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>columns_string</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DIAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"starting initscr \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSD_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setbuf</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>Flip_Bytes</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Parity</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Time_Out</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bufp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Move_It</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Noblock</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCGETA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Terminal</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;</operator> <name>PARENB</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>Terminal</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;</operator> <name>PARENB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Parity</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>Parity</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>Terminal</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;</operator> <name>CS8</name><operator>)</operator> <operator>==</operator> <name>CS8</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Num_bits</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>Terminal</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;</operator> <name>CS7</name><operator>)</operator> <operator>==</operator> <name>CS7</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Num_bits</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>Terminal</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;</operator> <name>CS6</name><operator>)</operator> <operator>==</operator> <name>CS6</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Num_bits</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>Num_bits</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>Terminal</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;</operator> <literal type="number">037</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">01</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">50.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">02</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">75.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">03</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">110.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">04</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">134.5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">05</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">150.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">06</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">200.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">07</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">300.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">010</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">600.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">011</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">900.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">012</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">1200.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">013</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">1800.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">014</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">2400.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">015</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">3600.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">016</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">4800.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">017</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">7200.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">020</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">9600.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">021</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">19200.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">022</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">38400.0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCGETP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Terminal</name><operator>.</operator><name>sg_flags</name></name> <operator>&amp;</operator> <name>EVENP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Parity</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>Terminal</name><operator>.</operator><name>sg_flags</name></name> <operator>&amp;</operator> <name>ODDP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Parity</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>Terminal</name><operator>.</operator><name>sg_ospeed</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">01</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">50.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">02</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">75.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">03</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">110.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">04</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">134.5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">05</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">150.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">06</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">200.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">07</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">300.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">010</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">600.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">011</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">1200.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">012</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">1800.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">013</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">2400.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">014</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">4800.0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">015</literal></expr>:</case> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">9600.0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> <expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>chars_per_millisecond</name> <operator>=</operator> <operator>(</operator><literal type="number">0.001</literal> <operator>*</operator> <name>speed</name><operator>)</operator> <operator>/</operator> <literal type="number">8.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>TERMINAL_TYPE</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>TERMINAL_TYPE</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"unknown terminal type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>Fildes</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>TERM_PATH</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TERMINFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>TERM_PATH</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Data_Line_len</name> <operator>=</operator> <literal type="number">23</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>TERM_PATH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>TERMINAL_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Term_File_name</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>Data_Line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>Term_File_name</name></expr></argument>, <argument><expr><literal type="string">"%s/%c/%s"</literal></expr></argument>, <argument><expr><name>TERM_PATH</name></expr></argument>, <argument><expr><operator>*</operator><name>TERMINAL_TYPE</name></expr></argument>, <argument><expr><name>TERMINAL_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Fildes</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>Term_File_name</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Fildes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>Term_File_name</name></expr></argument>, <argument><expr><literal type="string">"%s/%x/%s"</literal></expr></argument>, <argument><expr><name>TERM_PATH</name></expr></argument>, <argument><expr><operator>*</operator><name>TERMINAL_TYPE</name></expr></argument>, <argument><expr><name>TERMINAL_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Fildes</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>Term_File_name</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>Fildes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>terminfo_path</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>TERM_PATH</name> <operator>=</operator> <name><name>terminfo_path</name><index>[<expr><name>counter</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Data_Line_len</name> <operator>=</operator> <literal type="number">23</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>TERM_PATH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>TERMINAL_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Term_File_name</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>Data_Line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>Term_File_name</name></expr></argument>, <argument><expr><literal type="string">"%s/%c/%s"</literal></expr></argument>, <argument><expr><name>TERM_PATH</name></expr></argument>, <argument><expr><operator>*</operator><name>TERMINAL_TYPE</name></expr></argument>, <argument><expr><name>TERMINAL_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Fildes</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>Term_File_name</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Fildes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>Term_File_name</name></expr></argument>, <argument><expr><literal type="string">"%s/%x/%s"</literal></expr></argument>, <argument><expr><name>TERM_PATH</name></expr></argument>, <argument><expr><operator>*</operator><name>TERMINAL_TYPE</name></expr></argument>, <argument><expr><name>TERMINAL_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Fildes</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>Term_File_name</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>Fildes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>Term_File_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Term_File_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>TERM_INFO</name> <operator>=</operator> <call><name>INFO_PARSE</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pointer</name> <operator>=</operator> <name>Term_File_name</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TERMCAP"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Term_File_name</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Term_File_name</name> <operator>=</operator> <name>TERMCAP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>Term_File_name</name> <operator>=</operator> <name>TERMCAP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>TFP</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>Term_File_name</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"unable to open %s file \n"</literal></expr></argument>, <argument><expr><name>TERMCAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>value</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>value</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>String_table</name><index>[<expr><name>value</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>value</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>value</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Booleans</name><index>[<expr><name>value</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>value</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>value</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Numbers</name><index>[<expr><name>value</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>Data_Line</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pointer</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pointer</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>TERM_data_ptr</name> <operator>=</operator> <name>pointer</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CAP_PARSE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>Find_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CAP_PARSE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>pc__</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>String_table</name><index>[<expr><name>pc__</name></expr>]</index></name> <operator>=</operator> <literal type="string">"\0"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>String_table</name><index>[<expr><name>cm__</name></expr>]</index></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>Booleans</name><index>[<expr><name>hc__</name></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sorry, unable to use this terminal type for screen editing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Key_Get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keys_vt100</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>LINES</name> <operator>=</operator> <name><name>Numbers</name><index>[<expr><name>li__</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>COLS</name> <operator>=</operator> <name><name>Numbers</name><index>[<expr><name>co__</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lines_string</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"LINES"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>lines_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>LINES</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>columns_string</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>columns_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>COLS</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGWINSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>LINES</name> <operator>=</operator> <name><name>ws</name><operator>.</operator><name>ws_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>COLS</name> <operator>=</operator> <name><name>ws</name><operator>.</operator><name>ws_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>virtual_scr</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>LINES</name></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stdscr</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>LINES</name></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curscr</name> <operator>=</operator> <call><name>newwin</name><argument_list>(<argument><expr><name>LINES</name></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>werase</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Repaint_screen</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual_lines</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>LINES</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>, <argument><expr><name>reinitscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name>nc_scrolling_ability</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>String_table</name><index>[<expr><name>al__</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>String_table</name><index>[<expr><name>dl__</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>String_table</name><index>[<expr><name>sr__</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>Get_int</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>High_byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Low_byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Low_byte</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>TERM_data_ptr</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>High_byte</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>TERM_data_ptr</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Flip_Bytes</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>Low_byte</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Low_byte</name> <operator>=</operator> <name>High_byte</name></expr>;</expr_stmt>
<expr_stmt><expr><name>High_byte</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>High_byte</name> <operator>==</operator> <literal type="number">255</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>Low_byte</name> <operator>==</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>Low_byte</name> <operator>+</operator> <operator>(</operator><name>High_byte</name> <operator>*</operator> <literal type="number">256</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>INFO_PARSE</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>magic_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Num_names</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Num_bools</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Num_ints</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Num_strings</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>string_table_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>TERM_data_ptr</name> <operator>=</operator> <name>Data_Line</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">10240</literal> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Data_Line_len</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>Fildes</name></expr></argument>, <argument><expr><name>Data_Line</name></expr></argument>, <argument><expr><literal type="number">10240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Data_Line_len</name> <operator>&gt;=</operator> <literal type="number">10240</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Data_Line_len</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>magic_number</name> <operator>=</operator> <call><name>Get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>magic_number</name> <operator>!=</operator> <literal type="number">282</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Flip_Bytes</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>magic_number</name> <operator>=</operator> <call><name>Get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>magic_number</name> <operator>!=</operator> <literal type="number">282</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>Num_names</name> <operator>=</operator> <call><name>Get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Num_bools</name> <operator>=</operator> <call><name>Get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Num_ints</name> <operator>=</operator> <call><name>Get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Num_strings</name> <operator>=</operator> <call><name>Get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string_table_len</name> <operator>=</operator> <call><name>Get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Strings</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>string_table_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>Num_names</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Num_names</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>Num_bools</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Num_bools</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Booleans</name><index>[<expr><name>counter</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>TERM_data_ptr</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>Num_ints</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Num_ints</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Numbers</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <call><name>Get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>temp_ptr</name> <operator>=</operator> <name>TERM_data_ptr</name> <operator>+</operator> <name>Num_strings</name> <operator>+</operator> <name>Num_strings</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Strings</name></expr></argument>, <argument><expr><name>temp_ptr</name></expr></argument>, <argument><expr><name>string_table_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name> <operator>=</operator> <name>bt__</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>Num_strings</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Num_strings</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name><operator>=</operator><call><name>Get_int</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>String_table</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name>Strings</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>String_table</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>Fildes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>Data_Line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>AtoI</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>Temp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Temp</name> <operator>=</operator> <operator>(</operator><name>Temp</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><name>Temp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Key_Get</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>Counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key_def</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>KEY_STACK</name></name> <modifier>*</modifier></type><name>Spoint</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Max_Key_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>key_def</name> <operator>=</operator> <name>kb__</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>key_def</name> <operator>&lt;=</operator> <name>kf63__</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key_def</name> <operator>==</operator> <name>ke__</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key_def</name> <operator>=</operator> <name>K1__</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>key_def</name> <operator>==</operator> <operator>(</operator><name>K5__</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key_def</name> <operator>=</operator> <name>kcbt__</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>key_def</name> <operator>==</operator> <operator>(</operator><name>kcbt__</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key_def</name> <operator>=</operator> <name>kbeg__</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>key_def</name> <operator>==</operator> <operator>(</operator><name>kUND__</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key_def</name> <operator>=</operator> <name>kf11__</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>key_def</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>KEY_TOS</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Spoint</name> <operator>=</operator> <name>KEY_TOS</name> <operator>=</operator> <operator>(</operator>struct <name>KEY_STACK</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>KEY_STACK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>Spoint</name> <operator>=</operator> <name>KEY_TOS</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Spoint</name> <operator>=</operator> <name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator>struct <name>KEY_STACK</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>KEY_STACK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Spoint</name> <operator>=</operator> <name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name></name> <operator>=</operator> <operator>(</operator>struct <name>KEYS</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>KEYS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name><name>String_table</name><index>[<expr><name>key_def</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>key_def</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>Key_vals</name><index>[<expr><name>Counter</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Klen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Klen</name> <operator>&gt;</operator> <name>Max_Key_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Max_Key_len</name> <operator>=</operator> <name>Klen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>String_table</name><index>[<expr><name>key_def</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>String_table</name><index>[<expr><name>key_def</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator>struct <name>KEY_STACK</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>KEY_STACK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Spoint</name> <operator>=</operator> <name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name></name> <operator>=</operator> <operator>(</operator>struct <name>KEYS</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>KEYS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>key_def</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>String_table</name><index>[<expr><name>key_def</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>Key_vals</name><index>[<expr><name>Counter</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Klen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Klen</name> <operator>&gt;</operator> <name>Max_Key_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Max_Key_len</name> <operator>=</operator> <name>Klen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>key_def</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'O'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>key_def</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Counter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>keys_vt100</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>KEY_STACK</name></name> <modifier>*</modifier></type><name>Spoint</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Spoint</name> <operator>=</operator> <name>KEY_TOS</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Spoint</name> <operator>=</operator> <name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<for>for <control>(<init><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>vt100</name><index>[<expr><name>counter</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator>struct <name>KEY_STACK</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>KEY_STACK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Spoint</name> <operator>=</operator> <name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>vt100</name><index>[<expr><name>counter</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Klen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>Spoint</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Klen</name> <operator>&gt;</operator> <name>Max_Key_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Max_Key_len</name> <operator>=</operator> <name>Klen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>String_Get</name><parameter_list>(<parameter><decl><type><name>param</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>String</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Counter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>param</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>Temp</name> <operator>=</operator> <operator>++</operator><name>TERM_data_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>Temp</name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>Temp</name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Counter</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Temp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>Counter</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>String</name> <operator>=</operator> <name>Temp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>Counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <literal type="char">'\033'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Counter</name> <operator>=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>Counter</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <name>Counter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Temp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>&gt;=</operator> <literal type="char">'@'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>&lt;=</operator> <literal type="char">'_'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <operator>*</operator><name>TERM_data_ptr</name> <operator>-</operator> <literal type="char">'@'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Temp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>Temp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>Temp</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>param</name> <operator>=</operator> <name>String</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<return>return<expr><operator>(</operator><name>param</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tc_Get_int</name><parameter_list>(<parameter><decl><type><name>param</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>param</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>Itemp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>param</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">'#'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Itemp</name> <operator>=</operator> <call><name>AtoI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>param</name> <operator>=</operator> <name>Itemp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<return>return<expr><operator>(</operator><name>param</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Find_term</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Ftemp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Ftemp</name> <operator>=</operator> <name>Name</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TERMINAL_TYPE</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>Name</name></expr></argument>, <argument><expr><name>TERMINAL_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>Ftemp</name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Ftemp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>Ftemp</name><operator>++</operator> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Ftemp</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CFOUND</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Data_Line_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>TERMINAL_TYPE</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>!</operator><name>CFOUND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>TERM_data_ptr</name><operator>=</operator><call><name>fgets</name><argument_list>(<argument><expr><name>Data_Line</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>TFP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">'#'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><operator>!</operator><name>CFOUND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>CFOUND</name> <operator>=</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>TERM_data_ptr</name></expr></argument>, <argument><expr><name>Name</name></expr></argument>, <argument><expr><name>Data_Line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">'|'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">'#'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>CFOUND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>TERM_data_ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CFOUND</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"terminal type %s not found\n"</literal></expr></argument>, <argument><expr><name>TERMINAL_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>CAP_PARSE</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>found</name> <operator>=</operator> <name>FALSE</name></expr><operator>,</operator> <expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><operator>!</operator><name>found</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>offset</name> <operator>&lt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</condition> <incr><expr><name>offset</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>TERM_data_ptr</name></expr></argument>, <argument><expr><name><name>Boolean_names</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Booleans</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>found</name> <operator>=</operator> <name>FALSE</name></expr><operator>,</operator> <expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><operator>!</operator><name>found</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>offset</name> <operator>&lt;</operator> <name>lw__</name><operator>)</operator></expr>;</condition> <incr><expr><name>offset</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>TERM_data_ptr</name></expr></argument>, <argument><expr><name><name>Number_names</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Numbers</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <call><name>tc_Get_int</name><argument_list>(<argument><expr><name><name>Numbers</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>found</name> <operator>=</operator> <name>FALSE</name></expr><operator>,</operator> <expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><operator>!</operator><name>found</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>offset</name> <operator>&lt;</operator> <name>smgr__</name><operator>)</operator></expr>;</condition> <incr><expr><name>offset</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>TERM_data_ptr</name></expr></argument>, <argument><expr><name><name>String_names</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>String_table</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <call><name>String_Get</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>TERM_data_ptr</name></expr></argument>, <argument><expr><literal type="string">"tc="</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tc_</name> <operator>=</operator> <call><name>String_Get</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TERM_data_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block> while <condition>(<expr><operator>(</operator><operator>(</operator><name>TERM_data_ptr</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>Data_Line</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>TFP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>TERM_data_ptr</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator><operator>)</operator></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>tc_</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>TERMINAL_TYPE</name> <operator>=</operator> <name>tc_</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>TFP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Find_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tc_</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CAP_PARSE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>TFP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type>
<name>Screenalloc</name><parameter_list>(<parameter><decl><type><name>columns</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>columns</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator>struct <name>_line</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>_line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>columns</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>attributes</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>columns</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>columns</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>columns</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>last_char</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>tmp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>WINDOW</name> <modifier>*</modifier></type><name>newwin</name><parameter_list>(<parameter><decl><type><name>lines</name></type></decl></parameter>, <parameter><decl><type><name>cols</name></type></decl></parameter>, <parameter><decl><type><name>start_l</name></type></decl></parameter>, <parameter><decl><type><name>start_c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_l</name></decl>, <decl><type ref="prev"/><name>start_c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>Ntemp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>temp_screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Ntemp</name> <operator>=</operator> <operator>(</operator><name>WINDOW</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WINDOW</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>SR</name></name> <operator>=</operator> <name>start_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>SC</name></name> <operator>=</operator> <name>start_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>=</operator> <name>lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>Num_cols</name></name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>LX</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>LY</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>scroll_down</name></name> <operator>=</operator> <name><name>Ntemp</name><operator>-&gt;</operator><name>scroll_up</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>Attrib</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>first_line</name></name> <operator>=</operator> <name>temp_screen</name> <operator>=</operator> <call><name>Screenalloc</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>first_line</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>line_array</name></name> <operator>=</operator> <operator>(</operator>struct <name>_line</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>LINES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>_line</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>line_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Ntemp</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>temp_screen</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <call><name>Screenalloc</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_screen</name><operator>-&gt;</operator><name>next_screen</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_screen</name><operator>-&gt;</operator><name>next_screen</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name>temp_screen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_screen</name> <operator>=</operator> <name><name>temp_screen</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>line_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>temp_screen</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>Ntemp</name><operator>-&gt;</operator><name>first_line</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp_screen</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>Ntemp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>Cap_Out</name><parameter_list>(<parameter><decl><type><name>string</name></type></decl></parameter>, <parameter><decl><type><name>p_list</name></type></decl></parameter>, <parameter><decl><type><name>place</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>p_list</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>place</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Otemp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>chars</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name><name>p_list</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name><name>p_list</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>Otemp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>Otemp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>Otemp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>Otemp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'2'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'3'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'2'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'3'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%03d"</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>+=</operator> <operator>*</operator><name>Otemp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>&gt;</operator> <operator>*</operator><name>Otemp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>+=</operator> <operator>*</operator><name>Otemp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name>Otemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>^=</operator> <literal type="number">0140</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>^=</operator> <literal type="number">0140</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name>p1</name><operator>/</operator><literal type="number">10</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>p1</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name>p2</name><operator>/</operator><literal type="number">10</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>p2</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><name>p1</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>p1</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><name>p2</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>p2</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name> <argument_list>(<argument><expr><operator>*</operator><name>Otemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>chars</name> <operator>=</operator> <name>delay</name> <operator>*</operator> <name>chars_per_millisecond</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>chars</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chars</name> <operator>-</operator> <name>delay</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delay</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>delay</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>delay</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name><name>String_table</name><index>[<expr><name>pc__</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Otemp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>chars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>variable</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>Operation</name><parameter_list>(<parameter><decl><type><name>Temp_Stack</name></type></decl></parameter>, <parameter><decl><type><name>place</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name><name>Temp_Stack</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>place</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>, <argument><expr><literal type="string">"2d"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%2d"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>, <argument><expr><literal type="string">"3d"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%0d"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>, <argument><expr><literal type="string">"02d"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>, <argument><expr><literal type="string">"03d"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%03d"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>-=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>*=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>/=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>%=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>&amp;=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>|=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>^=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>temp</name> <operator>==</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp</name> <operator>&gt;</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp</name> <operator>&lt;</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name>Otemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>!</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>~</operator><name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>*</operator><name>Otemp</name> <operator>-</operator> <literal type="char">'0'</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>variable</name><index>[<expr><operator>*</operator><name>Otemp</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>variable</name><index>[<expr><operator>*</operator><name>Otemp</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>=</operator> <name><name>Temp_Stack</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>Otemp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Temp_Stack</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><name>place</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Info_Out</name><parameter_list>(<parameter><decl><type><name>string</name></type></decl></parameter>, <parameter><decl><type><name>p_list</name></type></decl></parameter>, <parameter><decl><type><name>place</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>p_list</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>place</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Cond_FLAG</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>EVAL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Cond_Stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Cond_place</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Stack</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Top_of_stack</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Cond_FLAG</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Cond_place</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Top_of_stack</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>temp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>place</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><name>temp</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>temp</name></expr>]</index></name> <operator>=</operator> <name><name>p_list</name><index>[<expr><operator>--</operator><name>place</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'t'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">';'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Cond_FLAG</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>EVAL</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>EVAL</name></expr>)</condition>
<block>{<block_content>




<while>while <condition>(<expr><operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>, <argument><expr><literal type="string">"%t"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>Otemp</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Cond_place</name> <operator>=</operator> <call><name>Operation</name><argument_list>(<argument><expr><name>Cond_Stack</name></expr></argument>, <argument><expr><name>Cond_place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Cond_place</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>Cond_Stack</name><index>[<expr><name>Cond_place</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>EVAL</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>




<while>while <condition>(<expr><operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>, <argument><expr><literal type="string">"%e"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>, <argument><expr><literal type="string">"%;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>Otemp</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>Otemp</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>, <argument><expr><literal type="string">"%e"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tchar</name> <operator>=</operator> <name>Otemp</name></expr>;</expr_stmt>



<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>tchar</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>tchar</name></expr></argument>, <argument><expr><literal type="string">"%t"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>tchar</name></expr></argument>, <argument><expr><literal type="string">"%;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tchar</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tchar</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>EVAL</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Cond_FLAG</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name> <operator>=</operator> <name>tchar</name></expr>;</expr_stmt>
</block_content>}</block></if>





<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>tchar</name></expr></argument>, <argument><expr><literal type="string">"%;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>EVAL</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





</block_content>}</block></if>





<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>Otemp</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>, <argument><expr><literal type="string">"%;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>EVAL</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>EVAL</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Cond_FLAG</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Cond_FLAG</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>Otemp</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>, <argument><expr><literal type="string">"%;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>Top_of_stack</name> <operator>=</operator> <call><name>Operation</name><argument_list>(<argument><expr><name>Stack</name></expr></argument>, <argument><expr><name>Top_of_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>, <argument><expr><literal type="string">"$&lt;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>Otemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>Otemp</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>chars</name> <operator>=</operator> <name>delay</name> <operator>*</operator> <name>chars_per_millisecond</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>chars</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chars</name> <operator>-</operator> <name>delay</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delay</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>pc__</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>*</operator><name><name>String_table</name><index>[<expr><name>pc__</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>delay</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>delay</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name>Otemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Otemp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>wmove</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>row</name></type></decl></parameter>, <parameter><decl><type><name>column</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>column</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>row</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>column</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>LX</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>LY</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clear_line</name><parameter_list>(<parameter><decl><type><name>line</name></type></decl></parameter>, <parameter><decl><type><name>column</name></type></decl></parameter>, <parameter><decl><type><name>cols</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name> <operator>&gt;</operator> <name><name>line</name><operator>-&gt;</operator><name>last_char</name></name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>last_char</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>column</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>last_char</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>column</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>column</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>werase</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>scroll_up</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>scroll_down</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_line</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wclrtoeol</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>, <decl><type ref="prev"/><name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>=</operator> <name>CHANGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>column</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>LX</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>LY</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>LY</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>clear_line</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wrefresh</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>wnoutrefresh</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DIAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"columns=%d, lines=%d, SC=%d, SR=%d\n"</literal></expr></argument>,<argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>SC</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>SR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>temp</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>value</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition> <incr><expr><name>value</name><operator>++</operator></expr><operator>,</operator> <expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next_screen</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"line moved "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>-&gt;</operator><name>scroll</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"scroll_x is set: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"lc%d=%s|\n"</literal></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>last_char</name></name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"+-------------------- virtual screen ----------------------------------------+\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"columns=%d, lines=%d \n"</literal></expr></argument>,<argument><expr><name><name>virtual_scr</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>, <argument><expr><name><name>virtual_scr</name><operator>-&gt;</operator><name>Num_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>temp</name> <operator>=</operator> <name><name>virtual_scr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>value</name> <operator>&lt;</operator> <name><name>virtual_scr</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition> <incr><expr><name>value</name><operator>++</operator></expr><operator>,</operator> <expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next_screen</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"line moved "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>-&gt;</operator><name>scroll</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"scroll_x is set: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"lc%d=%s|\n"</literal></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>last_char</name></name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"columns=%d, lines=%d \n"</literal></expr></argument>,<argument><expr><name><name>curscr</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>, <argument><expr><name><name>curscr</name><operator>-&gt;</operator><name>Num_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>temp</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>value</name> <operator>&lt;</operator> <name><name>curscr</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition> <incr><expr><name>value</name><operator>++</operator></expr><operator>,</operator> <expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>next_screen</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"line=%s|\n"</literal></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>doupdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_scr</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_scr</name><operator>-&gt;</operator><name>scroll_down</name></name> <operator>=</operator> <name><name>virtual_scr</name><operator>-&gt;</operator><name>scroll_up</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>touchwin</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>user_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>line_counter</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>user_line</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init>
<condition><expr><name>line_counter</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition> <incr><expr><name>line_counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>user_line</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wnoutrefresh</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>user_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>virtual_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>user_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>virt_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>SR</name></name> <operator>&gt;=</operator> <name><name>virtual_scr</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>user_line</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual_line</name> <operator>=</operator> <name><name>virtual_scr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_scr</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_scr</name><operator>-&gt;</operator><name>LX</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>LX</name></name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>SC</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_scr</name><operator>-&gt;</operator><name>LY</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>LY</name></name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_scr</name><operator>-&gt;</operator><name>scroll_up</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>scroll_up</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_scr</name><operator>-&gt;</operator><name>scroll_down</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>scroll_down</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>last_window_refreshed</name> <operator>==</operator> <name>window</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>window</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>line_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line_counter</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name></expr>;</condition> <incr><expr><name>line_counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>virtual_line</name> <operator>=</operator> <name><name>virtual_line</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>line_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>line_counter</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>line_counter</name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name><operator>)</operator> <operator>&lt;</operator> <name><name>virtual_scr</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator></expr>;</condition>
<incr><expr><name>line_counter</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>last_window_refreshed</name> <operator>!=</operator> <name>window</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>user_line</name><operator>-&gt;</operator><name>changed</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>SCROLL</name> <operator>|</operator> <name>CLEAR</name><operator>)</operator> <operator>&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>user_col</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>virt_col</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>SC</name></name></expr>;</init>
<condition><expr><operator>(</operator><name>virt_col</name> <operator>&lt;</operator> <name><name>virtual_scr</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>user_col</name> <operator>&lt;</operator> <name><name>user_line</name><operator>-&gt;</operator><name>last_char</name></name><operator>)</operator></expr>;</condition>
<incr><expr><name>virt_col</name><operator>++</operator></expr><operator>,</operator> <expr><name>user_col</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>virtual_line</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>virt_col</name></expr>]</index></name> <operator>=</operator> <name><name>user_line</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>user_col</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_line</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>virt_col</name></expr>]</index></name> <operator>=</operator> <name><name>user_line</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>user_col</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>user_col</name> <operator>=</operator> <name><name>user_line</name><operator>-&gt;</operator><name>last_char</name></name></expr><operator>,</operator>
<expr><name>virt_col</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>SC</name></name> <operator>+</operator> <name><name>user_line</name><operator>-&gt;</operator><name>last_char</name></name></expr>;</init>
<condition><expr><operator>(</operator><name>virt_col</name> <operator>&lt;</operator> <name><name>virtual_scr</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>user_col</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator></expr>;</condition>
<incr><expr><name>virt_col</name><operator>++</operator></expr><operator>,</operator> <expr><name>user_col</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>virtual_line</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>virt_col</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_line</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>virt_col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>virtual_scr</name><operator>-&gt;</operator><name>Num_cols</name></name> <operator>!=</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>virtual_line</name><operator>-&gt;</operator><name>last_char</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>user_line</name><operator>-&gt;</operator><name>last_char</name></name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>SC</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>virtual_line</name><operator>-&gt;</operator><name>row</name><index>[<expr><name><name>virtual_line</name><operator>-&gt;</operator><name>last_char</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>virtual_line</name><operator>-&gt;</operator><name>row</name><index>[<expr><name><name>virtual_line</name><operator>-&gt;</operator><name>last_char</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>virtual_line</name><operator>-&gt;</operator><name>last_char</name></name> <operator>=</operator>
<call><name>min</name><argument_list>(<argument><expr><name><name>virtual_scr</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>user_line</name><operator>-&gt;</operator><name>last_char</name></name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>SC</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>virtual_line</name><operator>-&gt;</operator><name>last_char</name></name> <operator>=</operator> <name><name>user_line</name><operator>-&gt;</operator><name>last_char</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>virtual_line</name><operator>-&gt;</operator><name>row</name><index>[<expr><name><name>virtual_line</name><operator>-&gt;</operator><name>last_char</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_line</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name><name>user_line</name><operator>-&gt;</operator><name>changed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual_line</name> <operator>=</operator> <name><name>virtual_line</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>user_line</name> <operator>=</operator> <name><name>user_line</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>scroll_up</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>scroll_down</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>last_window_refreshed</name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>flushinp</name><parameter_list>()</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ungetch</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bufp</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>in_buff</name><index>[<expr><name>bufp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSD_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>timed_getchar</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nfds</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">500000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Time_Out</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret_val</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>ret_val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Time_Out</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator><ternary><condition><expr><call><name>read</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name>temp</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>wgetch</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>in_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>temp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_arg</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSD_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>Noblock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in_value</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>bufp</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>in_buff</name><index>[<expr><operator>--</operator><name>bufp</name></expr>]</index></name></expr> </then><else>: <expr><call><name>timed_getchar</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>in_value</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>bufp</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>in_buff</name><index>[<expr><operator>--</operator><name>bufp</name></expr>]</index></name></expr> </then><else>: <expr><ternary><condition><expr><call><name>read</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name>temp</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>in_value</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>bufp</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>in_buff</name><index>[<expr><operator>--</operator><name>bufp</name></expr>]</index></name></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><call><name>read</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>temp</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>Noblock</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Time_Out</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_arg</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_value</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>old_arg</name> <operator>|</operator> <name>FNDELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>in_value</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>bufp</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>in_buff</name><index>[<expr><operator>--</operator><name>bufp</name></expr>]</index></name></expr> </then><else>: <expr><ternary><condition><expr><call><name>read</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><name>temp</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Noblock</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>old_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Time_Out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in_value</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>in_value</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in_value</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Parity</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>Num_bits</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>in_value</name> <operator>&amp;=</operator> <literal type="number">0177</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>interrupt_flag</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>interrupt_flag</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_value</name> <operator>=</operator> <call><name>wgetch</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>in_value</name> <operator>==</operator> <literal type="char">'\033'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>in_value</name> <operator>==</operator> <literal type="char">'\037'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in_value</name> <operator>=</operator> <call><name>Get_key</name><argument_list>(<argument><expr><name>in_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><name>in_value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BSD_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>Clear</name><parameter_list>(<parameter><decl><type><name>arg</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name>Time_Out</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"inside Clear()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>Get_key</name><parameter_list>(<parameter><decl><type><name>first_char</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>first_char</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>in_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>string</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Gtemp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Found</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>termio</name></name></type> <name>Gterminal</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>sgttyb</name></name></type> <name>Gterminal</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>KEY_STACK</name></name> <modifier>*</modifier></type><name>St_point</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>( <argument><expr><name>BSD_SELECT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>Count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Gtemp</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr><name>Count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>first_char</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr><name>Count</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Time_Out</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BSD_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>Clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>alarm</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>Noblock</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>Gterminal</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Gterminal</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ICANON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Gterminal</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ECHO</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>Count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Found</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>Count</name> <operator>&lt;</operator> <name>Max_Key_len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>Time_Out</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>Found</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in_char</name> <operator>=</operator> <call><name>wgetch</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"back in GetKey()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>in_char</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>string</name><index>[<expr><name>Count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>in_char</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr><name>Count</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>St_point</name> <operator>=</operator> <name>KEY_TOS</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>St_point</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>Found</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name><name>St_point</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>St_point</name> <operator>=</operator> <name><name>St_point</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BSD_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Time_Out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>alarm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCSETP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>Noblock</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Found</name></expr>)</condition>
<block>{<block_content>
<return>return<expr><operator>(</operator><name><name>St_point</name><operator>-&gt;</operator><name>element</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<while>while <condition>(<expr><name>Count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>string</name><index>[<expr><operator>--</operator><name>Count</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name><name>string</name><index>[<expr><name>Count</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DIAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ungetting character %d\n"</literal></expr></argument>, <argument><expr><name><name>string</name><index>[<expr><name>Count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ungetch</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><name>Count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><name>first_char</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>waddch</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmpline</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DIAG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>column</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>LX</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>column</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">9</literal> <operator>-</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>shift</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>column</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>LY</name></name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'~'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>Booleans</name><index>[<expr><name>hz__</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\b'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmpline</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>line_array</name><index>[<expr><name><name>window</name><operator>-&gt;</operator><name>LY</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpline</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>column</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpline</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>column</name></expr>]</index></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>Attrib</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpline</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>column</name> <operator>&gt;=</operator> <name><name>tmpline</name><operator>-&gt;</operator><name>last_char</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>column</name> <operator>&gt;</operator> <name><name>tmpline</name><operator>-&gt;</operator><name>last_char</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>tmpline</name><operator>-&gt;</operator><name>last_char</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>column</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>tmpline</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpline</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tmpline</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>column</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpline</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>column</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpline</name><operator>-&gt;</operator><name>last_char</name></name> <operator>=</operator> <name>column</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>wclrtoeol</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>LX</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>LX</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>LX</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>LX</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>LX</name></name> <operator>&gt;=</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>LX</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>LY</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>LY</name></name> <operator>&gt;=</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>LY</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>




</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>=</operator> <name>CHANGE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>winsertln</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp1</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>scroll_down</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>=</operator> <name>SCROLL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>column</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>LX</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>LY</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><operator>(</operator><name>row</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_line</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><operator>(</operator><name>row</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>LY</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>LY</name></name> <operator>==</operator> <operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <name>DOWN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>LY</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>first_line</name></name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp1</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init>
<condition><expr><name>row</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>line_array</name><index>[<expr><name>row</name></expr>]</index></name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>tmp1</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wdeleteln</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmpline</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>scroll_up</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>=</operator> <name>SCROLL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>column</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>LX</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>LY</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>LY</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>LY</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>first_line</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name><operator>-&gt;</operator><name>scroll</name></name> <operator>=</operator> <name>UP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmpline</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_line</name><argument_list>(<argument><expr><name>tmpline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpline</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>tmpline</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmpline</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>line_array</name><index>[<expr><name>row</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>clear_line</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wclrtobot</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>SCROLL_CLEAR</name></name> <operator>|=</operator> <name>CLEAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>column</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>LX</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>LY</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>LY</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>clear_line</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>LY</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_line</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>wmove</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wstandout</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>Numbers</name><index>[<expr><name>sg__</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>Attrib</name></name> <operator>|=</operator> <name>A_STANDOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wstandend</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>Attrib</name></name> <operator>&amp;=</operator> <operator>~</operator><name>A_STANDOUT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>waddstr</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>string</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wstring</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>wstring</name> <operator>=</operator> <name>string</name></expr>;</init> <condition><expr><operator>*</operator><name>wstring</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>wstring</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>*</operator><name>wstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clearok</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>flag</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name>Repaint_screen</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>echo</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_lflag</name></name> <operator>|=</operator> <name>ECHO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSETA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>sg_flags</name></name> <operator>|=</operator> <name>ECHO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCSETP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>noecho</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ECHO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSETA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>sg_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ECHO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCSETP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>raw</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>Intr</name> <operator>=</operator> <name><name>Terminal</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VINTR</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ICANON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ISIG</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLUSHO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FLUSHO</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PENDIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>PENDIN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEXTEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IEXTEN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VINTR</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSETA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>sg_flags</name></name> <operator>|=</operator> <name>RAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCSETP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>noraw</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_lflag</name></name> <operator>|=</operator> <name>ICANON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_lflag</name></name> <operator>|=</operator> <name>ISIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VEOF</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VEOL</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VINTR</name></expr>]</index></name> <operator>=</operator> <name>Intr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSETA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>sg_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCSETP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nl</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_iflag</name></name> <operator>|=</operator> <name>ICRNL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSETA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nonl</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_iflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ICRNL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Terminal</name><operator>.</operator><name>c_iflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IGNCR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSETA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>saveterm</name><parameter_list>()</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fixterm</name><parameter_list>()</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>resetterm</name><parameter_list>()</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nodelay</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>flag</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>idlok</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>flag</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>keypad</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>flag</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>ks__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>ke__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>savetty</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCGETA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Saved_tty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCGETP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Saved_tty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>resetty</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSETA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Saved_tty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCSETP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Saved_tty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>endwin</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>curscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>virtual_scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delwin</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_arg</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>


</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>delwin</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>first_line</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>window</name><operator>-&gt;</operator><name>first_line</name></name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>first_line</name><operator>-&gt;</operator><name>prev_screen</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>first_line</name><operator>-&gt;</operator><name>prev_screen</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>first_line</name><operator>-&gt;</operator><name>prev_screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>window</name> <operator>==</operator> <name>last_window_refreshed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_window_refreshed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>window</name><operator>-&gt;</operator><name>first_line</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>first_line</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>first_line</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name></type>
<name>wprintw</name><argument_list>(<argument><expr><name>va_alist</name></expr></argument>)</argument_list>
<name>va_dcl</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>void</name>
<name>wprintw</name><argument_list>(<argument><expr><name>WINDOW</name> <operator>*</operator><name>window</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>format</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wtemp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>WINDOW</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fpoint</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>format</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>fpoint</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fpoint</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fpoint</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fpoint</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iout</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>fpoint</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>fpoint</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wtemp</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>waddstr</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>wtemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fpoint</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>fpoint</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fpoint</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fpoint</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>fpoint</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>fpoint</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>fpoint</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>fpoint</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>fpoint</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fpoint</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fpoint</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>*</operator><name>fpoint</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type>
<name>iout</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>value</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <name>value</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>iout</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>waddch</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>value</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>Comp_line</name><parameter_list>(<parameter><decl><type><name>line1</name></type></decl></parameter>, <parameter><decl><type><name>line2</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>line1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>line2</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>att1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>att2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line1</name><operator>-&gt;</operator><name>last_char</name></name> <operator>!=</operator> <name><name>line2</name><operator>-&gt;</operator><name>last_char</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>line1</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>line2</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>att1</name> <operator>=</operator> <name><name>line1</name><operator>-&gt;</operator><name>attributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>att2</name> <operator>=</operator> <name><name>line2</name><operator>-&gt;</operator><name>attributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>att1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>att2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>count1</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>count1</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>count1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return<expr><operator>(</operator><name>count1</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type>
<name>Insert_line</name><parameter_list>(<parameter><decl><type><name>row</name></type></decl></parameter>, <parameter><decl><type><name>end_row</name></type></decl></parameter>, <parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp1</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>end_row</name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>top_of_win</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name>top_of_win</name></expr>;</init> <condition><expr><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name>end_row</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>clear_line</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>top_of_win</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name>top_of_win</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>row</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>row</name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp1</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>tmp1</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>end_row</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>SR</name></name> <operator>+</operator> <name>end_row</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>dl__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>SR</name></name> <operator>+</operator> <name>row</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>al__</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>al__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>sr__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>top_of_win</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><operator>(</operator><name><name>top_of_win</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>top_of_win</name> <operator>=</operator> <name><name>top_of_win</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<return>return<expr><operator>(</operator><name>tmp1</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type>
<name>Delete_line</name><parameter_list>(<parameter><decl><type><name>row</name></type></decl></parameter>, <parameter><decl><type><name>end_row</name></type></decl></parameter>, <parameter><decl><type><name>window</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name>top_of_win</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>row</name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name> <operator>=</operator> <name><name>top_of_win</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name>top_of_win</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>row</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>clear_line</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>top_of_win</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <name>top_of_win</name></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>end_row</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp1</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>prev_screen</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>prev_screen</name></name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>SR</name></name> <operator>+</operator> <name>row</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>dl__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>end_row</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>SR</name></name> <operator>+</operator> <name>end_row</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>al__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>String_table</name><index>[<expr><name>dl__</name></expr>]</index></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>SR</name></name> <operator>+</operator> <name>end_row</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>row</name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name> <operator>=</operator> <name>top_of_win</name> <operator>=</operator> <name>tmp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><name>tmp2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>CLEAR_TO_EOL</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>row</name></type></decl></parameter>, <parameter><decl><type><name>column</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>column</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>tmp1</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tmp1</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><operator>(</operator><name>y</name> <operator>&lt;</operator> <operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>SR</name></name><operator>+</operator><name>row</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tmp1</name><operator>-&gt;</operator><name>next_screen</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>tmp1</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>column</name></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>column</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp1</name><operator>-&gt;</operator><name>last_char</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>column</name> <operator>&lt;</operator> <name>COLS</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>STAND</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>STAND</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attribute_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>ce__</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>ce__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>column</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>Curr_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>check_delete</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>line</name></type></decl></parameter>, <parameter><decl><type><name>offset</name></type></decl></parameter>, <parameter><decl><type><name>pointer_new</name></type></decl></parameter>, <parameter><decl><type><name>pointer_old</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>pointer_new</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pointer_old</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>end_old</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_lin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_lin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_att</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_att</name></decl>;</decl_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_lin</name> <operator>=</operator> <name><name>pointer_new</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_att</name> <operator>=</operator> <name><name>pointer_new</name><operator>-&gt;</operator><name>attributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_lin</name> <operator>=</operator> <name><name>pointer_old</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_att</name> <operator>=</operator> <name><name>pointer_old</name><operator>-&gt;</operator><name>attributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_old</name> <operator>=</operator> <name>end_new</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>(</operator><name><name>new_lin</name><index>[<expr><name>end_new</name></expr>]</index></name> <operator>!=</operator> <name><name>old_lin</name><index>[<expr><name>end_old</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>new_att</name><index>[<expr><name>end_new</name></expr>]</index></name> <operator>!=</operator> <name><name>old_att</name><index>[<expr><name>end_old</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>old_lin</name><index>[<expr><name>end_old</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>new_lin</name><index>[<expr><name>end_old</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_old</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>old_lin</name><index>[<expr><name>end_old</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>old_lin</name><index>[<expr><name>end_old</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>new_lin</name><index>[<expr><name>end_new</name><operator>+</operator><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>new_att</name><index>[<expr><name>end_new</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>old_att</name><index>[<expr><name>end_old</name><operator>+</operator><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>new_lin</name><index>[<expr><name>end_new</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>old_lin</name><index>[<expr><name>end_old</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>new_lin</name><index>[<expr><name>end_new</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>new_lin</name><index>[<expr><name>end_new</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>end_new</name><operator>+</operator><name>k</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR_TO_EOL</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>end_new</name><operator>+</operator><name>k</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>end_old</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Char_del</name><argument_list>(<argument><expr><name>old_lin</name></expr></argument>, <argument><expr><name>old_att</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<while>while <condition>(<expr><operator>(</operator><name><name>old_lin</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>offset</name> <operator>&lt;</operator> <name>COLS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>pointer_old</name><operator>-&gt;</operator><name>last_char</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><name>changed</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>check_insert</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>line</name></type></decl></parameter>, <parameter><decl><type><name>offset</name></type></decl></parameter>, <parameter><decl><type><name>pointer_new</name></type></decl></parameter>, <parameter><decl><type><name>pointer_old</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>pointer_new</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pointer_old</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_old</name></decl>, <decl><type ref="prev"/><name>end_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>same</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>insert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_lin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_lin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_att</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_att</name></decl>;</decl_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_lin</name> <operator>=</operator> <name><name>pointer_new</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_att</name> <operator>=</operator> <name><name>pointer_new</name><operator>-&gt;</operator><name>attributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_lin</name> <operator>=</operator> <name><name>pointer_old</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_att</name> <operator>=</operator> <name><name>pointer_old</name><operator>-&gt;</operator><name>attributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_old</name> <operator>=</operator> <name>end_new</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>(</operator><name><name>new_lin</name><index>[<expr><name>end_new</name></expr>]</index></name> <operator>!=</operator> <name><name>old_lin</name><index>[<expr><name>end_old</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>new_att</name><index>[<expr><name>end_new</name></expr>]</index></name> <operator>!=</operator> <name><name>old_att</name><index>[<expr><name>end_old</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>new_lin</name><index>[<expr><name>end_new</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>old_lin</name><index>[<expr><name>end_new</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_new</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>new_lin</name><index>[<expr><name>end_new</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>old_lin</name><index>[<expr><name>end_old</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>new_lin</name><index>[<expr><name>end_new</name><operator>+</operator><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>old_att</name><index>[<expr><name>end_old</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>new_att</name><index>[<expr><name>end_new</name><operator>+</operator><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>new_lin</name><index>[<expr><name>end_new</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>old_lin</name><index>[<expr><name>end_old</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>





<expr_stmt><expr><name>old_off</name> <operator>=</operator> <name>end_new</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>old_lin</name><index>[<expr><name>old_off</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>new_lin</name><index>[<expr><name>old_off</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>old_lin</name><index>[<expr><name>old_off</name></expr>]</index></name> <operator>==</operator> <name><name>new_lin</name><index>[<expr><name>old_off</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>old_att</name><index>[<expr><name>old_off</name></expr>]</index></name> <operator>==</operator> <name><name>new_att</name><index>[<expr><name>old_off</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_off</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>old_lin</name><index>[<expr><name>old_off</name></expr>]</index></name> <operator>==</operator> <name><name>new_lin</name><index>[<expr><name>old_off</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>old_att</name><index>[<expr><name>old_off</name></expr>]</index></name> <operator>==</operator> <name><name>new_att</name><index>[<expr><name>old_off</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>same</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>same</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>k</name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>new_lin</name><index>[<expr><name>end_new</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>insert</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>ic__</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>im__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>insert</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>end_new</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>insert</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>ic__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Char_ins</name><argument_list>(<argument><expr><name>old_lin</name></expr></argument>, <argument><expr><name>old_att</name></expr></argument>, <argument><expr><name><name>new_lin</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>new_att</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>insert</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>ei__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>old_lin</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>offset</name> <operator>&lt;</operator> <name>COLS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>pointer_old</name><operator>-&gt;</operator><name>last_char</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><name>changed</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>doupdate</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>similar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>begin_old</name></decl>, <decl><type ref="prev"/><name>begin_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_old</name></decl>, <decl><type ref="prev"/><name>end_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count1</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>from_top</name></decl>, <decl><type ref="prev"/><name>tmp_ft</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_same</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_same</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>list</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>virt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>old</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>old1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur_lin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vrt_lin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur_att</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vrt_att</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>att1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>att2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>NC_chinese</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <name>virtual_scr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nc_attributes</name> <operator>&amp;</operator> <name>A_NC_BIG5</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>NC_chinese</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Repaint_screen</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>cl__</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>cl__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>from_top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>from_top</name> <operator>&lt;</operator> <name>LINES</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>curscr</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>ce__</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>ce__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>from_top</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>from_top</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>curr</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>from_top</name> <operator>&lt;</operator> <name><name>curscr</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition> <incr><expr><name>from_top</name><operator>++</operator></expr><operator>,</operator> <expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next_screen</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>curscr</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>curr</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name><name>curscr</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>Char_out</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>STAND</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>STAND</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>curscr</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attribute_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>Repaint_screen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>similar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>top_of_win</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>from_top</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>curr</name> <operator>=</operator> <name>top_of_win</name></expr><operator>,</operator> <expr><name>virt</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init>
<condition><expr><name>from_top</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition> <incr><expr><name>from_top</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>virtual_lines</name><index>[<expr><name>from_top</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>similar</name> <operator>=</operator> <call><name>Comp_line</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>virt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>virtual_lines</name><index>[<expr><name>from_top</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>virt</name> <operator>=</operator> <name><name>virt</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>from_top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>virt</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>top_of_win</name></expr>;</expr_stmt>
<expr_stmt><expr><name>similar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>diff</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>last_same</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>first_same</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</init>
<condition><expr><operator>(</operator><name>first_same</name> <operator>&gt;</operator> <name>from_top</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>virtual_lines</name><index>[<expr><name>first_same</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</condition>
<incr><expr><name>first_same</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>last_same</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><operator>(</operator><name>last_same</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>virtual_lines</name><index>[<expr><name>last_same</name></expr>]</index></name><operator>==</operator> <name>FALSE</name><operator>)</operator></expr>;</condition>
<incr><expr><name>last_same</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<while>while <condition>(<expr><operator>(</operator><name>from_top</name> <operator>&lt;</operator> <name>first_same</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>nc_scrolling_ability</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>from_top</name> <operator>&gt;=</operator> <name>last_same</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>last_same</name> <operator>=</operator> <name>from_top</name></expr>;</init>
<condition><expr><operator>(</operator><name>last_same</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>virtual_lines</name><index>[<expr><name>last_same</name></expr>]</index></name> <operator>==</operator> <name>FALSE</name><operator>)</operator></expr>;</condition>
<incr><expr><name>last_same</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>virtual_lines</name><index>[<expr><name>from_top</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>tmp_ft</name> <operator>=</operator> <name>from_top</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>old</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</init>
<condition><expr><operator>(</operator><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>scroll_up</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>diff</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>tmp_ft</name> <operator>&lt;</operator> <name>last_same</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>virtual_lines</name><index>[<expr><name>tmp_ft</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</condition>
<incr><expr><name>tmp_ft</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>Comp_line</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>virt</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>virtual_lines</name><index>[<expr><name>from_top</name></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>





<for>for <control>(<init><expr><name>bottom</name> <operator>=</operator> <name>tmp_ft</name></expr><operator>,</operator> <expr><name>old1</name> <operator>=</operator> <name>old</name></expr><operator>,</operator>
<expr><name>new1</name> <operator>=</operator> <name>virt</name></expr><operator>,</operator> <expr><name>count1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><operator>(</operator><name>bottom</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>Comp_line</name><argument_list>(<argument><expr><name>old1</name></expr></argument>, <argument><expr><name>new1</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition>
<incr><expr><name>bottom</name><operator>++</operator></expr><operator>,</operator> <expr><name>old1</name> <operator>=</operator> <name><name>old1</name><operator>-&gt;</operator><name>next_screen</name></name></expr><operator>,</operator>
<expr><name>new1</name> <operator>=</operator> <name><name>new1</name><operator>-&gt;</operator><name>next_screen</name></name></expr><operator>,</operator>
<expr><name>count1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>count1</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>from_top</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>bottom</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Curr_y</name> <operator>=</operator> <name>Curr_x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>tmp_ft</name> <operator>-</operator> <name>from_top</name><operator>)</operator></expr>;</init> <condition><expr><operator>(</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><name>offset</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>Delete_line</name><argument_list>(<argument><expr><name>from_top</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>bottom</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>LINES</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Curr_y</name> <operator>=</operator> <name>Curr_x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>top_of_win</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>top_of_win</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name>from_top</name></expr>;</condition> <incr><expr><name>offset</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <name>from_top</name></expr><operator>,</operator> <expr><name>old</name><operator>=</operator><name>curr</name></expr><operator>,</operator> <expr><name>new</name><operator>=</operator><name>virt</name></expr>;</init>
<condition><expr><name>offset</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition>
<incr><expr><name>old</name><operator>=</operator><name><name>old</name><operator>-&gt;</operator><name>next_screen</name></name></expr><operator>,</operator> <expr><name>new</name><operator>=</operator><name><name>new</name><operator>-&gt;</operator><name>next_screen</name></name></expr><operator>,</operator>
<expr><name>offset</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>similar</name> <operator>=</operator> <call><name>Comp_line</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_lines</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>similar</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>old</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>tmp_ft</name> <operator>=</operator> <name>from_top</name><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>old</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>prev_screen</name></name></expr>;</init>
<condition><expr><operator>(</operator><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>scroll_down</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmp_ft</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>diff</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>virtual_lines</name><index>[<expr><name>tmp_ft</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</condition>
<incr><expr><name>tmp_ft</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>Comp_line</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>virt</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>





<for>for <control>(<init><expr><name>bottom</name> <operator>=</operator> <name>from_top</name></expr><operator>,</operator> <expr><name>old1</name> <operator>=</operator> <name>old</name></expr><operator>,</operator>
<expr><name>new1</name> <operator>=</operator> <name>virt</name></expr><operator>,</operator> <expr><name>count1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><operator>(</operator><name>bottom</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>Comp_line</name><argument_list>(<argument><expr><name>old1</name></expr></argument>, <argument><expr><name>new1</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition>
<incr><expr><name>bottom</name><operator>++</operator></expr><operator>,</operator> <expr><name>old1</name> <operator>=</operator> <name><name>old1</name><operator>-&gt;</operator><name>next_screen</name></name></expr><operator>,</operator>
<expr><name>new1</name> <operator>=</operator> <name><name>new1</name><operator>-&gt;</operator><name>next_screen</name></name></expr><operator>,</operator>
<expr><name>count1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>count1</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp_ft</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>bottom</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Curr_y</name> <operator>=</operator> <name>Curr_x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>from_top</name> <operator>-</operator> <name>tmp_ft</name><operator>)</operator></expr>;</init> <condition><expr><operator>(</operator><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><name>offset</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>Insert_line</name><argument_list>(<argument><expr><name>tmp_ft</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>bottom</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>LINES</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>cs__</name></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Curr_y</name> <operator>=</operator> <name>Curr_x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>top_of_win</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>top_of_win</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name>from_top</name></expr>;</condition> <incr><expr><name>offset</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <name>from_top</name></expr><operator>,</operator> <expr><name>old</name><operator>=</operator><name>curr</name></expr><operator>,</operator> <expr><name>new</name><operator>=</operator><name>virt</name></expr>;</init>
<condition><expr><name>offset</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition>
<incr><expr><name>old</name><operator>=</operator><name><name>old</name><operator>-&gt;</operator><name>next_screen</name></name></expr><operator>,</operator> <expr><name>new</name><operator>=</operator><name><name>new</name><operator>-&gt;</operator><name>next_screen</name></name></expr><operator>,</operator>
<expr><name>offset</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>similar</name> <operator>=</operator> <call><name>Comp_line</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_lines</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>similar</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>old</name><operator>-&gt;</operator><name>prev_screen</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>from_top</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>virt</name> <operator>=</operator> <name><name>virt</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>







<for>for <control>(<init><expr><name>from_top</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>curr</name> <operator>=</operator> <name><name>curscr</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>from_top</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name></expr>;</condition> <incr><expr><name>from_top</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next_screen</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>top_of_win</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>from_top</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>curr</name> <operator>=</operator> <name>top_of_win</name></expr><operator>,</operator> <expr><name>virt</name> <operator>=</operator> <name><name>window</name><operator>-&gt;</operator><name>first_line</name></name></expr>;</init> <condition><expr><name>from_top</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_lines</name></name></expr>;</condition> <incr><expr><name>from_top</name><operator>++</operator></expr><operator>,</operator> <expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next_screen</name></name></expr><operator>,</operator> <expr><name>virt</name> <operator>=</operator> <name><name>virt</name><operator>-&gt;</operator><name>next_screen</name></name></expr></incr>)</control>
<block>{<block_content>








<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>String_table</name><index>[<expr><name>ic__</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>String_table</name><index>[<expr><name>im__</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>String_table</name><index>[<expr><name>dc__</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curr</name><operator>-&gt;</operator><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name>NC_chinese</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>first_time</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vrt_lin</name> <operator>=</operator> <name><name>virt</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vrt_att</name> <operator>=</operator> <name><name>virt</name><operator>-&gt;</operator><name>attributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_lin</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_att</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>attributes</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>vrt_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>STAND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>Booleans</name><index>[<expr><name>xs__</name></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name><name>vrt_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>cur_lin</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vrt_att</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>cur_att</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vrt_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vrt_att</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>STAND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>vrt_att</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>STAND</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attribute_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attribute_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name><name>vrt_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>cur_lin</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vrt_att</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>cur_att</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vrt_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vrt_att</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>cur_att</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_att</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>Booleans</name><index>[<expr><name>xs__</name></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>attribute_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attribute_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vrt_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>begin_new</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>begin_old</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_old</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_new</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>first_time</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>virt</name><operator>-&gt;</operator><name>changed</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>last_char</name></name> <operator>&lt;=</operator> <name><name>virt</name><operator>-&gt;</operator><name>last_char</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>check_insert</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>virt</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>check_delete</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>virt</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first_time</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virt</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>check_insert</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>virt</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>!</operator><name>changed</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>cur_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>vrt_lin</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>cur_att</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>vrt_att</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vrt_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vrt_att</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>cur_att</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Char_out</name><argument_list>(<argument><expr><name><name>vrt_lin</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vrt_att</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>cur_lin</name></expr></argument>, <argument><expr><name>cur_att</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vrt_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>STAND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>vrt_att</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>STAND</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attribute_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vrt_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_lin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR_TO_EOL</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>att1</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>attributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>virt</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>att2</name> <operator>=</operator> <name><name>virt</name><operator>-&gt;</operator><name>attributes</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name><name>c1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>c2</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>att1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>att2</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>NC_chinese</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>highbitset</name><argument_list>(<argument><expr><name><name>c1</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>begin_old</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>begin_new</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>begin_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR_TO_EOL</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>begin_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>begin_old</name></expr>;</init> <condition><expr><operator>(</operator><name><name>c2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name><name>window</name><operator>-&gt;</operator><name>Num_cols</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Char_out</name><argument_list>(<argument><expr><name><name>c2</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>att2</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>att1</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR_TO_EOL</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>STAND</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>STAND</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>from_top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attribute_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>virt</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name>from_top</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>Position</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>LY</name></name></expr></argument>, <argument><expr><name><name>window</name><operator>-&gt;</operator><name>LX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Position</name><parameter_list>(<parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>row</name></type></decl></parameter>, <parameter><decl><type><name>col</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>WINDOW</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>list</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>place</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos_column</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos_row</name> <operator>=</operator> <name>row</name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>SR</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_column</name> <operator>=</operator> <name>col</name> <operator>+</operator> <name><name>window</name><operator>-&gt;</operator><name>SC</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos_row</name> <operator>!=</operator> <name>Curr_y</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pos_column</name> <operator>!=</operator> <name>Curr_x</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>cm__</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>place</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pos_column</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><name>place</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pos_row</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>cm__</name></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>STAND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>Booleans</name><index>[<expr><name>ms__</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>attribute_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>Curr_x</name> <operator>=</operator> <name>pos_column</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Curr_y</name> <operator>=</operator> <name>pos_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Char_del</name><parameter_list>(<parameter><decl><type><name>line</name></type></decl></parameter>, <parameter><decl><type><name>attrib</name></type></decl></parameter>, <parameter><decl><type><name>offset</name></type></decl></parameter>, <parameter><decl><type><name>maxlen</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attrib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>one</name></decl>, <decl><type ref="prev"/><name>two</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>one</name> <operator>=</operator> <name>offset</name></expr><operator>,</operator> <expr><name>two</name> <operator>=</operator> <name>offset</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>line</name><index>[<expr><name>one</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>one</name> <operator>&lt;</operator> <name>maxlen</name><operator>)</operator></expr>;</condition> <incr><expr><name>one</name><operator>++</operator></expr><operator>,</operator> <expr><name>two</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>one</name></expr>]</index></name> <operator>=</operator> <name><name>line</name><index>[<expr><name>two</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><index>[<expr><name>one</name></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><index>[<expr><name>two</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>dc__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Char_ins</name><parameter_list>(<parameter><decl><type><name>line</name></type></decl></parameter>, <parameter><decl><type><name>attrib</name></type></decl></parameter>, <parameter><decl><type><name>newc</name></type></decl></parameter>, <parameter><decl><type><name>newatt</name></type></decl></parameter>, <parameter><decl><type><name>offset</name></type></decl></parameter>, <parameter><decl><type><name>maxlen</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attrib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>newc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>newatt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>one</name></decl>, <decl><type ref="prev"/><name>two</name></decl>;</decl_stmt>

<expr_stmt><expr><name>one</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>line</name><index>[<expr><name>one</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>one</name> <operator>&lt;</operator> <operator>(</operator><name>maxlen</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>one</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<for>for <control>(<init><expr><name>two</name> <operator>=</operator> <name>one</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>two</name> <operator>&gt;</operator> <name>offset</name><operator>)</operator></expr>;</condition> <incr><expr><name>one</name><operator>--</operator></expr><operator>,</operator> <expr><name>two</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>two</name></expr>]</index></name> <operator>=</operator> <name><name>line</name><index>[<expr><name>one</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><index>[<expr><name>two</name></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><index>[<expr><name>one</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>newc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>newatt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Char_out</name><argument_list>(<argument><expr><name>newc</name></expr></argument>, <argument><expr><name>newatt</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>attribute_on</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>sa__</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>attributes_set</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>sa__</name></expr>]</index></name></expr></argument>, <argument><expr><name>attributes_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>String_table</name><index>[<expr><name>so__</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>so__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>attribute_off</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>String_table</name><index>[<expr><name>me__</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>me__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>String_table</name><index>[<expr><name>sa__</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>attributes_set</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>sa__</name></expr>]</index></name></expr></argument>, <argument><expr><name>attributes_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>String_table</name><index>[<expr><name>se__</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>String_Out</name><argument_list>(<argument><expr><name><name>String_table</name><index>[<expr><name>se__</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Char_out</name><parameter_list>(<parameter><decl><type><name>newc</name></type></decl></parameter>, <parameter><decl><type><name>newatt</name></type></decl></parameter>, <parameter><decl><type><name>line</name></type></decl></parameter>, <parameter><decl><type><name>attrib</name></type></decl></parameter>, <parameter><decl><type><name>offset</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>newc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>newatt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attrib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newatt</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>STAND</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>STAND</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attribute_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>STAND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>newatt</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>STAND</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>attribute_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newatt</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>STAND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>Booleans</name><index>[<expr><name>xs__</name></expr>]</index></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>attribute_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>Curr_y</name> <operator>&gt;=</operator> <operator>(</operator><name>LINES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>Curr_x</name> <operator>&gt;=</operator> <operator>(</operator><name>COLS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>newc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>newc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>newatt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>Curr_x</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>nc_setattrib</name><parameter_list>(<parameter><decl><type><name>flag</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name>nc_attributes</name> <operator>|=</operator> <name>flag</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>nc_clearattrib</name><parameter_list>(<parameter><decl><type><name>flag</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name>nc_attributes</name> <operator>&amp;=</operator> <operator>~</operator><name>flag</name></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
