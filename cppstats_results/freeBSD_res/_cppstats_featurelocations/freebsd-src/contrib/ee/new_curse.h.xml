<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ee/new_curse.h">








































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termio.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sgtty.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_BREAK</name></cpp:macro> <cpp:value>0401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_DOWN</name></cpp:macro> <cpp:value>0402</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_UP</name></cpp:macro> <cpp:value>0403</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_LEFT</name></cpp:macro> <cpp:value>0404</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_RIGHT</name></cpp:macro> <cpp:value>0405</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_HOME</name></cpp:macro> <cpp:value>0406</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_BACKSPACE</name></cpp:macro> <cpp:value>0407</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_F0</name></cpp:macro> <cpp:value>0410</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_F</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(KEY_F0+(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_DL</name></cpp:macro> <cpp:value>0510</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_IL</name></cpp:macro> <cpp:value>0511</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_DC</name></cpp:macro> <cpp:value>0512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_IC</name></cpp:macro> <cpp:value>0513</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_EIC</name></cpp:macro> <cpp:value>0514</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_CLEAR</name></cpp:macro> <cpp:value>0515</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_EOS</name></cpp:macro> <cpp:value>0516</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_EOL</name></cpp:macro> <cpp:value>0517</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SF</name></cpp:macro> <cpp:value>0520</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SR</name></cpp:macro> <cpp:value>0521</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_NPAGE</name></cpp:macro> <cpp:value>0522</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_PPAGE</name></cpp:macro> <cpp:value>0523</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_STAB</name></cpp:macro> <cpp:value>0524</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_CTAB</name></cpp:macro> <cpp:value>0525</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_CATAB</name></cpp:macro> <cpp:value>0526</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_ENTER</name></cpp:macro> <cpp:value>0527</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SRESET</name></cpp:macro> <cpp:value>0530</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_RESET</name></cpp:macro> <cpp:value>0531</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_PRINT</name></cpp:macro> <cpp:value>0532</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_LL</name></cpp:macro> <cpp:value>0533</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_A1</name></cpp:macro> <cpp:value>0534</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_A3</name></cpp:macro> <cpp:value>0535</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_B2</name></cpp:macro> <cpp:value>0536</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_C1</name></cpp:macro> <cpp:value>0537</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_C3</name></cpp:macro> <cpp:value>0540</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_BTAB</name></cpp:macro> <cpp:value>0541</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_BEG</name></cpp:macro> <cpp:value>0542</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_CANCEL</name></cpp:macro> <cpp:value>0543</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_CLOSE</name></cpp:macro> <cpp:value>0544</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_COMMAND</name></cpp:macro> <cpp:value>0545</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_COPY</name></cpp:macro> <cpp:value>0546</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_CREATE</name></cpp:macro> <cpp:value>0547</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_END</name></cpp:macro> <cpp:value>0550</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_EXIT</name></cpp:macro> <cpp:value>0551</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_FIND</name></cpp:macro> <cpp:value>0552</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_HELP</name></cpp:macro> <cpp:value>0553</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_MARK</name></cpp:macro> <cpp:value>0554</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_MESSAGE</name></cpp:macro> <cpp:value>0555</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_MOVE</name></cpp:macro> <cpp:value>0556</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_NEXT</name></cpp:macro> <cpp:value>0557</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_OPEN</name></cpp:macro> <cpp:value>0560</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_OPTIONS</name></cpp:macro> <cpp:value>0561</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_PREVIOUS</name></cpp:macro> <cpp:value>0562</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_REDO</name></cpp:macro> <cpp:value>0563</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_REFERENCE</name></cpp:macro> <cpp:value>0564</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_REFRESH</name></cpp:macro> <cpp:value>0565</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_REPLACE</name></cpp:macro> <cpp:value>0566</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_RESTART</name></cpp:macro> <cpp:value>0567</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_RESUME</name></cpp:macro> <cpp:value>0570</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SAVE</name></cpp:macro> <cpp:value>0571</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SBEG</name></cpp:macro> <cpp:value>0572</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SCANCEL</name></cpp:macro> <cpp:value>0573</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SCOMMAND</name></cpp:macro> <cpp:value>0574</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SCOPY</name></cpp:macro> <cpp:value>0575</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SCREATE</name></cpp:macro> <cpp:value>0576</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SDC</name></cpp:macro> <cpp:value>0577</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SDL</name></cpp:macro> <cpp:value>0600</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SELECT</name></cpp:macro> <cpp:value>0601</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SEND</name></cpp:macro> <cpp:value>0602</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SEOL</name></cpp:macro> <cpp:value>0603</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SEXIT</name></cpp:macro> <cpp:value>0604</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SFIND</name></cpp:macro> <cpp:value>0605</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SHELP</name></cpp:macro> <cpp:value>0606</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SHOME</name></cpp:macro> <cpp:value>0607</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SIC</name></cpp:macro> <cpp:value>0610</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SLEFT</name></cpp:macro> <cpp:value>0611</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SMESSAGE</name></cpp:macro> <cpp:value>0612</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SMOVE</name></cpp:macro> <cpp:value>0613</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SNEXT</name></cpp:macro> <cpp:value>0614</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SOPTIONS</name></cpp:macro> <cpp:value>0615</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SPREVIOUS</name></cpp:macro> <cpp:value>0616</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SPRINT</name></cpp:macro> <cpp:value>0617</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SREDO</name></cpp:macro> <cpp:value>0620</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SREPLACE</name></cpp:macro> <cpp:value>0621</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SRIGHT</name></cpp:macro> <cpp:value>0622</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SRSUME</name></cpp:macro> <cpp:value>0623</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SSAVE</name></cpp:macro> <cpp:value>0624</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SSUSPEND</name></cpp:macro> <cpp:value>0625</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SUNDO</name></cpp:macro> <cpp:value>0626</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SUSPEND</name></cpp:macro> <cpp:value>0627</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_UNDO</name></cpp:macro> <cpp:value>0630</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_STANDOUT</name></cpp:macro> <cpp:value>0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NC_BIG5</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCROLL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHANGE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOWN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>_line</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>next_screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>prev_screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>number</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>top_of_win</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>WIND</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>SR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>SC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>LC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>LX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>LY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Attrib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Num_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Num_cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scroll_up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scroll_down</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>SCROLL_CLEAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier></type><name>first_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_line</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>line_array</name></decl>;</decl_stmt>
}</block></struct></type> <name>WINDOW</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>WINDOW</name> <modifier>*</modifier></type><name>curscr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>WINDOW</name> <modifier>*</modifier></type><name>stdscr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>LINES</name></decl>, <decl><type ref="prev"/><name>COLS</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>copy_window</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>origin</name><operator>,</operator> <name>WINDOW</name> <operator>*</operator><name>destination</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>reinitscr</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>initscr</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>Get_int</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>INFO_PARSE</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>AtoI</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>Key_Get</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>keys_vt100</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>_line</name></name> <modifier>*</modifier><name>Screenalloc</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>columns</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>WINDOW</name> <modifier>*</modifier><name>newwin</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>lines</name><operator>,</operator> <name>int</name> <name>cols</name><operator>,</operator> <name>int</name> <name>start_l</name><operator>,</operator> <name>int</name> <name>start_c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>Operation</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name><name>Temp_Stack</name><index>[]</index></name><operator>,</operator> <name>int</name> <name>place</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>Info_Out</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>string</name><operator>,</operator> <name>int</name> <name><name>p_list</name><index>[]</index></name><operator>,</operator> <name>int</name> <name>place</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>wmove</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>row</name><operator>,</operator> <name>int</name> <name>column</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>clear_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>_line</name> <operator>*</operator><name>line</name><operator>,</operator> <name>int</name> <name>column</name><operator>,</operator> <name>int</name> <name>cols</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>werase</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>wclrtoeol</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>wrefresh</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>touchwin</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>wnoutrefresh</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>flushinp</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>ungetch</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>wgetch</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>Clear</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>Get_key</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>first_char</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>waddch</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>winsertln</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>wdeleteln</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>wclrtobot</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>wstandout</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>wstandend</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>waddstr</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>char</name> <operator>*</operator><name>string</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>clearok</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>flag</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>echo</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>noecho</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>raw</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>noraw</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>nl</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>nonl</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>saveterm</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>fixterm</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>resetterm</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>nodelay</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>flag</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>idlok</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>flag</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>keypad</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>flag</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>savetty</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>resetty</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>endwin</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>delwin</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>wprintw</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator> <name>format</name><operator>,</operator> <operator>...</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>iout</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>value</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>Comp_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator>struct <name>_line</name> <operator>*</operator><name>line1</name><operator>,</operator> struct <name>_line</name> <operator>*</operator><name>line2</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>_line</name></name> <modifier>*</modifier><name>Insert_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>row</name><operator>,</operator> <name>int</name> <name>end_row</name><operator>,</operator> <name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>_line</name></name> <modifier>*</modifier><name>Delete_line</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>row</name><operator>,</operator> <name>int</name> <name>end_row</name><operator>,</operator> <name>WINDOW</name> <operator>*</operator><name>window</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>CLEAR_TO_EOL</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>row</name><operator>,</operator> <name>int</name> <name>column</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>check_delete</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>line</name><operator>,</operator> <name>int</name> <name>offset</name><operator>,</operator> struct <name>_line</name> <operator>*</operator><name>pointer_new</name><operator>,</operator> struct <name>_line</name> <operator>*</operator><name>pointer_old</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>check_insert</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>line</name><operator>,</operator> <name>int</name> <name>offset</name><operator>,</operator> struct <name>_line</name> <operator>*</operator><name>pointer_new</name><operator>,</operator> struct <name>_line</name> <operator>*</operator><name>pointer_old</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>doupdate</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>Position</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>WINDOW</name> <operator>*</operator><name>window</name><operator>,</operator> <name>int</name> <name>row</name><operator>,</operator> <name>int</name> <name>col</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>Char_del</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>line</name><operator>,</operator> <name>char</name> <operator>*</operator><name>attrib</name><operator>,</operator> <name>int</name> <name>offset</name><operator>,</operator> <name>int</name> <name>maxlen</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>Char_ins</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>line</name><operator>,</operator> <name>char</name> <operator>*</operator><name>attrib</name><operator>,</operator> <name>int</name> <name>newc</name><operator>,</operator> <name>int</name> <name>newatt</name><operator>,</operator> <name>int</name> <name>offset</name><operator>,</operator> <name>int</name> <name>maxlen</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>attribute_on</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>attribute_off</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>Char_out</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>newc</name><operator>,</operator> <name>int</name> <name>newatt</name><operator>,</operator> <name>char</name> <operator>*</operator><name>line</name><operator>,</operator> <name>char</name> <operator>*</operator><name>attrib</name><operator>,</operator> <name>int</name> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>nc_setattrib</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>nc_clearattrib</name></type> <name>P_</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P_</name></cpp:undef>

</unit>
