<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libc-vis/vis.c">
























































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBC_SCCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: vis.c,v 1.74 2017/11/27 16:37:21 christos Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FBSDID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DIAGASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vis.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__weak_alias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__weak_alias</name><argument_list>(<argument>strvisx</argument>,<argument>_strvisx</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_VIS</name> <operator>||</operator> <operator>!</operator><name>HAVE_SVIS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>









<function_decl><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>do_svis</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wint_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>wint_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BELL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BELL</name></cpp:macro> <cpp:value>L'\a'</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LC_C_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iscgraph</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isgraph_l(c, LC_C_LOCALE)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iscgraph</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isgraph(c)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notyet</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>iscgraph</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ol</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ol</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>isgraph</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>ol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISGRAPH</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((flags) &amp; VIS_NOLOCALE) ? iscgraph(c) : iswgraph(c))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iswoctal</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((u_char)(c)) &gt;= L'0' &amp;&amp; ((u_char)(c)) &lt;= L'7')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iswwhite</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c == L' ' || c == L'\t' || c == L'\n')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iswsafe</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c == L'\b' || c == BELL || c == L'\r')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xtoa</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>L"0123456789abcdef"[c]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XTOA</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>L"0123456789ABCDEF"[c]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXEXTRAS</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>char_shell</name><index>[]</index></name> <init>= <expr><literal type="string">L"'`\";&amp;&lt;&gt;()|{}]\\$!^~"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>char_glob</name><index>[]</index></name> <init>= <expr><literal type="string">L"*?[#"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_NBTOOL_CONFIG_H</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CTASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_CTASSERT(x, __LINE__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CTASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__CTASSERT(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CTASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef char __assert ##y[(x) ? 1 : -1]</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>CTASSERT</name><argument_list>(<argument><expr><name>MB_LEN_MAX</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>do_hvis</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>nextc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>iswalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>L</name><literal type="char">'$'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>L</name><literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>L</name><literal type="char">'_'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>L</name><literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>L</name><literal type="char">'+'</literal>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>L</name><literal type="char">'!'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>L</name><literal type="char">'*'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>L</name><literal type="char">'\''</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>L</name><literal type="char">'('</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>L</name><literal type="char">')'</literal>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>L</name><literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>do_svis</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>nextc</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'%'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>xtoa</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>xtoa</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>do_mvis</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>nextc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>!=</operator> <name>L</name><literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><call><name>iswspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>nextc</name> <operator>==</operator> <name>L</name><literal type="char">'\r'</literal> <operator>||</operator> <name>nextc</name> <operator>==</operator> <name>L</name><literal type="char">'\n'</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>iswspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">33</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">60</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">62</literal><operator>)</operator> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="number">126</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<call><name>wcschr</name><argument_list>(<argument><expr><literal type="string">L"#$@[\\]^`{|}~"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'='</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>XTOA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>XTOA</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>do_svis</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>nextc</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>do_mbyte</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>nextc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iswextra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIS_CSTYLE</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L</name><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'n'</literal></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
<case>case <expr><name>L</name><literal type="char">'\r'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'r'</literal></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
<case>case <expr><name>L</name><literal type="char">'\b'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'b'</literal></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
<case>case <expr><name>BELL</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'a'</literal></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
<case>case <expr><name>L</name><literal type="char">'\v'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'v'</literal></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
<case>case <expr><name>L</name><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'t'</literal></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
<case>case <expr><name>L</name><literal type="char">'\f'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'f'</literal></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
<case>case <expr><name>L</name><literal type="char">' '</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'s'</literal></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
<case>case <expr><name>L</name><literal type="char">'\0'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>iswoctal</name><argument_list>(<argument><expr><name>nextc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dst</name></expr>;</return>


<case>case <expr><name>L</name><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'a'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'v'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'t'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'0'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'M'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'^'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'$'</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>ISGRAPH</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>iswoctal</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>iswextra</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0177</literal><operator>)</operator> <operator>==</operator> <name>L</name><literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VIS_OCTAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>u_int32_t</name><operator>)</operator><operator>(</operator><name>u_char</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">03</literal><operator>)</operator> <operator>+</operator> <name>L</name><literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>u_int32_t</name><operator>)</operator><operator>(</operator><name>u_char</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">07</literal><operator>)</operator> <operator>+</operator> <name>L</name><literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">07</literal><operator>)</operator> <operator>+</operator> <name>L</name><literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VIS_NOSLASH</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0200</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0177</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'M'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iswcntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'^'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0177</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>c</name> <operator>+</operator> <name>L</name><literal type="char">'@'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>do_svis</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>wint_t</name></type> <name>nextc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>iswextra</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>shft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bmsk</name></decl>, <decl><type ref="prev"/><name>wmsk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iswextra</name> <operator>=</operator> <call><name>wcschr</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iswextra</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ISGRAPH</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>iswwhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VIS_SAFE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>iswsafe</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>wmsk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wmsk</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>shft</name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>NBBY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bmsk</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0xffLL</literal> <operator>&lt;&lt;</operator> <name>shft</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wmsk</name> <operator>|=</operator> <name>bmsk</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <name>wmsk</name><operator>)</operator> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>do_mbyte</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>wint_t</name><operator>)</operator><operator>(</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <name>bmsk</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shft</name><operator>)</operator></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>nextc</name></expr></argument>, <argument><expr><name>iswextra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>wchar_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>visfun_t</name>)<parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wint_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>wint_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>




<function><type><specifier>static</specifier> <name>visfun_t</name></type>
<name>getvisfun</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIS_HTTPSTYLE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>do_hvis</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIS_MIMESTYLE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>do_mvis</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>do_svis</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>makeextralist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>mbstate</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbstate</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbstate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>MAXEXTRAS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VIS_NOLOCALE</name><operator>)</operator> <operator>||</operator> <call><name>mbsrtowcs</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbstate</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>)</operator><operator>(</operator><name>u_char</name><operator>)</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIS_GLOB</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>char_glob</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIS_SHELL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>char_shell</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIS_SP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIS_TAB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\t'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIS_NL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIS_DQ</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VIS_NOSLASH</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>istrsenvisx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>mbdstp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mblength</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbextra</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cerr_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pdst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psrc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bmsk</name></decl>, <decl><type ref="prev"/><name>wmsk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wint_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>visfun_t</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cerr</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>shft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mdst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>mbslength</name></decl>, <decl><type ref="prev"/><name>maxolen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbstate_t</name></type> <name>mbstate</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>mbdstp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>mbsrc</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>mblength</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>mbextra</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mbslength</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>mblength</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>mbslength</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mbslength</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>















<expr_stmt><expr><name>psrc</name> <operator>=</operator> <name>pdst</name> <operator>=</operator> <name>extra</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mdst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>psrc</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>mbslength</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>psrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pdst</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name>mbslength</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pdst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mbdstp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mdst</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name>mbslength</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mdst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>mbdstp</name> <operator>=</operator> <name>mdst</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mbdst</name> <operator>=</operator> <operator>*</operator><name>mbdstp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>pdst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>psrc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIS_NOLOCALE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cerr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cerr</name> <operator>=</operator> <ternary><condition><expr><name>cerr_ptr</name></expr> ?</condition><then> <expr><operator>*</operator><name>cerr_ptr</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>







<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbstate</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbstate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>mbslength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cerr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>mbrtowc</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>mbslength</name></expr></argument>, <argument><expr><name>MB_LEN_MAX</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>mbstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cerr</name> <operator>||</operator> <name>clen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <operator>(</operator><name>wint_t</name><operator>)</operator><operator>(</operator><name>u_char</name><operator>)</operator><operator>*</operator><name>mbsrc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cerr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mbsrc</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mbslength</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>src</name> <operator>-</operator> <name>psrc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>psrc</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>mblength</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>mblength</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>extra</name> <operator>=</operator> <call><name>makeextralist</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mbextra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extra</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>mbdst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>getvisfun</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>start</name> <operator>=</operator> <name>dst</name></expr>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>len</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><ternary><condition><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>*</operator><name>src</name></expr> </then><else>: <expr><name>L</name><literal type="char">'\0'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>







<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxolen</name> <operator>=</operator> <ternary><condition><expr><name>dlen</name></expr> ?</condition><then> <expr><operator>*</operator><name>dlen</name></expr> </then><else>: <expr><operator>(</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>MB_LEN_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbstate</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbstate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>dst</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>len</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cerr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>wcrtomb</name><argument_list>(<argument><expr><name>mbdst</name></expr></argument>, <argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cerr</name> <operator>||</operator> <name>clen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wmsk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wmsk</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>shft</name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>NBBY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bmsk</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0xffLL</literal> <operator>&lt;&lt;</operator> <name>shft</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wmsk</name> <operator>|=</operator> <name>bmsk</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>dst</name> <operator>&amp;</operator> <name>wmsk</name><operator>)</operator> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mbdst</name><index>[<expr><name>clen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>dst</name> <operator>&amp;</operator> <name>bmsk</name><operator>)</operator> <operator>&gt;&gt;</operator>
<name>shft</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>cerr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>+</operator> <name>clen</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>maxolen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mbdst</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>olen</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><operator>*</operator><name>mbdst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIS_NOLOCALE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cerr_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cerr_ptr</name> <operator>=</operator> <name>cerr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pdst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>olen</name></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pdst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mdst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>istrsenvisxl</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>mbdstp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbextra</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cerr_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istrsenvisx</name><argument_list>(<argument><expr><name>mbdstp</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>mbsrc</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>mbsrc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mbextra</name></expr></argument>, <argument><expr><name>cerr_ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_SVIS</name></expr></cpp:if>







<function><type><name>char</name> <modifier>*</modifier></type>
<name>svis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nextc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbextra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nextc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>istrsenvisx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mbextra</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>mbdst</name> <operator>+</operator> <name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>snvis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nextc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbextra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nextc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>istrsenvisx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mbextra</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>mbdst</name> <operator>+</operator> <name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>strsvis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbextra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istrsenvisxl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mbextra</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>strsnvis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbextra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istrsenvisxl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mbextra</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>strsvisx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbextra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istrsenvisx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mbextra</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>strsnvisx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbextra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istrsenvisx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mbextra</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>strsenvisx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbextra</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cerr_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istrsenvisx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mbextra</name></expr></argument>, <argument><expr><name>cerr_ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_VIS</name></expr></cpp:if>



<function><type><name>char</name> <modifier>*</modifier></type>
<name>vis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nextc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nextc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>istrsenvisx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>mbdst</name> <operator>+</operator> <name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>nvis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nextc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nextc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>istrsenvisx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>mbdst</name> <operator>+</operator> <name>ret</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>strvis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istrsenvisxl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>strnvis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istrsenvisxl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>stravis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>mbdstp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mbdstp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>istrsenvisxl</name><argument_list>(<argument><expr><name>mbdstp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>strvisx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istrsenvisx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>strnvisx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istrsenvisx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>strenvisx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbdst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbsrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cerr_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>istrsenvisx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbdst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><name>mbsrc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>cerr_ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
