<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libc-vis/unvis.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cdefs.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBC_SCCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char sccsid[] = "@(#)unvis.c 8.1 (Berkeley) 6/4/93";
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__RCSID</name><argument_list>(<argument><expr><literal type="string">"$NetBSD: unvis.c,v 1.44 2014/09/26 15:43:36 roy Exp $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>__FBSDID</name><argument_list>(<argument><expr><literal type="string">"$FreeBSD$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vis.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DIAGASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(x)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__arraycount</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(__x) / sizeof(__x[0]))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__weak_alias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__weak_alias</name><argument_list>(<argument>strnunvisx</argument>,<argument>_strnunvisx</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_VIS</name></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_GROUND</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_START</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_META</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_META1</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_CTRL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_OCTAL2</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_OCTAL3</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_HEX</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_HEX1</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_HEX2</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_MIME1</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_MIME2</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_EATCRNL</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_AMP</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_NUMBER</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_STRING</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isoctal</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((u_char)(c)) &gt;= '0' &amp;&amp; ((u_char)(c)) &lt;= '7')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xtod</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isdigit(c) ? (c - '0') : ((tolower(c) - 'a') + 10))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XTOD</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isdigit(c) ? (c - '0') : ((c - 'A') + 10))</cpp:value></cpp:define>




<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>nv</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>value</name></decl>;</decl_stmt>
}</block> <decl><name><name>nv</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"AElig"</literal></expr>, <expr><literal type="number">198</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Aacute"</literal></expr>, <expr><literal type="number">193</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Acirc"</literal></expr>, <expr><literal type="number">194</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Agrave"</literal></expr>, <expr><literal type="number">192</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Aring"</literal></expr>, <expr><literal type="number">197</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Atilde"</literal></expr>, <expr><literal type="number">195</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Auml"</literal></expr>, <expr><literal type="number">196</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ccedil"</literal></expr>, <expr><literal type="number">199</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ETH"</literal></expr>, <expr><literal type="number">208</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Eacute"</literal></expr>, <expr><literal type="number">201</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ecirc"</literal></expr>, <expr><literal type="number">202</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Egrave"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Euml"</literal></expr>, <expr><literal type="number">203</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Iacute"</literal></expr>, <expr><literal type="number">205</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Icirc"</literal></expr>, <expr><literal type="number">206</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Igrave"</literal></expr>, <expr><literal type="number">204</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Iuml"</literal></expr>, <expr><literal type="number">207</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ntilde"</literal></expr>, <expr><literal type="number">209</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Oacute"</literal></expr>, <expr><literal type="number">211</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ocirc"</literal></expr>, <expr><literal type="number">212</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ograve"</literal></expr>, <expr><literal type="number">210</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Oslash"</literal></expr>, <expr><literal type="number">216</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Otilde"</literal></expr>, <expr><literal type="number">213</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ouml"</literal></expr>, <expr><literal type="number">214</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"THORN"</literal></expr>, <expr><literal type="number">222</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Uacute"</literal></expr>, <expr><literal type="number">218</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ucirc"</literal></expr>, <expr><literal type="number">219</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ugrave"</literal></expr>, <expr><literal type="number">217</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Uuml"</literal></expr>, <expr><literal type="number">220</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Yacute"</literal></expr>, <expr><literal type="number">221</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aacute"</literal></expr>, <expr><literal type="number">225</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"acirc"</literal></expr>, <expr><literal type="number">226</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"acute"</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aelig"</literal></expr>, <expr><literal type="number">230</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"agrave"</literal></expr>, <expr><literal type="number">224</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"amp"</literal></expr>, <expr><literal type="number">38</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aring"</literal></expr>, <expr><literal type="number">229</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"atilde"</literal></expr>, <expr><literal type="number">227</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"auml"</literal></expr>, <expr><literal type="number">228</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"brvbar"</literal></expr>, <expr><literal type="number">166</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ccedil"</literal></expr>, <expr><literal type="number">231</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cedil"</literal></expr>, <expr><literal type="number">184</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cent"</literal></expr>, <expr><literal type="number">162</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"copy"</literal></expr>, <expr><literal type="number">169</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"curren"</literal></expr>, <expr><literal type="number">164</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"deg"</literal></expr>, <expr><literal type="number">176</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"divide"</literal></expr>, <expr><literal type="number">247</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eacute"</literal></expr>, <expr><literal type="number">233</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ecirc"</literal></expr>, <expr><literal type="number">234</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"egrave"</literal></expr>, <expr><literal type="number">232</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eth"</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"euml"</literal></expr>, <expr><literal type="number">235</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"frac12"</literal></expr>, <expr><literal type="number">189</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"frac14"</literal></expr>, <expr><literal type="number">188</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"frac34"</literal></expr>, <expr><literal type="number">190</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gt"</literal></expr>, <expr><literal type="number">62</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iacute"</literal></expr>, <expr><literal type="number">237</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"icirc"</literal></expr>, <expr><literal type="number">238</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iexcl"</literal></expr>, <expr><literal type="number">161</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"igrave"</literal></expr>, <expr><literal type="number">236</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iquest"</literal></expr>, <expr><literal type="number">191</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iuml"</literal></expr>, <expr><literal type="number">239</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"laquo"</literal></expr>, <expr><literal type="number">171</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lt"</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"macr"</literal></expr>, <expr><literal type="number">175</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"micro"</literal></expr>, <expr><literal type="number">181</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"middot"</literal></expr>, <expr><literal type="number">183</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nbsp"</literal></expr>, <expr><literal type="number">160</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"not"</literal></expr>, <expr><literal type="number">172</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ntilde"</literal></expr>, <expr><literal type="number">241</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oacute"</literal></expr>, <expr><literal type="number">243</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ocirc"</literal></expr>, <expr><literal type="number">244</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ograve"</literal></expr>, <expr><literal type="number">242</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ordf"</literal></expr>, <expr><literal type="number">170</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ordm"</literal></expr>, <expr><literal type="number">186</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oslash"</literal></expr>, <expr><literal type="number">248</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"otilde"</literal></expr>, <expr><literal type="number">245</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ouml"</literal></expr>, <expr><literal type="number">246</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"para"</literal></expr>, <expr><literal type="number">182</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"plusmn"</literal></expr>, <expr><literal type="number">177</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pound"</literal></expr>, <expr><literal type="number">163</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"quot"</literal></expr>, <expr><literal type="number">34</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"raquo"</literal></expr>, <expr><literal type="number">187</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reg"</literal></expr>, <expr><literal type="number">174</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sect"</literal></expr>, <expr><literal type="number">167</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"shy"</literal></expr>, <expr><literal type="number">173</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sup1"</literal></expr>, <expr><literal type="number">185</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sup2"</literal></expr>, <expr><literal type="number">178</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sup3"</literal></expr>, <expr><literal type="number">179</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"szlig"</literal></expr>, <expr><literal type="number">223</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"thorn"</literal></expr>, <expr><literal type="number">254</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"times"</literal></expr>, <expr><literal type="number">215</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uacute"</literal></expr>, <expr><literal type="number">250</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucirc"</literal></expr>, <expr><literal type="number">251</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ugrave"</literal></expr>, <expr><literal type="number">249</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uml"</literal></expr>, <expr><literal type="number">168</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uuml"</literal></expr>, <expr><literal type="number">252</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yacute"</literal></expr>, <expr><literal type="number">253</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yen"</literal></expr>, <expr><literal type="number">165</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yuml"</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>




<function><type><name>int</name></type>
<name>unvis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>astate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>uc</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>st</name></decl>, <decl><type ref="prev"/><name>ia</name></decl>, <decl><type ref="prev"/><name>is</name></decl>, <decl><type ref="prev"/><name>lc</name></decl>;</decl_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; 0xff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint32_t)(a) &lt;&lt; 24) | (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GI</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint32_t)(a) &gt;&gt; 24)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>cp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>astate</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>GS</name><argument_list>(<argument><expr><operator>*</operator><name>astate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>UNVIS_END</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>S_OCTAL2</name></expr>:</case>
<case>case <expr><name>S_OCTAL3</name></expr>:</case>
<case>case <expr><name>S_HEX2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
<case>case <expr><name>S_GROUND</name></expr>:</case>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>UNVIS_SYNBAD</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>S_GROUND</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>VIS_NOESCAPE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>VIS_HTTP1808</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_HEX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>VIS_HTTP1866</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_AMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>VIS_MIMESTYLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_MIME1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>

<case>case <expr><name>S_START</name></expr>:</case>
<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_OCTAL2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><literal type="number">0200</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_META</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_CTRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\007'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\v'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\033'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_HEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>



<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
<case>case <expr><literal type="char">'$'</literal></expr>:</case>



<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>isgraph</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
<goto>goto <name>bad</name>;</goto>

<case>case <expr><name>S_META</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_META1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_CTRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></else></if_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>

<case>case <expr><name>S_META1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>|=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>

<case>case <expr><name>S_CTRL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>|=</operator> <literal type="number">0177</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>|=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">037</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>

<case>case <expr><name>S_OCTAL2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isoctal</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cp</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_OCTAL3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALIDPUSH</name></expr>;</return>

<case>case <expr><name>S_OCTAL3</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isoctal</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cp</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<return>return <expr><name>UNVIS_VALIDPUSH</name></expr>;</return>

<case>case <expr><name>S_HEX</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>

<case>case <expr><name>S_HEX1</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>xtod</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_HEX2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALIDPUSH</name></expr>;</return>

<case>case <expr><name>S_HEX2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <name>S_GROUND</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>xtod</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>*</operator><name>cp</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>UNVIS_VALIDPUSH</name></expr>;</return>

<case>case <expr><name>S_MIME1</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>uc</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_EATCRNL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isupper</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>XTOD</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_MIME2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<goto>goto <name>bad</name>;</goto>

<case>case <expr><name>S_MIME2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isupper</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>XTOD</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>*</operator><name>cp</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<goto>goto <name>bad</name>;</goto>

<case>case <expr><name>S_EATCRNL</name></expr>:</case>
<switch>switch <condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_MIME1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>
</block_content>}</block></switch>

<case>case <expr><name>S_AMP</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<case>case <expr><name>S_STRING</name></expr>:</case>
<expr_stmt><expr><name>ia</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>GI</name><argument_list>(<argument><expr><operator>*</operator><name>astate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lc</name> <operator>=</operator> <ternary><condition><expr><name>is</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>nv</name><index>[<expr><name>ia</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><name>is</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>ia</name> <operator>&lt;</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name>nv</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ia</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>nv</name><index>[<expr><name>ia</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><name>is</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>lc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nv</name><index>[<expr><name>ia</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><name>is</name></expr>]</index></name> <operator>==</operator> <name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ia</name> <operator>==</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name>nv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>ia</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><name>is</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>S_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name><name>nv</name><index>[<expr><name>ia</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return>

<case>case <expr><name>S_NUMBER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>UNVIS_VALID</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>cp</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <name>uc</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_NOCHAR</name></expr>;</return>

<default>default:</default>
<label><name>bad</name>:</label>



<expr_stmt><expr><operator>*</operator><name>astate</name> <operator>=</operator> <call><name>SS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S_GROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>UNVIS_SYNBAD</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>strnunvisx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>t</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>dst</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKSPACE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (dlen-- == 0) { errno = ENOSPC; return -1; } } while (0)</cpp:value></cpp:define>







<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<label><name>again</name>:</label>
<switch>switch <condition>(<expr><call><name>unvis</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UNVIS_VALID</name></expr>:</case>
<expr_stmt><expr><call><name>CHECKSPACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UNVIS_VALIDPUSH</name></expr>:</case>
<expr_stmt><expr><call><name>CHECKSPACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><name>UNVIS_NOCHAR</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>UNVIS_SYNBAD</name></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>unvis</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>UNVIS_END</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UNVIS_VALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECKSPACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CHECKSPACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dst</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>strunvisx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strnunvisx</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>~</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>strunvis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strnunvisx</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>~</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>strnunvis</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strnunvisx</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
