<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/data.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBCBOR_DATA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBCBOR_DATA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>cbor_data</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>cbor_mutable_data</name>;</typedef>


<typedef>typedef <type><enum>enum <name>cbor_type</name> <block>{
<decl><name>CBOR_TYPE_UINT</name></decl>
,
<decl><name>CBOR_TYPE_NEGINT</name></decl>
,
<decl><name>CBOR_TYPE_BYTESTRING</name></decl>
,
<decl><name>CBOR_TYPE_STRING</name></decl>
,
<decl><name>CBOR_TYPE_ARRAY</name></decl>
,
<decl><name>CBOR_TYPE_MAP</name></decl>
,
<decl><name>CBOR_TYPE_TAG</name></decl>
,
<decl><name>CBOR_TYPE_FLOAT_CTRL</name></decl>

}</block></enum></type> <name>cbor_type</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>CBOR_ERR_NONE</name></decl>,
<decl><name>CBOR_ERR_NOTENOUGHDATA</name></decl>,
<decl><name>CBOR_ERR_NODATA</name></decl>,
<decl><name>CBOR_ERR_MALFORMATED</name></decl>,
<decl><name>CBOR_ERR_MEMERROR</name></decl>

,
<decl><name>CBOR_ERR_SYNTAXERROR</name></decl>
}</block></enum></type> <name>cbor_error_code</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>CBOR_INT_8</name></decl>,
<decl><name>CBOR_INT_16</name></decl>,
<decl><name>CBOR_INT_32</name></decl>,
<decl><name>CBOR_INT_64</name></decl>
}</block></enum></type> <name>cbor_int_width</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>CBOR_FLOAT_0</name></decl>
,
<decl><name>CBOR_FLOAT_16</name></decl>
,
<decl><name>CBOR_FLOAT_32</name></decl>
,
<decl><name>CBOR_FLOAT_64</name></decl>
}</block></enum></type> <name>cbor_float_width</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>_CBOR_METADATA_DEFINITE</name></decl>,
<decl><name>_CBOR_METADATA_INDEFINITE</name></decl>
}</block></enum></type> <name>_cbor_dst_metadata</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>CBOR_CTRL_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CBOR_CTRL_FALSE</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>CBOR_CTRL_TRUE</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>CBOR_CTRL_NULL</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>CBOR_CTRL_UNDEF</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>
}</block></enum></type> <name>_cbor_ctrl</name>;</typedef>


<struct>struct <name>_cbor_int_metadata</name> <block>{
<decl_stmt><decl><type><name>cbor_int_width</name></type> <name>width</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>_cbor_bytestring_metadata</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_cbor_dst_metadata</name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>_cbor_string_metadata</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>codepoint_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_cbor_dst_metadata</name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>_cbor_array_metadata</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>end_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_cbor_dst_metadata</name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>_cbor_map_metadata</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>end_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_cbor_dst_metadata</name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>







<struct>struct <name>_cbor_tag_metadata</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_item_t</name></name><modifier>*</modifier></type> <name>tagged_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>_cbor_float_ctrl_metadata</name> <block>{
<decl_stmt><decl><type><name>cbor_float_width</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ctrl</name></decl>;</decl_stmt>
}</block>;</struct>


<union>union <name>_cbor_float_helper</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>as_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>as_uint</name></decl>;</decl_stmt>
}</block>;</union>


<union>union <name>_cbor_double_helper</name> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>as_double</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>as_uint</name></decl>;</decl_stmt>
}</block>;</union>



<union>union <name>cbor_item_metadata</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_int_metadata</name></name></type> <name>int_metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_bytestring_metadata</name></name></type> <name>bytestring_metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_string_metadata</name></name></type> <name>string_metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_array_metadata</name></name></type> <name>array_metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_map_metadata</name></name></type> <name>map_metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_tag_metadata</name></name></type> <name>tag_metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_float_ctrl_metadata</name></name></type> <name>float_ctrl_metadata</name></decl>;</decl_stmt>
}</block>;</union>


<typedef>typedef <type><struct>struct <name>cbor_item_t</name> <block>{

<decl_stmt><decl><type><name><name>union</name> <name>cbor_item_metadata</name></name></type> <name>metadata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>refcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cbor_type</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>cbor_item_t</name>;</typedef>





<struct>struct <name>cbor_indefinite_string_data</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>chunk_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chunk_capacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>chunks</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>cbor_error</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cbor_error_code</name></type> <name>code</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>cbor_pair</name> <block>{
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>cbor_load_result</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>cbor_error</name></name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>read</name></decl>;</decl_stmt>
}</block>;</struct>


<enum>enum <name>cbor_decoder_status</name> <block>{





<decl><name>CBOR_DECODER_FINISHED</name></decl>,

<decl><name>CBOR_DECODER_NEDATA</name></decl>,

<decl><name>CBOR_DECODER_ERROR</name></decl>
}</block>;</enum>


<struct>struct <name>cbor_decoder_result</name> <block>{







<decl_stmt><decl><type><name>size_t</name></type> <name>read</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>cbor_decoder_status</name></name></type> <name>status</name></decl>;</decl_stmt>















<decl_stmt><decl><type><name>size_t</name></type> <name>required</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
