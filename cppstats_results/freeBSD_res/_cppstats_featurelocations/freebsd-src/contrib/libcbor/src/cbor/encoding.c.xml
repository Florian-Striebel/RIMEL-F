<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/encoding.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/encoders.h"</cpp:file></cpp:include>

<function><type><name>size_t</name></type> <name>cbor_encode_uint8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint8</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_uint16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint16</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_uint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_uint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_uint</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_negint8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint8</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_negint16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint16</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_negint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_negint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_negint</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_bytestring_start</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>_cbor_encode_byte</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buffer_size</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_indef_bytestring_start</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_byte</name><argument_list>(<argument><expr><literal type="number">0x5F</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_string_start</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x60</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_indef_string_start</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_byte</name><argument_list>(<argument><expr><literal type="number">0x7F</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_array_start</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_indef_array_start</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_byte</name><argument_list>(<argument><expr><literal type="number">0x9F</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_map_start</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0xA0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_indef_map_start</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_byte</name><argument_list>(<argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_tag</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0xC0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_bool</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><call><name>_cbor_encode_byte</name><argument_list>(<argument><expr><literal type="number">0xF5</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>_cbor_encode_byte</name><argument_list>(<argument><expr><literal type="number">0xF4</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_null</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_byte</name><argument_list>(<argument><expr><literal type="number">0xF6</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_undef</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_byte</name><argument_list>(<argument><expr><literal type="number">0xF7</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_half</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator>union <name>_cbor_float_helper</name><operator>)</operator><block>{<expr><operator>.</operator><name>as_float</name> <operator>=</operator> <name>value</name></expr>}</block><operator>)</operator><operator>.</operator><name>as_uint</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>exp</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x7F800000u</literal><operator>)</operator> <operator>&gt;&gt;</operator>
<literal type="number">23u</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mant</name> <init>=
<expr><name>val</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFu</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0x007e00</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x80000000u</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16u</literal> <operator>|</operator> <literal type="number">0x7C00u</literal> <operator>|</operator>
<operator>(</operator><ternary><condition><expr><name>mant</name></expr> ?</condition><then> <expr><literal type="number">1u</literal></expr> </then><else>: <expr><literal type="number">0u</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15u</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exp</name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x80000000u</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16u</literal> <operator>|</operator> <name>mant</name> <operator>&gt;&gt;</operator> <literal type="number">13u</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int8_t</name></type> <name>logical_exp</name> <init>= <expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>exp</name> <operator>-</operator> <literal type="number">127</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>logical_exp</name> <operator>==</operator> <name>exp</name> <operator>-</operator> <literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>logical_exp</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">24</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>logical_exp</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">14</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x80000000u</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16u</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">24u</literal> <operator>+</operator> <name>logical_exp</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x80000000u</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16u</literal> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><name>logical_exp</name><operator>)</operator> <operator>+</operator> <literal type="number">15u</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10u</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>mant</name> <operator>&gt;&gt;</operator> <literal type="number">13u</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>_cbor_encode_uint16</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0xE0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_single</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>_cbor_encode_uint32</name><argument_list>(
<argument>((union _cbor_float_helper){.as_float = value}).as_uint</argument>, <argument>buffer</argument>,
<argument>buffer_size</argument>, <argument><literal type="number">0xE0</literal></argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_double</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>_cbor_encode_uint64</name><argument_list>(
<argument>((union _cbor_double_helper){.as_double = value}).as_uint</argument>, <argument>buffer</argument>,
<argument>buffer_size</argument>, <argument><literal type="number">0xE0</literal></argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_break</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_byte</name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_encode_ctrl</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_encode_uint8</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0xE0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
