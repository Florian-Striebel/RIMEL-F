<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/internal/memory_utils.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/common.h"</cpp:file></cpp:include>





<function><type><name>size_t</name></type> <name>_cbor_highest_bit</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>number</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bit</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>number</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>bit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_cbor_safe_to_multiply</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>_cbor_highest_bit</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>_cbor_highest_bit</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>_cbor_alloc_multiple</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>item_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>item_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_cbor_safe_to_multiply</name><argument_list>(<argument><expr><name>item_size</name></expr></argument>, <argument><expr><name>item_count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><name>item_size</name> <operator>*</operator> <name>item_count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>_cbor_realloc_multiple</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>item_size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>item_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_cbor_safe_to_multiply</name><argument_list>(<argument><expr><name>item_size</name></expr></argument>, <argument><expr><name>item_count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_CBOR_REALLOC</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>, <argument><expr><name>item_size</name> <operator>*</operator> <name>item_count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
