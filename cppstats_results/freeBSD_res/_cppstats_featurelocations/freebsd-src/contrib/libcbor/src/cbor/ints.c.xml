<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/ints.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ints.h"</cpp:file></cpp:include>

<function><type><name>cbor_int_width</name></type> <name>cbor_int_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>int_metadata</name><operator>.</operator><name>width</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>cbor_get_uint8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>cbor_get_uint16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>cbor_get_uint32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>cbor_get_uint64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>cbor_get_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CBOR_INT_8</name></expr>:</case>
<return>return <expr><call><name>cbor_get_uint8</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_INT_16</name></expr>:</case>
<return>return <expr><call><name>cbor_get_uint16</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_INT_32</name></expr>:</case>
<return>return <expr><call><name>cbor_get_uint32</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_INT_64</name></expr>:</case>
<return>return <expr><call><name>cbor_get_uint64</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0xDEADBEEF</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_set_uint8</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_set_uint16</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_set_uint32</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_set_uint64</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_mark_uint</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CBOR_TYPE_UINT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_mark_negint</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CBOR_TYPE_NEGINT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_int8</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>int_metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>width</name> <operator>=</operator> <name>CBOR_INT_8</name></expr>}</block></expr>}</block></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_UINT</name></expr>}</block></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_int16</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>int_metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>width</name> <operator>=</operator> <name>CBOR_INT_16</name></expr>}</block></expr>}</block></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_UINT</name></expr>}</block></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_int32</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>int_metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>width</name> <operator>=</operator> <name>CBOR_INT_32</name></expr>}</block></expr>}</block></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_UINT</name></expr>}</block></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_int64</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>int_metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>width</name> <operator>=</operator> <name>CBOR_INT_64</name></expr>}</block></expr>}</block></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_UINT</name></expr>}</block></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_uint8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint8</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_uint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_uint16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int16</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint16</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_uint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_uint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint32</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_uint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_uint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint64</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_uint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_negint8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint8</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_negint16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int16</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint16</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_negint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint32</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_negint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint64</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>
</unit>
