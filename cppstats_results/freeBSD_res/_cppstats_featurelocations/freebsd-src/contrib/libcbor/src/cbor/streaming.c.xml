<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/streaming.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streaming.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/loaders.h"</cpp:file></cpp:include>

<function><type><name>bool</name> <specifier>static</specifier></type> <name>claim_bytes</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>required</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>provided</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cbor_decoder_result</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>required</name> <operator>&gt;</operator> <operator>(</operator><name>provided</name> <operator>-</operator> <name><name>result</name><operator>-&gt;</operator><name>read</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>required</name></name> <operator>=</operator> <name>required</name> <operator>+</operator> <name><name>result</name><operator>-&gt;</operator><name>read</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CBOR_DECODER_NEDATA</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>read</name></name> <operator>+=</operator> <name>required</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>required</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>cbor_decoder_result</name></name></type> <name>cbor_stream_decode</name><parameter_list>(
<parameter><decl><type><name>cbor_data</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>source_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cbor_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cbor_decoder_result</name></name></type> <name>result</name> <init>= <expr><block>{<expr><operator>.</operator><name>status</name> <operator>=</operator> <name>CBOR_DECODER_FINISHED</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>source</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>
<case>case <expr><literal type="number">0x04</literal></expr>:</case>
<case>case <expr><literal type="number">0x05</literal></expr>:</case>
<case>case <expr><literal type="number">0x06</literal></expr>:</case>
<case>case <expr><literal type="number">0x07</literal></expr>:</case>
<case>case <expr><literal type="number">0x08</literal></expr>:</case>
<case>case <expr><literal type="number">0x09</literal></expr>:</case>
<case>case <expr><literal type="number">0x0A</literal></expr>:</case>
<case>case <expr><literal type="number">0x0B</literal></expr>:</case>
<case>case <expr><literal type="number">0x0C</literal></expr>:</case>
<case>case <expr><literal type="number">0x0D</literal></expr>:</case>
<case>case <expr><literal type="number">0x0E</literal></expr>:</case>
<case>case <expr><literal type="number">0x0F</literal></expr>:</case>
<case>case <expr><literal type="number">0x10</literal></expr>:</case>
<case>case <expr><literal type="number">0x11</literal></expr>:</case>
<case>case <expr><literal type="number">0x12</literal></expr>:</case>
<case>case <expr><literal type="number">0x13</literal></expr>:</case>
<case>case <expr><literal type="number">0x14</literal></expr>:</case>
<case>case <expr><literal type="number">0x15</literal></expr>:</case>
<case>case <expr><literal type="number">0x16</literal></expr>:</case>
<case>case <expr><literal type="number">0x17</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>uint8</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x18</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>uint8</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x19</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>uint16</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint16</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x1A</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>uint32</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint32</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x1B</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>uint64</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint64</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x1C</literal></expr>:</case>
<case>case <expr><literal type="number">0x1D</literal></expr>:</case>
<case>case <expr><literal type="number">0x1E</literal></expr>:</case>
<case>case <expr><literal type="number">0x1F</literal></expr>:</case>

<block>{<block_content> <return>return <expr><operator>(</operator>struct <name>cbor_decoder_result</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><name>CBOR_DECODER_ERROR</name></expr>}</block></expr>;</return> </block_content>}</block>
<case>case <expr><literal type="number">0x20</literal></expr>:</case>
<case>case <expr><literal type="number">0x21</literal></expr>:</case>
<case>case <expr><literal type="number">0x22</literal></expr>:</case>
<case>case <expr><literal type="number">0x23</literal></expr>:</case>
<case>case <expr><literal type="number">0x24</literal></expr>:</case>
<case>case <expr><literal type="number">0x25</literal></expr>:</case>
<case>case <expr><literal type="number">0x26</literal></expr>:</case>
<case>case <expr><literal type="number">0x27</literal></expr>:</case>
<case>case <expr><literal type="number">0x28</literal></expr>:</case>
<case>case <expr><literal type="number">0x29</literal></expr>:</case>
<case>case <expr><literal type="number">0x2A</literal></expr>:</case>
<case>case <expr><literal type="number">0x2B</literal></expr>:</case>
<case>case <expr><literal type="number">0x2C</literal></expr>:</case>
<case>case <expr><literal type="number">0x2D</literal></expr>:</case>
<case>case <expr><literal type="number">0x2E</literal></expr>:</case>
<case>case <expr><literal type="number">0x2F</literal></expr>:</case>
<case>case <expr><literal type="number">0x30</literal></expr>:</case>
<case>case <expr><literal type="number">0x31</literal></expr>:</case>
<case>case <expr><literal type="number">0x32</literal></expr>:</case>
<case>case <expr><literal type="number">0x33</literal></expr>:</case>
<case>case <expr><literal type="number">0x34</literal></expr>:</case>
<case>case <expr><literal type="number">0x35</literal></expr>:</case>
<case>case <expr><literal type="number">0x36</literal></expr>:</case>
<case>case <expr><literal type="number">0x37</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>negint8</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
<argument><expr><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x38</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>negint8</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x39</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>negint16</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint16</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x3A</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>negint32</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint32</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x3B</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>negint64</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint64</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x3C</literal></expr>:</case>
<case>case <expr><literal type="number">0x3D</literal></expr>:</case>
<case>case <expr><literal type="number">0x3E</literal></expr>:</case>
<case>case <expr><literal type="number">0x3F</literal></expr>:</case>

<block>{<block_content> <return>return <expr><operator>(</operator>struct <name>cbor_decoder_result</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><name>CBOR_DECODER_ERROR</name></expr>}</block></expr>;</return> </block_content>}</block>
<case>case <expr><literal type="number">0x40</literal></expr>:</case>
<case>case <expr><literal type="number">0x41</literal></expr>:</case>
<case>case <expr><literal type="number">0x42</literal></expr>:</case>
<case>case <expr><literal type="number">0x43</literal></expr>:</case>
<case>case <expr><literal type="number">0x44</literal></expr>:</case>
<case>case <expr><literal type="number">0x45</literal></expr>:</case>
<case>case <expr><literal type="number">0x46</literal></expr>:</case>
<case>case <expr><literal type="number">0x47</literal></expr>:</case>
<case>case <expr><literal type="number">0x48</literal></expr>:</case>
<case>case <expr><literal type="number">0x49</literal></expr>:</case>
<case>case <expr><literal type="number">0x4A</literal></expr>:</case>
<case>case <expr><literal type="number">0x4B</literal></expr>:</case>
<case>case <expr><literal type="number">0x4C</literal></expr>:</case>
<case>case <expr><literal type="number">0x4D</literal></expr>:</case>
<case>case <expr><literal type="number">0x4E</literal></expr>:</case>
<case>case <expr><literal type="number">0x4F</literal></expr>:</case>
<case>case <expr><literal type="number">0x50</literal></expr>:</case>
<case>case <expr><literal type="number">0x51</literal></expr>:</case>
<case>case <expr><literal type="number">0x52</literal></expr>:</case>
<case>case <expr><literal type="number">0x53</literal></expr>:</case>
<case>case <expr><literal type="number">0x54</literal></expr>:</case>
<case>case <expr><literal type="number">0x55</literal></expr>:</case>
<case>case <expr><literal type="number">0x56</literal></expr>:</case>
<case>case <expr><literal type="number">0x57</literal></expr>:</case>

<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>=
<expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x40</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>byte_string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x58</literal></expr>:</case>


<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>byte_string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x59</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint16</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>byte_string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x5A</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint32</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>byte_string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x5B</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint64</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>byte_string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x5C</literal></expr>:</case>
<case>case <expr><literal type="number">0x5D</literal></expr>:</case>
<case>case <expr><literal type="number">0x5E</literal></expr>:</case>

<block>{<block_content> <return>return <expr><operator>(</operator>struct <name>cbor_decoder_result</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><name>CBOR_DECODER_ERROR</name></expr>}</block></expr>;</return> </block_content>}</block>
<case>case <expr><literal type="number">0x5F</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>byte_string_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x60</literal></expr>:</case>
<case>case <expr><literal type="number">0x61</literal></expr>:</case>
<case>case <expr><literal type="number">0x62</literal></expr>:</case>
<case>case <expr><literal type="number">0x63</literal></expr>:</case>
<case>case <expr><literal type="number">0x64</literal></expr>:</case>
<case>case <expr><literal type="number">0x65</literal></expr>:</case>
<case>case <expr><literal type="number">0x66</literal></expr>:</case>
<case>case <expr><literal type="number">0x67</literal></expr>:</case>
<case>case <expr><literal type="number">0x68</literal></expr>:</case>
<case>case <expr><literal type="number">0x69</literal></expr>:</case>
<case>case <expr><literal type="number">0x6A</literal></expr>:</case>
<case>case <expr><literal type="number">0x6B</literal></expr>:</case>
<case>case <expr><literal type="number">0x6C</literal></expr>:</case>
<case>case <expr><literal type="number">0x6D</literal></expr>:</case>
<case>case <expr><literal type="number">0x6E</literal></expr>:</case>
<case>case <expr><literal type="number">0x6F</literal></expr>:</case>
<case>case <expr><literal type="number">0x70</literal></expr>:</case>
<case>case <expr><literal type="number">0x71</literal></expr>:</case>
<case>case <expr><literal type="number">0x72</literal></expr>:</case>
<case>case <expr><literal type="number">0x73</literal></expr>:</case>
<case>case <expr><literal type="number">0x74</literal></expr>:</case>
<case>case <expr><literal type="number">0x75</literal></expr>:</case>
<case>case <expr><literal type="number">0x76</literal></expr>:</case>
<case>case <expr><literal type="number">0x77</literal></expr>:</case>

<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>=
<expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x60</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x78</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x79</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint16</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x7A</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint32</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x7B</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint64</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x7C</literal></expr>:</case>
<case>case <expr><literal type="number">0x7D</literal></expr>:</case>
<case>case <expr><literal type="number">0x7E</literal></expr>:</case>

<block>{<block_content> <return>return <expr><operator>(</operator>struct <name>cbor_decoder_result</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><name>CBOR_DECODER_ERROR</name></expr>}</block></expr>;</return> </block_content>}</block>
<case>case <expr><literal type="number">0x7F</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>string_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x80</literal></expr>:</case>
<case>case <expr><literal type="number">0x81</literal></expr>:</case>
<case>case <expr><literal type="number">0x82</literal></expr>:</case>
<case>case <expr><literal type="number">0x83</literal></expr>:</case>
<case>case <expr><literal type="number">0x84</literal></expr>:</case>
<case>case <expr><literal type="number">0x85</literal></expr>:</case>
<case>case <expr><literal type="number">0x86</literal></expr>:</case>
<case>case <expr><literal type="number">0x87</literal></expr>:</case>
<case>case <expr><literal type="number">0x88</literal></expr>:</case>
<case>case <expr><literal type="number">0x89</literal></expr>:</case>
<case>case <expr><literal type="number">0x8A</literal></expr>:</case>
<case>case <expr><literal type="number">0x8B</literal></expr>:</case>
<case>case <expr><literal type="number">0x8C</literal></expr>:</case>
<case>case <expr><literal type="number">0x8D</literal></expr>:</case>
<case>case <expr><literal type="number">0x8E</literal></expr>:</case>
<case>case <expr><literal type="number">0x8F</literal></expr>:</case>
<case>case <expr><literal type="number">0x90</literal></expr>:</case>
<case>case <expr><literal type="number">0x91</literal></expr>:</case>
<case>case <expr><literal type="number">0x92</literal></expr>:</case>
<case>case <expr><literal type="number">0x93</literal></expr>:</case>
<case>case <expr><literal type="number">0x94</literal></expr>:</case>
<case>case <expr><literal type="number">0x95</literal></expr>:</case>
<case>case <expr><literal type="number">0x96</literal></expr>:</case>
<case>case <expr><literal type="number">0x97</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>array_start</name></name><argument_list>(
<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x98</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>array_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x99</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>array_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint16</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x9A</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>array_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint32</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x9B</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>array_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint64</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0x9C</literal></expr>:</case>
<case>case <expr><literal type="number">0x9D</literal></expr>:</case>
<case>case <expr><literal type="number">0x9E</literal></expr>:</case>

<block>{<block_content> <return>return <expr><operator>(</operator>struct <name>cbor_decoder_result</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><name>CBOR_DECODER_ERROR</name></expr>}</block></expr>;</return> </block_content>}</block>
<case>case <expr><literal type="number">0x9F</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>indef_array_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xA0</literal></expr>:</case>
<case>case <expr><literal type="number">0xA1</literal></expr>:</case>
<case>case <expr><literal type="number">0xA2</literal></expr>:</case>
<case>case <expr><literal type="number">0xA3</literal></expr>:</case>
<case>case <expr><literal type="number">0xA4</literal></expr>:</case>
<case>case <expr><literal type="number">0xA5</literal></expr>:</case>
<case>case <expr><literal type="number">0xA6</literal></expr>:</case>
<case>case <expr><literal type="number">0xA7</literal></expr>:</case>
<case>case <expr><literal type="number">0xA8</literal></expr>:</case>
<case>case <expr><literal type="number">0xA9</literal></expr>:</case>
<case>case <expr><literal type="number">0xAA</literal></expr>:</case>
<case>case <expr><literal type="number">0xAB</literal></expr>:</case>
<case>case <expr><literal type="number">0xAC</literal></expr>:</case>
<case>case <expr><literal type="number">0xAD</literal></expr>:</case>
<case>case <expr><literal type="number">0xAE</literal></expr>:</case>
<case>case <expr><literal type="number">0xAF</literal></expr>:</case>
<case>case <expr><literal type="number">0xB0</literal></expr>:</case>
<case>case <expr><literal type="number">0xB1</literal></expr>:</case>
<case>case <expr><literal type="number">0xB2</literal></expr>:</case>
<case>case <expr><literal type="number">0xB3</literal></expr>:</case>
<case>case <expr><literal type="number">0xB4</literal></expr>:</case>
<case>case <expr><literal type="number">0xB5</literal></expr>:</case>
<case>case <expr><literal type="number">0xB6</literal></expr>:</case>
<case>case <expr><literal type="number">0xB7</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>map_start</name></name><argument_list>(
<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0xA0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xB8</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>map_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xB9</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>map_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint16</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xBA</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>map_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint32</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xBB</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>map_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>_cbor_load_uint64</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xBC</literal></expr>:</case>
<case>case <expr><literal type="number">0xBD</literal></expr>:</case>
<case>case <expr><literal type="number">0xBE</literal></expr>:</case>

<block>{<block_content> <return>return <expr><operator>(</operator>struct <name>cbor_decoder_result</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><name>CBOR_DECODER_ERROR</name></expr>}</block></expr>;</return> </block_content>}</block>
<case>case <expr><literal type="number">0xBF</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>indef_map_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xC0</literal></expr>:</case>

<case>case <expr><literal type="number">0xC1</literal></expr>:</case>

<case>case <expr><literal type="number">0xC2</literal></expr>:</case>

<case>case <expr><literal type="number">0xC3</literal></expr>:</case>

<case>case <expr><literal type="number">0xC4</literal></expr>:</case>

<case>case <expr><literal type="number">0xC5</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>tag</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
<argument><expr><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0xC0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xC6</literal></expr>:</case>
<case>case <expr><literal type="number">0xC7</literal></expr>:</case>
<case>case <expr><literal type="number">0xC8</literal></expr>:</case>
<case>case <expr><literal type="number">0xC9</literal></expr>:</case>
<case>case <expr><literal type="number">0xCA</literal></expr>:</case>
<case>case <expr><literal type="number">0xCB</literal></expr>:</case>
<case>case <expr><literal type="number">0xCC</literal></expr>:</case>
<case>case <expr><literal type="number">0xCD</literal></expr>:</case>
<case>case <expr><literal type="number">0xCE</literal></expr>:</case>
<case>case <expr><literal type="number">0xCF</literal></expr>:</case>
<case>case <expr><literal type="number">0xD0</literal></expr>:</case>
<case>case <expr><literal type="number">0xD1</literal></expr>:</case>
<case>case <expr><literal type="number">0xD2</literal></expr>:</case>
<case>case <expr><literal type="number">0xD3</literal></expr>:</case>
<case>case <expr><literal type="number">0xD4</literal></expr>:</case>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>cbor_decoder_result</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><name>CBOR_DECODER_ERROR</name></expr>}</block></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xD5</literal></expr>:</case>
<case>case <expr><literal type="number">0xD6</literal></expr>:</case>
<case>case <expr><literal type="number">0xD7</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>tag</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
<argument><expr><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0xC0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xD8</literal></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>tag</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint8</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xD9</literal></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>tag</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint16</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xDA</literal></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>tag</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint32</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xDB</literal></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>tag</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_uint64</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xDC</literal></expr>:</case>
<case>case <expr><literal type="number">0xDD</literal></expr>:</case>
<case>case <expr><literal type="number">0xDE</literal></expr>:</case>
<case>case <expr><literal type="number">0xDF</literal></expr>:</case>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>cbor_decoder_result</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><name>CBOR_DECODER_ERROR</name></expr>}</block></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xE0</literal></expr>:</case>
<case>case <expr><literal type="number">0xE1</literal></expr>:</case>
<case>case <expr><literal type="number">0xE2</literal></expr>:</case>
<case>case <expr><literal type="number">0xE3</literal></expr>:</case>
<case>case <expr><literal type="number">0xE4</literal></expr>:</case>
<case>case <expr><literal type="number">0xE5</literal></expr>:</case>
<case>case <expr><literal type="number">0xE6</literal></expr>:</case>
<case>case <expr><literal type="number">0xE7</literal></expr>:</case>
<case>case <expr><literal type="number">0xE8</literal></expr>:</case>
<case>case <expr><literal type="number">0xE9</literal></expr>:</case>
<case>case <expr><literal type="number">0xEA</literal></expr>:</case>
<case>case <expr><literal type="number">0xEB</literal></expr>:</case>
<case>case <expr><literal type="number">0xEC</literal></expr>:</case>
<case>case <expr><literal type="number">0xED</literal></expr>:</case>
<case>case <expr><literal type="number">0xEE</literal></expr>:</case>
<case>case <expr><literal type="number">0xEF</literal></expr>:</case>
<case>case <expr><literal type="number">0xF0</literal></expr>:</case>
<case>case <expr><literal type="number">0xF1</literal></expr>:</case>
<case>case <expr><literal type="number">0xF2</literal></expr>:</case>
<case>case <expr><literal type="number">0xF3</literal></expr>:</case>
<block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>cbor_decoder_result</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><name>CBOR_DECODER_ERROR</name></expr>}</block></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xF4</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>boolean</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xF5</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>boolean</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xF6</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>null</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xF7</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>undefined</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xF8</literal></expr>:</case>

<block>{<block_content> <return>return <expr><operator>(</operator>struct <name>cbor_decoder_result</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><name>CBOR_DECODER_ERROR</name></expr>}</block></expr>;</return> </block_content>}</block>
<case>case <expr><literal type="number">0xF9</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>float2</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_half</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xFA</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>float4</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_float</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xFB</literal></expr>:</case>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>claim_bytes</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>float8</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>_cbor_load_double</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">0xFC</literal></expr>:</case>
<case>case <expr><literal type="number">0xFD</literal></expr>:</case>
<case>case <expr><literal type="number">0xFE</literal></expr>:</case>

<block>{<block_content> <return>return <expr><operator>(</operator>struct <name>cbor_decoder_result</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><name>CBOR_DECODER_ERROR</name></expr>}</block></expr>;</return> </block_content>}</block>
<case>case <expr><literal type="number">0xFF</literal></expr>:</case>

<block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>indef_break</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<default>default:</default>
<block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
