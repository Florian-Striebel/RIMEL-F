<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/common.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arrays.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestrings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"floats_ctrls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ints.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"maps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tags.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>cbor_isa_uint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CBOR_TYPE_UINT</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_isa_negint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CBOR_TYPE_NEGINT</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_isa_bytestring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CBOR_TYPE_BYTESTRING</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_isa_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CBOR_TYPE_STRING</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_isa_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CBOR_TYPE_ARRAY</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_isa_map</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CBOR_TYPE_MAP</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_isa_tag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CBOR_TYPE_TAG</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_isa_float_ctrl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CBOR_TYPE_FLOAT_CTRL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_type</name></type> <name>cbor_typeof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_is_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>cbor_isa_negint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_is_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>cbor_isa_float_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>cbor_ctrl_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_CTRL_FALSE</name> <operator>||</operator>
<call><name>cbor_ctrl_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_CTRL_TRUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_is_null</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>cbor_isa_float_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cbor_ctrl_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_CTRL_NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_is_undef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>cbor_isa_float_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cbor_ctrl_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_CTRL_UNDEF</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_is_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>cbor_isa_float_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cbor_float_ctrl_is_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_incref</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_decref</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item_ref</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>*</operator><name>item_ref</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>item</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CBOR_TYPE_UINT</name></expr>:</case>

<case>case <expr><name>CBOR_TYPE_NEGINT</name></expr>:</case>

<block>{<block_content> <break>break;</break> </block_content>}</block>
<case>case <expr><name>CBOR_TYPE_BYTESTRING</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cbor_bytestring_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>cbor_bytestring_chunks_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>cbor_bytestring_chunk_count</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(
<argument><expr><operator>(</operator><operator>(</operator>struct <name>cbor_indefinite_string_data</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CBOR_TYPE_STRING</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cbor_string_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>cbor_string_chunks_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>cbor_string_chunk_count</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(
<argument><expr><operator>(</operator><operator>(</operator>struct <name>cbor_indefinite_string_data</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CBOR_TYPE_ARRAY</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>cbor_array_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>cbor_array_size</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CBOR_TYPE_MAP</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_pair</name></name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>cbor_map_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>map_metadata</name><operator>.</operator><name>end_ptr</name></name></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>handle</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block><empty_stmt>;</empty_stmt>
<case>case <expr><name>CBOR_TYPE_TAG</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>tag_metadata</name><operator>.</operator><name>tagged_item</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>tag_metadata</name><operator>.</operator><name>tagged_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CBOR_TYPE_FLOAT_CTRL</name></expr>:</case> <block>{<block_content>

<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>item_ref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_intermediate_decref</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_refcount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>item</name><operator>-&gt;</operator><name>refcount</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_move</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>
</unit>
