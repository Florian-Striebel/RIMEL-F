<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/internal/builder_callbacks.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builder_callbacks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arrays.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../bytestrings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../floats_ctrls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ints.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../maps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../tags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unicode.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>_cbor_builder_append</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CBOR_TYPE_ARRAY</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cbor_array_is_definite</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>subitems</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>subitems</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>subitems</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_cbor_stack_pop</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CBOR_TYPE_MAP</name></expr>:</case> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>subitems</name></name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_cbor_map_add_value</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>_cbor_map_add_key</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cbor_map_is_definite</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>subitems</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>subitems</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_cbor_stack_pop</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>subitems</name></name> <operator>^=</operator>
<literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CBOR_TYPE_TAG</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>subitems</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_tag_set_item</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_cbor_stack_pop</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>syntax_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_RES</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (res == NULL) { ctx-&gt;creation_failed = true; return; } } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_CTX_STACK</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>res</name></type></parameter>, <parameter><type><name>subitems</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (_cbor_stack_push(ctx-&gt;stack, res, subitems) == NULL) { cbor_decref(&amp;res); ctx-&gt;creation_failed = true; } } while (0)</cpp:value></cpp:define>







<function><type><name>void</name></type> <name>cbor_builder_uint8_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_int8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_uint</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint8</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_uint16_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_int16</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_uint</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint16</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_uint32_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_int32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_uint</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint32</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_uint64_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_int64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_uint</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_negint8_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_int8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint8</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_negint16_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_int16</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint16</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_negint32_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_int32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint32</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_negint64_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_int64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_uint64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_byte_string_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>cbor_data</name></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>new_handle</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>creation_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_handle</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_definite_bytestring</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name>new_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>creation_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cbor_bytestring_set_handle</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>new_handle</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cbor_bytestring_is_indefinite</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cbor_bytestring_add_chunk</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>syntax_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_byte_string_start_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_indefinite_bytestring</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_CTX_STACK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_string_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>cbor_data</name></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_unicode_status</name></name></type> <name>unicode_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>codepoint_count</name> <init>=
<expr><call><name>_cbor_unicode_codepoint_count</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unicode_status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>unicode_status</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>_CBOR_UNICODE_BADCP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>syntax_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>new_handle</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>creation_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_handle</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_definite_string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name>new_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>creation_failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cbor_string_set_handle</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>new_handle</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>string_metadata</name><operator>.</operator><name>codepoint_count</name></name> <operator>=</operator> <name>codepoint_count</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>cbor_isa_string</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cbor_string_is_indefinite</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cbor_string_add_chunk</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>syntax_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_string_start_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_indefinite_string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_CTX_STACK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_array_start_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_definite_array</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUSH_CTX_STACK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_indef_array_start_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_indefinite_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_CTX_STACK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_indef_map_start_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_indefinite_map</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_CTX_STACK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_map_start_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_definite_map</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUSH_CTX_STACK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>_cbor_is_indefinite</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CBOR_TYPE_BYTESTRING</name></expr>:</case>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>bytestring_metadata</name><operator>.</operator><name>type</name></name> <operator>==</operator>
<name>_CBOR_METADATA_INDEFINITE</name></expr>;</return>
<case>case <expr><name>CBOR_TYPE_STRING</name></expr>:</case>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>string_metadata</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>_CBOR_METADATA_INDEFINITE</name></expr>;</return>
<case>case <expr><name>CBOR_TYPE_ARRAY</name></expr>:</case>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>array_metadata</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>_CBOR_METADATA_INDEFINITE</name></expr>;</return>
<case>case <expr><name>CBOR_TYPE_MAP</name></expr>:</case>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>map_metadata</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>_CBOR_METADATA_INDEFINITE</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_indef_break_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_cbor_is_indefinite</name><argument_list>(
<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>


<operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>CBOR_TYPE_MAP</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>subitems</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_cbor_stack_pop</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>syntax_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_float2_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_float2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_float2</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_float4_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_float4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_float4</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_float8_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_float8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_float8</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_null_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_undefined_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_undef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_boolean_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_build_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_cbor_builder_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_builder_tag_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>cbor_new_tag</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_RES</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH_CTX_STACK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
