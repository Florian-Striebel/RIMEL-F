<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/ints.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBCBOR_INTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBCBOR_INTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/cbor_export.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<function_decl><type><name>CBOR_EXPORT</name> <name>uint8_t</name></type> <name>cbor_get_uint8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>uint16_t</name></type> <name>cbor_get_uint16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>uint32_t</name></type> <name>cbor_get_uint32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>uint64_t</name></type> <name>cbor_get_uint64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>uint64_t</name></type> <name>cbor_get_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CBOR_EXPORT</name> <name>void</name></type> <name>cbor_set_uint8</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CBOR_EXPORT</name> <name>void</name></type> <name>cbor_set_uint16</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CBOR_EXPORT</name> <name>void</name></type> <name>cbor_set_uint32</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CBOR_EXPORT</name> <name>void</name></type> <name>cbor_set_uint64</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_int_width</name></type> <name>cbor_int_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CBOR_EXPORT</name> <name>void</name></type> <name>cbor_mark_uint</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CBOR_EXPORT</name> <name>void</name></type> <name>cbor_mark_negint</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_int8</name><parameter_list>()</parameter_list>;</function_decl>








<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_int16</name><parameter_list>()</parameter_list>;</function_decl>








<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_int32</name><parameter_list>()</parameter_list>;</function_decl>








<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_int64</name><parameter_list>()</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_uint8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_uint16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_uint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_uint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_negint8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_negint16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_negint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_negint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
