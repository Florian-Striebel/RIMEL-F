<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/serialization.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"serialization.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/arrays.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/bytestrings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/floats_ctrls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/ints.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/maps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/tags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/memory_utils.h"</cpp:file></cpp:include>

<function><type><name>size_t</name></type> <name>cbor_serialize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CBOR_TYPE_UINT</name></expr>:</case>
<return>return <expr><call><name>cbor_serialize_uint</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_TYPE_NEGINT</name></expr>:</case>
<return>return <expr><call><name>cbor_serialize_negint</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_TYPE_BYTESTRING</name></expr>:</case>
<return>return <expr><call><name>cbor_serialize_bytestring</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_TYPE_STRING</name></expr>:</case>
<return>return <expr><call><name>cbor_serialize_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_TYPE_ARRAY</name></expr>:</case>
<return>return <expr><call><name>cbor_serialize_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_TYPE_MAP</name></expr>:</case>
<return>return <expr><call><name>cbor_serialize_map</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_TYPE_TAG</name></expr>:</case>
<return>return <expr><call><name>cbor_serialize_tag</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_TYPE_FLOAT_CTRL</name></expr>:</case>
<return>return <expr><call><name>cbor_serialize_float_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_serialize_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bfr_size</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bfr</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><name>bfr_size</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_bfr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bfr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>written</name></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>(</operator><name>written</name> <operator>=</operator> <call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>bfr</name></expr></argument>, <argument><expr><name>bfr_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_cbor_safe_to_multiply</name><argument_list>(<argument><expr><name>CBOR_BUFFER_GROWTH</name></expr></argument>, <argument><expr><name>bfr_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name>bfr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp_bfr</name> <operator>=</operator> <call><name>_CBOR_REALLOC</name><argument_list>(<argument><expr><name>bfr</name></expr></argument>, <argument><expr><name>bfr_size</name> <operator>*=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_bfr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name>bfr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bfr</name> <operator>=</operator> <name>tmp_bfr</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <name>bfr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buffer_size</name> <operator>=</operator> <name>bfr_size</name></expr>;</expr_stmt>
<return>return <expr><name>written</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_serialize_uint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CBOR_INT_8</name></expr>:</case>
<return>return <expr><call><name>cbor_encode_uint8</name><argument_list>(<argument><expr><call><name>cbor_get_uint8</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_INT_16</name></expr>:</case>
<return>return <expr><call><name>cbor_encode_uint16</name><argument_list>(<argument><expr><call><name>cbor_get_uint16</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_INT_32</name></expr>:</case>
<return>return <expr><call><name>cbor_encode_uint32</name><argument_list>(<argument><expr><call><name>cbor_get_uint32</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_INT_64</name></expr>:</case>
<return>return <expr><call><name>cbor_encode_uint64</name><argument_list>(<argument><expr><call><name>cbor_get_uint64</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_serialize_negint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_negint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CBOR_INT_8</name></expr>:</case>
<return>return <expr><call><name>cbor_encode_negint8</name><argument_list>(<argument><expr><call><name>cbor_get_uint8</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_INT_16</name></expr>:</case>
<return>return <expr><call><name>cbor_encode_negint16</name><argument_list>(<argument><expr><call><name>cbor_get_uint16</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_INT_32</name></expr>:</case>
<return>return <expr><call><name>cbor_encode_negint32</name><argument_list>(<argument><expr><call><name>cbor_get_uint32</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_INT_64</name></expr>:</case>
<return>return <expr><call><name>cbor_encode_negint64</name><argument_list>(<argument><expr><call><name>cbor_get_uint64</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_serialize_bytestring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cbor_bytestring_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><call><name>cbor_encode_bytestring_start</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>written</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>buffer_size</name> <operator>-</operator> <name>written</name> <operator>&gt;=</operator> <name>length</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>written</name> <operator>+</operator> <name>length</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_bytestring_is_indefinite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chunk_count</name> <init>= <expr><call><name>cbor_bytestring_chunk_count</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><call><name>cbor_encode_indef_bytestring_start</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunks</name> <init>= <expr><call><name>cbor_bytestring_chunks_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chunk_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>chunk_written</name> <init>= <expr><call><name>cbor_serialize_bytestring</name><argument_list>(
<argument><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>written</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>chunk_written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>chunk_written</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>cbor_encode_break</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>written</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>written</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_serialize_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cbor_string_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><call><name>cbor_string_length</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><call><name>cbor_encode_string_start</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>written</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>buffer_size</name> <operator>-</operator> <name>written</name> <operator>&gt;=</operator> <name>length</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><call><name>cbor_string_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>written</name> <operator>+</operator> <name>length</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_string_is_indefinite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chunk_count</name> <init>= <expr><call><name>cbor_string_chunk_count</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><call><name>cbor_encode_indef_string_start</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunks</name> <init>= <expr><call><name>cbor_string_chunks_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chunk_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>chunk_written</name> <init>= <expr><call><name>cbor_serialize_string</name><argument_list>(<argument><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>,
<argument><expr><name>buffer_size</name> <operator>-</operator> <name>written</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>chunk_written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>chunk_written</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>cbor_encode_break</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>written</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>written</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_serialize_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>cbor_array_size</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>cbor_array_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cbor_array_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>cbor_encode_array_start</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_array_is_indefinite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>cbor_encode_indef_array_start</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>item_written</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>item_written</name> <operator>=</operator>
<call><name>cbor_serialize</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>handle</name><operator>++</operator><operator>)</operator></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item_written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>item_written</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>cbor_array_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>written</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_array_is_indefinite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item_written</name> <operator>=</operator> <call><name>cbor_encode_break</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item_written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>written</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_serialize_map</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_map</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>cbor_map_size</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_pair</name></name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>cbor_map_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cbor_map_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>cbor_encode_map_start</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_map_is_indefinite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>cbor_encode_indef_map_start</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>item_written</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>item_written</name> <operator>=</operator>
<call><name>cbor_serialize</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item_written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>item_written</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>item_written</name> <operator>=</operator> <call><name>cbor_serialize</name><argument_list>(<argument><expr><operator>(</operator><name>handle</name><operator>++</operator><operator>)</operator><operator>-&gt;</operator><name>value</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>,
<argument><expr><name>buffer_size</name> <operator>-</operator> <name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item_written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>item_written</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>cbor_map_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>written</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_map_is_indefinite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item_written</name> <operator>=</operator> <call><name>cbor_encode_break</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item_written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>written</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_serialize_tag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_tag</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><call><name>cbor_encode_tag</name><argument_list>(<argument><expr><call><name>cbor_tag_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>item_written</name> <init>= <expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_tag_item</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>buffer</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>written</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item_written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>written</name> <operator>+</operator> <name>item_written</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_serialize_float_ctrl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_float_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>cbor_float_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CBOR_FLOAT_0</name></expr>:</case>

<return>return <expr><call><name>cbor_encode_ctrl</name><argument_list>(<argument><expr><call><name>cbor_ctrl_value</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_FLOAT_16</name></expr>:</case>
<return>return <expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><call><name>cbor_float_get_float2</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_FLOAT_32</name></expr>:</case>
<return>return <expr><call><name>cbor_encode_single</name><argument_list>(<argument><expr><call><name>cbor_float_get_float4</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>,
<argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_FLOAT_64</name></expr>:</case>
<return>return <expr><call><name>cbor_encode_double</name><argument_list>(<argument><expr><call><name>cbor_float_get_float8</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>,
<argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
