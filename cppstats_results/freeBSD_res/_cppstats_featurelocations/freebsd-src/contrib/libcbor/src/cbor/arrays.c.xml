<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/arrays.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arrays.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/memory_utils.h"</cpp:file></cpp:include>

<function><type><name>size_t</name></type> <name>cbor_array_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>array_metadata</name><operator>.</operator><name>end_ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_array_allocated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>array_metadata</name><operator>.</operator><name>allocated</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_array_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>cbor_incref</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>cbor_item_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>index</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_array_set</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>array_metadata</name><operator>.</operator><name>end_ptr</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>array_metadata</name><operator>.</operator><name>end_ptr</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>cbor_array_replace</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_array_replace</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>array_metadata</name><operator>.</operator><name>end_ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cbor_intermediate_decref</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>cbor_item_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>index</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>cbor_item_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>index</name></expr>]</index> <operator>=</operator> <call><name>cbor_incref</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_array_push</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>pushee</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_array</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_array_metadata</name></name> <modifier>*</modifier></type><name>metadata</name> <init>=
<expr><operator>(</operator>struct <name>_cbor_array_metadata</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>metadata</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>cbor_item_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>array</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cbor_array_is_definite</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>end_ptr</name></name> <operator>&gt;=</operator> <name><name>metadata</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name><name>metadata</name><operator>-&gt;</operator><name>end_ptr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pushee</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>end_ptr</name></name> <operator>&gt;=</operator> <name><name>metadata</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_cbor_safe_to_multiply</name><argument_list>(<argument><expr><name>CBOR_BUFFER_GROWTH</name></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>allocated</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_allocation</name> <init>= <expr><ternary><condition><expr><name><name>metadata</name><operator>-&gt;</operator><name>allocated</name></name> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><literal type="number">1</literal></expr>
</then><else>: <expr><name>CBOR_BUFFER_GROWTH</name> <operator>*</operator> <name><name>metadata</name><operator>-&gt;</operator><name>allocated</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>new_data</name> <init>= <expr><call><name>_cbor_realloc_multiple</name><argument_list>(
<argument><expr><name><name>array</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>new_allocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>new_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>metadata</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>new_allocation</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>cbor_item_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>array</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name><name>metadata</name><operator>-&gt;</operator><name>end_ptr</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>pushee</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>cbor_incref</name><argument_list>(<argument><expr><name>pushee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_array_is_definite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>array_metadata</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>_CBOR_METADATA_DEFINITE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_array_is_indefinite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>array_metadata</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>_CBOR_METADATA_INDEFINITE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>cbor_array_handle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>cbor_item_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_definite_array</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>_cbor_alloc_multiple</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_DEPENDENT_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_ARRAY</name></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>array_metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>_CBOR_METADATA_DEFINITE</name></expr>,
<expr><operator>.</operator><name>allocated</name> <operator>=</operator> <name>size</name></expr>,
<expr><operator>.</operator><name>end_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>}</block></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>}</block></expr>;</expr_stmt>

<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_indefinite_array</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_ARRAY</name></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>array_metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>_CBOR_METADATA_INDEFINITE</name></expr>,
<expr><operator>.</operator><name>allocated</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>end_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>}</block></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>
}</block></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>
</unit>
