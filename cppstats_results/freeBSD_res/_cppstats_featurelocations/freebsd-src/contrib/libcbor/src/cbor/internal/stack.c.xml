<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/internal/stack.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stack.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>_cbor_stack</name></name></type> <name>_cbor_stack_init</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator>struct <name>_cbor_stack</name><operator>)</operator><block>{<expr><operator>.</operator><name>top</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_cbor_stack_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_cbor_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_stack_record</name></name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>lower</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>_cbor_stack_record</name></name> <modifier>*</modifier></type><name>_cbor_stack_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_cbor_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,
<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>subitems</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>CBOR_MAX_STACK_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_stack_record</name></name> <modifier>*</modifier></type><name>new_top</name> <init>=
<expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_cbor_stack_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new_top</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>new_top</name> <operator>=</operator> <operator>(</operator>struct <name>_cbor_stack_record</name><operator>)</operator><block>{<expr><name><name>stack</name><operator>-&gt;</operator><name>top</name></name></expr>, <expr><name>item</name></expr>, <expr><name>subitems</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>new_top</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>new_top</name></expr>;</return>
</block_content>}</block></function>
</unit>
