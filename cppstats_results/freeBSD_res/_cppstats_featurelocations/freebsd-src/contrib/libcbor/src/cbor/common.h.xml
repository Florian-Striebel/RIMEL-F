<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/common.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBCBOR_COMMON_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBCBOR_COMMON_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/cbor_export.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/configuration.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"data.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_RESTRICT_POINTER</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_RESTRICT_POINTER</name></cpp:macro> <cpp:value>CBOR_RESTRICT_SPECIFIER</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name>cbor_major_version</name> <init>= <expr><name>CBOR_MAJOR_VERSION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name>cbor_minor_version</name> <init>= <expr><name>CBOR_MINOR_VERSION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name>cbor_patch_version</name> <init>= <expr><name>CBOR_PATCH_VERSION</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_VERSION</name></cpp:macro> <cpp:value>TO_STR(CBOR_MAJOR_VERSION) "." TO_STR(CBOR_MINOR_VERSION) "." TO_STR(CBOR_PATCH_VERSION)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOR_HEX_VERSION</name></cpp:macro> <cpp:value>((CBOR_MAJOR_VERSION &lt;&lt; 16) | (CBOR_MINOR_VERSION &lt;&lt; 8) | CBOR_PATCH_VERSION)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_print</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (DEBUG) fprintf(stderr, "%s:%d:%s(): " fmt, __FILE__, __LINE__, __func__, __VA_ARGS__); } while (0)</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_print</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_STR_</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TO_STR_(x)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CBOR_NOTNULL</name><parameter_list>(<parameter><type><name>cbor_item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (cbor_item == NULL) { return NULL; } } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CBOR_DEPENDENT_NOTNULL</name><parameter_list>(<parameter><type><name>cbor_item</name></type></parameter>, <parameter><type><name>pointer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (pointer == NULL) { _CBOR_FREE(cbor_item); return NULL; } } while (0)</cpp:value></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CBOR_CUSTOM_ALLOC</name></expr></cpp:if>

<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>_cbor_malloc_t</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>_cbor_realloc_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>_cbor_free_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>CBOR_EXPORT</name> <specifier>extern</specifier> <name>_cbor_malloc_t</name></type> <name>_cbor_malloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CBOR_EXPORT</name> <specifier>extern</specifier> <name>_cbor_realloc_t</name></type> <name>_cbor_realloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CBOR_EXPORT</name> <specifier>extern</specifier> <name>_cbor_free_t</name></type> <name>_cbor_free</name></decl>;</decl_stmt>




















<function_decl><type><name>CBOR_EXPORT</name> <name>void</name></type> <name>cbor_set_allocs</name><parameter_list>(<parameter><decl><type><name>_cbor_malloc_t</name></type> <name>custom_malloc</name></decl></parameter>,
<parameter><decl><type><name>_cbor_realloc_t</name></type> <name>custom_realloc</name></decl></parameter>,
<parameter><decl><type><name>_cbor_free_t</name></type> <name>custom_free</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CBOR_MALLOC</name></cpp:macro> <cpp:value>_cbor_malloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CBOR_REALLOC</name></cpp:macro> <cpp:value>_cbor_realloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CBOR_FREE</name></cpp:macro> <cpp:value>_cbor_free</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CBOR_MALLOC</name></cpp:macro> <cpp:value>malloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CBOR_REALLOC</name></cpp:macro> <cpp:value>realloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CBOR_FREE</name></cpp:macro> <cpp:value>free</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_type</name></type> <name>cbor_typeof</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_isa_uint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_isa_negint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_isa_bytestring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_isa_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_isa_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_isa_map</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_isa_tag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_isa_float_ctrl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_is_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_is_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_is_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_is_null</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>CBOR_EXPORT</name> <name>bool</name></type> <name>cbor_is_undef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_incref</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CBOR_EXPORT</name> <name>void</name></type> <name>cbor_decref</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CBOR_EXPORT</name> <name>void</name></type> <name>cbor_intermediate_decref</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>CBOR_EXPORT</name> <name>size_t</name></type> <name>cbor_refcount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>CBOR_EXPORT</name> <name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_move</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
