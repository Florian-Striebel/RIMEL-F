<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/internal/loaders.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"loaders.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>uint8_t</name></type> <name>_cbor_load_uint8</name><parameter_list>(<parameter><decl><type><name>cbor_data</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>source</name></expr>;</return> </block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>_cbor_load_uint16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IS_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>_cbor_load_uint32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IS_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0x18</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>_cbor_load_uint64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IS_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0x38</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0x28</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0x18</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>source</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>float</name></type> <name>_cbor_decode_half</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>halfp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>half</name> <init>= <expr><operator>(</operator><name><name>halfp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>halfp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exp</name> <init>= <expr><operator>(</operator><name>half</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mant</name> <init>= <expr><name>half</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ldexp</name><argument_list>(<argument><expr><name>mant</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>exp</name> <operator>!=</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ldexp</name><argument_list>(<argument><expr><name>mant</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>exp</name> <operator>-</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><name>mant</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>INFINITY</name></expr> </then><else>: <expr><name>NAN</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>half</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr> ?</condition><then> <expr><operator>-</operator><name>val</name></expr> </then><else>: <expr><name>val</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>_cbor_load_half</name><parameter_list>(<parameter><decl><type><name>cbor_data</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>_cbor_decode_half</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>_cbor_load_float</name><parameter_list>(<parameter><decl><type><name>cbor_data</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>_cbor_float_helper</name></name></type> <name>helper</name> <init>= <expr><block>{<expr><operator>.</operator><name>as_uint</name> <operator>=</operator> <macro><name>_cbor_load_uint32</name><argument_list>(<argument>source</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>helper</name><operator>.</operator><name>as_float</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>_cbor_load_double</name><parameter_list>(<parameter><decl><type><name>cbor_data</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>_cbor_double_helper</name></name></type> <name>helper</name> <init>= <expr><block>{<expr><operator>.</operator><name>as_uint</name> <operator>=</operator> <macro><name>_cbor_load_uint64</name><argument_list>(<argument>source</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>helper</name><operator>.</operator><name>as_double</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
