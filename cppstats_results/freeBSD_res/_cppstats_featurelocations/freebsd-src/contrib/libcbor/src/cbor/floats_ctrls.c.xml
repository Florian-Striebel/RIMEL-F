<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/floats_ctrls.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"floats_ctrls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assert.h"</cpp:file></cpp:include>

<function><type><name>cbor_float_width</name></type> <name>cbor_float_get_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_float_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>float_ctrl_metadata</name><operator>.</operator><name>width</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>cbor_ctrl_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_float_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_float_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_FLOAT_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>float_ctrl_metadata</name><operator>.</operator><name>ctrl</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_float_ctrl_is_ctrl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_float_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>cbor_float_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_FLOAT_0</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>cbor_float_get_float2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_float</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_float_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_FLOAT_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>cbor_float_get_float4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_float</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_float_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_FLOAT_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>cbor_float_get_float8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_float</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_float_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_FLOAT_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>cbor_float_get_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_float</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>cbor_float_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CBOR_FLOAT_0</name></expr>:</case>
<return>return <expr><name>NAN</name></expr>;</return>
<case>case <expr><name>CBOR_FLOAT_16</name></expr>:</case>
<return>return <expr><call><name>cbor_float_get_float2</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_FLOAT_32</name></expr>:</case>
<return>return <expr><call><name>cbor_float_get_float4</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CBOR_FLOAT_64</name></expr>:</case>
<return>return <expr><call><name>cbor_float_get_float8</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NAN</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_get_bool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_bool</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>float_ctrl_metadata</name><operator>.</operator><name>ctrl</name></name> <operator>==</operator> <name>CBOR_CTRL_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_set_float2</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_float</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_float_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_FLOAT_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_set_float4</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_float</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_float_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_FLOAT_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_set_float8</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_float</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_float_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_FLOAT_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_set_ctrl</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_float_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_float_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_FLOAT_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>float_ctrl_metadata</name><operator>.</operator><name>ctrl</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_set_bool</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_is_bool</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>float_ctrl_metadata</name><operator>.</operator><name>ctrl</name></name> <operator>=</operator>
<ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>CBOR_CTRL_TRUE</name></expr> </then><else>: <expr><name>CBOR_CTRL_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_ctrl</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_FLOAT_CTRL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>float_ctrl_metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>width</name> <operator>=</operator> <name>CBOR_FLOAT_0</name></expr>,
<expr><operator>.</operator><name>ctrl</name> <operator>=</operator> <name>CBOR_CTRL_NONE</name></expr>}</block></expr>}</block></expr>}</block></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_float2</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_FLOAT_CTRL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>float_ctrl_metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>width</name> <operator>=</operator> <name>CBOR_FLOAT_16</name></expr>}</block></expr>}</block></expr>}</block></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_float4</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_FLOAT_CTRL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>float_ctrl_metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>width</name> <operator>=</operator> <name>CBOR_FLOAT_32</name></expr>}</block></expr>}</block></expr>}</block></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_float8</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_FLOAT_CTRL</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>float_ctrl_metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>width</name> <operator>=</operator> <name>CBOR_FLOAT_64</name></expr>}</block></expr>}</block></expr>}</block></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_null</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_ctrl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>CBOR_CTRL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_undef</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_ctrl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>CBOR_CTRL_UNDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_bool</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>cbor_build_ctrl</name><argument_list>(<argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>CBOR_CTRL_TRUE</name></expr> </then><else>: <expr><name>CBOR_CTRL_FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_float2</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_float2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_float2</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_float4</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_float4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_float4</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_float8</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_float8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_float8</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_ctrl</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_ctrl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_set_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>
</unit>
