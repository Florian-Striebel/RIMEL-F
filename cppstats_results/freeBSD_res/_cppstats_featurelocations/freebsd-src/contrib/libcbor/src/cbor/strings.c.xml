<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/src/cbor/strings.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/memory_utils.h"</cpp:file></cpp:include>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_definite_string</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_STRING</name></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>string_metadata</name> <operator>=</operator> <block>{<expr><name>_CBOR_METADATA_DEFINITE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_new_indefinite_string</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>cbor_item_t</name><operator>)</operator><block>{
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CBOR_TYPE_STRING</name></expr>,
<expr><operator>.</operator><name>metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>string_metadata</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>_CBOR_METADATA_INDEFINITE</name></expr>,
<expr><operator>.</operator><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>}</block></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <macro><name>_CBOR_MALLOC</name><argument_list>(<argument>sizeof(struct cbor_indefinite_string_data)</argument>)</argument_list></macro></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_CBOR_DEPENDENT_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator>struct <name>cbor_indefinite_string_data</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>=</operator>
<operator>(</operator>struct <name>cbor_indefinite_string_data</name><operator>)</operator><block>{
<expr><operator>.</operator><name>chunk_count</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>chunk_capacity</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>chunks</name> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_definite_string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_DEPENDENT_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_string_set_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor_build_stringn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_definite_string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>_CBOR_MALLOC</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_CBOR_DEPENDENT_NOTNULL</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_string_set_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cbor_string_set_handle</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
<parameter><decl><type><name>cbor_mutable_data</name> <name>CBOR_RESTRICT_POINTER</name></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_string_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>string_metadata</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>cbor_string_chunks_handle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_string_is_indefinite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator>struct <name>cbor_indefinite_string_data</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>chunks</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_string_chunk_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_string_is_indefinite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator>struct <name>cbor_indefinite_string_data</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>chunk_count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_string_add_chunk</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_string_is_indefinite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_indefinite_string_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=
<expr><operator>(</operator>struct <name>cbor_indefinite_string_data</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>chunk_count</name></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>chunk_capacity</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_cbor_safe_to_multiply</name><argument_list>(<argument><expr><name>CBOR_BUFFER_GROWTH</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>chunk_capacity</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_chunk_capacity</name> <init>=
<expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>chunk_capacity</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr>
</then><else>: <expr><name>CBOR_BUFFER_GROWTH</name> <operator>*</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>chunk_capacity</name></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_chunks_data</name> <init>= <expr><call><name>_cbor_realloc_multiple</name><argument_list>(
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>new_chunk_capacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_chunks_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>chunk_capacity</name></name> <operator>=</operator> <name>new_chunk_capacity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>chunks</name></name> <operator>=</operator> <name>new_chunks_data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>chunks</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>chunk_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>cbor_incref</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_string_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>string_metadata</name><operator>.</operator><name>length</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cbor_string_handle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cbor_string_codepoint_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>string_metadata</name><operator>.</operator><name>codepoint_count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_string_is_definite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>string_metadata</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>_CBOR_METADATA_DEFINITE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>cbor_string_is_indefinite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>!</operator><call><name>cbor_string_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
