<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/examples/cjson2cbor.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cjson/cJSON.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/internal/builder_callbacks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor/internal/loaders.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cbor_load_callback_t</name>)<parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cbor_callbacks</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cjson_cbor_load</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><name>cbor_load_callback_t</name></type> <name>cbor_load_callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>cbor_callbacks</name></name></type> <name>callbacks</name> <init>= <expr><block>{
<expr><operator>.</operator><name>uint64</name> <operator>=</operator> <operator>&amp;</operator><name>cbor_builder_uint64_callback</name></expr>,
<expr><operator>.</operator><name>negint64</name> <operator>=</operator> <operator>&amp;</operator><name>cbor_builder_negint64_callback</name></expr>,
<expr><operator>.</operator><name>string</name> <operator>=</operator> <operator>&amp;</operator><name>cbor_builder_string_callback</name></expr>,
<expr><operator>.</operator><name>array_start</name> <operator>=</operator> <operator>&amp;</operator><name>cbor_builder_array_start_callback</name></expr>,
<expr><operator>.</operator><name>map_start</name> <operator>=</operator> <operator>&amp;</operator><name>cbor_builder_map_start_callback</name></expr>,
<expr><operator>.</operator><name>null</name> <operator>=</operator> <operator>&amp;</operator><name>cbor_builder_null_callback</name></expr>,
<expr><operator>.</operator><name>boolean</name> <operator>=</operator> <operator>&amp;</operator><name>cbor_builder_boolean_callback</name></expr>,
<expr><operator>.</operator><name>float4</name> <operator>=</operator> <operator>&amp;</operator><name>cbor_builder_float4_callback</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_stack</name></name></type> <name>stack</name> <init>= <expr><call><name>_cbor_stack_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>_cbor_decoder_context</name></name></type> <name>context</name> <init>= <expr><operator>(</operator>struct <name>_cbor_decoder_context</name><operator>)</operator><block>{
<expr><operator>.</operator><name>stack</name> <operator>=</operator> <operator>&amp;</operator><name>stack</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cbor_load_callback</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callbacks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>context</name><operator>.</operator><name>root</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cjson_cbor_stream_decode</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cbor_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>cJSON_False</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>boolean</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>
<case>case <expr><name>cJSON_True</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>boolean</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>
<case>case <expr><name>cJSON_NULL</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>null</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>
<case>case <expr><name>cJSON_Number</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>-</operator> <name><name>source</name><operator>-&gt;</operator><name>valueint</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>DBL_EPSILON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>float4</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>valueint</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>uint64</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>valueint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>negint64</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>source</name><operator>-&gt;</operator><name>valueint</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block>
<case>case <expr><name>cJSON_String</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>source</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block>
<case>case <expr><name>cJSON_Array</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>array_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cjson_cbor_stream_decode</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return;</return>
</block_content>}</block>
<case>case <expr><name>cJSON_Object</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>map_start</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>source</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>string</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cjson_cbor_stream_decode</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return;</return>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>usage</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: cjson [input JSON file]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>json_buffer</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>json_buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json_buffer</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>json_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>cbor</name> <init>= <expr><call><name>cjson_cbor_load</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>cjson_cbor_stream_decode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name></decl>,
<decl><type ref="prev"/><name>cbor_length</name> <init>= <expr><call><name>cbor_serialize_alloc</name><argument_list>(<argument><expr><name>cbor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cbor_length</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cbor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
