<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/examples/sort.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>






<function><type><name>int</name></type> <name>comparUint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>av</name> <init>= <expr><call><name>cbor_get_uint8</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>cbor_item_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><type ref="prev"/><name>bv</name> <init>= <expr><call><name>cbor_get_uint8</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>cbor_item_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>av</name> <operator>&lt;</operator> <name>bv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>av</name> <operator>==</operator> <name>bv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>cbor_new_definite_array</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><call><name>cbor_array_handle</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cbor_array_size</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_item_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>comparUint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cbor_describe</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
