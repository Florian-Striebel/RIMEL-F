<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/type_6_test.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assertions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_load_result</name></name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>embedded_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_refcounting</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>embedded_tag_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_refcount</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_tag_item</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_refcount</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_refcount</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>test_embedded_tag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>embedded_tag_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_tag_value</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_uint8</name><argument_list>(<argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_tag_item</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>int8_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>test_int8_tag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>int8_tag_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_tag_value</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_uint8</name><argument_list>(<argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_tag_item</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>int16_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>test_int16_tag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>int16_tag_data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_tag_value</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_uint8</name><argument_list>(<argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_tag_item</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>int32_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>test_int32_tag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>int32_tag_data</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_tag_value</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4278190080ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_uint8</name><argument_list>(<argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_tag_item</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>int64_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>test_int64_tag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>int64_tag_data</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_tag_value</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">18374686479671623680ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_uint8</name><argument_list>(<argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_tag_item</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nested_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x2A</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>test_nested_tag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>nested_tag_data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_tag_value</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>nested_tag</name> <init>= <expr><call><name>cbor_tag_item</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>nested_tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_tag_value</name><argument_list>(<argument><expr><name>nested_tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_uint8</name><argument_list>(<argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_tag_item</name><argument_list>(<argument><expr><name>nested_tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nested_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>nested_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CMUnitTest</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_refcounting</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_embedded_tag</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_int8_tag</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_int16_tag</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_int32_tag</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_int64_tag</name></expr></argument>)</argument_list></call></expr>,
<macro><name>cmocka_unit_test</name><argument_list>(<argument>test_nested_tag</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cmocka_run_group_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
