<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/type_7_encoders_test.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_bools</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cbor_encode_bool</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF4</literal>})</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cbor_encode_bool</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF5</literal>})</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_null</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cbor_encode_null</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF6</literal>})</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_undef</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cbor_encode_undef</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF7</literal>})</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_break</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cbor_encode_break</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xFF</literal>})</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_half</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><literal type="number">1.5f</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x3E</literal>, <literal type="number">0x00</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x80</literal>, <literal type="number">0x00</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x00</literal>, <literal type="number">0x00</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><literal type="number">65504.0f</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x7B</literal>, <literal type="number">0xFF</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><literal type="number">0.00006103515625f</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x04</literal>, <literal type="number">0x00</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4.0f</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0xC4</literal>, <literal type="number">0x00</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><literal type="number">5.960464477539063e-8f</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x00</literal>, <literal type="number">0x01</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><literal type="number">5.960464477539062e-8f</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x00</literal>, <literal type="number">0x01</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><literal type="number">1e-25f</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x00</literal>, <literal type="number">0x00</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><literal type="number">1.1920928955078125e-7</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x00</literal>, <literal type="number">0x02</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.1920928955078124e-7</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x80</literal>, <literal type="number">0x02</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x7C</literal>, <literal type="number">0x00</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_half_special</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_half</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x7E</literal>, <literal type="number">0x00</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_float</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>cbor_encode_single</name><argument_list>(<argument><expr><literal type="number">3.4028234663852886e+38</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xFA</literal>, <literal type="number">0x7F</literal>, <literal type="number">0x7F</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>})</argument>,
<argument><literal type="number">5</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_double</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><call><name>cbor_encode_double</name><argument_list>(<argument><expr><literal type="number">1.0e+300</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(
<argument>buffer</argument>,
<argument>((unsigned char[]){<literal type="number">0xFB</literal>, <literal type="number">0x7E</literal>, <literal type="number">0x37</literal>, <literal type="number">0xE4</literal>, <literal type="number">0x3C</literal>, <literal type="number">0x88</literal>, <literal type="number">0x00</literal>, <literal type="number">0x75</literal>, <literal type="number">0x9C</literal>})</argument>,
<argument><literal type="number">9</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CMUnitTest</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_bools</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_null</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_undef</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_break</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_half</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_float</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_double</name></expr></argument>)</argument_list></call></expr>, <macro><name>cmocka_unit_test</name><argument_list>(<argument>test_half_special</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cmocka_run_group_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
