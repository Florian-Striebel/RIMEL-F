<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/bad_inputs_test.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_load_result</name></name></type> <name>res</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x85</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>CBOR_ERR_NOTENOUGHDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x9D</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>CBOR_ERR_MALFORMATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data3</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xD6</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_3</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>CBOR_ERR_NOTENOUGHDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SANE_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data4</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xA8</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_4</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data4</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>CBOR_ERR_MEMERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data5</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x29</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_5</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>CBOR_ERR_MEMERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data6</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x40</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_6</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data6</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>CBOR_ERR_SYNTAXERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EIGHT_BYTE_SIZE_T</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data7</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_7</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data7</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>CBOR_ERR_MEMERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data8</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x65</literal></expr>,
<expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x69</literal></expr>,
<expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x6C</literal></expr>,
<expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xF6</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data8</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>CBOR_ERR_SYNTAXERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data9</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x04</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_9</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data9</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>CBOR_ERR_SYNTAXERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CMUnitTest</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_1</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_3</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SANE_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_4</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_5</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_6</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EIGHT_BYTE_SIZE_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_7</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_9</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cmocka_run_group_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
