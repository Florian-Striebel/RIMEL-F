<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/assertions.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASSERTIONS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERTIONS_H_</name></cpp:macro></cpp:define>

<function_decl><type><name>void</name></type> <name>assert_uint8</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>assert_uint16</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>assert_uint32</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>assert_uint64</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>assert_decoder_result</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>read</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cbor_decoder_status</name></name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cbor_decoder_result</name></name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>assert_decoder_result_nedata</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>required</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cbor_decoder_result</name></name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>assert_minimum_input_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>cbor_data</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
