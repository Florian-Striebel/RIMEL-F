<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/callbacks_test.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3A</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0xE8</literal></expr>,
<expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xF9</literal></expr>,
<expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x3C</literal></expr>,
<expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xF5</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>test_default_callbacks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>read</name> <operator>&lt;</operator> <literal type="number">79</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_decoder_result</name></name></type> <name>result</name> <init>=
<expr><call><name>cbor_stream_decode</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>read</name></expr></argument>, <argument><expr><literal type="number">79</literal> <operator>-</operator> <name>read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbor_empty_callbacks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>read</name> <operator>+=</operator> <name><name>result</name><operator>.</operator><name>read</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CMUnitTest</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<macro><name>cmocka_unit_test</name><argument_list>(<argument>test_default_callbacks</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cmocka_run_group_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
