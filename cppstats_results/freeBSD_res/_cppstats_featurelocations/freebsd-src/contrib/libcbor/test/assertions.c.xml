<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/assertions.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assertions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_expectations.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>assert_uint8</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_get_uint8</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_uint16</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_get_uint16</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_uint32</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_get_uint32</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_uint64</name><parameter_list>(<parameter><decl><type><name>cbor_item_t</name><modifier>*</modifier></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_get_uint64</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_decoder_result</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>read</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cbor_decoder_status</name></name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cbor_decoder_result</name></name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>read</name> <operator>==</operator> <name><name>result</name><operator>.</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name><name>result</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <name><name>result</name><operator>.</operator><name>required</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_decoder_result_nedata</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>required</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>cbor_decoder_result</name></name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <name><name>result</name><operator>.</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>CBOR_DECODER_NEDATA</name> <operator>==</operator> <name><name>result</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>required</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>result</name><operator>.</operator><name>required</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_minimum_input_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>cbor_data</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>available</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>available</name> <operator>&lt;</operator> <name>expected</name></expr>;</condition> <incr><expr><name>available</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert_decoder_result_nedata</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
