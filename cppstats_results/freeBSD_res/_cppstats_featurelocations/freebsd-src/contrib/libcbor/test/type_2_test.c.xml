<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/type_2_test.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_load_result</name></name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xA1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data3</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data4</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
<expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>,
<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>,
<expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x2D</literal></expr>,
<expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
<expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x45</literal></expr>,
<expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>,
<expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x5D</literal></expr>,
<expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x69</literal></expr>,
<expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x75</literal></expr>,
<expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x81</literal></expr>,
<expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x8D</literal></expr>,
<expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x99</literal></expr>,
<expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xA5</literal></expr>,
<expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xB1</literal></expr>,
<expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xBD</literal></expr>,
<expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xC9</literal></expr>,
<expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xD5</literal></expr>,
<expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE1</literal></expr>,
<expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xED</literal></expr>,
<expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xF9</literal></expr>,
<expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data5</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x20</literal></expr>,
<expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x2C</literal></expr>,
<expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
<expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>,
<expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x50</literal></expr>,
<expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x5C</literal></expr>,
<expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x68</literal></expr>,
<expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>,
<expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x8C</literal></expr>,
<expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x98</literal></expr>,
<expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xA4</literal></expr>,
<expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xB0</literal></expr>,
<expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xBC</literal></expr>,
<expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xC8</literal></expr>,
<expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD4</literal></expr>,
<expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>,
<expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xEC</literal></expr>,
<expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xF8</literal></expr>,
<expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data6</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>,
<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>,
<expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2A</literal></expr>,
<expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x36</literal></expr>,
<expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x42</literal></expr>,
<expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x4E</literal></expr>,
<expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5A</literal></expr>,
<expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x66</literal></expr>,
<expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
<expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x7E</literal></expr>,
<expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8A</literal></expr>,
<expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x96</literal></expr>,
<expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xA2</literal></expr>,
<expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xAE</literal></expr>,
<expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xBA</literal></expr>,
<expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xC6</literal></expr>,
<expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xD2</literal></expr>,
<expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDE</literal></expr>,
<expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xEA</literal></expr>,
<expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xF6</literal></expr>,
<expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data7</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>,
<expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>,
<expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
<expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr>,
<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x3E</literal></expr>,
<expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x4A</literal></expr>,
<expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x56</literal></expr>,
<expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
<expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x6E</literal></expr>,
<expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7A</literal></expr>,
<expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
<expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x92</literal></expr>,
<expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x9E</literal></expr>,
<expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xAA</literal></expr>,
<expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xB6</literal></expr>,
<expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xC2</literal></expr>,
<expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xCE</literal></expr>,
<expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xDA</literal></expr>,
<expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xE6</literal></expr>,
<expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF2</literal></expr>,
<expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xFE</literal></expr>,
<expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data8</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
<expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>,
<expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x3D</literal></expr>,
<expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x49</literal></expr>,
<expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x55</literal></expr>,
<expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x61</literal></expr>,
<expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x6D</literal></expr>,
<expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x79</literal></expr>,
<expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x85</literal></expr>,
<expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x91</literal></expr>,
<expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x9D</literal></expr>,
<expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xA9</literal></expr>,
<expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB5</literal></expr>,
<expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC1</literal></expr>,
<expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xCD</literal></expr>,
<expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xD9</literal></expr>,
<expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xE5</literal></expr>,
<expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xF1</literal></expr>,
<expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xFD</literal></expr>,
<expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_empty_bs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_non_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_BYTESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_embedded_bs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_non_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_BYTESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xA1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_notenough_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>CBOR_ERR_NOTENOUGHDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_short_bs1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_non_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_BYTESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xA1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data3</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_short_bs2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data4</name></expr></argument>, <argument><expr><literal type="number">259</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_non_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_BYTESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">257</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data4</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_half_bs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data5</name></expr></argument>, <argument><expr><literal type="number">259</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_non_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_BYTESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">258</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data5</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_int_bs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data6</name></expr></argument>, <argument><expr><literal type="number">261</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_non_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_BYTESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">260</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data6</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_long_bs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data7</name></expr></argument>, <argument><expr><literal type="number">265</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_non_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_BYTESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">264</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data7</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data9</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_zero_indef</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data9</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_non_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_BYTESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_is_indefinite</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunk_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data10</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>void</name></type> <name>test_short_indef</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data10</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_non_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_BYTESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_is_indefinite</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunk_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunks_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunks_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator>
<literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunks_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator>
<literal type="number">0xA1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data11</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>void</name></type> <name>test_two_indef</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data11</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_non_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cbor_refcount</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_BYTESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_is_indefinite</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunk_count</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunks_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunks_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator>
<literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunks_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator>
<literal type="number">0xA1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunks_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunks_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator>
<literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><operator>*</operator><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunks_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator>
<literal type="number">0xA2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data12</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>void</name></type> <name>test_missing_indef</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data12</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>CBOR_ERR_NOTENOUGHDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_inline_creation</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>cbor_build_bytestring</name><argument_list>(<argument><expr><operator>(</operator><name>cbor_data</name><operator>)</operator> <literal type="string">"Hello!"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Hello!"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CMUnitTest</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_empty_bs</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_embedded_bs</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_notenough_data</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_short_bs1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_short_bs2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_half_bs</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_int_bs</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_long_bs</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_zero_indef</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_short_indef</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_two_indef</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_missing_indef</name></expr></argument>)</argument_list></call></expr>,
<macro><name>cmocka_unit_test</name><argument_list>(<argument>test_inline_creation</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cmocka_run_group_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
