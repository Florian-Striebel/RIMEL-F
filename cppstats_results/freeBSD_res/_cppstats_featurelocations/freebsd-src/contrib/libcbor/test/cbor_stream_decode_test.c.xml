<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/cbor_stream_decode_test.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assertions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_expectations.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_no_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_decoder_result_nedata</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>embedded_uint8_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x17</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_uint8_embedded_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>embedded_uint8_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>embedded_uint8_data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>embedded_uint8_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>embedded_uint8_data</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>uint8_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_uint8_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0x83</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>uint8_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>uint8_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>uint8_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>uint16_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xf4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_uint16_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_uint16_eq</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>uint16_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>uint16_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>uint32_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xb3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_uint32_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_uint32_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">2784428723UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>uint32_data</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>uint32_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>uint64_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xb3</literal></expr>,
<expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xb3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_uint64_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_uint64_eq</name><argument_list>(<argument><expr><literal type="number">11959030306112471731ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>uint64_data</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>uint64_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>embedded_negint8_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x37</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_negint8_embedded_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_negint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>embedded_negint8_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_negint8_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>embedded_negint8_data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_negint8_eq</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>embedded_negint8_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_negint8_eq</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>embedded_negint8_data</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>negint8_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_negint8_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_negint8_eq</name><argument_list>(<argument><expr><literal type="number">0x83</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>negint8_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_negint8_eq</name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>negint8_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>negint8_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>negint16_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xf4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_negint16_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_negint16_eq</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>negint16_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>negint16_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>negint32_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xb3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_negint32_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_negint32_eq</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">2784428723UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>negint32_data</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>negint32_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>negint64_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xb3</literal></expr>,
<expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xb3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_negint64_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_negint64_eq</name><argument_list>(<argument><expr><literal type="number">11959030306112471731ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>negint64_data</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>negint64_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bstring_embedded_int8_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_bstring_embedded_int8_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_bstring_mem_eq</name><argument_list>(<argument><expr><name>bstring_embedded_int8_data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_embedded_int8_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bstring_embedded_int8_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bstring_int8_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_bstring_int8_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_bstring_mem_eq</name><argument_list>(<argument><expr><name>bstring_int8_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_int8_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bstring_int8_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bstring_int16_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x5C</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_bstring_int16_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_bstring_mem_eq</name><argument_list>(<argument><expr><name>bstring_int16_data</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">348</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">348</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_int16_data</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">348</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>bstring_int16_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result_nedata</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">348</literal></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_int16_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bstring_int32_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>,
<expr><literal type="number">0x10</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_bstring_int32_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_bstring_mem_eq</name><argument_list>(<argument><expr><name>bstring_int32_data</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1052688</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">1052688</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_int32_data</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">1052688</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>bstring_int32_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result_nedata</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">1052688</literal></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_int32_data</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EIGHT_BYTE_SIZE_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bstring_int64_data</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_bstring_int64_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_bstring_mem_eq</name><argument_list>(<argument><expr><name>bstring_int64_data</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">4294967296</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">9</literal> <operator>+</operator> <literal type="number">4294967296</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_int64_data</name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>+</operator> <literal type="number">4294967296</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>bstring_int64_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result_nedata</name><argument_list>(<argument><expr><literal type="number">9</literal> <operator>+</operator> <literal type="number">4294967296</literal></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_int64_data</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bstring_indef_1_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x40</literal></expr> ,
<expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_bstring_indef_decoding_1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_bstring_indef_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_indef_1_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_bstring_mem_eq</name><argument_list>(<argument><expr><name>bstring_indef_1_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_indef_1_data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_indef_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_indef_1_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bstring_indef_2_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_bstring_indef_decoding_2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_bstring_indef_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_indef_2_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_indef_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_indef_2_data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bstring_indef_3_data</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x40</literal></expr> , <expr><literal type="number">0x58</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFF</literal></expr> , <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_bstring_indef_decoding_3</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_bstring_indef_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_indef_3_data</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_bstring_mem_eq</name><argument_list>(<argument><expr><name>bstring_indef_3_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_indef_3_data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_bstring_mem_eq</name><argument_list>(<argument><expr><name>bstring_indef_3_data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_indef_3_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_indef_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bstring_indef_3_data</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>array_embedded_int8_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x80</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_array_embedded_int8_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_array_start</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_embedded_int8_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>array_int8_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_array_int8_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_array_start</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int8_data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int8_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int8_data</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>array_int8_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>array_int16_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_array_int16_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_array_start</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int16_data</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int16_data</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int16_data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>array_int16_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>array_int32_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_array_int32_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_array_start</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int32_data</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int32_data</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int32_data</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>array_int32_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>array_int64_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_array_int64_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_array_start</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int64_data</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int64_data</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_int64_data</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>array_int64_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>array_of_arrays_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_array_of_arrays_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_array_start</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_of_arrays_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_array_start</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_of_arrays_data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_array_start</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>array_of_arrays_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>indef_array_data_1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_indef_array_decoding_1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_indef_array_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>indef_array_data_1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>indef_array_data_1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>indef_array_data_1</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_indef_array_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>indef_array_data_1</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_indef_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>indef_array_data_1</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_indef_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>indef_array_data_1</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>map_embedded_int8_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_map_embedded_int8_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_map_start</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_embedded_int8_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_embedded_int8_data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_embedded_int8_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>map_int8_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_map_int8_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_map_start</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int8_data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int8_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int8_data</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>map_int8_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>map_int16_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_map_int16_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_map_start</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int16_data</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int16_data</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int16_data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>map_int16_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>map_int32_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_map_int32_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_map_start</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int32_data</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int32_data</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int32_data</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>map_int32_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>map_int64_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_map_int64_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_map_start</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int64_data</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int64_data</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>map_int64_data</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>map_int64_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>indef_map_data_1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_indef_map_decoding_1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_indef_map_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>indef_map_data_1</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>indef_map_data_1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_uint8_eq</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>indef_map_data_1</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_indef_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>,
<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>indef_map_data_1</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>embedded_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xC1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_embedded_tag_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_tag_eq</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>embedded_tag_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>int8_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xFE</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_int8_tag_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_tag_eq</name><argument_list>(<argument><expr><literal type="number">254</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>int8_tag_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>int8_tag_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>int16_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFD</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_int16_tag_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_tag_eq</name><argument_list>(<argument><expr><literal type="number">65277</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>int16_tag_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>int16_tag_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>int32_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xFB</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_int32_tag_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_tag_eq</name><argument_list>(<argument><expr><literal type="number">4278058235ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>int32_tag_data</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>int32_tag_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>int64_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xFB</literal></expr>,
<expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xF7</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_int64_tag_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_tag_eq</name><argument_list>(<argument><expr><literal type="number">18374120213919168759ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>int64_tag_data</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>int64_tag_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bad_tag_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xC6</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_bad_tag_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_ERROR</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>bad_tag_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>float2_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_float2_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_half</name><argument_list>(<argument><expr><literal type="number">65504.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>float2_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>float2_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>float4_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_float4_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_float</name><argument_list>(<argument><expr><literal type="number">100000.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>float4_data</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>float4_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>float8_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x66</literal></expr>,
<expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x66</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_float8_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_double</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>float8_data</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_minimum_input_size</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>float8_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>false_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xF4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_false_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_bool</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>false_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>true_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xF5</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_true_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_bool</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>true_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>null_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xF6</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_null_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_nil</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>null_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>undef_data</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0xF7</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>test_undef_decoding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_undef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_decoder_result</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CBOR_DECODER_FINISHED</name></expr></argument>, <argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>undef_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stream_test</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cmocka_unit_test_teardown(f, clear_stream_assertions)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>set_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cbor_stream_decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CMUnitTest</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_no_data</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_uint8_embedded_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_uint8_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_uint16_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_uint32_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_uint64_decoding</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_negint8_embedded_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_negint8_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_negint16_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_negint32_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_negint64_decoding</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_bstring_embedded_int8_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_bstring_int8_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_bstring_int16_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_bstring_int32_decoding</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EIGHT_BYTE_SIZE_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_bstring_int64_decoding</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_bstring_indef_decoding_1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_bstring_indef_decoding_2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_bstring_indef_decoding_3</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_array_embedded_int8_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_array_int8_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_array_int16_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_array_int32_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_array_int64_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_array_of_arrays_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_indef_array_decoding_1</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_map_embedded_int8_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_map_int8_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_map_int16_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_map_int32_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_map_int64_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_indef_map_decoding_1</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_embedded_tag_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_int8_tag_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_int16_tag_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_int32_tag_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_int64_tag_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_bad_tag_decoding</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_float2_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_float4_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_float8_decoding</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_false_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_true_decoding</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>stream_test</name><argument_list>(<argument><expr><name>test_null_decoding</name></expr></argument>)</argument_list></call></expr>,
<macro><name>stream_test</name><argument_list>(<argument>test_undef_decoding</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cmocka_run_group_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
