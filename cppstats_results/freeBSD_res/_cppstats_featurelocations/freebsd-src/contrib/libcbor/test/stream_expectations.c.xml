<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/stream_expectations.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_expectations.h"</cpp:file></cpp:include>






<decl_stmt><decl><type><name><name>struct</name> <name>test_assertion</name></name></type> <name><name>assertions_queue</name><index>[<expr><name>MAX_QUEUE_ITEMS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>queue_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_expectation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>decoder</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>set_decoder</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>decoder</name> <operator>=</operator> <name>dec</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int</name></type> <name>clear_stream_assertions</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>queue_size</name> <operator>!=</operator> <name>current_expectation</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>queue_size</name> <operator>=</operator> <name>current_expectation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>test_assertion</name></name></type> <name>current</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name><name>assertions_queue</name><index>[<expr><name>current_expectation</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>assert_uint8_eq</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{
<expr><name>UINT8_EQ</name></expr>, <expr><operator>(</operator>union <name>test_expectation_data</name><operator>)</operator><block>{<expr><operator>.</operator><name>int8</name> <operator>=</operator> <name>actual</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>uint8_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>UINT8_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>int8</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_uint16_eq</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{
<expr><name>UINT16_EQ</name></expr>, <expr><operator>(</operator>union <name>test_expectation_data</name><operator>)</operator><block>{<expr><operator>.</operator><name>int16</name> <operator>=</operator> <name>actual</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>uint16_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>UINT16_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>int16</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_uint32_eq</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{
<expr><name>UINT32_EQ</name></expr>, <expr><operator>(</operator>union <name>test_expectation_data</name><operator>)</operator><block>{<expr><operator>.</operator><name>int32</name> <operator>=</operator> <name>actual</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>uint32_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>UINT32_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>int32</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_uint64_eq</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{
<expr><name>UINT64_EQ</name></expr>, <expr><operator>(</operator>union <name>test_expectation_data</name><operator>)</operator><block>{<expr><operator>.</operator><name>int64</name> <operator>=</operator> <name>actual</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>uint64_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>UINT64_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>int64</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_negint8_eq</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{
<expr><name>NEGINT8_EQ</name></expr>, <expr><operator>(</operator>union <name>test_expectation_data</name><operator>)</operator><block>{<expr><operator>.</operator><name>int8</name> <operator>=</operator> <name>actual</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>negint8_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>NEGINT8_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>int8</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_negint16_eq</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{
<expr><name>NEGINT16_EQ</name></expr>, <expr><operator>(</operator>union <name>test_expectation_data</name><operator>)</operator><block>{<expr><operator>.</operator><name>int16</name> <operator>=</operator> <name>actual</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>negint16_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>NEGINT16_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>int16</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_negint32_eq</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{
<expr><name>NEGINT32_EQ</name></expr>, <expr><operator>(</operator>union <name>test_expectation_data</name><operator>)</operator><block>{<expr><operator>.</operator><name>int32</name> <operator>=</operator> <name>actual</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>negint32_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>NEGINT32_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>int32</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_negint64_eq</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{
<expr><name>NEGINT64_EQ</name></expr>, <expr><operator>(</operator>union <name>test_expectation_data</name><operator>)</operator><block>{<expr><operator>.</operator><name>int64</name> <operator>=</operator> <name>actual</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>negint64_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>NEGINT64_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>int64</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_bstring_mem_eq</name><parameter_list>(<parameter><decl><type><name>cbor_data</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{
<expr><name>BSTRING_MEM_EQ</name></expr>,
<expr><operator>(</operator>union <name>test_expectation_data</name><operator>)</operator><block>{<expr><operator>.</operator><name>string</name> <operator>=</operator> <block>{<expr><name>address</name></expr>, <expr><name>length</name></expr>}</block></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>byte_string_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>cbor_data</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>BSTRING_MEM_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>address</name></name> <operator>==</operator> <name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_bstring_indef_start</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><operator>.</operator><name>expectation</name> <operator>=</operator> <name>BSTRING_INDEF_START</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>byte_string_start_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>BSTRING_INDEF_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_indef_break</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><operator>.</operator><name>expectation</name> <operator>=</operator> <name>INDEF_BREAK</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>indef_break_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>INDEF_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_array_start</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><name>ARRAY_START</name></expr>, <expr><block>{<expr><operator>.</operator><name>length</name> <operator>=</operator> <name>length</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>array_start_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>ARRAY_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_indef_array_start</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><operator>.</operator><name>expectation</name> <operator>=</operator> <name>ARRAY_INDEF_START</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>indef_array_start_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>ARRAY_INDEF_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_map_start</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><name>MAP_START</name></expr>, <expr><block>{<expr><operator>.</operator><name>length</name> <operator>=</operator> <name>length</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>map_start_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>MAP_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_indef_map_start</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><operator>.</operator><name>expectation</name> <operator>=</operator> <name>MAP_INDEF_START</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>indef_map_start_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>MAP_INDEF_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_tag_eq</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><name>TAG_EQ</name></expr>, <expr><block>{<expr><operator>.</operator><name>int64</name> <operator>=</operator> <name>value</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tag_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>TAG_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>int64</name></name> <operator>==</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_half</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><name>HALF_EQ</name></expr>, <expr><block>{<expr><operator>.</operator><name>float2</name> <operator>=</operator> <name>value</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>half_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>HALF_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>float2</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_float</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><name>FLOAT_EQ</name></expr>, <expr><block>{<expr><operator>.</operator><name>float4</name> <operator>=</operator> <name>value</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>float_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>FLOAT_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>float4</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_double</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><name>DOUBLE_EQ</name></expr>, <expr><block>{<expr><operator>.</operator><name>float8</name> <operator>=</operator> <name>value</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>double_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>DOUBLE_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>float8</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_bool</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><name>BOOL_EQ</name></expr>, <expr><block>{<expr><operator>.</operator><name>boolean</name> <operator>=</operator> <name>value</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_nil</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><operator>.</operator><name>expectation</name> <operator>=</operator> <name>NIL</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assert_undef</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>assertions_queue</name><index>[<expr><name>queue_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator>struct <name>test_assertion</name><operator>)</operator><block>{<expr><operator>.</operator><name>expectation</name> <operator>=</operator> <name>UNDEF</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bool_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>actual</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>BOOL_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name><name>data</name><operator>.</operator><name>boolean</name></name> <operator>==</operator> <name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>null_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>undef_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call><operator>.</operator><name>expectation</name> <operator>==</operator> <name>UNDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_expectation</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cbor_callbacks</name></name></type> <name>asserting_callbacks</name> <init>= <expr><block>{

<expr><operator>.</operator><name>uint8</name> <operator>=</operator> <operator>&amp;</operator><name>uint8_callback</name></expr>,

<expr><operator>.</operator><name>uint16</name> <operator>=</operator> <operator>&amp;</operator><name>uint16_callback</name></expr>,

<expr><operator>.</operator><name>uint32</name> <operator>=</operator> <operator>&amp;</operator><name>uint32_callback</name></expr>,

<expr><operator>.</operator><name>uint64</name> <operator>=</operator> <operator>&amp;</operator><name>uint64_callback</name></expr>,

<expr><operator>.</operator><name>negint8</name> <operator>=</operator> <operator>&amp;</operator><name>negint8_callback</name></expr>,

<expr><operator>.</operator><name>negint16</name> <operator>=</operator> <operator>&amp;</operator><name>negint16_callback</name></expr>,

<expr><operator>.</operator><name>negint32</name> <operator>=</operator> <operator>&amp;</operator><name>negint32_callback</name></expr>,

<expr><operator>.</operator><name>negint64</name> <operator>=</operator> <operator>&amp;</operator><name>negint64_callback</name></expr>,

<expr><operator>.</operator><name>byte_string</name> <operator>=</operator> <operator>&amp;</operator><name>byte_string_callback</name></expr>,
<expr><operator>.</operator><name>byte_string_start</name> <operator>=</operator> <operator>&amp;</operator><name>byte_string_start_callback</name></expr>,

<expr><operator>.</operator><name>array_start</name> <operator>=</operator> <operator>&amp;</operator><name>array_start_callback</name></expr>,
<expr><operator>.</operator><name>indef_array_start</name> <operator>=</operator> <operator>&amp;</operator><name>indef_array_start_callback</name></expr>,

<expr><operator>.</operator><name>map_start</name> <operator>=</operator> <operator>&amp;</operator><name>map_start_callback</name></expr>,
<expr><operator>.</operator><name>indef_map_start</name> <operator>=</operator> <operator>&amp;</operator><name>indef_map_start_callback</name></expr>,

<expr><operator>.</operator><name>tag</name> <operator>=</operator> <operator>&amp;</operator><name>tag_callback</name></expr>,

<expr><operator>.</operator><name>float2</name> <operator>=</operator> <operator>&amp;</operator><name>half_callback</name></expr>,

<expr><operator>.</operator><name>float4</name> <operator>=</operator> <operator>&amp;</operator><name>float_callback</name></expr>,

<expr><operator>.</operator><name>float8</name> <operator>=</operator> <operator>&amp;</operator><name>double_callback</name></expr>,

<expr><operator>.</operator><name>undefined</name> <operator>=</operator> <operator>&amp;</operator><name>undef_callback</name></expr>,
<expr><operator>.</operator><name>boolean</name> <operator>=</operator> <operator>&amp;</operator><name>bool_callback</name></expr>,
<expr><operator>.</operator><name>null</name> <operator>=</operator> <operator>&amp;</operator><name>null_callback</name></expr>,
<expr><operator>.</operator><name>indef_break</name> <operator>=</operator> <operator>&amp;</operator><name>indef_break_callback</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>cbor_decoder_result</name></name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>cbor_data</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>source_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last_expectation</name> <init>= <expr><name>current_expectation</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_decoder_result</name></name></type> <name>result</name> <init>=
<expr><call><name>decoder</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>source_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asserting_callbacks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>CBOR_DECODER_FINISHED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>last_expectation</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>current_expectation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
