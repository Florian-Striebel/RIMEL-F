<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/type_1_test.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_load_result</name></name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data3</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data4</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data5</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xb3</literal></expr>,
<expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_very_short_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_NEGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_negint</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_get_uint8</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_short_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_NEGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_negint</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_get_uint8</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_half_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data3</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_NEGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_negint</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_get_uint16</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data4</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_NEGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_negint</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_get_uint32</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2784428723</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_long_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>data5</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_typeof</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_TYPE_NEGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CBOR_INT_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_isa_negint</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_get_uint64</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">11959030306112471731ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>read</name></name> <operator>==</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_is_int</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_null</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CMUnitTest</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_very_short_int</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_short_int</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_half_int</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_int</name></expr></argument>)</argument_list></call></expr>,
<macro><name>cmocka_unit_test</name><argument_list>(<argument>test_long_int</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cmocka_run_group_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
