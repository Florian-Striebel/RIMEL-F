<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/stack_over_limit_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assertions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stream_expectations.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>generate_overflow_data</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>overflow_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>overflow_data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>CBOR_MAX_STACK_SIZE</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CBOR_MAX_STACK_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>overflow_data</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <literal type="number">0xC2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>overflow_data</name><operator>)</operator><index>[<expr><name>CBOR_MAX_STACK_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <literal type="number">0x41</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>overflow_data</name><operator>)</operator><index>[<expr><name>CBOR_MAX_STACK_SIZE</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<return>return <expr><name>CBOR_MAX_STACK_SIZE</name> <operator>+</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_stack_over_limit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>overflow_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>overflow_data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_load_result</name></name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>overflow_data_len</name> <operator>=</operator> <call><name>generate_overflow_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>overflow_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_load</name><argument_list>(<argument><expr><name>overflow_data</name></expr></argument>, <argument><expr><name>overflow_data_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>overflow_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>error</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name>CBOR_ERR_MEMERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CMUnitTest</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{<macro><name>cmocka_unit_test</name><argument_list>(<argument>test_stack_over_limit</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cmocka_run_group_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
