<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/type_1_encoders_test.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_embedded_negint8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint8</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>(unsigned char[]){<literal type="number">0x2E</literal>}</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_negint8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint8</name><argument_list>(<argument><expr><literal type="number">180</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint8</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x38</literal>, <literal type="number">0xFF</literal>})</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_negint16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint16</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint16</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x39</literal>, <literal type="number">0x03</literal>, <literal type="number">0xE8</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_negint32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint32</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint32</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x3A</literal>, <literal type="number">0x00</literal>, <literal type="number">0x0F</literal>, <literal type="number">0x42</literal>, <literal type="number">0x40</literal>})</argument>,
<argument><literal type="number">5</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_negint64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint64</name><argument_list>(<argument><expr><literal type="number">18446744073709551615ULL</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,
<argument><expr><call><name>cbor_encode_negint64</name><argument_list>(<argument><expr><literal type="number">18446744073709551615ULL</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(
<argument>buffer</argument>,
<argument>((unsigned char[]){<literal type="number">0x3B</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>})</argument>,
<argument><literal type="number">9</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_unspecified</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint</name><argument_list>(<argument><expr><literal type="number">18446744073709551615ULL</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(
<argument>buffer</argument>,
<argument>((unsigned char[]){<literal type="number">0x3B</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>, <literal type="number">0xFF</literal>})</argument>,
<argument><literal type="number">9</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x3A</literal>, <literal type="number">0x00</literal>, <literal type="number">0x0F</literal>, <literal type="number">0x42</literal>, <literal type="number">0x40</literal>})</argument>,
<argument><literal type="number">5</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x39</literal>, <literal type="number">0x03</literal>, <literal type="number">0xE8</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>cbor_encode_negint</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x38</literal>, <literal type="number">0xFF</literal>})</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CMUnitTest</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_embedded_negint8</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_negint8</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_negint16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_negint32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_negint64</name></expr></argument>)</argument_list></call></expr>,
<macro><name>cmocka_unit_test</name><argument_list>(<argument>test_unspecified</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cmocka_run_group_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
