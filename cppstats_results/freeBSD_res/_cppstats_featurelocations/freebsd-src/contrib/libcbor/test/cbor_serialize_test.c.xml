<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcbor/test/cbor_serialize_test.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_uint8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_uint8</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>(unsigned char[]){<literal type="number">0x00</literal>}</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_uint16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int16</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_uint16</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x19</literal>, <literal type="number">0x03</literal>, <literal type="number">0xE8</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_uint32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_uint32</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x1A</literal>, <literal type="number">0x00</literal>, <literal type="number">0x0F</literal>, <literal type="number">0x42</literal>, <literal type="number">0x40</literal>})</argument>,
<argument><literal type="number">5</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_uint64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_uint64</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">1000000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(
<argument>buffer</argument>,
<argument>((unsigned char[]){<literal type="number">0x1B</literal>, <literal type="number">0x00</literal>, <literal type="number">0x00</literal>, <literal type="number">0x00</literal>, <literal type="number">0xE8</literal>, <literal type="number">0xD4</literal>, <literal type="number">0xA5</literal>, <literal type="number">0x10</literal>, <literal type="number">0x00</literal>})</argument>,
<argument><literal type="number">9</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_negint8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_uint8</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>(unsigned char[]){<literal type="number">0x20</literal>}</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_negint16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int16</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_uint16</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x39</literal>, <literal type="number">0x03</literal>, <literal type="number">0xE8</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_negint32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_uint32</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x3A</literal>, <literal type="number">0x00</literal>, <literal type="number">0x0F</literal>, <literal type="number">0x42</literal>, <literal type="number">0x40</literal>})</argument>,
<argument><literal type="number">5</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_negint64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_int64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_uint64</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">1000000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_mark_negint</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(
<argument>buffer</argument>,
<argument>((unsigned char[]){<literal type="number">0x3B</literal>, <literal type="number">0x00</literal>, <literal type="number">0x00</literal>, <literal type="number">0x00</literal>, <literal type="number">0xE8</literal>, <literal type="number">0xD4</literal>, <literal type="number">0xA5</literal>, <literal type="number">0x10</literal>, <literal type="number">0x00</literal>})</argument>,
<argument><literal type="number">9</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_definite_bytestring</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_definite_bytestring</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_bytestring_set_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x59</literal>, <literal type="number">0x01</literal>, <literal type="number">0x00</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_indefinite_bytestring</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_indefinite_bytestring</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>cbor_new_definite_bytestring</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_bytestring_set_handle</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cbor_bytestring_add_chunk</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>cbor_bytestring_chunk_count</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x5F</literal>, <literal type="number">0x59</literal>, <literal type="number">0x01</literal>, <literal type="number">0x00</literal>})</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer + <literal type="number">4</literal> + <literal type="number">256</literal></argument>, <argument>((unsigned char[]){<literal type="number">0xFF</literal>})</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_definite_string</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_definite_string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"Hello world!"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_string_set_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(
<argument>buffer</argument>,
<argument>((unsigned char[]){<literal type="number">0x6C</literal>, <literal type="number">0x48</literal>, <literal type="number">0x65</literal>, <literal type="number">0x6C</literal>, <literal type="number">0x6C</literal>, <literal type="number">0x6F</literal>, <literal type="number">0x20</literal>, <literal type="number">0x77</literal>, <literal type="number">0x6F</literal>,
<literal type="number">0x72</literal>, <literal type="number">0x6C</literal>, <literal type="number">0x64</literal>, <literal type="number">0x21</literal>})</argument>,
<argument><literal type="number">13</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_indefinite_string</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_indefinite_string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>cbor_new_definite_string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><literal type="string">"Hello world!"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_string_set_handle</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><call><name>cbor_string_add_chunk</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><call><name>cbor_string_chunk_count</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(
<argument>buffer</argument>,
<argument>((unsigned char[]){<literal type="number">0x7F</literal>, <literal type="number">0x6C</literal>, <literal type="number">0x48</literal>, <literal type="number">0x65</literal>, <literal type="number">0x6C</literal>, <literal type="number">0x6C</literal>, <literal type="number">0x6F</literal>, <literal type="number">0x20</literal>, <literal type="number">0x77</literal>,
<literal type="number">0x6F</literal>, <literal type="number">0x72</literal>, <literal type="number">0x6C</literal>, <literal type="number">0x64</literal>, <literal type="number">0x21</literal>, <literal type="number">0xFF</literal>})</argument>,
<argument><literal type="number">15</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_definite_array</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_definite_array</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>one</name> <init>= <expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>two</name> <init>= <expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_array_set</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_array_replace</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x82</literal>, <literal type="number">0x01</literal>, <literal type="number">0x02</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_indefinite_array</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_indefinite_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>one</name> <init>= <expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>two</name> <init>= <expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x9F</literal>, <literal type="number">0x01</literal>, <literal type="number">0x02</literal>, <literal type="number">0xFF</literal>})</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_definite_map</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_definite_map</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>one</name> <init>= <expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>two</name> <init>= <expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>cbor_map_add</name><argument_list>(<argument>item</argument>, <argument>(struct cbor_pair){.key = one</argument>, <argument>.value = two}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>cbor_map_add</name><argument_list>(<argument>item</argument>, <argument>(struct cbor_pair){.key = two</argument>, <argument>.value = one}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xA2</literal>, <literal type="number">0x01</literal>, <literal type="number">0x02</literal>, <literal type="number">0x02</literal>, <literal type="number">0x01</literal>})</argument>,
<argument><literal type="number">5</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_indefinite_map</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_indefinite_map</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>one</name> <init>= <expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>two</name> <init>= <expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>assert_true</name><argument_list>(<argument>cbor_map_add(item, (struct cbor_pair){.key = one, .value = two})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>assert_true</name><argument_list>(<argument>cbor_map_add(item, (struct cbor_pair){.key = two, .value = one})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(
<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xBF</literal>, <literal type="number">0x01</literal>, <literal type="number">0x02</literal>, <literal type="number">0x02</literal>, <literal type="number">0x01</literal>, <literal type="number">0xFF</literal>})</argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_tags</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_tag</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>one</name> <init>= <expr><call><name>cbor_build_uint8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_tag_set_item</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xD5</literal>, <literal type="number">0x01</literal>})</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_half</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_float2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_float2</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF9</literal>, <literal type="number">0x7E</literal>, <literal type="number">0x00</literal>})</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_single</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_float4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_float4</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">100000.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xFA</literal>, <literal type="number">0x47</literal>, <literal type="number">0xC3</literal>, <literal type="number">0x50</literal>, <literal type="number">0x00</literal>})</argument>,
<argument><literal type="number">5</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_double</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_float8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_float8</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">4.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(
<argument>buffer</argument>,
<argument>((unsigned char[]){<literal type="number">0xFB</literal>, <literal type="number">0xC0</literal>, <literal type="number">0x10</literal>, <literal type="number">0x66</literal>, <literal type="number">0x66</literal>, <literal type="number">0x66</literal>, <literal type="number">0x66</literal>, <literal type="number">0x66</literal>, <literal type="number">0x66</literal>})</argument>,
<argument><literal type="number">9</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_ctrl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_undef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF7</literal>})</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_serialize_long_ctrl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_ctrl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cbor_set_ctrl</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>cbor_serialize</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0xF8</literal>, <literal type="number">0xFE</literal>})</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_auto_serialize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cbor_new_definite_array</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>cbor_move</name><argument_list>(<argument><expr><call><name>cbor_build_uint64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><call><name>cbor_serialize_alloc</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>assert_memory_equal</name><argument_list>(<argument>buffer</argument>, <argument>((unsigned char[]){<literal type="number">0x84</literal>, <literal type="number">0x1B</literal>})</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_CBOR_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CMUnitTest</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_uint8</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_uint16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_uint32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_uint64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_negint8</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_negint16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_negint32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_negint64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_definite_bytestring</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_indefinite_bytestring</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_definite_string</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_indefinite_string</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_definite_array</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_indefinite_array</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_definite_map</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_indefinite_map</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_tags</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_half</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_single</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_double</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_ctrl</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>test_serialize_long_ctrl</name></expr></argument>)</argument_list></call></expr>,
<macro><name>cmocka_unit_test</name><argument_list>(<argument>test_auto_serialize</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cmocka_run_group_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
