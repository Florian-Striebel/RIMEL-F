<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/flex/src/FlexLexer.h">













































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FLEX_LEXER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FLEX_LEXER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<extern>extern <literal type="string">"C++"</literal> <block>{<block_content>

<struct_decl>struct <name>yy_buffer_state</name>;</struct_decl>
<typedef>typedef <type><name>int</name></type> <name>yy_state_type</name>;</typedef>

<decl_stmt><decl><type><name>class</name></type> <name>FlexLexer</name>
<block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>FlexLexer</name><argument_list>()</argument_list></macro> <block>{ }</block>

<specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>YYText</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>yytext</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>int</name> <macro><name>YYLeng</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>yyleng</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type>
<name>yy_switch_to_buffer</name><parameter_list>( <parameter><decl><type><name>yy_buffer_state</name><modifier>*</modifier></type> <name>new_buffer</name></decl></parameter> )</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<decl_stmt><decl><type><name>virtual</name> <name>yy_buffer_state</name><modifier>*</modifier></type> <name>yy_create_buffer</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>*</operator> <name>s</name></expr></argument>, <argument><expr><name>int</name> <name>size</name></expr></argument> )</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>yy_buffer_state</name><modifier>*</modifier></type> <name>yy_create_buffer</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>&amp;</operator> <name>s</name></expr></argument>, <argument><expr><name>int</name> <name>size</name></expr></argument> )</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>yy_delete_buffer</name><parameter_list>( <parameter><decl><type><name>yy_buffer_state</name><modifier>*</modifier></type> <name>b</name></decl></parameter> )</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>yyrestart</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>*</operator> <name>s</name></expr></argument> )</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>yyrestart</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>&amp;</operator> <name>s</name></expr></argument> )</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>int</name></type> <name>yylex</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<decl_stmt><decl><type><name>int</name></type> <name>yylex</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>&amp;</operator> <name>new_in</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>new_out</name></expr></argument> )</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>switch_streams</name><argument_list>( <argument><expr><name>new_in</name></expr></argument>, <argument><expr><name>new_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>yylex</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yylex</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>*</operator> <name>new_in</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>new_out</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>switch_streams</name><argument_list>( <argument><expr><name>new_in</name></expr></argument>, <argument><expr><name>new_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>yylex</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>switch_streams</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>*</operator> <name>new_in</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>new_out</name></expr></argument> )</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>switch_streams</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>&amp;</operator> <name>new_in</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>new_out</name></expr></argument> )</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>int</name> <macro><name>lineno</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>yylineno</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>int</name> <macro><name>debug</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>yy_flex_debug</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>set_debug</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter> )</parameter_list> <block>{<block_content> <expr_stmt><expr><name>yy_flex_debug</name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>yytext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yyleng</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yylineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yy_flex_debug</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>yyFlexLexer</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>yyFlexLexerOnce</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyFlexLexerOnce</name></cpp:macro></cpp:define>

<extern>extern <literal type="string">"C++"</literal> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>yyFlexLexer</name> <range>: <expr><name>public</name> <name>FlexLexer</name> <block>{
<expr><name>public</name><operator>:</operator>


<call><name>yyFlexLexer</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>&amp;</operator> <name>arg_yyin</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>arg_yyout</name></expr></argument> )</argument_list></call></expr>;
<expr><call><name>yyFlexLexer</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>*</operator> <name>arg_yyin</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>arg_yyout</name> <operator>=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;
<expr><name>private</name><operator>:</operator>
<name>void</name> <call><name>ctor_common</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>

<name>virtual</name> <operator>~</operator><call><name>yyFlexLexer</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>yy_switch_to_buffer</name><argument_list>( <argument><expr><name>yy_buffer_state</name><operator>*</operator> <name>new_buffer</name></expr></argument> )</argument_list></call></expr>;
<expr><name>yy_buffer_state</name><operator>*</operator> <macro><name>yy_create_buffer</name><argument_list>( <argument>std::istream* s</argument>, <argument>int size</argument> )</argument_list></macro></expr>;
<expr><name>yy_buffer_state</name><operator>*</operator> <macro><name>yy_create_buffer</name><argument_list>( <argument>std::istream&amp; s</argument>, <argument>int size</argument> )</argument_list></macro></expr>;
<expr><name>void</name> <call><name>yy_delete_buffer</name><argument_list>( <argument><expr><name>yy_buffer_state</name><operator>*</operator> <name>b</name></expr></argument> )</argument_list></call></expr>;
<expr><name>void</name> <call><name>yyrestart</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>*</operator> <name>s</name></expr></argument> )</argument_list></call></expr>;
<expr><name>void</name> <call><name>yyrestart</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>&amp;</operator> <name>s</name></expr></argument> )</argument_list></call></expr>;

<expr><name>void</name> <call><name>yypush_buffer_state</name><argument_list>( <argument><expr><name>yy_buffer_state</name><operator>*</operator> <name>new_buffer</name></expr></argument> )</argument_list></call></expr>;
<expr><name>void</name> <call><name>yypop_buffer_state</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>int</name> <call><name>yylex</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>switch_streams</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>&amp;</operator> <name>new_in</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>new_out</name></expr></argument> )</argument_list></call></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>switch_streams</name><argument_list>( <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>*</operator> <name>new_in</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>ostream</name><operator>*</operator> <name>new_out</name> <operator>=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;
<expr><name>virtual</name> <name>int</name> <call><name>yywrap</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <name>int</name> <macro><name>LexerInput</name><argument_list>( <argument>char* buf</argument>, <argument>int max_size</argument> )</argument_list></macro></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>LexerOutput</name><argument_list>( <argument>const char* buf</argument>, <argument>int size</argument> )</argument_list></macro></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>LexerError</name><argument_list>( <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>msg</name></expr></argument> )</argument_list></call></expr>;

<expr><name>void</name> <macro><name>yyunput</name><argument_list>( <argument>int c</argument>, <argument>char* buf_ptr</argument> )</argument_list></macro></expr>;
<expr><name>int</name> <call><name>yyinput</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>yy_load_buffer_state</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>yy_init_buffer</name><argument_list>( <argument><expr><name>yy_buffer_state</name><operator>*</operator> <name>b</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>istream</name><operator>&amp;</operator> <name>s</name></expr></argument> )</argument_list></call></expr>;
<expr><name>void</name> <call><name>yy_flush_buffer</name><argument_list>( <argument><expr><name>yy_buffer_state</name><operator>*</operator> <name>b</name></expr></argument> )</argument_list></call></expr>;

<expr><name>int</name> <name>yy_start_stack_ptr</name></expr>;
<expr><name>int</name> <name>yy_start_stack_depth</name></expr>;
<expr><name>int</name><operator>*</operator> <name>yy_start_stack</name></expr>;

<expr><name>void</name> <macro><name>yy_push_state</name><argument_list>( <argument>int new_state</argument> )</argument_list></macro></expr>;
<expr><name>void</name> <call><name>yy_pop_state</name><argument_list>()</argument_list></call></expr>;
<expr><name>int</name> <call><name>yy_top_state</name><argument_list>()</argument_list></call></expr>;

<expr><name>yy_state_type</name> <call><name>yy_get_previous_state</name><argument_list>()</argument_list></call></expr>;
<expr><name>yy_state_type</name> <macro><name>yy_try_NUL_trans</name><argument_list>( <argument>yy_state_type current_state</argument> )</argument_list></macro></expr>;
<expr><name>int</name> <call><name>yy_get_next_buffer</name><argument_list>()</argument_list></call></expr>;

<expr><name>std</name><operator>::</operator><name>istream</name> <name>yyin</name></expr>;
<expr><name>std</name><operator>::</operator><name>ostream</name> <name>yyout</name></expr>;


<expr><name>char</name> <name>yy_hold_char</name></expr>;


<expr><name>int</name> <name>yy_n_chars</name></expr>;


<expr><name>char</name><operator>*</operator> <name>yy_c_buf_p</name></expr>;

<expr><name>int</name> <name>yy_init</name></expr>;
<expr><name>int</name> <name>yy_start</name></expr>;



<expr><name>int</name> <name>yy_did_buffer_switch_on_eof</name></expr>;


<expr><name>size_t</name> <name>yy_buffer_stack_top</name></expr>;
<expr><name>size_t</name> <name>yy_buffer_stack_max</name></expr>;
<expr><name>yy_buffer_state</name> <operator>*</operator><operator>*</operator> <name>yy_buffer_stack</name></expr>;
<expr><name>void</name> <call><name>yyensure_buffer_stack</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;




<expr><name>yy_state_type</name> <name>yy_last_accepting_state</name></expr>;
<expr><name>char</name><operator>*</operator> <name>yy_last_accepting_cpos</name></expr>;

<expr><name>yy_state_type</name><operator>*</operator> <name>yy_state_buf</name></expr>;
<expr><name>yy_state_type</name><operator>*</operator> <name>yy_state_ptr</name></expr>;

<expr><name>char</name><operator>*</operator> <name>yy_full_match</name></expr>;
<expr><name>int</name><operator>*</operator> <name>yy_full_state</name></expr>;
<expr><name>int</name> <name>yy_full_lp</name></expr>;

<expr><name>int</name> <name>yy_lp</name></expr>;
<expr><name>int</name> <name>yy_looking_for_trail_begin</name></expr>;

<expr><name>int</name> <name>yy_more_flag</name></expr>;
<expr><name>int</name> <name>yy_more_len</name></expr>;
<expr><name>int</name> <name>yy_more_offset</name></expr>;
<expr><name>int</name> <name>yy_prev_more_offset</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
