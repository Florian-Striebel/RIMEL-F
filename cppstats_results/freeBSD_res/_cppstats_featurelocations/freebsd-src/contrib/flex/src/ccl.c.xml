<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/flex/src/ccl.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flexdef.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ccl_contains</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>cclp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ind</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ccllen</name><index>[<expr><name>cclp</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind</name> <operator>=</operator> <name><name>cclmap</name><index>[<expr><name>cclp</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ccltbl</name><index>[<expr><name>ind</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>!</operator><name><name>cclng</name><index>[<expr><name>cclp</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name><name>cclng</name><index>[<expr><name>cclp</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ccladd</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>cclp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ind</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>newpos</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_char</name> <argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ccllen</name><index>[<expr><name>cclp</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind</name> <operator>=</operator> <name><name>cclmap</name><index>[<expr><name>cclp</name></expr>]</index></name></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ccltbl</name><index>[<expr><name>ind</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>nlch</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ccl_has_nl</name><index>[<expr><name>cclp</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>newpos</name> <operator>=</operator> <name>ind</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newpos</name> <operator>&gt;=</operator> <name>current_max_ccl_tbl_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_max_ccl_tbl_size</name> <operator>+=</operator> <name>MAX_CCL_TBL_SIZE_INCREMENT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>num_reallocs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ccltbl</name> <operator>=</operator> <call><name>reallocate_Character_array</name> <argument_list>(<argument><expr><name>ccltbl</name></expr></argument>,
<argument><expr><name>current_max_ccl_tbl_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ccllen</name><index>[<expr><name>cclp</name></expr>]</index></name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccltbl</name><index>[<expr><name>newpos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_cclp</name> <parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cclp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ccl_contains</name><argument_list>(<argument><expr><name>cclp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start_char</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><call><name>readable_form</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>csize</name> <operator>&amp;&amp;</operator> <call><name>ccl_contains</name><argument_list>(<argument><expr><name>cclp</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>start_char</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"-%s"</literal></expr></argument>,
<argument><expr><call><name>readable_form</name> <argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>ccl_set_diff</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>


<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>cclinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<for>for <control>( <init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>csize</name></expr>;</condition> <incr><expr><operator>++</operator><name>ch</name></expr></incr> )</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>ccl_contains</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ccl_contains</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ccladd</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ccl_set_diff ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_cclp</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_cclp</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_cclp</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>ccl_set_union</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>cclinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ccllen</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ccladd</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>ccltbl</name><index>[<expr><name><name>cclmap</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ccllen</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ccladd</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>ccltbl</name><index>[<expr><name><name>cclmap</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ccl_set_union (%d + %d = %d"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_cclp</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_cclp</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_cclp</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>cclinit</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>lastccl</name> <operator>&gt;=</operator> <name>current_maxccls</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_maxccls</name> <operator>+=</operator> <name>MAX_CCLS_INCREMENT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>num_reallocs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cclmap</name> <operator>=</operator>
<call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>cclmap</name></expr></argument>, <argument><expr><name>current_maxccls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ccllen</name> <operator>=</operator>
<call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>ccllen</name></expr></argument>, <argument><expr><name>current_maxccls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cclng</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>cclng</name></expr></argument>, <argument><expr><name>current_maxccls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ccl_has_nl</name> <operator>=</operator>
<call><name>reallocate_bool_array</name> <argument_list>(<argument><expr><name>ccl_has_nl</name></expr></argument>,
<argument><expr><name>current_maxccls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lastccl</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cclmap</name><index>[<expr><name>lastccl</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>





<expr_stmt><expr><name><name>cclmap</name><index>[<expr><name>lastccl</name></expr>]</index></name> <operator>=</operator>
<name><name>cclmap</name><index>[<expr><name>lastccl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>ccllen</name><index>[<expr><name>lastccl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ccllen</name><index>[<expr><name>lastccl</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cclng</name><index>[<expr><name>lastccl</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccl_has_nl</name><index>[<expr><name>lastccl</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>lastccl</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>cclnegate</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>cclp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cclng</name><index>[<expr><name>cclp</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccl_has_nl</name><index>[<expr><name>cclp</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><name><name>ccl_has_nl</name><index>[<expr><name>cclp</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>list_character_set</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>cset</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cset</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start_char</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><call><name>readable_form</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>csize</name> <operator>&amp;&amp;</operator> <name><name>cset</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>start_char</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"-%s"</literal></expr></argument>,
<argument><expr><call><name>readable_form</name> <argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><name>bool</name></type> <name>range_covers_case</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>c1</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>c2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>has_case</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>reverse_case</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&lt;</operator> <name>c1</name> <operator>||</operator> <name>c2</name> <operator>&lt;</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>reverse_case</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>isupper</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>tolower</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name>islower</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>toupper</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>has_case</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>isupper</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>islower</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
