<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/flex/src/sym.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flexdef.h"</cpp:file></cpp:include>







<struct>struct <name>hash_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>hash_entry</name></name> <modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>int_val</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>hash_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>hash_table</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_TABLE_HASH_SIZE</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_COND_HASH_SIZE</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCL_HASH_SIZE</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>hash_entry</name></name> <modifier>*</modifier></type><name><name>ndtbl</name><index>[<expr><name>NAME_TABLE_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>hash_entry</name></name> <modifier>*</modifier></type><name><name>sctbl</name><index>[<expr><name>START_COND_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>hash_entry</name></name> <modifier>*</modifier></type><name><name>ccltab</name><index>[<expr><name>CCL_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>addsym</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>hash_table</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>hash_entry</name></name> <modifier>*</modifier></type><name>findsym</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>, <parameter><decl><type><name>hash_table</name></type> <name>table</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>table_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>hashfunct</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <name>int</name></type> <name>addsym</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>sym</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str_def</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>int_def</name></decl></parameter>, <parameter><decl><type><name>hash_table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>table_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hash_val</name> <init>= <expr><call><name>hashfunct</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><name>table_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hash_entry</name></name> <modifier>*</modifier></type><name>sym_entry</name> <init>= <expr><name><name>table</name><index>[<expr><name>hash_val</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hash_entry</name></name> <modifier>*</modifier></type><name>new_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hash_entry</name></name> <modifier>*</modifier></type><name>successor</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>sym_entry</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><name><name>sym_entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sym_entry</name> <operator>=</operator> <name><name>sym_entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>new_entry</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>hash_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexfatal</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"symbol table memory allocation failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>successor</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>hash_val</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>successor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>successor</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>new_entry</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>str_val</name></name> <operator>=</operator> <name>str_def</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>int_val</name></name> <operator>=</operator> <name>int_def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>hash_val</name></expr>]</index></name> <operator>=</operator> <name>new_entry</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>cclinstal</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>ccltxt</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cclnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>addsym</name> <argument_list>(<argument><expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>ccltxt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>cclnum</name></expr></argument>, <argument><expr><name>ccltab</name></expr></argument>, <argument><expr><name>CCL_HASH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>ccllookup</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>ccltxt</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>findsym</name> <argument_list>(<argument><expr><name>ccltxt</name></expr></argument>, <argument><expr><name>ccltab</name></expr></argument>, <argument><expr><name>CCL_HASH_SIZE</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>int_val</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>hash_entry</name></name> <modifier>*</modifier></type><name>findsym</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>, <parameter><decl><type><name>hash_table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>table_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>hash_entry</name></name></type> <name>empty_entry</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hash_entry</name></name> <modifier>*</modifier></type><name>sym_entry</name> <init>=

<expr><name><name>table</name><index>[<expr><call><name>hashfunct</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><name>table_size</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>sym_entry</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><name><name>sym_entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>sym_entry</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sym_entry</name> <operator>=</operator> <name><name>sym_entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>&amp;</operator><name>empty_entry</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>hashfunct</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hashval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>locstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hashval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>locstr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>str</name><index>[<expr><name>locstr</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hashval</name> <operator>=</operator> <operator>(</operator><name>hashval</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>str</name><index>[<expr><name>locstr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hashval</name> <operator>%=</operator> <name>hash_size</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>hashval</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ndinstal</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>definition</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>addsym</name> <argument_list>(<argument><expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>definition</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>ndtbl</name></expr></argument>, <argument><expr><name>NAME_TABLE_HASH_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>synerr</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"name defined twice"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>char</name> <modifier>*</modifier></type><name>ndlookup</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>findsym</name> <argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>ndtbl</name></expr></argument>, <argument><expr><name>NAME_TABLE_HASH_SIZE</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str_val</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>scextend</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>current_max_scs</name> <operator>+=</operator> <name>MAX_SCS_INCREMENT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>num_reallocs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scset</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>scset</name></expr></argument>, <argument><expr><name>current_max_scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scbol</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>scbol</name></expr></argument>, <argument><expr><name>current_max_scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scxclu</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>scxclu</name></expr></argument>, <argument><expr><name>current_max_scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sceof</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>sceof</name></expr></argument>, <argument><expr><name>current_max_scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scname</name> <operator>=</operator> <call><name>reallocate_char_ptr_array</name> <argument_list>(<argument><expr><name>scname</name></expr></argument>, <argument><expr><name>current_max_scs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>scinstal</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xcluflg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>lastsc</name> <operator>&gt;=</operator> <name>current_max_scs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scextend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>scname</name><index>[<expr><name>lastsc</name></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>addsym</name><argument_list>(<argument><expr><name><name>scname</name><index>[<expr><name>lastsc</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lastsc</name></expr></argument>,
<argument><expr><name>sctbl</name></expr></argument>, <argument><expr><name>START_COND_HASH_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>format_pinpoint_message</name> <argument_list>(<argument><expr><call><name>_</name>
<argument_list>(<argument><expr><literal type="string">"start condition %s declared twice"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>scset</name><index>[<expr><name>lastsc</name></expr>]</index></name> <operator>=</operator> <call><name>mkstate</name> <argument_list>(<argument><expr><name>SYM_EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scbol</name><index>[<expr><name>lastsc</name></expr>]</index></name> <operator>=</operator> <call><name>mkstate</name> <argument_list>(<argument><expr><name>SYM_EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scxclu</name><index>[<expr><name>lastsc</name></expr>]</index></name> <operator>=</operator> <name>xcluflg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sceof</name><index>[<expr><name>lastsc</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>sclookup</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>findsym</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>sctbl</name></expr></argument>, <argument><expr><name>START_COND_HASH_SIZE</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>int_val</name></expr>;</return>
</block_content>}</block></function>
</unit>
