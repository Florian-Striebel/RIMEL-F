<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/flex/src/tblcmp.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flexdef.h"</cpp:file></cpp:include>




<function_decl><type><name>void</name></type> <name>mkentry</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mkprot</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mktemplate</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mv2front</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tbldiff</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>





































<function><type><name>void</name></type> <name>bldtbl</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>state</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>statenum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>totaltrans</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comfreq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>extptr</name></decl>, <decl><type ref="prev"/><name><name>extrct</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>CSIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mindiff</name></decl>, <decl><type ref="prev"/><name>minprot</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>











<expr_stmt><expr><name>extptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>totaltrans</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>numecs</name> <operator>*</operator> <name>PROTO_SIZE_PERCENTAGE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mkentry</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>numecs</name></expr></argument>, <argument><expr><name>statenum</name></expr></argument>, <argument><expr><name>JAMSTATE</name></expr></argument>, <argument><expr><name>totaltrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>checkcom</name> <init>=

<expr><name>comfreq</name> <operator>*</operator> <literal type="number">100</literal> <operator>&gt;</operator> <name>totaltrans</name> <operator>*</operator> <name>CHECK_COM_PERCENTAGE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>minprot</name> <operator>=</operator> <name>firstprot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mindiff</name> <operator>=</operator> <name>totaltrans</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>checkcom</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>firstprot</name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>NIL</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>protnext</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>protcomst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>comstate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>minprot</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mindiff</name> <operator>=</operator> <call><name>tbldiff</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>minprot</name></expr></argument>,
<argument><expr><name><name>extrct</name><index>[<expr><name>extptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if>

<else>else <block>{<block_content>






<expr_stmt><expr><name>comstate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>firstprot</name> <operator>!=</operator> <name>NIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>minprot</name> <operator>=</operator> <name>firstprot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mindiff</name> <operator>=</operator> <call><name>tbldiff</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>minprot</name></expr></argument>,
<argument><expr><name><name>extrct</name><index>[<expr><name>extptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>







<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>*</operator> <literal type="number">100</literal> <operator>&gt;</operator>
<name>totaltrans</name> <operator>*</operator> <name>FIRST_MATCH_DIFF_PERCENTAGE</name></expr>)</condition> <block>{<block_content>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>minprot</name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>NIL</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>protnext</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>tbldiff</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>extrct</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>extptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>mindiff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extptr</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>extptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mindiff</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>minprot</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>*</operator> <literal type="number">100</literal> <operator>&gt;</operator>
<name>totaltrans</name> <operator>*</operator> <name>ACCEPTABLE_DIFF_PERCENTAGE</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>comfreq</name> <operator>*</operator> <literal type="number">100</literal> <operator>&gt;=</operator>
<name>totaltrans</name> <operator>*</operator> <name>TEMPLATE_SAME_PERCENTAGE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mktemplate</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>statenum</name></expr></argument>,
<argument><expr><name>comstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>mkprot</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>statenum</name></expr></argument>, <argument><expr><name>comstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mkentry</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>numecs</name></expr></argument>, <argument><expr><name>statenum</name></expr></argument>,
<argument><expr><name>JAMSTATE</name></expr></argument>, <argument><expr><name>totaltrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>mkentry</name> <argument_list>(<argument><expr><name><name>extrct</name><index>[<expr><name>extptr</name></expr>]</index></name></expr></argument>, <argument><expr><name>numecs</name></expr></argument>, <argument><expr><name>statenum</name></expr></argument>,
<argument><expr><name><name>prottbl</name><index>[<expr><name>minprot</name></expr>]</index></name></expr></argument>, <argument><expr><name>mindiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>mindiff</name> <operator>*</operator> <literal type="number">100</literal> <operator>&gt;=</operator>
<name>totaltrans</name> <operator>*</operator> <name>NEW_PROTO_DIFF_PERCENTAGE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mkprot</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>statenum</name></expr></argument>, <argument><expr><name>comstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>











<expr_stmt><expr><call><name>mv2front</name> <argument_list>(<argument><expr><name>minprot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>










<function><type><name>void</name></type> <name>cmptmps</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>tmpstorage</name><index>[<expr><name>CSIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmpstorage</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>totaltrans</name></decl>, <decl><type ref="prev"/><name>trans</name></decl>;</decl_stmt>

<expr_stmt><expr><name>peakpairs</name> <operator>=</operator> <name>numtemps</name> <operator>*</operator> <name>numecs</name> <operator>+</operator> <name>tblend</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>usemecs</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>nummecs</name> <operator>=</operator> <call><name>cre8ecs</name> <argument_list>(<argument><expr><name>tecfwd</name></expr></argument>, <argument><expr><name>tecbck</name></expr></argument>, <argument><expr><name>numecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nummecs</name> <operator>=</operator> <name>numecs</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>lastdfa</name> <operator>+</operator> <name>numtemps</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>current_max_dfas</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>increase_max_dfas</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>numtemps</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>totaltrans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>numecs</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>trans</name> <operator>=</operator> <name><name>tnxt</name><index>[<expr><name>numecs</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>usemecs</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>tecbck</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name><name>tecbck</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>trans</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trans</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>totaltrans</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>trans</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trans</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>totaltrans</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>









<expr_stmt><expr><call><name>mkentry</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>nummecs</name></expr></argument>, <argument><expr><name>lastdfa</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>JAMSTATE</name></expr></argument>,
<argument><expr><name>totaltrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>expand_nxt_chk</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_max</name> <init>= <expr><name>current_max_xpairs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>current_max_xpairs</name> <operator>+=</operator> <name>MAX_XPAIRS_INCREMENT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>num_reallocs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nxt</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>nxt</name></expr></argument>, <argument><expr><name>current_max_xpairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chk</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>chk</name></expr></argument>, <argument><expr><name>current_max_xpairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>chk</name> <operator>+</operator> <name>old_max</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_XPAIRS_INCREMENT</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





















<function><type><name>int</name></type> <name>find_table_space</name> <parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numtrans</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>state_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>chk_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ptr_to_last_entry_in_state</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>numtrans</name> <operator>&gt;</operator> <name>MAX_XTIONS_FULL_INTERIOR_FIT</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>tblend</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>i</name> <operator>=</operator> <name>tblend</name> <operator>-</operator> <name>numecs</name></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>




<expr_stmt><expr><name>i</name> <operator>=</operator> <name>firstfree</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>i</name> <operator>+</operator> <name>numecs</name> <operator>&gt;=</operator> <name>current_max_xpairs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_nxt_chk</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>




<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>chk</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>

<else>else<block type="pseudo"><block_content>





<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>+</operator> <name>numecs</name> <operator>&gt;=</operator> <name>current_max_xpairs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_nxt_chk</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></while>




<if_stmt><if>if <condition>(<expr><name>numtrans</name> <operator>&lt;=</operator> <name>MAX_XTIONS_FULL_INTERIOR_FIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>firstfree</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>state_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr_to_last_entry_in_state</name> <operator>=</operator> <operator>&amp;</operator><name><name>chk</name><index>[<expr><name>i</name> <operator>+</operator> <name>numecs</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>chk_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>chk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</init>
<condition><expr><name>chk_ptr</name> <operator>!=</operator> <name>ptr_to_last_entry_in_state</name></expr>;</condition> <incr><expr><operator>++</operator><name>chk_ptr</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>state_ptr</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>chk_ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>chk_ptr</name> <operator>==</operator> <name>ptr_to_last_entry_in_state</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>inittbl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>chk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>current_max_xpairs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tblend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>firstfree</name> <operator>=</operator> <name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>numtemps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>usemecs</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>tecbck</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>numecs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tecbck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tecfwd</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>tecfwd</name><index>[<expr><name>numecs</name></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>mkdeftbl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>jamstate</name> <operator>=</operator> <name>lastdfa</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>tblend</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tblend</name> <operator>+</operator> <name>numecs</name> <operator>&gt;=</operator> <name>current_max_xpairs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_nxt_chk</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>tblend</name></expr>]</index></name> <operator>=</operator> <name>end_of_buffer_state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chk</name><index>[<expr><name>tblend</name></expr>]</index></name> <operator>=</operator> <name>jamstate</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>numecs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>tblend</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chk</name><index>[<expr><name>tblend</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>jamstate</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>jambase</name> <operator>=</operator> <name>tblend</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>base</name><index>[<expr><name>jamstate</name></expr>]</index></name> <operator>=</operator> <name>jambase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><index>[<expr><name>jamstate</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tblend</name> <operator>+=</operator> <name>numecs</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>numtemps</name></expr>;</expr_stmt>
</block_content>}</block></function>





















<function><type><name>void</name></type> <name>mkentry</name> <parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numchars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>statenum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deflink</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>totaltrans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>minec</name></decl>, <decl><type ref="prev"/><name>maxec</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>baseaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tblbase</name></decl>, <decl><type ref="prev"/><name>tbllast</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>totaltrans</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deflink</name> <operator>==</operator> <name>JAMSTATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><index>[<expr><name>statenum</name></expr>]</index></name> <operator>=</operator> <name>JAMSTATE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><index>[<expr><name>statenum</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>def</name><index>[<expr><name>statenum</name></expr>]</index></name> <operator>=</operator> <name>deflink</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>minec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>minec</name> <operator>&lt;=</operator> <name>numchars</name></expr>;</condition> <incr><expr><operator>++</operator><name>minec</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>minec</name></expr>]</index></name> <operator>!=</operator> <name>SAME_TRANS</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>minec</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>deflink</name> <operator>!=</operator> <name>JAMSTATE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>totaltrans</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>stack1</name> <argument_list>(<argument><expr><name>statenum</name></expr></argument>, <argument><expr><name>minec</name></expr></argument>, <argument><expr><name><name>state</name><index>[<expr><name>minec</name></expr>]</index></name></expr></argument>, <argument><expr><name>deflink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>maxec</name> <operator>=</operator> <name>numchars</name></expr>;</init> <condition><expr><name>maxec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>maxec</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>maxec</name></expr>]</index></name> <operator>!=</operator> <name>SAME_TRANS</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>maxec</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>deflink</name> <operator>!=</operator> <name>JAMSTATE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>











<if_stmt><if>if <condition>(<expr><name>totaltrans</name> <operator>*</operator> <literal type="number">100</literal> <operator>&lt;=</operator> <name>numchars</name> <operator>*</operator> <name>INTERIOR_FIT_PERCENTAGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>baseaddr</name> <operator>=</operator> <name>firstfree</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>baseaddr</name> <operator>&lt;</operator> <name>minec</name></expr>)</condition> <block>{<block_content>



<for>for <control>(<init><expr><operator>++</operator><name>baseaddr</name></expr>;</init> <condition><expr><name><name>chk</name><index>[<expr><name>baseaddr</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>baseaddr</name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></while>

<while>while <condition>(<expr><name>baseaddr</name> <operator>+</operator> <name>maxec</name> <operator>-</operator> <name>minec</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>current_max_xpairs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_nxt_chk</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>minec</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxec</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>SAME_TRANS</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>deflink</name> <operator>!=</operator> <name>JAMSTATE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>chk</name><index>[<expr><name>baseaddr</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>minec</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><operator>++</operator><name>baseaddr</name></expr>;</init>
<condition><expr><name>baseaddr</name> <operator>&lt;</operator> <name>current_max_xpairs</name> <operator>&amp;&amp;</operator>
<name><name>chk</name><index>[<expr><name>baseaddr</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>baseaddr</name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

<while>while <condition>(<expr><name>baseaddr</name> <operator>+</operator> <name>maxec</name> <operator>-</operator> <name>minec</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator>
<name>current_max_xpairs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_nxt_chk</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>





<expr_stmt><expr><name>i</name> <operator>=</operator> <name>minec</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if>

<else>else <block>{<block_content>



<expr_stmt><expr><name>baseaddr</name> <operator>=</operator> <call><name>MAX</name> <argument_list>(<argument><expr><name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>minec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tblbase</name> <operator>=</operator> <name>baseaddr</name> <operator>-</operator> <name>minec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tbllast</name> <operator>=</operator> <name>tblbase</name> <operator>+</operator> <name>maxec</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tbllast</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>current_max_xpairs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_nxt_chk</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>base</name><index>[<expr><name>statenum</name></expr>]</index></name> <operator>=</operator> <name>tblbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><index>[<expr><name>statenum</name></expr>]</index></name> <operator>=</operator> <name>deflink</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>minec</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxec</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>SAME_TRANS</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>deflink</name> <operator>!=</operator> <name>JAMSTATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>tblbase</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chk</name><index>[<expr><name>tblbase</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>statenum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>baseaddr</name> <operator>==</operator> <name>firstfree</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><operator>++</operator><name>firstfree</name></expr>;</init> <condition><expr><name><name>chk</name><index>[<expr><name>firstfree</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>firstfree</name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tblend</name> <operator>=</operator> <call><name>MAX</name> <argument_list>(<argument><expr><name>tblend</name></expr></argument>, <argument><expr><name>tbllast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>mk1tbl</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sym</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>onenxt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>onedef</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>firstfree</name> <operator>&lt;</operator> <name>sym</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>firstfree</name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>chk</name><index>[<expr><name>firstfree</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>firstfree</name> <operator>&gt;=</operator> <name>current_max_xpairs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_nxt_chk</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><name><name>base</name><index>[<expr><name>state</name></expr>]</index></name> <operator>=</operator> <name>firstfree</name> <operator>-</operator> <name>sym</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><index>[<expr><name>state</name></expr>]</index></name> <operator>=</operator> <name>onedef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chk</name><index>[<expr><name>firstfree</name></expr>]</index></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>firstfree</name></expr>]</index></name> <operator>=</operator> <name>onenxt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>firstfree</name> <operator>&gt;</operator> <name>tblend</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tblend</name> <operator>=</operator> <name>firstfree</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>firstfree</name> <operator>&gt;=</operator> <name>current_max_xpairs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_nxt_chk</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>mkprot</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>state</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>statenum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>slot</name></decl>, <decl><type ref="prev"/><name>tblbase</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>numprots</name> <operator>&gt;=</operator> <name>MSP</name> <operator>||</operator> <name>numecs</name> <operator>*</operator> <name>numprots</name> <operator>&gt;=</operator> <name>PROT_SAVE_SIZE</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>lastprot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lastprot</name> <operator>=</operator> <name><name>protprev</name><index>[<expr><name>lastprot</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>protnext</name><index>[<expr><name>lastprot</name></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>numprots</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>protnext</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>firstprot</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>firstprot</name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>protprev</name><index>[<expr><name>firstprot</name></expr>]</index></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>firstprot</name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prottbl</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>statenum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>protcomst</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <name>comstate</name></expr>;</expr_stmt>


<expr_stmt><expr><name>tblbase</name> <operator>=</operator> <name>numecs</name> <operator>*</operator> <operator>(</operator><name>slot</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>numecs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>protsave</name><index>[<expr><name>tblbase</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>mktemplate</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>state</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>statenum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>numdiff</name></decl>, <decl><type ref="prev"/><name>tmpbase</name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><name>CSIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>transset</name><index>[<expr><name>CSIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tsptr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>numtemps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tsptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<expr_stmt><expr><name>tmpbase</name> <operator>=</operator> <name>numtemps</name> <operator>*</operator> <name>numecs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpbase</name> <operator>+</operator> <name>numecs</name> <operator>&gt;=</operator> <name>current_max_template_xpairs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_max_template_xpairs</name> <operator>+=</operator>
<name>MAX_TEMPLATE_XPAIRS_INCREMENT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>num_reallocs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tnxt</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>tnxt</name></expr></argument>,
<argument><expr><name>current_max_template_xpairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>numecs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tnxt</name><index>[<expr><name>tmpbase</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>transset</name><index>[<expr><name>tsptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tnxt</name><index>[<expr><name>tmpbase</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>comstate</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>usemecs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mkeccl</name> <argument_list>(<argument><expr><name>transset</name></expr></argument>, <argument><expr><name>tsptr</name></expr></argument>, <argument><expr><name>tecfwd</name></expr></argument>, <argument><expr><name>tecbck</name></expr></argument>, <argument><expr><name>numecs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mkprot</name> <argument_list>(<argument><expr><name>tnxt</name> <operator>+</operator> <name>tmpbase</name></expr></argument>, <argument><expr><operator>-</operator><name>numtemps</name></expr></argument>, <argument><expr><name>comstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>numdiff</name> <operator>=</operator> <call><name>tbldiff</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>firstprot</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mkentry</name> <argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>numecs</name></expr></argument>, <argument><expr><name>statenum</name></expr></argument>, <argument><expr><operator>-</operator><name>numtemps</name></expr></argument>, <argument><expr><name>numdiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>mv2front</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>qelm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>firstprot</name> <operator>!=</operator> <name>qelm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qelm</name> <operator>==</operator> <name>lastprot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lastprot</name> <operator>=</operator> <name><name>protprev</name><index>[<expr><name>lastprot</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>protnext</name><index>[<expr><name><name>protprev</name><index>[<expr><name>qelm</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>protnext</name><index>[<expr><name>qelm</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>protnext</name><index>[<expr><name>qelm</name></expr>]</index></name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>protprev</name><index>[<expr><name><name>protnext</name><index>[<expr><name>qelm</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>protprev</name><index>[<expr><name>qelm</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>protprev</name><index>[<expr><name>qelm</name></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>protnext</name><index>[<expr><name>qelm</name></expr>]</index></name> <operator>=</operator> <name>firstprot</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>protprev</name><index>[<expr><name>firstprot</name></expr>]</index></name> <operator>=</operator> <name>qelm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>firstprot</name> <operator>=</operator> <name>qelm</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>place_state</name> <parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>statenum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>transnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>state_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><call><name>find_table_space</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>transnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>base</name><index>[<expr><name>statenum</name></expr>]</index></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>






<expr_stmt><expr><name><name>chk</name><index>[<expr><name>position</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>chk</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>state_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>numecs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>state_ptr</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>state_ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chk</name><index>[<expr><name>position</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>position</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>state_ptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>+</operator> <name>numecs</name> <operator>&gt;</operator> <name>tblend</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tblend</name> <operator>=</operator> <name>position</name> <operator>+</operator> <name>numecs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>stack1</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>statenum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sym</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nextstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deflink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>onesp</name> <operator>&gt;=</operator> <name>ONE_STACK_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mk1tbl</name> <argument_list>(<argument><expr><name>statenum</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>, <argument><expr><name>nextstate</name></expr></argument>, <argument><expr><name>deflink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>onesp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>onestate</name><index>[<expr><name>onesp</name></expr>]</index></name> <operator>=</operator> <name>statenum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>onesym</name><index>[<expr><name>onesp</name></expr>]</index></name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>onenext</name><index>[<expr><name>onesp</name></expr>]</index></name> <operator>=</operator> <name>nextstate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>onedef</name><index>[<expr><name>onesp</name></expr>]</index></name> <operator>=</operator> <name>deflink</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
















<function><type><name>int</name></type> <name>tbldiff</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>state</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>ext</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name> <init>= <expr><name>state</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name> <init>= <expr><name>ext</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>protp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numdiff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>protp</name> <operator>=</operator> <operator>&amp;</operator><name><name>protsave</name><index>[<expr><name>numecs</name> <operator>*</operator> <operator>(</operator><name>pr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>numecs</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>protp</name> <operator>==</operator> <operator>*</operator><operator>++</operator><name>sp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>ep</name> <operator>=</operator> <name>SAME_TRANS</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>ep</name> <operator>=</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>numdiff</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>numdiff</name></expr>;</return>
</block_content>}</block></function>
</unit>
