<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/flex/src/tables_shared.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLEX_SCANNER</name></expr></argument>)</argument_list></call></expr></cpp:if>






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyskel_static</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyskel_static</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yyskel_static</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyskel_static</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYTBL_MAGIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTBL_MAGIC</name></cpp:macro> <cpp:value>0xF13C57B1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>yypad64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yypad64</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((8-((n)%8))%8)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYTABLES_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTABLES_TYPES</name></cpp:macro></cpp:define>



<enum>enum <name>yytbl_id</name> <block>{
<decl><name>YYTD_ID_ACCEPT</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>YYTD_ID_BASE</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>YYTD_ID_CHK</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,
<decl><name>YYTD_ID_DEF</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>YYTD_ID_EC</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>,
<decl><name>YYTD_ID_META</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>,
<decl><name>YYTD_ID_NUL_TRANS</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,
<decl><name>YYTD_ID_NXT</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>YYTD_ID_RULE_CAN_MATCH_EOL</name> <init>= <expr><literal type="number">0x09</literal></expr></init></decl>,
<decl><name>YYTD_ID_START_STATE_LIST</name> <init>= <expr><literal type="number">0x0A</literal></expr></init></decl>,
<decl><name>YYTD_ID_TRANSITION</name> <init>= <expr><literal type="number">0x0B</literal></expr></init></decl>,
<decl><name>YYTD_ID_ACCLIST</name> <init>= <expr><literal type="number">0x0C</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <name>yytbl_flags</name> <block>{

<decl><name>YYTD_DATA8</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>YYTD_DATA16</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>YYTD_DATA32</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,


<decl><name>YYTD_PTRANS</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,


<decl><name>YYTD_STRUCT</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>
}</block>;</enum>


<struct>struct <name>yytbl_hdr</name> <block>{
<decl_stmt><decl><type><name>flex_uint32_t</name></type> <name>th_magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_uint32_t</name></type> <name>th_hsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_uint32_t</name></type> <name>th_ssize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_uint16_t</name></type> <name>th_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>th_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>th_name</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>yytbl_data</name> <block>{
<decl_stmt><decl><type><name>flex_uint16_t</name></type> <name>td_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_uint16_t</name></type> <name>td_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_uint32_t</name></type> <name>td_hilen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_uint32_t</name></type> <name>td_lolen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>td_data</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>YYTDFLAGS2BYTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTDFLAGS2BYTES</name><parameter_list>(<parameter><type><name>td_flags</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(((td_flags) &amp; YYTD_DATA8)? sizeof(flex_int8_t):(((td_flags) &amp; YYTD_DATA16)? sizeof(flex_int16_t):sizeof(flex_int32_t)))</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLEX_SCANNER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>%</operator><name>not</name><operator>-</operator></expr></expr_stmt><for>for-header
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
yyskel_static flex_int32_t yytbl_calc_total_len <control>(<init><expr><specifier>const</specifier> struct <name>yytbl_data</name> <operator>*</operator><name>tbl</name></expr></init>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLEX_SCANNER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>%</operator><name>ok</name><operator>-</operator></expr></expr_stmt><for>for-header</for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
