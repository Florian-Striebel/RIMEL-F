<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/flex/src/filter.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flexdef.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>check_4_gnu_m4</name> <init>=
<expr><literal type="string">"m4_dnl ifdef(`__gnu__', ,"</literal>
<literal type="string">"`errprint(Flex requires GNU M4. Set the PATH or set the M4 environment variable to its path name.)"</literal>
<literal type="string">" m4exit(2)')\n"</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>output_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>








<function><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter_create_ext</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>


<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"malloc failed (f) in filter_create_ext"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>filter_func</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>max_args</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>max_args</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>argv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"malloc failed (f-&gt;argv) in filter_create_ext"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>argc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;=</operator> <name>max_args</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_args</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>max_args</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>argc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>argc</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>









<function><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter_create_int</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter_func</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>


<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"malloc failed in filter_create_int"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>filter_func</name></name> <operator>=</operator> <name>filter_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>filter_apply_chain</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type> <name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>, <decl><type ref="prev"/><name><name>pipes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name>chain</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_apply_chain</name> <argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></else></if_stmt>




<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>pipe</name> <argument_list>(<argument><expr><name>pipes</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"pipe failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>fork</name> <argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"fork failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>pipes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clearerr</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dup2</name> <argument_list>(<argument><expr><name><name>pipes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>fileno</name> <argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexfatal</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"dup2(pipes[0],0)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>pipes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name> <argument_list>(<argument><expr><name>stdin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fgetc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>filter_func</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name><name>chain</name><operator>-&gt;</operator><name>filter_func</name></name> <argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexfatal</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"filter_func failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FLEX_EXIT</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>execvp</name> <argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><specifier>const</specifier><operator>)</operator> <operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>argv</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lerr_fatal</name> <argument_list>( <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"exec of %s failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>FLEX_EXIT</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>pipes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dup2</name> <argument_list>(<argument><expr><name><name>pipes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>fileno</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexfatal</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"dup2(pipes[1],1)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name><name>pipes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>filter_truncate</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chain</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <name>max_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>filter_tee_header</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>readsz</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>to_cfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>to_c</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to_h</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>write_header</name></decl>;</decl_stmt>

<expr_stmt><expr><name>write_header</name> <operator>=</operator> <operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>extra</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>to_cfd</name> <operator>=</operator> <call><name>dup</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexfatal</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"dup(1) failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>to_c</name> <operator>=</operator> <call><name>fdopen</name> <argument_list>(<argument><expr><name>to_cfd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>write_header</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>freopen</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>chain</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexfatal</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"freopen(headerfilename) failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>filter_apply_chain</name> <argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to_h</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>write_header</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name>check_4_gnu_m4</name></expr></argument>, <argument><expr><name>to_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"m4_changecom`'m4_dnl\n"</literal></expr></argument>, <argument><expr><name>to_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"m4_changequote`'m4_dnl\n"</literal></expr></argument>, <argument><expr><name>to_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"m4_changequote([[,]])[[]]m4_dnl\n"</literal></expr></argument>, <argument><expr><name>to_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"m4_define([[M4_YY_NOOP]])[[]]m4_dnl\n"</literal></expr></argument>, <argument><expr><name>to_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"m4_define( [[M4_YY_IN_HEADER]],[[]])m4_dnl\n"</literal></expr></argument>,
<argument><expr><name>to_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>to_h</name></expr></argument>, <argument><expr><literal type="string">"#ifndef %sHEADER_H\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>to_h</name></expr></argument>, <argument><expr><literal type="string">"#define %sHEADER_H 1\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>to_h</name></expr></argument>, <argument><expr><literal type="string">"#define %sIN_HEADER 1\n\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>to_h</name></expr></argument>,
<argument><expr><literal type="string">"m4_define( [[M4_YY_OUTFILE_NAME]],[[%s]])m4_dnl\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>headerfilename</name></expr> ?</condition><then> <expr><name>headerfilename</name></expr> </then><else>: <expr><literal type="string">"&lt;stdout&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name>check_4_gnu_m4</name></expr></argument>, <argument><expr><name>to_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"m4_changecom`'m4_dnl\n"</literal></expr></argument>, <argument><expr><name>to_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"m4_changequote`'m4_dnl\n"</literal></expr></argument>, <argument><expr><name>to_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"m4_changequote([[,]])[[]]m4_dnl\n"</literal></expr></argument>, <argument><expr><name>to_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"m4_define([[M4_YY_NOOP]])[[]]m4_dnl\n"</literal></expr></argument>, <argument><expr><name>to_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>to_c</name></expr></argument>, <argument><expr><literal type="string">"m4_define( [[M4_YY_OUTFILE_NAME]],[[%s]])m4_dnl\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>outfilename</name></expr> ?</condition><then> <expr><name>outfilename</name></expr> </then><else>: <expr><literal type="string">"&lt;stdout&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>readsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"malloc failed in filter_tee_header"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>fgets</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readsz</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>to_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>write_header</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>to_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>write_header</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>to_h</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>gen_line_dirs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>to_h</name></expr></argument>, <argument><expr><literal type="string">"#line 4000 \"M4_YY_OUTFILE_NAME\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>to_h</name></expr></argument>, <argument><expr><literal type="string">"#undef %sIN_HEADER\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>to_h</name></expr></argument>, <argument><expr><literal type="string">"#endif /* %sHEADER_H */\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">"m4_undefine( [[M4_YY_IN_HEADER]])m4_dnl\n"</literal></expr></argument>, <argument><expr><name>to_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>to_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name> <argument_list>(<argument><expr><name>to_h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lerr</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error writing output file %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>chain</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>fclose</name> <argument_list>(<argument><expr><name>to_h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lerr</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error closing output file %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>chain</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>to_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name> <argument_list>(<argument><expr><name>to_c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lerr</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error writing output file %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>outfilename</name></expr> ?</condition><then> <expr><name>outfilename</name></expr> </then><else>: <expr><literal type="string">"&lt;stdout&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>fclose</name> <argument_list>(<argument><expr><name>to_c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lerr</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error closing output file %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>outfilename</name></expr> ?</condition><then> <expr><name>outfilename</name></expr> </then><else>: <expr><literal type="string">"&lt;stdout&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>wait</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><call><name>FLEX_EXIT</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>filter_fix_linedirs</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>readsz</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>in_gen</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>last_was_blank</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chain</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>readsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"malloc failed in filter_fix_linedirs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>fgets</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>readsz</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>regmatch_t</name></type> <name><name>m</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal>
<operator>&amp;&amp;</operator> <call><name>regexec</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>regex_linedir</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>


<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>regmatch_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>fname</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>outfilename</name></expr> ?</condition><then> <expr><name>outfilename</name></expr> </then><else>: <expr><literal type="string">"&lt;stdout&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call>
<operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>fname</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>headerfilename</name></expr> ?</condition><then> <expr><name>headerfilename</name></expr> </then><else>: <expr><literal type="string">"&lt;stdout&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call>
<operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><name>MAXLINE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>s2</name> <operator>-</operator> <name>filename</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>MAXLINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>s1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s2</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>s2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s1</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>s2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>in_gen</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readsz</name></expr></argument>, <argument><expr><literal type="string">"#line %d \"%s\"\n"</literal></expr></argument>,
<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>in_gen</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_was_blank</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>in_gen</name>
<operator>&amp;&amp;</operator> <call><name>regexec</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>regex_blank_line</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>last_was_blank</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>last_was_blank</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>last_was_blank</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fflush</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ferror</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lerr</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error writing output file %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>outfilename</name></expr> ?</condition><then> <expr><name>outfilename</name></expr> </then><else>: <expr><literal type="string">"&lt;stdout&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>fclose</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lerr</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error closing output file %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>outfilename</name></expr> ?</condition><then> <expr><name>outfilename</name></expr> </then><else>: <expr><literal type="string">"&lt;stdout&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
