<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/flex/src/regex.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flexdef.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>REGEXP_LINEDIR</name> <init>= <expr><literal type="string">"^#line ([[:digit:]]+) \"(.*)\""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>REGEXP_BLANK_LINE</name> <init>= <expr><literal type="string">"^[[:space:]]*$"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regex_t</name></type> <name>regex_linedir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regex_t</name></type> <name>regex_blank_line</name></decl>;</decl_stmt>





<function><type><name>bool</name></type> <name>flex_init_regex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>flex_regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regex_linedir</name></expr></argument>, <argument><expr><name>REGEXP_LINEDIR</name></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flex_regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regex_blank_line</name></expr></argument>, <argument><expr><name>REGEXP_BLANK_LINE</name></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>flex_regcomp</name><parameter_list>(<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>regex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>regcomp</name> <argument_list>(<argument><expr><name>preg</name></expr></argument>, <argument><expr><name>regex</name></expr></argument>, <argument><expr><name>cflags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>errbuf_sz</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>errbuf_sz</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexfatal</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to allocate buffer to report regcomp"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuf_sz</name></expr></argument>, <argument><expr><literal type="string">"regcomp for \"%s\" failed: "</literal></expr></argument>, <argument><expr><name>regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>preg</name></expr></argument>, <argument><expr><name>errbuf</name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name>errbuf_sz</name><operator>-</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flexfatal</name> <argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>char</name> <modifier>*</modifier></type><name>regmatch_dup</name> <parameter_list>(<parameter><decl><type><name>regmatch_t</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_eo</name></name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>rm_eo</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexfatal</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to allocate a copy of the match"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>char</name> <modifier>*</modifier></type><name>regmatch_cpy</name> <parameter_list>(<parameter><decl><type><name>regmatch_t</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>regmatch_len</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>regmatch_len</name> <parameter_list>(<parameter><decl><type><name>regmatch_t</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>m</name><operator>-&gt;</operator><name>rm_eo</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>regmatch_strtol</name> <parameter_list>(<parameter><decl><type><name>regmatch_t</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bufsz</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>bufsz</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regmatch_len</name> <argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>bufsz</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>regmatch_cpy</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>regmatch_dup</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>regmatch_empty</name> <parameter_list>(<parameter><decl><type><name>regmatch_t</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_so</name></name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>rm_eo</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


</unit>
