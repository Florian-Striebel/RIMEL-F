<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/flex/src/ecs.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flexdef.h"</cpp:file></cpp:include>



<function><type><name>void</name></type> <name>ccl2ecl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ich</name></decl>, <decl><type ref="prev"/><name>newlen</name></decl>, <decl><type ref="prev"/><name>cclp</name></decl>, <decl><type ref="prev"/><name>ccls</name></decl>, <decl><type ref="prev"/><name>cclmec</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastccl</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>







<expr_stmt><expr><name>newlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cclp</name> <operator>=</operator> <name><name>cclmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ccls</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ccls</name> <operator>&lt;</operator> <name><name>ccllen</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>ccls</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ich</name> <operator>=</operator> <name><name>ccltbl</name><index>[<expr><name>cclp</name> <operator>+</operator> <name>ccls</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cclmec</name> <operator>=</operator> <name><name>ecgroup</name><index>[<expr><name>ich</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cclmec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ccltbl</name><index>[<expr><name>cclp</name> <operator>+</operator> <name>newlen</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>cclmec</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>newlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ccllen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>cre8ecs</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>fwd</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>bck</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>numcl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>numcl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>bck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>numcl</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>fwd</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>!=</operator> <name>NIL</name></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <name><name>fwd</name><index>[<expr><name>j</name></expr>]</index></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bck</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>numcl</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>numcl</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>void</name></type> <name>mkeccl</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ccls</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenccl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>fwd</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>bck</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>llsiz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>NUL_mapping</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cclp</name></decl>, <decl><type ref="prev"/><name>oldec</name></decl>, <decl><type ref="prev"/><name>newec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cclm</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>cclflags</name><index>[<expr><name>CSIZE</name></expr>]</index></name></decl>;</decl_stmt>





<expr_stmt><expr><name>cclp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cclp</name> <operator>&lt;</operator> <name>lenccl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cclm</name> <operator>=</operator> <name><name>ccls</name><index>[<expr><name>cclp</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>NUL_mapping</name> <operator>&amp;&amp;</operator> <name>cclm</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cclm</name> <operator>=</operator> <name>NUL_mapping</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldec</name> <operator>=</operator> <name><name>bck</name><index>[<expr><name>cclm</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>newec</name> <operator>=</operator> <name>cclm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>cclp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>fwd</name><index>[<expr><name>cclm</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>NIL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>llsiz</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>fwd</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lenccl</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ccl_char</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>NUL_mapping</name> <operator>&amp;&amp;</operator> <name><name>ccls</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ccl_char</name> <operator>=</operator> <name>NUL_mapping</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ccl_char</name> <operator>=</operator> <name><name>ccls</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ccl_char</name> <operator>&gt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ccl_char</name> <operator>==</operator> <name>i</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cclflags</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name><name>bck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>newec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fwd</name><index>[<expr><name>newec</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newec</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cclflags</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<goto>goto <name>next_pt</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>





<expr_stmt><expr><name><name>bck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>oldec</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oldec</name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fwd</name><index>[<expr><name>oldec</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldec</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<label><name>next_pt</name>:</label><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>bck</name><index>[<expr><name>cclm</name></expr>]</index></name> <operator>!=</operator> <name>NIL</name> <operator>||</operator> <name>oldec</name> <operator>!=</operator> <name><name>bck</name><index>[<expr><name>cclm</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bck</name><index>[<expr><name>cclm</name></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fwd</name><index>[<expr><name>oldec</name></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fwd</name><index>[<expr><name>newec</name></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>



<for>for <control>(<init><expr><operator>++</operator><name>cclp</name></expr>;</init> <condition><expr><name>cclp</name> <operator>&lt;</operator> <name>lenccl</name> <operator>&amp;&amp;</operator> <name><name>cclflags</name><index>[<expr><name>cclp</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>cclp</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cclflags</name><index>[<expr><name>cclp</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>mkechar</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>tch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>fwd</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>bck</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>fwd</name><index>[<expr><name>tch</name></expr>]</index></name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bck</name><index>[<expr><name><name>fwd</name><index>[<expr><name>tch</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>bck</name><index>[<expr><name>tch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bck</name><index>[<expr><name>tch</name></expr>]</index></name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fwd</name><index>[<expr><name><name>bck</name><index>[<expr><name>tch</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>fwd</name><index>[<expr><name>tch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fwd</name><index>[<expr><name>tch</name></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bck</name><index>[<expr><name>tch</name></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
