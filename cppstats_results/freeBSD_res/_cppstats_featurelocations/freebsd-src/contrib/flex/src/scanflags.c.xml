<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/flex/src/scanflags.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flexdef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>scanflags_t</name><modifier>*</modifier></type> <name>_sf_stk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>_sf_top_ix</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>_sf_max</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>sf_push</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>_sf_top_ix</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>_sf_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>_sf_max</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>_sf_stk</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>_sf_stk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scanflags_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>_sf_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>_sf_stk</name><index>[<expr><name>_sf_top_ix</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>_sf_stk</name><index>[<expr><name>_sf_top_ix</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>_sf_top_ix</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sf_pop</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>_sf_top_ix</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>_sf_top_ix</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>sf_init</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>_sf_stk</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>_sf_max</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>_sf_stk</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scanflags_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>_sf_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>_sf_stk</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lerr_fatal</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to allocate %zu of stack"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scanflags_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>_sf_stk</name><index>[<expr><name>_sf_top_ix</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
