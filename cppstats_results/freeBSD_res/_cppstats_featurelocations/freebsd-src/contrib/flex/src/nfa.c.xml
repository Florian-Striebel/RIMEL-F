<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/flex/src/nfa.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flexdef.h"</cpp:file></cpp:include>




<function_decl><type><name>int</name></type> <name>dupmachine</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mkxtion</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function><type><name>void</name></type> <name>add_accept</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>mach</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>accepting_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>transchar</name><index>[<expr><name><name>finalst</name><index>[<expr><name>mach</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name>SYM_EPSILON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>accptnum</name><index>[<expr><name><name>finalst</name><index>[<expr><name>mach</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>accepting_number</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>astate</name> <init>= <expr><call><name>mkstate</name> <argument_list>(<argument><expr><name>SYM_EPSILON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>accptnum</name><index>[<expr><name>astate</name></expr>]</index></name> <operator>=</operator> <name>accepting_number</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>link_machines</name> <argument_list>(<argument><expr><name>mach</name></expr></argument>, <argument><expr><name>astate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>copysingl</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>singl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>copy</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>mkstate</name> <argument_list>(<argument><expr><name>SYM_EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>link_machines</name> <argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><call><name>dupmachine</name> <argument_list>(<argument><expr><name>singl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>copy</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>dumpnfa</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>state1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sym</name></decl>, <decl><type ref="prev"/><name>tsp1</name></decl>, <decl><type ref="prev"/><name>tsp2</name></decl>, <decl><type ref="prev"/><name>anum</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><call><name>_</name>
<argument_list>(<argument><expr><literal type="string">"\n\n********** beginning dump of nfa with start state %d\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>state1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<for>for <control>(<init><expr><name>ns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ns</name> <operator>&lt;=</operator> <name>lastnfa</name></expr>;</condition> <incr><expr><operator>++</operator><name>ns</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"state #%4d\t"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym</name> <operator>=</operator> <name><name>transchar</name><index>[<expr><name>ns</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tsp1</name> <operator>=</operator> <name><name>trans1</name><index>[<expr><name>ns</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tsp2</name> <operator>=</operator> <name><name>trans2</name><index>[<expr><name>ns</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>anum</name> <operator>=</operator> <name><name>accptnum</name><index>[<expr><name>ns</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%3d: %4d, %4d"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>, <argument><expr><name>tsp1</name></expr></argument>, <argument><expr><name>tsp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>anum</name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" [%d]"</literal></expr></argument>, <argument><expr><name>anum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"********** end of dump\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><name>int</name></type> <name>dupmachine</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>mach</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>init</name></decl>, <decl><type ref="prev"/><name>state_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name><name>lastst</name><index>[<expr><name>mach</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>firstst</name><index>[<expr><name>mach</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>mkstate</name> <argument_list>(<argument><expr><name><name>transchar</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trans1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NO_TRANSITION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name><name>finalst</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>trans1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>state</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transchar</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>SYM_EPSILON</name> <operator>&amp;&amp;</operator>
<name><name>trans2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NO_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name><name>finalst</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>trans2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>state</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>accptnum</name><index>[<expr><name>state</name></expr>]</index></name> <operator>=</operator> <name><name>accptnum</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexfatal</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"empty machine in dupmachine()"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state_offset</name> <operator>=</operator> <name>state</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>init</name> <operator>=</operator> <name>mach</name> <operator>+</operator> <name>state_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>firstst</name><index>[<expr><name>init</name></expr>]</index></name> <operator>=</operator> <name><name>firstst</name><index>[<expr><name>mach</name></expr>]</index></name> <operator>+</operator> <name>state_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalst</name><index>[<expr><name>init</name></expr>]</index></name> <operator>=</operator> <name><name>finalst</name><index>[<expr><name>mach</name></expr>]</index></name> <operator>+</operator> <name>state_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastst</name><index>[<expr><name>init</name></expr>]</index></name> <operator>=</operator> <name><name>lastst</name><index>[<expr><name>mach</name></expr>]</index></name> <operator>+</operator> <name>state_offset</name></expr>;</expr_stmt>

<return>return <expr><name>init</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>void</name></type> <name>finish_rule</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>mach</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>variable_trail_rule</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>headcnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trailcnt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pcont_act</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>action_text</name><index>[<expr><name>MAXLINE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_accept</name> <argument_list>(<argument><expr><name>mach</name></expr></argument>, <argument><expr><name>num_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>rule_linenum</name><index>[<expr><name>num_rules</name></expr>]</index></name> <operator>=</operator> <name>linenum</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>continued_action</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>rule_linenum</name><index>[<expr><name>num_rules</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>pcont_act</name> <operator>&amp;&amp;</operator> <name><name>rule_has_nl</name><index>[<expr><name>num_rules</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rule_has_nl</name><index>[<expr><name>num_rules</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"case %d:\n"</literal></expr></argument>, <argument><expr><name>num_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_action</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rule_has_nl</name><index>[<expr><name>num_rules</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/* rule %d can match eol */\n"</literal></expr></argument>,
<argument><expr><name>num_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_action</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>variable_trail_rule</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rule_type</name><index>[<expr><name>num_rules</name></expr>]</index></name> <operator>=</operator> <name>RULE_VARIABLE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>performance_report</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><call><name>_</name>
<argument_list>(<argument><expr><literal type="string">"Variable trailing context rule at line %d\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>rule_linenum</name><index>[<expr><name>num_rules</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>variable_trailing_context_rules</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><name><name>rule_type</name><index>[<expr><name>num_rules</name></expr>]</index></name> <operator>=</operator> <name>RULE_NORMAL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>headcnt</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>trailcnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scanner_cp</name> <init>= <expr><literal type="string">"YY_G(yy_c_buf_p) = yy_cp"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scanner_bp</name> <init>= <expr><literal type="string">"yy_bp"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_action</name>
<argument_list>(<argument><expr><literal type="string">"*yy_cp = YY_G(yy_hold_char); /* undo effects of setting up yytext */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>headcnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rule_has_nl</name><index>[<expr><name>num_rules</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"YY_LINENO_REWIND_TO(%s + %d);\n"</literal></expr></argument>, <argument><expr><name>scanner_bp</name></expr></argument>, <argument><expr><name>headcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_action</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s = %s + %d;\n"</literal></expr></argument>,
<argument><expr><name>scanner_cp</name></expr></argument>, <argument><expr><name>scanner_bp</name></expr></argument>, <argument><expr><name>headcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_action</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rule_has_nl</name><index>[<expr><name>num_rules</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"YY_LINENO_REWIND_TO(yy_cp - %d);\n"</literal></expr></argument>, <argument><expr><name>trailcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_action</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s -= %d;\n"</literal></expr></argument>,
<argument><expr><name>scanner_cp</name></expr></argument>, <argument><expr><name>trailcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_action</name> <argument_list>(<argument><expr><name>action_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>add_action</name>
<argument_list>(<argument><expr><literal type="string">"YY_DO_BEFORE_ACTION; /* set up yytext again */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>continued_action</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_action</name> <argument_list>(<argument><expr><literal type="string">"YY_RULE_SETUP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>line_directive_out</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_action</name><argument_list>(<argument><expr><literal type="string">"[["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


















<function><type><name>int</name></type> <name>link_machines</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>last</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>last</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>first</name></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name><name>finalst</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalst</name><index>[<expr><name>first</name></expr>]</index></name> <operator>=</operator> <name><name>finalst</name><index>[<expr><name>last</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastst</name><index>[<expr><name>first</name></expr>]</index></name> <operator>=</operator> <call><name>MAX</name> <argument_list>(<argument><expr><name><name>lastst</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lastst</name><index>[<expr><name>last</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>firstst</name><index>[<expr><name>first</name></expr>]</index></name> <operator>=</operator> <call><name>MIN</name> <argument_list>(<argument><expr><name><name>firstst</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>firstst</name><index>[<expr><name>last</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>first</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>mark_beginning_as_normal</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>mach</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>state_type</name><index>[<expr><name>mach</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STATE_NORMAL</name></expr>:</case>

<return>return;</return>

<case>case <expr><name>STATE_TRAILING_CONTEXT</name></expr>:</case>
<expr_stmt><expr><name><name>state_type</name><index>[<expr><name>mach</name></expr>]</index></name> <operator>=</operator> <name>STATE_NORMAL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>transchar</name><index>[<expr><name>mach</name></expr>]</index></name> <operator>==</operator> <name>SYM_EPSILON</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>trans1</name><index>[<expr><name>mach</name></expr>]</index></name> <operator>!=</operator> <name>NO_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mark_beginning_as_normal</name> <argument_list>(<argument><expr><name><name>trans1</name><index>[<expr><name>mach</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trans2</name><index>[<expr><name>mach</name></expr>]</index></name> <operator>!=</operator> <name>NO_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mark_beginning_as_normal</name> <argument_list>(<argument><expr><name><name>trans2</name><index>[<expr><name>mach</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name>
<argument_list>(<argument><expr><literal type="string">"bad state type in mark_beginning_as_normal()"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
















<function><type><name>int</name></type> <name>mkbranch</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>second</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>eps</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>NO_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>second</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>second</name> <operator>==</operator> <name>NO_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>first</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>eps</name> <operator>=</operator> <call><name>mkstate</name> <argument_list>(<argument><expr><name>SYM_EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>eps</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>mkclos</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mkopt</name> <argument_list>(<argument><expr><call><name>mkposcl</name> <argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><name>int</name></type> <name>mkopt</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>mach</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>eps</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SUPER_FREE_EPSILON</name> <argument_list>(<argument><expr><name><name>finalst</name><index>[<expr><name>mach</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eps</name> <operator>=</operator> <call><name>mkstate</name> <argument_list>(<argument><expr><name>SYM_EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mach</name> <operator>=</operator> <call><name>link_machines</name> <argument_list>(<argument><expr><name>mach</name></expr></argument>, <argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>eps</name> <operator>=</operator> <call><name>mkstate</name> <argument_list>(<argument><expr><name>SYM_EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mach</name> <operator>=</operator> <call><name>link_machines</name> <argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><name>mach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name>mach</name></expr></argument>, <argument><expr><name><name>finalst</name><index>[<expr><name>mach</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mach</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>int</name></type> <name>mkor</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>second</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>eps</name></decl>, <decl><type ref="prev"/><name>orend</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>second</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>second</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>first</name></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>



<expr_stmt><expr><name>eps</name> <operator>=</operator> <call><name>mkstate</name> <argument_list>(<argument><expr><name>SYM_EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>link_machines</name> <argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUPER_FREE_EPSILON</name> <argument_list>(<argument><expr><name><name>finalst</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>accptnum</name><index>[<expr><name><name>finalst</name><index>[<expr><name>first</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name>NIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>orend</name> <operator>=</operator> <name><name>finalst</name><index>[<expr><name>first</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name><name>finalst</name><index>[<expr><name>second</name></expr>]</index></name></expr></argument>, <argument><expr><name>orend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>SUPER_FREE_EPSILON</name> <argument_list>(<argument><expr><name><name>finalst</name><index>[<expr><name>second</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>accptnum</name><index>[<expr><name><name>finalst</name><index>[<expr><name>second</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name>NIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>orend</name> <operator>=</operator> <name><name>finalst</name><index>[<expr><name>second</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name><name>finalst</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>, <argument><expr><name>orend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><name>eps</name> <operator>=</operator> <call><name>mkstate</name> <argument_list>(<argument><expr><name>SYM_EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>link_machines</name> <argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>orend</name> <operator>=</operator> <name><name>finalst</name><index>[<expr><name>first</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name><name>finalst</name><index>[<expr><name>second</name></expr>]</index></name></expr></argument>, <argument><expr><name>orend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>finalst</name><index>[<expr><name>first</name></expr>]</index></name> <operator>=</operator> <name>orend</name></expr>;</expr_stmt>
<return>return <expr><name>first</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>mkposcl</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>eps</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUPER_FREE_EPSILON</name> <argument_list>(<argument><expr><name><name>finalst</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name><name>finalst</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><name>eps</name> <operator>=</operator> <call><name>mkstate</name> <argument_list>(<argument><expr><name>SYM_EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mkxtion</name> <argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>link_machines</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>mkrep</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>mach</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>base_mach</name></decl>, <decl><type ref="prev"/><name>tail</name></decl>, <decl><type ref="prev"/><name>copy</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>base_mach</name> <operator>=</operator> <call><name>copysingl</name> <argument_list>(<argument><expr><name>mach</name></expr></argument>, <argument><expr><name>lb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ub</name> <operator>==</operator> <name>INFINITE_REPEAT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>dupmachine</name> <argument_list>(<argument><expr><name>mach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mach</name> <operator>=</operator> <call><name>link_machines</name> <argument_list>(<argument><expr><name>mach</name></expr></argument>,
<argument><expr><call><name>link_machines</name> <argument_list>(<argument><expr><name>base_mach</name></expr></argument>,
<argument><expr><call><name>mkclos</name> <argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>mkstate</name> <argument_list>(<argument><expr><name>SYM_EPSILON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>lb</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ub</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>dupmachine</name> <argument_list>(<argument><expr><name>mach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>mkopt</name> <argument_list>(<argument><expr><call><name>link_machines</name> <argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>mach</name> <operator>=</operator>
<call><name>link_machines</name> <argument_list>(<argument><expr><name>mach</name></expr></argument>,
<argument><expr><call><name>link_machines</name> <argument_list>(<argument><expr><name>base_mach</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>mach</name></expr>;</return>
</block_content>}</block></function>


















<function><type><name>int</name></type> <name>mkstate</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>lastnfa</name> <operator>&gt;=</operator> <name>current_mns</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current_mns</name> <operator>+=</operator> <name>MNS_INCREMENT</name><operator>)</operator> <operator>&gt;=</operator> <name>maximum_mns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lerr</name><argument_list>(<argument><expr><call><name>_</name>
<argument_list>(<argument><expr><literal type="string">"input rules are too complicated (&gt;= %d NFA states)"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>current_mns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>num_reallocs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>firstst</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>firstst</name></expr></argument>, <argument><expr><name>current_mns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lastst</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>lastst</name></expr></argument>, <argument><expr><name>current_mns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>finalst</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>finalst</name></expr></argument>, <argument><expr><name>current_mns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>transchar</name> <operator>=</operator>
<call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>transchar</name></expr></argument>, <argument><expr><name>current_mns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trans1</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>trans1</name></expr></argument>, <argument><expr><name>current_mns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trans2</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>trans2</name></expr></argument>, <argument><expr><name>current_mns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>accptnum</name> <operator>=</operator>
<call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>accptnum</name></expr></argument>, <argument><expr><name>current_mns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>assoc_rule</name> <operator>=</operator>
<call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>assoc_rule</name></expr></argument>, <argument><expr><name>current_mns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state_type</name> <operator>=</operator>
<call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>state_type</name></expr></argument>, <argument><expr><name>current_mns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>firstst</name><index>[<expr><name>lastnfa</name></expr>]</index></name> <operator>=</operator> <name>lastnfa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalst</name><index>[<expr><name>lastnfa</name></expr>]</index></name> <operator>=</operator> <name>lastnfa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lastst</name><index>[<expr><name>lastnfa</name></expr>]</index></name> <operator>=</operator> <name>lastnfa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transchar</name><index>[<expr><name>lastnfa</name></expr>]</index></name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trans1</name><index>[<expr><name>lastnfa</name></expr>]</index></name> <operator>=</operator> <name>NO_TRANSITION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trans2</name><index>[<expr><name>lastnfa</name></expr>]</index></name> <operator>=</operator> <name>NO_TRANSITION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>accptnum</name><index>[<expr><name>lastnfa</name></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assoc_rule</name><index>[<expr><name>lastnfa</name></expr>]</index></name> <operator>=</operator> <name>num_rules</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state_type</name><index>[<expr><name>lastnfa</name></expr>]</index></name> <operator>=</operator> <name>current_state_type</name></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><name>sym</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>sym</name> <operator>==</operator> <name>SYM_EPSILON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>numeps</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>check_char</name> <argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>useecs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mkechar</name> <argument_list>(<argument><expr><ternary><condition><expr><name>sym</name></expr> ?</condition><then> <expr><name>sym</name></expr> </then><else>: <expr><name>csize</name></expr></else></ternary></expr></argument>, <argument><expr><name>nextecm</name></expr></argument>, <argument><expr><name>ecgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>lastnfa</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>void</name></type> <name>mkxtion</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>statefrom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stateto</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>trans1</name><index>[<expr><name>statefrom</name></expr>]</index></name> <operator>==</operator> <name>NO_TRANSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>trans1</name><index>[<expr><name>statefrom</name></expr>]</index></name> <operator>=</operator> <name>stateto</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>transchar</name><index>[<expr><name>statefrom</name></expr>]</index></name> <operator>!=</operator> <name>SYM_EPSILON</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>trans2</name><index>[<expr><name>statefrom</name></expr>]</index></name> <operator>!=</operator> <name>NO_TRANSITION</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexfatal</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"found too many transitions in mkxtion()"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>eps2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trans2</name><index>[<expr><name>statefrom</name></expr>]</index></name> <operator>=</operator> <name>stateto</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>new_rule</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>num_rules</name> <operator>&gt;=</operator> <name>current_max_rules</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>num_reallocs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_max_rules</name> <operator>+=</operator> <name>MAX_RULES_INCREMENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rule_type</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>rule_type</name></expr></argument>,
<argument><expr><name>current_max_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rule_linenum</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>rule_linenum</name></expr></argument>,
<argument><expr><name>current_max_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rule_useful</name> <operator>=</operator> <call><name>reallocate_integer_array</name> <argument_list>(<argument><expr><name>rule_useful</name></expr></argument>,
<argument><expr><name>current_max_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rule_has_nl</name> <operator>=</operator> <call><name>reallocate_bool_array</name> <argument_list>(<argument><expr><name>rule_has_nl</name></expr></argument>,
<argument><expr><name>current_max_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rules</name> <operator>&gt;</operator> <name>MAX_RULE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lerr</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"too many rules (&gt; %d)!"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAX_RULE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rule_linenum</name><index>[<expr><name>num_rules</name></expr>]</index></name> <operator>=</operator> <name>linenum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rule_useful</name><index>[<expr><name>num_rules</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rule_has_nl</name><index>[<expr><name>num_rules</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
