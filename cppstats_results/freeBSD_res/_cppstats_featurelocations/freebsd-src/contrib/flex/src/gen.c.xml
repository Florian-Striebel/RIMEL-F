<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/flex/src/gen.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flexdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tables.h"</cpp:file></cpp:include>




<function_decl><type><name>void</name></type> <name>genecs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>indent_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_indent</name><parameter_list>(<parameter><type><name>indent_val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>indent_level = indent_val</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_int16_decl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>gentables</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="string">"static const flex_int16_t %s[%d] =\n { 0,\n"</literal></expr>
</then><else>: <expr><literal type="string">"static const flex_int16_t * %s = 0;\n"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_int32_decl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>gentables</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="string">"static const flex_int32_t %s[%d] =\n { 0,\n"</literal></expr>
</then><else>: <expr><literal type="string">"static const flex_int32_t * %s = 0;\n"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_state_decl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>gentables</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="string">"static const yy_state_type %s[%d] =\n { 0,\n"</literal></expr>
</then><else>: <expr><literal type="string">"static const yy_state_type * %s = 0;\n"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_yy_char_decl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>gentables</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="string">"static const YY_CHAR %s[%d] =\n { 0,\n"</literal></expr>
</then><else>: <expr><literal type="string">"static const YY_CHAR * %s = 0;\n"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>do_indent</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>indent_level</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>outc</name> <argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>outc</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>mkeoltbl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_int8_t</name> <modifier>*</modifier></type><name>tdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_RULE_CAN_MATCH_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_flags</name></name> <operator>=</operator> <name>YYTD_DATA8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <operator>(</operator><name>num_rules</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>tdata</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_rules</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>rule_has_nl</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_RULE_CAN_MATCH_EOL, (void**)&amp;yy_rule_can_match_eol, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><literal type="string">"flex_int32_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tbl</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>geneoltbl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"m4_ifdef( [[M4_YY_USE_LINENO]],[["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"/* Table of booleans, true if rule could match eol. */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><call><name>get_int32_decl</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"yy_rule_can_match_eol"</literal></expr></argument>,
<argument><expr><name>num_rules</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gentables</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_rules</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"%d, "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>rule_has_nl</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">20</literal><operator>)</operator> <operator>==</operator> <literal type="number">19</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out</name> <argument_list>(<argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>out</name> <argument_list>(<argument><expr><literal type="string">" };\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"]])"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>gen_backing_up</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reject</name> <operator>||</operator> <name>num_backing_up</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fullspd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( yy_current_state[-1].yy_nxt )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( yy_accept[yy_current_state] )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_last_accepting_state) = yy_current_state;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_last_accepting_cpos) = yy_cp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>gen_bu_action</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reject</name> <operator>||</operator> <name>num_backing_up</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_indent</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"case 0: /* must back up */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"/* undo the effects of YY_DO_BEFORE_ACTION */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"*yy_cp = YY_G(yy_hold_char);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fullspd</name> <operator>||</operator> <name>fulltbl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_cp = YY_G(yy_last_accepting_cpos) + 1;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>



<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_cp = YY_G(yy_last_accepting_cpos);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state = YY_G(yy_last_accepting_state);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"goto yy_find_action;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_indent</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>mkctbl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_int32_t</name> <modifier>*</modifier></type><name>tdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>curr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_of_buffer_action</name> <init>= <expr><name>num_rules</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_TRANSITION, (void**)&amp;yy_transition, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>tblend</name> <operator>+</operator> <name>numecs</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name>INT16_MAX</name>
<operator>||</operator> <name>long_align</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"flex_int32_t"</literal></expr> </then><else>: <expr><literal type="string">"flex_int16_t"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_TRANSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_flags</name></name> <operator>=</operator> <name>YYTD_DATA32</name> <operator>|</operator> <name>YYTD_STRUCT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_hilen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <operator>(</operator><name>tblend</name> <operator>+</operator> <name>numecs</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>tdata</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



















<while>while <condition>(<expr><name>tblend</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>current_max_xpairs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_nxt_chk</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>lastdfa</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>current_max_dfas</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>increase_max_dfas</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>base</name><index>[<expr><name>lastdfa</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tblend</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>end_of_buffer_action</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chk</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>numecs</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chk</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastdfa</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>anum</name> <init>= <expr><name><name>dfaacc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dfaacc_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chk</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>EOB_POSITION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chk</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ACTION_POSITION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>tblend</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>EOB_POSITION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>base</name><index>[<expr><name>lastdfa</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ACTION_POSITION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>numecs</name> <operator>||</operator> <name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>base</name><index>[<expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>chk</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>nxt</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>chk</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>nxt</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>tbl</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>mkssltbl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_int32_t</name> <modifier>*</modifier></type><name>tdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_int32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_START_STATE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_flags</name></name> <operator>=</operator> <name>YYTD_DATA32</name> <operator>|</operator> <name>YYTD_PTRANS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_hilen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <operator>(</operator><name>lastsc</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>tdata</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastsc</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_START_STATE_LIST, (void**)&amp;yy_start_state_list, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><literal type="string">"struct yy_trans_info*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tbl</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>genctbl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_of_buffer_action</name> <init>= <expr><name>num_rules</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>gentables</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"static const struct yy_trans_info yy_transition[%d] =\n {\n"</literal></expr></argument>, <argument><expr><name>tblend</name> <operator>+</operator> <name>numecs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"static const struct yy_trans_info *yy_transition = 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



















<while>while <condition>(<expr><name>tblend</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>current_max_xpairs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_nxt_chk</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>lastdfa</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>current_max_dfas</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>increase_max_dfas</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>base</name><index>[<expr><name>lastdfa</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tblend</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>end_of_buffer_action</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chk</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>numecs</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chk</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastdfa</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>anum</name> <init>= <expr><name><name>dfaacc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dfaacc_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chk</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>EOB_POSITION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chk</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ACTION_POSITION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>tblend</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>EOB_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transition_struct_out</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>base</name><index>[<expr><name>lastdfa</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ACTION_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transition_struct_out</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>numecs</name> <operator>||</operator> <name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transition_struct_out</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transition_struct_out</name> <argument_list>(<argument><expr><name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>base</name><index>[<expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>-</operator>
<name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>transition_struct_out</name> <argument_list>(<argument><expr><name><name>chk</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nxt</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transition_struct_out</name> <argument_list>(<argument><expr><name><name>chk</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nxt</name><index>[<expr><name>tblend</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gentables</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">" };\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>gentables</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"static const struct yy_trans_info *yy_start_state_list[%d] =\n"</literal></expr></argument>, <argument><expr><name>lastsc</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"static const struct yy_trans_info **yy_start_state_list =0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gentables</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">" {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastsc</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">" &amp;yy_transition[%d],\n"</literal></expr></argument>, <argument><expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>useecs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>genecs</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>mkecstbl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>tbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_int32_t</name> <modifier>*</modifier></type><name>tdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_EC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_flags</name></name> <operator>|=</operator> <name>YYTD_DATA32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_hilen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <name>csize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>tdata</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ecgroup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ABS</name> <argument_list>(<argument><expr><name><name>ecgroup</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ecgroup</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_EC, (void**)&amp;yy_ec, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><literal type="string">"YY_CHAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tbl</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>genecs</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numrows</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><call><name>get_yy_char_decl</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"yy_ec"</literal></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ecgroup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ABS</name> <argument_list>(<argument><expr><name><name>ecgroup</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>ecgroup</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trace</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n\nEquivalence Classes:\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>numrows</name> <operator>=</operator> <name>csize</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numrows</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csize</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>numrows</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%4s = %-2d"</literal></expr></argument>,
<argument><expr><call><name>readable_form</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ecgroup</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>gen_find_action</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fullspd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_act = yy_current_state[-1].yy_nxt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>fulltbl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_act = yy_accept[yy_current_state];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>reject</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state = *--YY_G(yy_state_ptr);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_lp) = yy_accept[yy_current_state];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>variable_trailing_context_rules</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"m4_ifdef( [[M4_YY_USES_REJECT]],\n[["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>reject_really_used</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"find_rule: /* we branch to this label when backing up */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>variable_trailing_context_rules</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"]])\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"for ( ; ; ) /* until we find what rule we matched */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"if ( YY_G(yy_lp) &amp;&amp; YY_G(yy_lp) &lt; yy_accept[yy_current_state + 1] )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_act = yy_acclist[YY_G(yy_lp)];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>variable_trailing_context_rules</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"if ( yy_act &amp; YY_TRAILING_HEAD_MASK ||"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">" YY_G(yy_looking_for_trail_begin) )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"if ( yy_act == YY_G(yy_looking_for_trail_begin) )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_looking_for_trail_begin) = 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_act &amp;= ~YY_TRAILING_HEAD_MASK;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"break;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"else if ( yy_act &amp; YY_TRAILING_MASK )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"YY_G(yy_looking_for_trail_begin) = yy_act &amp; ~YY_TRAILING_MASK;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"YY_G(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>real_reject</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"YY_G(yy_full_match) = yy_cp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"YY_G(yy_full_state) = YY_G(yy_state_ptr);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_full_lp) = YY_G(yy_lp);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"else"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_full_match) = yy_cp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"YY_G(yy_full_state) = YY_G(yy_state_ptr);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_full_lp) = YY_G(yy_lp);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"break;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"++YY_G(yy_lp);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"goto find_rule;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>



<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_full_match) = yy_cp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"break;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"--yy_cp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state = *--YY_G(yy_state_ptr);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_lp) = yy_accept[yy_current_state];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_act = yy_accept[yy_current_state];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interactive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>reject</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( yy_act == 0 )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{ /* have to back up */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_cp = YY_G(yy_last_accepting_cpos);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_current_state = YY_G(yy_last_accepting_state);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_act = yy_accept[yy_current_state];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>mkftbl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_of_buffer_action</name> <init>= <expr><name>num_rules</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_int32_t</name> <modifier>*</modifier></type><name>tdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_ACCEPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_flags</name></name> <operator>|=</operator> <name>YYTD_DATA32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_hilen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <operator>(</operator><name>lastdfa</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>tdata</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dfaacc</name><index>[<expr><name>end_of_buffer_state</name></expr>]</index></name><operator>.</operator><name>dfaacc_state</name> <operator>=</operator> <name>end_of_buffer_action</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastdfa</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>anum</name> <init>= <expr><name><name>dfaacc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dfaacc_state</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tdata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trace</name> <operator>&amp;&amp;</operator> <name>anum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"state #%d accepts: [%d]\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>anum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_ACCEPT, (void**)&amp;yy_accept, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>long_align</name></expr> ?</condition><then> <expr><literal type="string">"flex_int32_t"</literal></expr> </then><else>: <expr><literal type="string">"flex_int16_t"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tbl</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>genftbl</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_of_buffer_action</name> <init>= <expr><name>num_rules</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><ternary><condition><expr><name>long_align</name></expr> ?</condition><then> <expr><call><name>get_int32_decl</name> <argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>get_int16_decl</name> <argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"yy_accept"</literal></expr></argument>, <argument><expr><name>lastdfa</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dfaacc</name><index>[<expr><name>end_of_buffer_state</name></expr>]</index></name><operator>.</operator><name>dfaacc_state</name> <operator>=</operator> <name>end_of_buffer_action</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastdfa</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>anum</name> <init>= <expr><name><name>dfaacc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dfaacc_state</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name>anum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trace</name> <operator>&amp;&amp;</operator> <name>anum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"state #%d accepts: [%d]\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>anum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>useecs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>genecs</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




</block_content>}</block></function>




<function><type><name>void</name></type> <name>gen_next_compressed_state</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>char_map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>indent_put2s</name> <argument_list>(<argument><expr><literal type="string">"YY_CHAR yy_c = %s;"</literal></expr></argument>, <argument><expr><name>char_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>gen_backing_up</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state = (int) yy_def[yy_current_state];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>usemecs</name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"if ( yy_current_state &gt;= %d )\n"</literal></expr></argument>, <argument><expr><name>lastdfa</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_c = yy_meta[yy_c];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>gen_next_match</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>char_map</name> <init>= <expr><ternary><condition><expr><name>useecs</name></expr> ?</condition><then>
<expr><literal type="string">"yy_ec[YY_SC_TO_UI(*yy_cp)] "</literal></expr> </then><else>: <expr><literal type="string">"YY_SC_TO_UI(*yy_cp)"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>char_map_2</name> <init>= <expr><ternary><condition><expr><name>useecs</name></expr> ?</condition><then>
<expr><literal type="string">"yy_ec[YY_SC_TO_UI(*++yy_cp)] "</literal></expr> </then><else>: <expr><literal type="string">"YY_SC_TO_UI(*++yy_cp)"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fulltbl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gentables</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_put2s</name>
<argument_list>(<argument><expr><literal type="string">"while ( (yy_current_state = yy_nxt[yy_current_state][ %s ]) &gt; 0 )"</literal></expr></argument>,
<argument><expr><name>char_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_put2s</name>
<argument_list>(<argument><expr><literal type="string">"while ( (yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN + %s ]) &gt; 0 )"</literal></expr></argument>,
<argument><expr><name>char_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_backing_up</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_backing_up</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"++yy_cp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_backing_up</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>outc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state = -yy_current_state;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>fullspd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"const struct yy_trans_info *yy_trans_info;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_CHAR yy_c;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_put2s</name> <argument_list>(<argument><expr><literal type="string">"for ( yy_c = %s;"</literal></expr></argument>, <argument><expr><name>char_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">" (yy_trans_info = &amp;yy_current_state[yy_c])-&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_verify == yy_c;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_put2s</name> <argument_list>(<argument><expr><literal type="string">" yy_c = %s )"</literal></expr></argument>, <argument><expr><name>char_map_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_backing_up</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state += yy_trans_info-&gt;yy_nxt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_backing_up</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>outc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_backing_up</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"do"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gen_next_state</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"++yy_cp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"while ( yy_base[yy_current_state] != %d );\n"</literal></expr></argument>, <argument><expr><name>jambase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"while ( yy_current_state != %d );\n"</literal></expr></argument>,
<argument><expr><name>jamstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reject</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>interactive</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_cp = YY_G(yy_last_accepting_cpos);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_current_state = YY_G(yy_last_accepting_state);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>gen_next_state</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>worry_about_NULs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>char_map</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>worry_about_NULs</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nultrans</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>useecs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>char_map</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_map</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : %d)"</literal></expr></argument>,
<argument><expr><name>NUL_ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>char_map</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_map</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"(*yy_cp ? YY_SC_TO_UI(*yy_cp) : %d)"</literal></expr></argument>,
<argument><expr><name>NUL_ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>char_map</name></expr></argument>, <argument><expr><ternary><condition><expr><name>useecs</name></expr> ?</condition><then>
<expr><literal type="string">"yy_ec[YY_SC_TO_UI(*yy_cp)] "</literal></expr> </then><else>:
<expr><literal type="string">"YY_SC_TO_UI(*yy_cp)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>worry_about_NULs</name> <operator>&amp;&amp;</operator> <name>nultrans</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fulltbl</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fullspd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gen_backing_up</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( *yy_cp )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fulltbl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gentables</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_put2s</name>
<argument_list>(<argument><expr><literal type="string">"yy_current_state = yy_nxt[yy_current_state][%s];"</literal></expr></argument>,
<argument><expr><name>char_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_put2s</name>
<argument_list>(<argument><expr><literal type="string">"yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN + %s];"</literal></expr></argument>,
<argument><expr><name>char_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>fullspd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_put2s</name>
<argument_list>(<argument><expr><literal type="string">"yy_current_state += yy_current_state[%s].yy_nxt;"</literal></expr></argument>,
<argument><expr><name>char_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_next_compressed_state</name> <argument_list>(<argument><expr><name>char_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>worry_about_NULs</name> <operator>&amp;&amp;</operator> <name>nultrans</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"else"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_current_state = yy_NUL_trans[yy_current_state];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fullspd</name> <operator>||</operator> <name>fulltbl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_backing_up</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reject</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"*YY_G(yy_state_ptr)++ = yy_current_state;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>gen_NUL_trans</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>need_backing_up</name> <init>= <expr><operator>(</operator><name>num_backing_up</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>reject</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>need_backing_up</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>nultrans</name> <operator>||</operator> <name>fullspd</name> <operator>||</operator> <name>fulltbl</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"char *yy_cp = YY_G(yy_c_buf_p);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>outc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nultrans</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_current_state = yy_NUL_trans[yy_current_state];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_is_jam = (yy_current_state == 0);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>fulltbl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gentables</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state = yy_nxt[yy_current_state][%d];\n"</literal></expr></argument>, <argument><expr><name>NUL_ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN + %d];\n"</literal></expr></argument>, <argument><expr><name>NUL_ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_is_jam = (yy_current_state &lt;= 0);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>fullspd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"int yy_c = %d;\n"</literal></expr></argument>, <argument><expr><name>NUL_ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"const struct yy_trans_info *yy_trans_info;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_trans_info = &amp;yy_current_state[(unsigned int) yy_c];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state += yy_trans_info-&gt;yy_nxt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_is_jam = (yy_trans_info-&gt;yy_verify != yy_c);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>NUL_ec_str</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>NUL_ec_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NUL_ec_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>NUL_ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_next_compressed_state</name> <argument_list>(<argument><expr><name>NUL_ec_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"yy_is_jam = (yy_current_state == %d);\n"</literal></expr></argument>,
<argument><expr><name>jamstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reject</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( ! yy_is_jam )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"*YY_G(yy_state_ptr)++ = yy_current_state;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>need_backing_up</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>fullspd</name> <operator>||</operator> <name>fulltbl</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>outc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( ! yy_is_jam )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_backing_up</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>gen_start_state</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fullspd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bol_needed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_current_state = yy_start_state_list[YY_G(yy_start) + YY_AT_BOL()];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_current_state = yy_start_state_list[YY_G(yy_start)];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state = YY_G(yy_start);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bol_needed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state += YY_AT_BOL();"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reject</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"m4_ifdef( [[M4_YY_USES_REJECT]],\n[["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"YY_G(yy_state_ptr) = YY_G(yy_state_buf);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"*YY_G(yy_state_ptr)++ = yy_current_state;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"]])"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>gentabs</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>accset</name></decl>, <decl><type ref="prev"/><name>nacc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>acc_array</name></decl>, <decl><type ref="prev"/><name>total_states</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_of_buffer_action</name> <init>= <expr><name>num_rules</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>yyacc_tbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yymeta_tbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yybase_tbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>yydef_tbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yynxt_tbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yychk_tbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yyacclist_tbl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_int32_t</name> <modifier>*</modifier></type><name>yyacc_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yybase_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yydef_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>yynxt_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yychk_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>yyacclist_data</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>flex_int32_t</name></type> <name>yybase_curr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>yyacclist_curr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>yyacc_curr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>acc_array</name> <operator>=</operator> <call><name>allocate_integer_array</name> <argument_list>(<argument><expr><name>current_max_dfas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nummt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<expr_stmt><expr><operator>++</operator><name>num_backing_up</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reject</name></expr>)</condition> <block>{<block_content>






<decl_stmt><decl><type><name>int</name></type> <name><name>EOB_accepting_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>EOB_accepting_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>EOB_accepting_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>end_of_buffer_action</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>accsiz</name><index>[<expr><name>end_of_buffer_state</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dfaacc</name><index>[<expr><name>end_of_buffer_state</name></expr>]</index></name><operator>.</operator><name>dfaacc_set</name> <operator>=</operator>
<name>EOB_accepting_list</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><ternary><condition><expr><name>long_align</name></expr> ?</condition><then> <expr><call><name>get_int32_decl</name> <argument_list>()</argument_list></call></expr> </then><else>:
<expr><call><name>get_int16_decl</name> <argument_list>()</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"yy_acclist"</literal></expr></argument>, <argument><expr><call><name>MAX</name> <argument_list>(<argument><expr><name>numas</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_ACCLIST, (void**)&amp;yy_acclist, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>long_align</name></expr> ?</condition><then> <expr><literal type="string">"flex_int32_t"</literal></expr> </then><else>: <expr><literal type="string">"flex_int16_t"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yyacclist_tbl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>yyacclist_tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_ACCLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyacclist_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <operator>(</operator><call><name>MAX</name><argument_list>(<argument><expr><name>numas</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyacclist_tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>yyacclist_data</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>yyacclist_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyacclist_curr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastdfa</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>accsiz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>accset</name> <operator>=</operator> <name><name>dfaacc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dfaacc_set</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nacc</name> <operator>=</operator> <name><name>accsiz</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trace</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"state #%d accepts: "</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>nacc</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>accnum</name> <init>= <expr><name><name>accset</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>variable_trailing_context_rules</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>accnum</name> <operator>&amp;</operator>
<name>YY_TRAILING_HEAD_MASK</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>accnum</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>accnum</name> <operator>&lt;=</operator> <name>num_rules</name>
<operator>&amp;&amp;</operator> <name><name>rule_type</name><index>[<expr><name>accnum</name></expr>]</index></name> <operator>==</operator>
<name>RULE_VARIABLE</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>accnum</name> <operator>|=</operator> <name>YY_TRAILING_MASK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name>accnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyacclist_data</name><index>[<expr><name>yyacclist_curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>accnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trace</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"[%d]"</literal></expr></argument>,
<argument><expr><name><name>accset</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>nacc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>,
<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putc</name> <argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>,
<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>yyacclist_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>yyacclist_tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not write yyacclist_tbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>yyacclist_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyacclist_tbl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><name><name>dfaacc</name><index>[<expr><name>end_of_buffer_state</name></expr>]</index></name><operator>.</operator><name>dfaacc_state</name> <operator>=</operator>
<name>end_of_buffer_action</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastdfa</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dfaacc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dfaacc_state</name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>











<expr_stmt><expr><name>k</name> <operator>=</operator> <name>lastdfa</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reject</name></expr>)</condition><block type="pseudo"><block_content>





<expr_stmt><expr><operator>++</operator><name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><ternary><condition><expr><name>long_align</name></expr> ?</condition><then> <expr><call><name>get_int32_decl</name> <argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>get_int16_decl</name> <argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"yy_accept"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_ACCEPT, (void**)&amp;yy_accept, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>long_align</name></expr> ?</condition><then> <expr><literal type="string">"flex_int32_t"</literal></expr> </then><else>: <expr><literal type="string">"flex_int16_t"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yyacc_tbl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>yyacc_tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_ACCEPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyacc_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyacc_tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>yyacc_data</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>yyacc_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyacc_curr</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastdfa</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyacc_data</name><index>[<expr><name>yyacc_curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reject</name> <operator>&amp;&amp;</operator> <name>trace</name> <operator>&amp;&amp;</operator> <name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"state #%d accepts: [%d]\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyacc_data</name><index>[<expr><name>yyacc_curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reject</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yyacc_data</name><index>[<expr><name>yyacc_curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>acc_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>yyacc_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>yyacc_tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not write yyacc_tbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>yyacc_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yyacc_tbl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>useecs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>genecs</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>mkecstbl</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not write ecstbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tbl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>usemecs</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>flex_int32_t</name> <modifier>*</modifier></type><name>yymecs_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>yymeta_tbl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>yymeta_tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_META</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yymeta_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <operator>(</operator><name>numecs</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yymeta_tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>yymecs_data</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>yymeta_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trace</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n\nMeta-Equivalence Classes:\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><call><name>get_yy_char_decl</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"yy_meta"</literal></expr></argument>, <argument><expr><name>numecs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_META, (void**)&amp;yy_meta, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><literal type="string">"YY_CHAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>numecs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>trace</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d = %d\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>ABS</name> <argument_list>(<argument><expr><name><name>tecbck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><call><name>ABS</name> <argument_list>(<argument><expr><name><name>tecbck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yymecs_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ABS</name> <argument_list>(<argument><expr><name><name>tecbck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>yymeta_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>yymeta_tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name>
<argument_list>(<argument><expr><literal type="string">"Could not write yymeta_tbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>yymeta_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yymeta_tbl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total_states</name> <operator>=</operator> <name>lastdfa</name> <operator>+</operator> <name>numtemps</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>tblend</name> <operator>&gt;=</operator> <name>INT16_MAX</name> <operator>||</operator> <name>long_align</name><operator>)</operator></expr> ?</condition><then>
<expr><call><name>get_int32_decl</name> <argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>get_int16_decl</name> <argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"yy_base"</literal></expr></argument>, <argument><expr><name>total_states</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_BASE, (void**)&amp;yy_base, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>tblend</name> <operator>&gt;=</operator> <name>INT16_MAX</name>
<operator>||</operator> <name>long_align</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"flex_int32_t"</literal></expr> </then><else>: <expr><literal type="string">"flex_int16_t"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yybase_tbl</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>yybase_tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yybase_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <operator>(</operator><name>total_states</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yybase_tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>yybase_data</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>yybase_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yybase_curr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastdfa</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>def</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>JAMSTATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>jambase</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>JAMSTATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>def</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>jamstate</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>tmpuses</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lastdfa</name> <operator>-</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yybase_data</name><index>[<expr><name>yybase_curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yybase_data</name><index>[<expr><name>yybase_curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>i</name></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>total_states</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yybase_data</name><index>[<expr><name>yybase_curr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>jamstate</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>yybase_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>yybase_tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not write yybase_tbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>yybase_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yybase_tbl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>total_states</name> <operator>&gt;=</operator> <name>INT16_MAX</name> <operator>||</operator> <name>long_align</name><operator>)</operator></expr> ?</condition><then>
<expr><call><name>get_int32_decl</name> <argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>get_int16_decl</name> <argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"yy_def"</literal></expr></argument>, <argument><expr><name>total_states</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_DEF, (void**)&amp;yy_def, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>total_states</name> <operator>&gt;=</operator> <name>INT16_MAX</name>
<operator>||</operator> <name>long_align</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"flex_int32_t"</literal></expr> </then><else>: <expr><literal type="string">"flex_int16_t"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yydef_tbl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>yydef_tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_DEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yydef_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <operator>(</operator><name>total_states</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yydef_tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>yydef_data</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>yydef_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>total_states</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>def</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yydef_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>def</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>yydef_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>yydef_tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not write yydef_tbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>yydef_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yydef_tbl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>total_states</name> <operator>&gt;=</operator> <name>INT16_MAX</name> <operator>||</operator> <name>long_align</name><operator>)</operator></expr> ?</condition><then>
<expr><call><name>get_int32_decl</name> <argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>get_int16_decl</name> <argument_list>()</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"yy_nxt"</literal></expr></argument>,
<argument><expr><name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_NXT, (void**)&amp;yy_nxt, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>total_states</name> <operator>&gt;=</operator> <name>INT16_MAX</name>
<operator>||</operator> <name>long_align</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"flex_int32_t"</literal></expr> </then><else>: <expr><literal type="string">"flex_int16_t"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yynxt_tbl</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>yynxt_tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_NXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yynxt_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <operator>(</operator><name>tblend</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yynxt_tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>yynxt_data</name> <operator>=</operator>
<call><name>calloc</name> <argument_list>(<argument><expr><name><name>yynxt_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>tblend</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>jamstate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yynxt_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>yynxt_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>yynxt_tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not write yynxt_tbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>yynxt_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yynxt_tbl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>total_states</name> <operator>&gt;=</operator> <name>INT16_MAX</name> <operator>||</operator> <name>long_align</name><operator>)</operator></expr> ?</condition><then>
<expr><call><name>get_int32_decl</name> <argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>get_int16_decl</name> <argument_list>()</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"yy_chk"</literal></expr></argument>,
<argument><expr><name>tblend</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_CHK, (void**)&amp;yy_chk, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>total_states</name> <operator>&gt;=</operator> <name>INT16_MAX</name>
<operator>||</operator> <name>long_align</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"flex_int32_t"</literal></expr> </then><else>: <expr><literal type="string">"flex_int16_t"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yychk_tbl</name> <operator>=</operator> <call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>yychk_tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_CHK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yychk_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <operator>(</operator><name>tblend</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yychk_tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>yychk_data</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>yychk_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>tblend</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>nummt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yychk_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>chk</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>yychk_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>yychk_tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not write yychk_tbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>yychk_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yychk_tbl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>acc_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>indent_put2s</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_str</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>indent_puts</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>make_tables</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_eof_rule</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>yynultrans_tbl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>set_indent</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yymore_used</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>yytext_is_array</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yytext_ptr) -= YY_G(yy_more_len); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yyleng = (int) (yy_cp - YY_G(yytext_ptr)); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yyleng = (int) (yy_cp - yy_bp); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yytext_is_array</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yymore_used</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"if ( yyleng + YY_G(yy_more_offset) &gt;= YYLMAX ) \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( yyleng &gt;= YYLMAX ) \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"YY_FATAL_ERROR( \"token too large, exceeds YYLMAX\" ); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yymore_used</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_flex_strncpy( &amp;yytext[YY_G(yy_more_offset)], YY_G(yytext_ptr), yyleng + 1 M4_YY_CALL_LAST_ARG); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yyleng += YY_G(yy_more_offset); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"YY_G(yy_prev_more_offset) = YY_G(yy_more_offset); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_more_offset) = 0; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_flex_strncpy( yytext, YY_G(yytext_ptr), yyleng + 1 M4_YY_CALL_LAST_ARG); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_indent</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"#define YY_NUM_RULES %d\n"</literal></expr></argument>, <argument><expr><name>num_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"#define YY_END_OF_BUFFER %d\n"</literal></expr></argument>, <argument><expr><name>num_rules</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fullspd</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>total_table_size</name> <init>= <expr><name>tblend</name> <operator>+</operator> <name>numecs</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>trans_offset_type</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name>total_table_size</name> <operator>&gt;=</operator> <name>INT16_MAX</name> <operator>||</operator> <name>long_align</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"flex_int32_t"</literal></expr> </then><else>: <expr><literal type="string">"flex_int16_t"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_indent</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"struct yy_trans_info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>indent_put2s</name> <argument_list>(<argument><expr><literal type="string">"%s yy_verify;"</literal></expr></argument>, <argument><expr><name>trans_offset_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<expr_stmt><expr><call><name>indent_put2s</name> <argument_list>(<argument><expr><literal type="string">"%s yy_nxt;"</literal></expr></argument>, <argument><expr><name>trans_offset_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"};"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>





<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"/* This struct is not used in this scanner,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">" but its presence is necessary. */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"struct yy_trans_info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"flex_int32_t yy_verify;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"flex_int32_t yy_nxt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"};"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fullspd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>genctbl</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>mkctbl</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not write ftbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>mkssltbl</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not write ssltbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tbl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>useecs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>mkecstbl</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name>
<argument_list>(<argument><expr><literal type="string">"Could not write ecstbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tbl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>fulltbl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>genftbl</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>mkftbl</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not write ftbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tbl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>useecs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>mkecstbl</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name>
<argument_list>(<argument><expr><literal type="string">"Could not write ecstbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tbl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gentabs</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_yylineno</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>geneoltbl</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>yytbl_data</name></name> <modifier>*</modifier></type><name>tbl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>mkeoltbl</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not write eoltbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tbl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>num_backing_up</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>reject</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_plus_plus</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>reentrant</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"static yy_state_type yy_last_accepting_state;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"static char *yy_last_accepting_cpos;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nultrans</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>flex_int32_t</name> <modifier>*</modifier></type><name>yynultrans_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><call><name>get_state_decl</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"yy_NUL_trans"</literal></expr></argument>,
<argument><expr><name>lastdfa</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>buf_prints</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yydmap_buf</name></expr></argument>,
<argument><expr><literal type="string">"\t{YYTD_ID_NUL_TRANS, (void**)&amp;yy_NUL_trans, sizeof(%s)},\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>fullspd</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"struct yy_trans_info*"</literal></expr> </then><else>:
<expr><literal type="string">"flex_int32_t"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yynultrans_tbl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>yytbl_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yytbl_data_init</name> <argument_list>(<argument><expr><name>yynultrans_tbl</name></expr></argument>, <argument><expr><name>YYTD_ID_NUL_TRANS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fullspd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>yynultrans_tbl</name><operator>-&gt;</operator><name>td_flags</name></name> <operator>|=</operator> <name>YYTD_PTRANS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yynultrans_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name> <operator>=</operator> <operator>(</operator><name>flex_uint32_t</name><operator>)</operator> <operator>(</operator><name>lastdfa</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yynultrans_tbl</name><operator>-&gt;</operator><name>td_data</name></name> <operator>=</operator> <name>yynultrans_data</name> <operator>=</operator>
<call><name>calloc</name><argument_list>(<argument><expr><name><name>yynultrans_tbl</name><operator>-&gt;</operator><name>td_lolen</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>flex_int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastdfa</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fullspd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">" &amp;yy_transition[%d],\n"</literal></expr></argument>,
<argument><expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yynultrans_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>nultrans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yynultrans_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nultrans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tablesext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yytbl_data_compress</name> <argument_list>(<argument><expr><name>yynultrans_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>yytbl_data_fwrite</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tableswr</name></expr></argument>, <argument><expr><name>yynultrans_tbl</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flexerror</name> <argument_list>(<argument><expr><call><name>_</name>
<argument_list>(<argument><expr><literal type="string">"Could not write yynultrans_tbl"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>yynultrans_tbl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yytbl_data_destroy</name> <argument_list>(<argument><expr><name>yynultrans_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yynultrans_tbl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_plus_plus</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>reentrant</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"extern int yy_flex_debug;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_put2s</name> <argument_list>(<argument><expr><literal type="string">"int yy_flex_debug = %s;\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>ddebug</name></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ddebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>out_str_dec</name> <argument_list>(<argument><expr><ternary><condition><expr><name>long_align</name></expr> ?</condition><then> <expr><call><name>get_int32_decl</name> <argument_list>()</argument_list></call></expr> </then><else>:
<expr><call><name>get_int16_decl</name> <argument_list>()</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"yy_rule_linenum"</literal></expr></argument>,
<argument><expr><name>num_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rules</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mkdata</name> <argument_list>(<argument><expr><name><name>rule_linenum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>dataend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reject</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"m4_ifdef( [[M4_YY_USES_REJECT]],\n[["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_plus_plus</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>reentrant</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"static char *yy_full_match;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"static int yy_lp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>variable_trailing_context_rules</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_plus_plus</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>reentrant</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"static int yy_looking_for_trail_begin = 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"static int yy_full_lp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"static int *yy_full_state;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>out_hex</name> <argument_list>(<argument><expr><literal type="string">"#define YY_TRAILING_MASK 0x%x\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>YY_TRAILING_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_hex</name> <argument_list>(<argument><expr><literal type="string">"#define YY_TRAILING_HEAD_MASK 0x%x\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>YY_TRAILING_HEAD_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"#define REJECT \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"{ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"*yy_cp = YY_G(yy_hold_char); /* undo effects of setting up yytext */ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"yy_cp = YY_G(yy_full_match); /* restore poss. backed-over text */ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>variable_trailing_context_rules</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_lp) = YY_G(yy_full_lp); /* restore orig. accepting pos. */ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_state_ptr) = YY_G(yy_full_state); /* restore orig. state */ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"yy_current_state = *YY_G(yy_state_ptr); /* restore curr. state */ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"++YY_G(yy_lp); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"goto find_rule; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"]])\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"/* The intent behind this definition is that it'll catch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">" * any uses of REJECT which flex missed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">" */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"#define REJECT reject_used_but_not_detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>yymore_used</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_plus_plus</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yytext_is_array</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reentrant</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"static int yy_more_offset = 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"static int yy_prev_more_offset = 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>reentrant</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"static int yy_more_flag = 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"static int yy_more_len = 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>yytext_is_array</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"#define yymore() (YY_G(yy_more_offset) = yy_flex_strlen( yytext M4_YY_CALL_LAST_ARG))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"#define YY_NEED_STRLEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"#define YY_MORE_ADJ 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"#define YY_RESTORE_YY_MORE_OFFSET \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"YY_G(yy_more_offset) = YY_G(yy_prev_more_offset); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yyleng -= YY_G(yy_more_offset); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"#define yymore() (YY_G(yy_more_flag) = 1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"#define YY_MORE_ADJ YY_G(yy_more_len)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"#define YY_RESTORE_YY_MORE_OFFSET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"#define yymore() yymore_used_but_not_detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"#define YY_MORE_ADJ 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"#define YY_RESTORE_YY_MORE_OFFSET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_plus_plus</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>yytext_is_array</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"#ifndef YYLMAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"#define YYLMAX 8192"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"#endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reentrant</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"char yytext[YYLMAX];"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"char *yytext_ptr;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator> <name>reentrant</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"char *yytext;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>out</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>action_array</name><index>[<expr><name>defs1_offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_directive_out</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_plus_plus</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>use_read</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\terrno=0; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\twhile ( (result = (int) read( fileno(yyin), buf, (yy_size_t) max_size )) &lt; 0 ) \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t{ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\tif( errno != EINTR) \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t{ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\tYY_FATAL_ERROR( \"input in flex scanner failed\" ); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\tbreak; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t} \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\terrno=0; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\tclearerr(yyin); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t}\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else <block>{<block_content>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\tif ( YY_CURRENT_BUFFER_LVALUE-&gt;yy_is_interactive ) \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t{ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\tint c = '*'; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\tint n; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\tfor ( n = 0; n &lt; max_size &amp;&amp; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\t (c = getc( yyin )) != EOF &amp;&amp; c != '\\n'; ++n ) \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\tbuf[n] = (char) c; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\tif ( c == '\\n' ) \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\tbuf[n++] = (char) c; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\tif ( c == EOF &amp;&amp; ferror( yyin ) ) \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\tYY_FATAL_ERROR( \"input in flex scanner failed\" ); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\tresult = n; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t} \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\telse \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t{ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\terrno=0; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\twhile ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 &amp;&amp; ferror(yyin)) \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\t{ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\tif( errno != EINTR) \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\t\t{ \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\t\tYY_FATAL_ERROR( \"input in flex scanner failed\" ); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\t\tbreak; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\t\t} \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\terrno=0; \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\tclearerr(yyin); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t\t} \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"\t\t}\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"#define YY_RULE_SETUP \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bol_needed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( yyleng &gt; 0 ) \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_CURRENT_BUFFER_LVALUE-&gt;yy_at_bol = \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"\t\t(yytext[yyleng - 1] == '\\n'); \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_USER_ACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>out</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>action_array</name><index>[<expr><name>prolog_offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_directive_out</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_indent</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yymore_used</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>yytext_is_array</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_more_len) = 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( YY_G(yy_more_flag) )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"YY_G(yy_more_len) = (int) (YY_G(yy_c_buf_p) - YY_G(yytext_ptr));"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"YY_G(yy_more_flag) = 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gen_start_state</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"yy_match:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_next_match</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_indent</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_find_action</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"m4_ifdef( [[M4_YY_USE_LINENO]],[["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"if ( yy_act != YY_END_OF_BUFFER &amp;&amp; yy_rule_can_match_eol[yy_act] )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"int yyl;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_str</name> <argument_list>(<argument><expr><literal type="string">"for ( yyl = %s; yyl &lt; yyleng; ++yyl )\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>yymore_used</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>yytext_is_array</name></expr> ?</condition><then> <expr><literal type="string">"YY_G(yy_prev_more_offset)"</literal></expr> </then><else>:
<expr><literal type="string">"YY_G(yy_more_len)"</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( yytext[yyl] == '\\n' )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"M4_YY_INCR_LINENO();"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"]])"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ddebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( yy_flex_debug )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( yy_act == 0 )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><ternary><condition><expr><name>C_plus_plus</name></expr> ?</condition><then>
<expr><literal type="string">"std::cerr &lt;&lt; \"--scanner backing up\\n\";"</literal></expr> </then><else>:
<expr><literal type="string">"fprintf( stderr, \"--scanner backing up\\n\" );"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"else if ( yy_act &lt; %d )\n"</literal></expr></argument>, <argument><expr><name>num_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>C_plus_plus</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"std::cerr &lt;&lt; \"--accepting rule at line \" &lt;&lt; yy_rule_linenum[yy_act] &lt;&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">" \"(\\\"\" &lt;&lt; yytext &lt;&lt; \"\\\")\\n\";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"fprintf( stderr, \"--accepting rule at line %ld (\\\"%s\\\")\\n\","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">" (long)yy_rule_linenum[yy_act], yytext );"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"else if ( yy_act == %d )\n"</literal></expr></argument>, <argument><expr><name>num_rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>C_plus_plus</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"std::cerr &lt;&lt; \"--accepting default rule (\\\"\" &lt;&lt; yytext &lt;&lt; \"\\\")\\n\";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"fprintf( stderr, \"--accepting default rule (\\\"%s\\\")\\n\","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">" yytext );"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_dec</name> <argument_list>(<argument><expr><literal type="string">"else if ( yy_act == %d )\n"</literal></expr></argument>, <argument><expr><name>num_rules</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><ternary><condition><expr><name>C_plus_plus</name></expr> ?</condition><then>
<expr><literal type="string">"std::cerr &lt;&lt; \"--(end of buffer or a NUL)\\n\";"</literal></expr> </then><else>:
<expr><literal type="string">"fprintf( stderr, \"--(end of buffer or a NUL)\\n\" );"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>outn</name> <argument_list>(<argument><expr><literal type="string">"else"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>C_plus_plus</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"std::cerr &lt;&lt; \"--EOF (start condition \" &lt;&lt; YY_START &lt;&lt; \")\\n\";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"fprintf( stderr, \"--EOF (start condition %d)\\n\", YY_START );"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_bu_action</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>action_array</name><index>[<expr><name>action_offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>line_directive_out</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lastsc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sceof</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_indent</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_str</name> <argument_list>(<argument><expr><literal type="string">"case YY_STATE_EOF(%s):\n"</literal></expr></argument>, <argument><expr><name><name>scname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_eof_rule</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>did_eof_rule</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yyterminate();"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_indent</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fullspd</name> <operator>||</operator> <name>fulltbl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_cp = YY_G(yy_c_buf_p);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reject</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>interactive</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_cp = YY_G(yy_last_accepting_cpos);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"yy_current_state = YY_G(yy_last_accepting_state);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>




<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"yy_cp = YY_G(yy_c_buf_p);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><call><name>set_indent</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gen_start_state</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_indent</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_next_state</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_indent</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_NUL_trans</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bol_needed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"YY_CURRENT_BUFFER_LVALUE-&gt;yy_at_bol = (c == '\\n');"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_yylineno</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name>
<argument_list>(<argument><expr><literal type="string">"if ( YY_CURRENT_BUFFER_LVALUE-&gt;yy_at_bol )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"M4_YY_INCR_LINENO();"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>do_yylineno</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"if ( c == '\\n' )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>indent_level</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>indent_puts</name> <argument_list>(<argument><expr><literal type="string">"M4_YY_INCR_LINENO();"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>indent_level</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skelout</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>line_directive_out</name> <argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sectnum</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>OUT_BEGIN_CODE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_section3_escape</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"[["</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>flexscan</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_section3_escape</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"]]"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>OUT_END_CODE</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
