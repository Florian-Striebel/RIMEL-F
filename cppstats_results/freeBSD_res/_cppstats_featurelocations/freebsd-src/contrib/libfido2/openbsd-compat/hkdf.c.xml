<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/openbsd-compat/hkdf.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"openbsd-compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/hmac.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYPTOerror</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CRYPTOerr(ERR_LIB_CRYPTO, (r))</cpp:value></cpp:define>


<function><type><name>int</name></type>
<name>HKDF</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>secret_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>info_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>prk</name><index>[<expr><name>EVP_MAX_MD_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prk_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HKDF_extract</name><argument_list>(<argument><expr><name>prk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prk_len</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><name>secret_len</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>,
<argument><expr><name>salt_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HKDF_expand</name><argument_list>(<argument><expr><name>out_key</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>prk</name></expr></argument>, <argument><expr><name>prk_len</name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
<argument><expr><name>info_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>HKDF_extract</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>secret_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>salt_len</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <call><name>HMAC</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>salt_len</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>,
<argument><expr><name>secret_len</name></expr></argument>, <argument><expr><name>out_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CRYPTOerror</name><argument_list>(<argument><expr><name>ERR_R_CRYPTO_LIB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>HKDF_expand</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>prk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>prk_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>info_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>digest_len</name> <init>= <expr><call><name>EVP_MD_size</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>previous</name><index>[<expr><name>EVP_MAX_MD_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMAC_CTX</name></type> <name>hmac</name></decl>;</decl_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>out_len</name> <operator>+</operator> <name>digest_len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>digest_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out_len</name> <operator>+</operator> <name><name>digest_len</name> <argument_list type="generic">&lt; <argument><expr><name>out_len</name> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal> <operator>||</operator> <name>prk_len</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CRYPTOerror</name><argument_list>(<argument><expr><name>EVP_R_TOO_LARGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>HMAC_CTX_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HMAC_Init_ex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>prk</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>prk_len</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ctr</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>todo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>HMAC_Init_ex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>HMAC_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>digest_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HMAC_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>info_len</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>HMAC_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>HMAC_Final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <name>digest_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>+</operator> <name>todo</name> <operator>&gt;</operator> <name>out_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>todo</name> <operator>=</operator> <name>out_len</name> <operator>-</operator> <name>done</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out_key</name> <operator>+</operator> <name>done</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>+=</operator> <name>todo</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>HMAC_CTX_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>explicit_bzero</name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CRYPTOerror</name><argument_list>(<argument><expr><name>ERR_R_CRYPTO_LIB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
