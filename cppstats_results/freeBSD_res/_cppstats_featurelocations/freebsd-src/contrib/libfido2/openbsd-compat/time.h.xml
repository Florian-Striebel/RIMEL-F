<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/openbsd-compat/time.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1900</literal><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;../ucrt/time.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1900</literal><operator>)</operator></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;../include/time.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_COMPAT_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_COMPAT_TIME_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_MONOTONIC</name></cpp:macro> <cpp:value>CLOCK_REALTIME</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_REALTIME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOCK_GETTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>clockid_t</name>;</typedef>
<function_decl><type><name>int</name></type> <name>clock_gettime</name><parameter_list>(<parameter><decl><type><name>clockid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMESPECSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMESPECSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timespecadd</name><parameter_list>(<parameter><type><name>tsp</name></type></parameter>, <parameter><type><name>usp</name></type></parameter>, <parameter><type><name>vsp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (vsp)-&gt;tv_sec = (tsp)-&gt;tv_sec + (usp)-&gt;tv_sec; (vsp)-&gt;tv_nsec = (tsp)-&gt;tv_nsec + (usp)-&gt;tv_nsec; if ((vsp)-&gt;tv_nsec &gt;= 1000000000L) { (vsp)-&gt;tv_sec++; (vsp)-&gt;tv_nsec -= 1000000000L; } } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timespecsub</name><parameter_list>(<parameter><type><name>tsp</name></type></parameter>, <parameter><type><name>usp</name></type></parameter>, <parameter><type><name>vsp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (vsp)-&gt;tv_sec = (tsp)-&gt;tv_sec - (usp)-&gt;tv_sec; (vsp)-&gt;tv_nsec = (tsp)-&gt;tv_nsec - (usp)-&gt;tv_nsec; if ((vsp)-&gt;tv_nsec &lt; 0) { (vsp)-&gt;tv_sec--; (vsp)-&gt;tv_nsec += 1000000000L; } } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timespeccmp</name><parameter_list>(<parameter><type><name>tsp</name></type></parameter>, <parameter><type><name>usp</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((tsp)-&gt;tv_sec == (usp)-&gt;tv_sec) ? ((tsp)-&gt;tv_nsec cmp (usp)-&gt;tv_nsec) : ((tsp)-&gt;tv_sec cmp (usp)-&gt;tv_sec))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
