<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/tools/fido2-token.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fido.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../openbsd-compat/openbsd-compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>action</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"usage: fido2-token -C [-d] device\n"</literal>
<literal type="string">" fido2-token -Db [-k key_path] [-i cred_id -n rp_id] device\n"</literal>
<literal type="string">" fido2-token -Dei template_id device\n"</literal>
<literal type="string">" fido2-token -Du device\n"</literal>
<literal type="string">" fido2-token -Gb [-k key_path] [-i cred_id -n rp_id] blob_path device\n"</literal>
<literal type="string">" fido2-token -I [-cd] [-k rp_id -i cred_id] device\n"</literal>
<literal type="string">" fido2-token -L [-bder] [-k rp_id] [device]\n"</literal>
<literal type="string">" fido2-token -R [-d] device\n"</literal>
<literal type="string">" fido2-token -S [-adefu] [-l pin_length] [-i template_id -n template_name] device\n"</literal>
<literal type="string">" fido2-token -Sb [-k key_path] [-i cred_id -n rp_id] blob_path device\n"</literal>
<literal type="string">" fido2-token -Sc -i cred_id -k user_id -n name -p display_name device\n"</literal>
<literal type="string">" fido2-token -V\n"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setaction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>action</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>TOKEN_OPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>FIDO_DEBUG</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>setaction</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>-</operator> <name>optind</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>device</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>device</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fido_init</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>pin_change</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>token_delete</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>token_get</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>token_info</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>token_list</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>token_reset</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>token_set</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d\n"</literal></expr></argument>, <argument><expr><name>_FIDO_MAJOR</name></expr></argument>, <argument><expr><name>_FIDO_MINOR</name></expr></argument>,
<argument><expr><name>_FIDO_PATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function>
</unit>
