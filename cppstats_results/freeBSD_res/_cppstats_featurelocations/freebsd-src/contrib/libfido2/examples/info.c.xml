<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/examples/info.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fido.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../openbsd-compat/openbsd-compat.h"</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>format_flags</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>retlen</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>retlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FIDO_CAP_WINK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlcat</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"wink,"</literal></expr></argument>, <argument><expr><name>retlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>retlen</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>toolong</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlcat</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"nowink,"</literal></expr></argument>, <argument><expr><name>retlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>retlen</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>toolong</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FIDO_CAP_CBOR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlcat</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" cbor,"</literal></expr></argument>, <argument><expr><name>retlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>retlen</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>toolong</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlcat</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" nocbor,"</literal></expr></argument>, <argument><expr><name>retlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>retlen</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>toolong</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FIDO_CAP_NMSG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlcat</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" nomsg"</literal></expr></argument>, <argument><expr><name>retlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>retlen</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>toolong</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlcat</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" msg"</literal></expr></argument>, <argument><expr><name>retlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>retlen</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>toolong</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return;</return>
<label><name>toolong</name>:</label>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"toolong"</literal></expr></argument>, <argument><expr><name>retlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_attr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>flags_txt</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"proto: 0x%02x\n"</literal></expr></argument>, <argument><expr><call><name>fido_dev_protocol</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"major: 0x%02x\n"</literal></expr></argument>, <argument><expr><call><name>fido_dev_major</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"minor: 0x%02x\n"</literal></expr></argument>, <argument><expr><call><name>fido_dev_minor</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"build: 0x%02x\n"</literal></expr></argument>, <argument><expr><call><name>fido_dev_build</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>format_flags</name><argument_list>(<argument><expr><name>flags_txt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flags_txt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>fido_dev_flags</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"caps: 0x%02x (%s)\n"</literal></expr></argument>, <argument><expr><call><name>fido_dev_flags</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags_txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_str_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s strings: "</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>sa</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_opt_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_algorithms</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cbor_info_t</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cose</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>fido_cbor_info_algorithm_count</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"algorithms: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cose</name> <operator>=</operator> <name>type</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>fido_cbor_info_algorithm_cose</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COSE_EDDSA</name></expr>:</case>
<expr_stmt><expr><name>cose</name> <operator>=</operator> <literal type="string">"eddsa"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COSE_ES256</name></expr>:</case>
<expr_stmt><expr><name>cose</name> <operator>=</operator> <literal type="string">"es256"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COSE_RS256</name></expr>:</case>
<expr_stmt><expr><name>cose</name> <operator>=</operator> <literal type="string">"rs256"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><call><name>fido_cbor_info_algorithm_type</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>fido_cbor_info_algorithm_type</name><argument_list>(<argument><expr><name>ci</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s (%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>cose</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_aaguid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"aaguid: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buflen</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>*</operator><name>buf</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_maxmsgsiz</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>maxmsgsiz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"maxmsgsiz: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>maxmsgsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_maxcredcntlst</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>maxcredcntlst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"maxcredcntlst: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>maxcredcntlst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_maxcredidlen</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>maxcredidlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"maxcredlen: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>maxcredidlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_fwversion</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>fwversion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fwversion: 0x%x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>fwversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_byte_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ba</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%u"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ba</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_cbor_info_t</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fido_init</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dev</name> <operator>=</operator> <call><name>fido_dev_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fido_dev_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_dev_open</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fido_dev_open: %s (0x%x)"</literal></expr></argument>, <argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>print_attr</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_dev_is_fido2</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ci</name> <operator>=</operator> <call><name>fido_cbor_info_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fido_cbor_info_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_dev_get_cbor_info</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fido_dev_get_cbor_info: %s (0x%x)"</literal></expr></argument>, <argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>print_str_array</name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><call><name>fido_cbor_info_versions_ptr</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_cbor_info_versions_len</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>print_str_array</name><argument_list>(<argument><expr><literal type="string">"extension"</literal></expr></argument>, <argument><expr><call><name>fido_cbor_info_extensions_ptr</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_cbor_info_extensions_len</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>print_str_array</name><argument_list>(<argument><expr><literal type="string">"transport"</literal></expr></argument>, <argument><expr><call><name>fido_cbor_info_transports_ptr</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_cbor_info_transports_len</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>print_algorithms</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>print_aaguid</name><argument_list>(<argument><expr><call><name>fido_cbor_info_aaguid_ptr</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_cbor_info_aaguid_len</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>print_opt_array</name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><call><name>fido_cbor_info_options_name_ptr</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_cbor_info_options_value_ptr</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_cbor_info_options_len</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>print_maxmsgsiz</name><argument_list>(<argument><expr><call><name>fido_cbor_info_maxmsgsiz</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>print_maxcredcntlst</name><argument_list>(<argument><expr><call><name>fido_cbor_info_maxcredcntlst</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>print_maxcredidlen</name><argument_list>(<argument><expr><call><name>fido_cbor_info_maxcredidlen</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>print_fwversion</name><argument_list>(<argument><expr><call><name>fido_cbor_info_fwversion</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>print_byte_array</name><argument_list>(<argument><expr><literal type="string">"pin protocols"</literal></expr></argument>, <argument><expr><call><name>fido_cbor_info_protocols_ptr</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_cbor_info_protocols_len</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fido_cbor_info_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_dev_close</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fido_dev_close: %s (0x%x)"</literal></expr></argument>, <argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fido_dev_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: info &lt;device&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>getinfo</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
