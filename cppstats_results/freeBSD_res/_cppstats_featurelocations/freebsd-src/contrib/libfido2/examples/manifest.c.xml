<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/examples/manifest.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fido.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../openbsd-compat/openbsd-compat.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_dev_info_t</name> <modifier>*</modifier></type><name>devlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ndevs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fido_init</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>devlist</name> <operator>=</operator> <call><name>fido_dev_info_new</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fido_dev_info_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_dev_info_manifest</name><argument_list>(<argument><expr><name>devlist</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ndevs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"fido_dev_info_manifest: %s (0x%x)"</literal></expr></argument>, <argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ndevs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>fido_dev_info_t</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><call><name>fido_dev_info_ptr</name><argument_list>(<argument><expr><name>devlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: vendor=0x%04x, product=0x%04x (%s %s)\n"</literal></expr></argument>,
<argument><expr><call><name>fido_dev_info_path</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>fido_dev_info_vendor</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>fido_dev_info_product</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_dev_info_manufacturer_string</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_dev_info_product_string</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fido_dev_info_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>devlist</name></expr></argument>, <argument><expr><name>ndevs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
