<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/regress/cred.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cbor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fido.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAKE_DEV_HANDLE</name></cpp:macro> <cpp:value>((void *)0xdeadbeef)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>cdh</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0xbb</literal></expr>,
<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x6b</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>authdata</name><index>[<expr><literal type="number">198</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x0e</literal></expr>,
<expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x1d</literal></expr>,
<expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xf8</literal></expr>,
<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xde</literal></expr>,
<expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x5d</literal></expr>,
<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x5e</literal></expr>,
<expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xda</literal></expr>,
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x83</literal></expr>,
<expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xd6</literal></expr>,
<expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x9f</literal></expr>,
<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x56</literal></expr>,
<expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xb9</literal></expr>,
<expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xf5</literal></expr>,
<expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x5f</literal></expr>,
<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xe3</literal></expr>,
<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x5d</literal></expr>,
<expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xd2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>authdata_dupkeys</name><index>[<expr><literal type="number">200</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x0e</literal></expr>,
<expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x1d</literal></expr>,
<expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xf8</literal></expr>,
<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xde</literal></expr>,
<expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x5d</literal></expr>,
<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x5e</literal></expr>,
<expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xda</literal></expr>,
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x83</literal></expr>,
<expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xd6</literal></expr>,
<expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x9f</literal></expr>,
<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x27</literal></expr>,
<expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x55</literal></expr>,
<expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xfd</literal></expr>,
<expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x22</literal></expr>,
<expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x20</literal></expr>,
<expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x9f</literal></expr>,
<expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xc6</literal></expr>,
<expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xb1</literal></expr>,
<expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xd2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>authdata_unsorted_keys</name><index>[<expr><literal type="number">198</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x0e</literal></expr>,
<expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x1d</literal></expr>,
<expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xf8</literal></expr>,
<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xde</literal></expr>,
<expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x5d</literal></expr>,
<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x5e</literal></expr>,
<expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xda</literal></expr>,
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x83</literal></expr>,
<expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xd6</literal></expr>,
<expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x9f</literal></expr>,
<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x56</literal></expr>,
<expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xb9</literal></expr>,
<expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xf5</literal></expr>,
<expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x5f</literal></expr>,
<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xe3</literal></expr>,
<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x5d</literal></expr>,
<expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xd2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>x509</name><index>[<expr><literal type="number">742</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
<expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x75</literal></expr>,
<expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x46</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x41</literal></expr>,
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x35</literal></expr>,
<expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x34</literal></expr>,
<expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x5a</literal></expr>,
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
<expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x20</literal></expr>,
<expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
<expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>,
<expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
<expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x42</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xc7</literal></expr>,
<expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x4f</literal></expr>,
<expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x99</literal></expr>,
<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x3a</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0xbe</literal></expr>,
<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
<expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
<expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
<expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xb4</literal></expr>,
<expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xa2</literal></expr>,
<expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xfa</literal></expr>,
<expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
<expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
<expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
<expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xc9</literal></expr>,
<expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xec</literal></expr>,
<expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xe5</literal></expr>,
<expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x91</literal></expr>,
<expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x9c</literal></expr>,
<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x82</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xf0</literal></expr>,
<expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xb8</literal></expr>,
<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xa3</literal></expr>,
<expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
<expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xfe</literal></expr>,
<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x20</literal></expr>,
<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xdf</literal></expr>,
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x83</literal></expr>,
<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
<expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xf7</literal></expr>,
<expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
<expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x7b</literal></expr>,
<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x5f</literal></expr>,
<expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x9a</literal></expr>,
<expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
<expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,
<expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
<expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x0d</literal></expr>,
<expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xff</literal></expr>,
<expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xa8</literal></expr>,
<expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xd2</literal></expr>,
<expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x2c</literal></expr>,
<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x18</literal></expr>,
<expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x3c</literal></expr>,
<expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
<expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x2d</literal></expr>,
<expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xd5</literal></expr>,
<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
<expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xe0</literal></expr>,
<expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x45</literal></expr>,
<expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xd8</literal></expr>,
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x94</literal></expr>,
<expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x90</literal></expr>,
<expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x32</literal></expr>,
<expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xf4</literal></expr>,
<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x79</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xe0</literal></expr>,
<expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xbd</literal></expr>,
<expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x71</literal></expr>,
<expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x97</literal></expr>,
<expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xd6</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xde</literal></expr>,
<expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x65</literal></expr>,
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
<expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x9f</literal></expr>,
<expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x34</literal></expr>,
<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x9a</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sig</name><index>[<expr><literal type="number">70</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x3b</literal></expr>,
<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x0c</literal></expr>,
<expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x48</literal></expr>,
<expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x97</literal></expr>,
<expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x56</literal></expr>,
<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xa9</literal></expr>,
<expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xc4</literal></expr>,
<expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x0d</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>pubkey</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x0c</literal></expr>,
<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x4c</literal></expr>,
<expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xd5</literal></expr>,
<expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xc6</literal></expr>,
<expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x9f</literal></expr>,
<expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xc6</literal></expr>,
<expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xb1</literal></expr>,
<expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xd2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>id</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xc5</literal></expr>,
<expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x53</literal></expr>,
<expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,
<expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x68</literal></expr>,
<expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x2c</literal></expr>,
<expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x90</literal></expr>,
<expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x3c</literal></expr>,
<expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aaguid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x15</literal></expr>,
<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x7d</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>rp_id</name><index>[]</index></name> <init>= <expr><literal type="string">"localhost"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>rp_name</name><index>[]</index></name> <init>= <expr><literal type="string">"sweet home localhost"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>dummy_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>path</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FAKE_DEV_HANDLE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dummy_close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>handle</name> <operator>==</operator> <name>FAKE_DEV_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dummy_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>handle</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ms</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dummy_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>handle</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type>
<name>alloc_cred</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fido_cred_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_cred</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fido_cred_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fido_dev_t</name> <modifier>*</modifier></type>
<name>alloc_dev</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>fido_dev_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>d</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_dev</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fido_dev_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>empty_cred</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_io_t</name></type> <name>io_f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_authdata_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_authdata_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_authdata_raw_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_authdata_raw_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_clientdata_hash_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_clientdata_hash_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_flags</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_prot</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_rp_id</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_rp_name</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_sig_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_sig_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_x5c_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_x5c_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io_f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io_f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io_f</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>dummy_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io_f</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dummy_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io_f</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>dummy_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io_f</name><operator>.</operator><name>write</name></name> <operator>=</operator> <name>dummy_write</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>alloc_dev</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fido_dev_force_u2f</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_set_io_functions</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_make_cred</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_make_cred</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_UNSUPPORTED_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fido_dev_force_fido2</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_set_io_functions</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_make_cred</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_make_cred</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_dev</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>valid_cred</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_prot</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>no_cdh</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>no_rp_id</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>no_rp_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>no_authdata</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>unset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>unset</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>unset</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>unset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>no_x509</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>no_sig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>no_fmt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wrong_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>junk_cdh</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>junk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>junk</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>junk</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>junk</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>junk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>junk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>junk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_SIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>junk_fmt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"junk"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>junk_rp_id</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"potato"</literal></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>junk_rp_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><literal type="string">"potato"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>junk_authdata</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>junk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>unset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>junk</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>junk</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>junk</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>junk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>junk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>unset</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>unset</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>junk</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_authdata_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_authdata_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_authdata_raw_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_authdata_raw_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_flags</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_rp_id</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_rp_name</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_sig_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_sig_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_x5c_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_x5c_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>unset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>junk_sig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>junk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>junk</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>junk</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>junk</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>junk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>junk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>junk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_SIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>junk_x509</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>junk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>junk</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>junk</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>junk</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>junk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>junk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>junk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_SIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>invalid_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>unset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>unset</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>unset</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_RS256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>unset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>bad_cbor_serialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_authdata_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>duplicate_keys</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata_dupkeys</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata_dupkeys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unsorted_keys</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata_unsorted_keys</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata_unsorted_keys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wrong_credprot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_prot</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_CRED_PROT_UV_OPTIONAL_WITH_ID</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>raw_authdata</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_load_result</name></name></type> <name>cbor_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cbor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cbor_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alloclen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>fido_cred_authdata_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>fido_cred_authdata_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbor_result</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cbor_result</name><operator>.</operator><name>read</name></name> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>fido_cred_authdata_raw_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>fido_cred_authdata_raw_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>fido_cred_authdata_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>cbor_len</name> <operator>=</operator> <call><name>cbor_serialize_alloc</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloclen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata_raw</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>fido_cred_authdata_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>fido_cred_authdata_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name>cbor_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cbor_len</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><name>cbor_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cbor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fmt_none</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>alloc_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>COSE_ES256</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_clientdata_hash</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cdh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_authdata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>authdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_rk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_uv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_verify</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_prot</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_pubkey_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_id_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_id_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fido_cred_aaguid_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aaguid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aaguid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_cred</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fido_init</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>empty_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>valid_cred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>no_cdh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>no_rp_id</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>no_rp_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>no_authdata</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>no_x509</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>no_sig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>no_fmt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>junk_cdh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>junk_fmt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>junk_rp_id</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>junk_rp_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>junk_authdata</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>junk_x509</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>junk_sig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrong_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invalid_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bad_cbor_serialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>duplicate_keys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unsorted_keys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wrong_credprot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raw_authdata</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fmt_none</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
