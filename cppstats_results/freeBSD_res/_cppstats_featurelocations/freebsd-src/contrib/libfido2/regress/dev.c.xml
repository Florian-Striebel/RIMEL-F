<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/regress/dev.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fido.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fuzz/wiredata_fido2.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAKE_DEV_HANDLE</name></cpp:macro> <cpp:value>((void *)0xdeadbeef)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPORT_LEN</name></cpp:macro> <cpp:value>(64 + 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>ctap_nonce</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>wiredata_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>wiredata_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialised</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>dummy_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>path</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FAKE_DEV_HANDLE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dummy_close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>handle</name> <operator>==</operator> <name>FAKE_DEV_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dummy_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ms</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>handle</name> <operator>==</operator> <name>FAKE_DEV_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name>REPORT_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wiredata_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialised</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>wiredata_len</name> <operator>&gt;=</operator> <name>REPORT_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wiredata_ptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctap_nonce</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctap_nonce</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialised</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wiredata_len</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>wiredata_len</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>wiredata_ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wiredata_ptr</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wiredata_len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dummy_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>handle</name> <operator>==</operator> <name>FAKE_DEV_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name>REPORT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialised</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctap_nonce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctap_nonce</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type>
<name>wiredata_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ctap_init_data</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>WIREDATA_CTAP_INIT</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>wiredata_ptr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>SIZE_MAX</name> <operator>-</operator> <name>len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ctap_init_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>wiredata_ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctap_init_data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wiredata_ptr</name></expr></argument>, <argument><expr><name>ctap_init_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctap_init_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wiredata_ptr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ctap_init_data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wiredata_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ctap_init_data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>wiredata_ptr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wiredata_clear</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wiredata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>wiredata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>wiredata</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wiredata_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wiredata_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>initialised</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>open_iff_ok</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_io_t</name></type> <name>io</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>dummy_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dummy_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>dummy_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>write</name></name> <operator>=</operator> <name>dummy_write</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>dev</name> <operator>=</operator> <call><name>fido_dev_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_set_io_functions</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_open</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"dummy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_RX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_close</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fido_dev_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>reopen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>cbor_info_data</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>WIREDATA_CTAP_CBOR_INFO</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wiredata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_io_t</name></type> <name>io</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>dummy_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dummy_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>dummy_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>write</name></name> <operator>=</operator> <name>dummy_write</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wiredata</name> <operator>=</operator> <call><name>wiredata_setup</name><argument_list>(<argument><expr><name>cbor_info_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_info_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>dev</name> <operator>=</operator> <call><name>fido_dev_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_set_io_functions</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_open</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"dummy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_close</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wiredata_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wiredata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wiredata</name> <operator>=</operator> <call><name>wiredata_setup</name><argument_list>(<argument><expr><name>cbor_info_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_info_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_open</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"dummy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_close</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wiredata_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wiredata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>double_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>cbor_info_data</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>WIREDATA_CTAP_CBOR_INFO</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wiredata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_io_t</name></type> <name>io</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>dummy_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dummy_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>dummy_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>write</name></name> <operator>=</operator> <name>dummy_write</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wiredata</name> <operator>=</operator> <call><name>wiredata_setup</name><argument_list>(<argument><expr><name>cbor_info_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_info_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>dev</name> <operator>=</operator> <call><name>fido_dev_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_set_io_functions</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_open</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"dummy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_open</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"dummy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_close</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wiredata_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wiredata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>is_fido2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>cbor_info_data</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>WIREDATA_CTAP_CBOR_INFO</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wiredata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_io_t</name></type> <name>io</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>dummy_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dummy_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>dummy_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>write</name></name> <operator>=</operator> <name>dummy_write</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wiredata</name> <operator>=</operator> <call><name>wiredata_setup</name><argument_list>(<argument><expr><name>cbor_info_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor_info_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>dev</name> <operator>=</operator> <call><name>fido_dev_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_set_io_functions</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_open</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"dummy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_is_fido2</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_supports_pin</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_dev_force_u2f</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_is_fido2</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_supports_pin</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_close</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wiredata_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wiredata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wiredata</name> <operator>=</operator> <call><name>wiredata_setup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_open</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"dummy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_is_fido2</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_supports_pin</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_dev_force_fido2</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_is_fido2</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_supports_pin</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_close</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wiredata_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wiredata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>has_pin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>set_pin_data</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>WIREDATA_CTAP_CBOR_INFO</name></expr>,
<expr><name>WIREDATA_CTAP_CBOR_AUTHKEY</name></expr>,
<expr><name>WIREDATA_CTAP_CBOR_STATUS</name></expr>,
<expr><name>WIREDATA_CTAP_CBOR_STATUS</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wiredata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_io_t</name></type> <name>io</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>io</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>dummy_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>dummy_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>dummy_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name><operator>.</operator><name>write</name></name> <operator>=</operator> <name>dummy_write</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wiredata</name> <operator>=</operator> <call><name>wiredata_setup</name><argument_list>(<argument><expr><name>set_pin_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>set_pin_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>dev</name> <operator>=</operator> <call><name>fido_dev_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_set_io_functions</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_open</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"dummy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_has_pin</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_set_pin</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"top secret"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_has_pin</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_reset</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_has_pin</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_dev_close</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wiredata_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wiredata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fido_init</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>open_iff_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reopen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>double_open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>is_fido2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>has_pin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
