<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/fuzz/prng.c">







































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mutator_aux.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_genrand</name></cpp:macro> <cpp:value>prng_init</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>genrand_int32</name></cpp:macro> <cpp:value>prng_uint32</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>624</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>397</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATRIX_A</name></cpp:macro> <cpp:value>0x9908b0dfUL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPPER_MASK</name></cpp:macro> <cpp:value>0x80000000UL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWER_MASK</name></cpp:macro> <cpp:value>0x7fffffffUL</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>prng_up</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name><name>mt</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mti</name><init>=<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>init_genrand</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>s</name> <operator>&amp;</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mti</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>mti</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>mti</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>mti</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><literal type="number">1812433253UL</literal> <operator>*</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>mti</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>mti</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>mti</name><operator>)</operator></expr>;</expr_stmt>




<expr_stmt><expr><name><name>mt</name><index>[<expr><name>mti</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>

</block_content>}</block></for>
<expr_stmt><expr><name>prng_up</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>long</name></type> <name>genrand_int32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name><name>mag01</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0x0UL</literal></expr>, <expr><name>MATRIX_A</name></expr>}</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>mti</name> <operator>&gt;=</operator> <name>N</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>kk</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mti</name> <operator>!=</operator> <name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>kk</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>kk</name><operator>&lt;</operator><name>N</name><operator>-</operator><name>M</name></expr>;</condition><incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name><operator>&amp;</operator><name>UPPER_MASK</name><operator>)</operator><operator>|</operator><operator>(</operator><name><name>mt</name><index>[<expr><name>kk</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><name>LOWER_MASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>kk</name><operator>+</operator><name>M</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>mag01</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">0x1UL</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init><condition><expr><name>kk</name><operator>&lt;</operator><name>N</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name><operator>&amp;</operator><name>UPPER_MASK</name><operator>)</operator><operator>|</operator><operator>(</operator><name><name>mt</name><index>[<expr><name>kk</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><name>LOWER_MASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>kk</name><operator>+</operator><operator>(</operator><name>M</name><operator>-</operator><name>N</name><operator>)</operator></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>mag01</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">0x1UL</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><name>UPPER_MASK</name><operator>)</operator><operator>|</operator><operator>(</operator><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><name>LOWER_MASK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mt</name><index>[<expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>M</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>mag01</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">0x1UL</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mti</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>mti</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x9d2c5680UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xefc60000UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>
</unit>
