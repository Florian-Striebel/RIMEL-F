<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/fuzz/udev.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/hidraw.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libudev.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mutator_aux.h"</cpp:file></cpp:include>

<struct>struct <name>udev</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>magic</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>udev_enumerate</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>udev_list_entry</name></name> <modifier>*</modifier></type><name>list_entry</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>udev_list_entry</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>magic</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>udev_device</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDEV_MAGIC</name></cpp:macro> <cpp:value>0x584492cc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDEV_DEVICE_MAGIC</name></cpp:macro> <cpp:value>0x569180dd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDEV_LIST_ENTRY_MAGIC</name></cpp:macro> <cpp:value>0x497422ee</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDEV_ENUM_MAGIC</name></cpp:macro> <cpp:value>0x583570ff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_TYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert((x) != NULL &amp;&amp; (x)-&gt;magic == (m))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_UDEV</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ASSERT_TYPE((x), UDEV_MAGIC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_UDEV_ENUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ASSERT_TYPE((x), UDEV_ENUM_MAGIC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_UDEV_LIST_ENTRY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ASSERT_TYPE((x), UDEV_LIST_ENTRY_MAGIC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_UDEV_DEVICE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ASSERT_TYPE((x), UDEV_DEVICE_MAGIC)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uevent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>report_descriptor</name></decl>;</decl_stmt>

<function_decl><type><name><name>struct</name> <name>udev</name></name> <modifier>*</modifier></type><name>__wrap_udev_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type><name>__wrap_udev_device_get_parent_with_subsystem_devtype</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type><name>__wrap_udev_device_new_from_syspath</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>udev_enumerate</name></name> <modifier>*</modifier></type><name>__wrap_udev_enumerate_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>udev_list_entry</name></name> <modifier>*</modifier></type><name>__wrap_udev_enumerate_get_list_entry</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>udev_enumerate</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>udev_list_entry</name></name> <modifier>*</modifier></type><name>__wrap_udev_list_entry_get_next</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>udev_list_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__wrap_udev_device_get_sysattr_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__wrap_udev_list_entry_get_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_list_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__wrap_udev_device_get_devnode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__wrap_udev_device_get_sysnum</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__wrap_udev_enumerate_add_match_subsystem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_enumerate</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__wrap_udev_enumerate_scan_devices</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_enumerate</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>__wrap_ioctl</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter> , <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__wrap_udev_device_unref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__wrap_udev_enumerate_unref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_enumerate</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__wrap_udev_unref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>set_udev_parameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type>
<name>__wrap_udev_device_get_parent_with_subsystem_devtype</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subsystem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>devtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_DEVICE</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>subsystem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>devtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>child</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>UDEV_DEVICE_MAGIC</name></expr>;</expr_stmt>

<return>return <expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>__wrap_udev_device_get_sysattr_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type><name>udev_device</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sysattr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_DEVICE</name><argument_list>(<argument><expr><name>udev_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>uniform_random</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>sysattr</name></expr></argument>, <argument><expr><literal type="string">"manufacturer"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>sysattr</name></expr></argument>, <argument><expr><literal type="string">"product"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"product info"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>sysattr</name></expr></argument>, <argument><expr><literal type="string">"uevent"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>uevent</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>__wrap_udev_list_entry_get_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_list_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_LIST_ENTRY</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>uniform_random</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><literal type="string">"name"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type>
<name>__wrap_udev_device_new_from_syspath</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev</name></name> <modifier>*</modifier></type><name>udev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>syspath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type><name>udev_device</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_UDEV</name><argument_list>(<argument><expr><name>udev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>syspath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>udev_device</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>udev_device</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>udev_device</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>UDEV_DEVICE_MAGIC</name></expr>;</expr_stmt>

<return>return <expr><name>udev_device</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>__wrap_udev_device_get_devnode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type><name>udev_device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_DEVICE</name><argument_list>(<argument><expr><name>udev_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>uniform_random</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><literal type="string">"/dev/zero"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>__wrap_udev_device_get_sysnum</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type><name>udev_device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_DEVICE</name><argument_list>(<argument><expr><name>udev_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>uniform_random</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><literal type="string">"101010"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>__wrap_udev_device_unref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_device</name></name> <modifier>*</modifier></type><name>udev_device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_DEVICE</name><argument_list>(<argument><expr><name>udev_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>udev_device</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_DEVICE</name><argument_list>(<argument><expr><name><name>udev_device</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>udev_device</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>udev_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>udev</name></name> <modifier>*</modifier></type>
<name>__wrap_udev_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>udev</name></name> <modifier>*</modifier></type><name>udev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>udev</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>udev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>udev</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>UDEV_MAGIC</name></expr>;</expr_stmt>

<return>return <expr><name>udev</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>udev_enumerate</name></name> <modifier>*</modifier></type>
<name>__wrap_udev_enumerate_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev</name></name> <modifier>*</modifier></type><name>udev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>udev_enumerate</name></name> <modifier>*</modifier></type><name>udev_enum</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASSERT_UDEV</name><argument_list>(<argument><expr><name>udev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>udev_enum</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>udev_enum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>udev_enum</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>UDEV_ENUM_MAGIC</name></expr>;</expr_stmt>

<return>return <expr><name>udev_enum</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>__wrap_udev_enumerate_add_match_subsystem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_enumerate</name></name> <modifier>*</modifier></type><name>udev_enum</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subsystem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_ENUM</name><argument_list>(<argument><expr><name>udev_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s:"</literal></expr></argument>, <argument><expr><name>subsystem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>uniform_random</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><name>EINVAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>__wrap_udev_enumerate_scan_devices</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_enumerate</name></name> <modifier>*</modifier></type><name>udev_enum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_ENUM</name><argument_list>(<argument><expr><name>udev_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>uniform_random</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><name>EINVAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>udev_list_entry</name></name> <modifier>*</modifier></type>
<name>__wrap_udev_enumerate_get_list_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_enumerate</name></name> <modifier>*</modifier></type><name>udev_enum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_ENUM</name><argument_list>(<argument><expr><name>udev_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>udev_enum</name><operator>-&gt;</operator><name>list_entry</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>udev_enum</name><operator>-&gt;</operator><name>list_entry</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>udev_enum</name><operator>-&gt;</operator><name>list_entry</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>UDEV_LIST_ENTRY_MAGIC</name></expr>;</expr_stmt>

<return>return <expr><name><name>udev_enum</name><operator>-&gt;</operator><name>list_entry</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>udev_list_entry</name></name> <modifier>*</modifier></type>
<name>__wrap_udev_list_entry_get_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_list_entry</name></name> <modifier>*</modifier></type><name>udev_list_entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_LIST_ENTRY</name><argument_list>(<argument><expr><name>udev_list_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><call><name>uniform_random</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>udev_list_entry</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>__wrap_udev_enumerate_unref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev_enumerate</name></name> <modifier>*</modifier></type><name>udev_enum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_ENUM</name><argument_list>(<argument><expr><name>udev_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>udev_enum</name><operator>-&gt;</operator><name>list_entry</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV_LIST_ENTRY</name><argument_list>(<argument><expr><name><name>udev_enum</name><operator>-&gt;</operator><name>list_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>udev_enum</name><operator>-&gt;</operator><name>list_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>udev_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>__wrap_udev_unref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>udev</name></name> <modifier>*</modifier></type><name>udev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ASSERT_UDEV</name><argument_list>(<argument><expr><name>udev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>udev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>__wrap_ioctl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hidraw_report_descriptor</name></name> <modifier>*</modifier></type><name>hrd</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uniform_random</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>request</name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>IOCTL_REQ</name><argument_list>(<argument><expr><name>HIDIOCGRDESCSIZE</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>report_descriptor</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>IOCTL_REQ</name><argument_list>(<argument><expr><name>HIDIOCGRDESC</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>hrd</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>struct <name>hidraw_report_descriptor</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>hrd</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>report_descriptor</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hrd</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>report_descriptor</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>hrd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"%s: unknown request 0x%lx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>set_udev_parameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uevent_ptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>report_descriptor_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>uevent</name> <operator>=</operator> <name>uevent_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>report_descriptor</name> <operator>=</operator> <name>report_descriptor_ptr</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
