<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/fuzz/fuzz_assert.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mutator_aux.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wiredata_fido2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wiredata_u2f.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dummy.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../openbsd-compat/openbsd-compat.h"</cpp:file></cpp:include>


<struct>struct <name>param</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>pin</name><index>[<expr><name>MAXSTR</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>rp_id</name><index>[<expr><name>MAXSTR</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name></type> <name>cdh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name></type> <name>cred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name></type> <name>es256</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name></type> <name>rs256</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name></type> <name>eddsa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>blob</name></name></type> <name>wire_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cred_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>uv</name></decl>;</decl_stmt>
}</block>;</struct>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dummy_wire_data_fido</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>WIREDATA_CTAP_INIT</name></expr>,
<expr><name>WIREDATA_CTAP_CBOR_INFO</name></expr>,
<expr><name>WIREDATA_CTAP_CBOR_AUTHKEY</name></expr>,
<expr><name>WIREDATA_CTAP_CBOR_PINTOKEN</name></expr>,
<expr><name>WIREDATA_CTAP_CBOR_ASSERT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dummy_wire_data_u2f</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>WIREDATA_CTAP_INIT</name></expr>,
<expr><name>WIREDATA_CTAP_U2F_6985</name></expr>,
<expr><name>WIREDATA_CTAP_U2F_6985</name></expr>,
<expr><name>WIREDATA_CTAP_U2F_6985</name></expr>,
<expr><name>WIREDATA_CTAP_U2F_6985</name></expr>,
<expr><name>WIREDATA_CTAP_U2F_AUTH</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>param</name></name> <modifier>*</modifier></type>
<name>unpack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_load_result</name></name></type> <name>cbor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>param</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbor</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>cbor</name><operator>.</operator><name>read</name></name> <operator>!=</operator> <name>len</name> <operator>||</operator>
<call><name>cbor_isa_array</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>||</operator>
<call><name>cbor_array_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>||</operator>
<call><name>cbor_array_size</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">15</literal> <operator>||</operator>
<operator>(</operator><name>v</name> <operator>=</operator> <call><name>cbor_array_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unpack_byte</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_byte</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>up</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_byte</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_byte</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_byte</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cred_count</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_int</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_int</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_string</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_string</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pin</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_blob</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>wire_data</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_blob</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rs256</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_blob</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>es256</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_blob</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>eddsa</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_blob</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>unpack_blob</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>pack</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>param</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cbor_alloc_len</name></decl>, <decl><type ref="prev"/><name>cbor_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cbor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>array</name> <operator>=</operator> <call><name>cbor_new_definite_array</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_byte</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_byte</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>up</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_byte</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_byte</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_byte</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cred_count</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_int</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_int</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_string</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_string</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pin</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>wire_data</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rs256</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>es256</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>eddsa</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>pack_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>cbor_array_push</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cbor_len</name> <operator>=</operator> <call><name>cbor_serialize_alloc</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbor</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cbor_alloc_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cbor_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><name>cbor_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cbor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cbor_len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>pack_dummy</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>param</name></name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>blob</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>blob_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>ext</name></name> <operator>=</operator> <name>FIDO_EXT_HMAC_SECRET</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>dummy</name><operator>.</operator><name>pin</name></name></expr></argument>, <argument><expr><name>dummy_pin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dummy</name><operator>.</operator><name>pin</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>dummy</name><operator>.</operator><name>rp_id</name></name></expr></argument>, <argument><expr><name>dummy_rp_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dummy</name><operator>.</operator><name>rp_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>cred</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dummy_cdh</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>cdh</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dummy_cdh</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>es256</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dummy_es256</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>rs256</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dummy_rs256</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>eddsa</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dummy_eddsa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>wire_data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dummy_wire_data_fido</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dummy</name><operator>.</operator><name>cred</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_cdh</name></expr></argument>, <argument><expr><name><name>dummy</name><operator>.</operator><name>cred</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dummy</name><operator>.</operator><name>cdh</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_cdh</name></expr></argument>, <argument><expr><name><name>dummy</name><operator>.</operator><name>cdh</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dummy</name><operator>.</operator><name>wire_data</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_wire_data_fido</name></expr></argument>,
<argument><expr><name><name>dummy</name><operator>.</operator><name>wire_data</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dummy</name><operator>.</operator><name>es256</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_es256</name></expr></argument>, <argument><expr><name><name>dummy</name><operator>.</operator><name>es256</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dummy</name><operator>.</operator><name>rs256</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_rs256</name></expr></argument>, <argument><expr><name><name>dummy</name><operator>.</operator><name>rs256</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dummy</name><operator>.</operator><name>eddsa</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_eddsa</name></expr></argument>, <argument><expr><name><name>dummy</name><operator>.</operator><name>eddsa</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>blob_len</name> <operator>=</operator> <call><name>pack</name><argument_list>(<argument><expr><name>blob</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>blob</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blob_len</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>blob_len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_assert</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>cdh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ext</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>uv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>cred_count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>blob</name></name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dev</name> <operator>=</operator> <call><name>open_dev</name><argument_list>(<argument><expr><name>opt</name> <operator>&amp;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_dev_force_u2f</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>&amp;</operator> <name>FIDO_EXT_HMAC_SECRET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_assert_set_extensions</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>FIDO_EXT_HMAC_SECRET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>&amp;</operator> <name>FIDO_EXT_CRED_BLOB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_assert_set_extensions</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>FIDO_EXT_CRED_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>&amp;</operator> <name>FIDO_EXT_LARGEBLOB_KEY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_assert_set_extensions</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>FIDO_EXT_LARGEBLOB_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>up</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_assert_set_up</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>FIDO_OPT_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_assert_set_up</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>FIDO_OPT_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uv</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_assert_set_uv</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>FIDO_OPT_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cred_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_assert_allow_cred</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>fido_assert_set_clientdata_hash</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name><name>cdh</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>cdh</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_assert_set_rp</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fido_assert_set_hmac_salt</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fido_assert_set_clientdata_hash</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name><name>cdh</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>cdh</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_assert_set_rp</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_assert_set_hmac_salt</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>pin</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fido_dev_get_assert</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>assert</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>opt</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pin</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fido_dev_cancel</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_dev_close</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_dev_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>verify_assert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cdh_ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cdh_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>authdata_ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>authdata_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig_ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>uv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ext</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>assert</name> <operator>=</operator> <call><name>fido_assert_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fido_assert_set_clientdata_hash</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>cdh_ptr</name></expr></argument>, <argument><expr><name>cdh_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_assert_set_rp</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_assert_set_count</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_assert_set_authdata</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>authdata_ptr</name></expr></argument>,
<argument><expr><name>authdata_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_assert_set_authdata_raw</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>authdata_ptr</name></expr></argument>,
<argument><expr><name>authdata_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>up</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_assert_set_up</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>FIDO_OPT_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uv</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_assert_set_uv</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>FIDO_OPT_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fido_assert_set_extensions</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_assert_set_sig</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sig_ptr</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fido_assert_set_authdata</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>authdata_ptr</name></expr></argument>,
<argument><expr><name>authdata_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_assert_set_authdata_raw</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>authdata_ptr</name></expr></argument>,
<argument><expr><name>authdata_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fido_assert_set_sig</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sig_ptr</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>fido_assert_verify</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FIDO_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fido_assert_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>assert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>rs256_convert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rs256_pk_t</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rs256_pk_t</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSA</name> <modifier>*</modifier></type><name>rsa</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>rs256_pk_to_EVP_PKEY</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>pk</name> <operator>=</operator> <call><name>rs256_pk_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>rsa</name> <operator>=</operator> <call><name>EVP_PKEY_get0_RSA</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rs256_pk_from_RSA</name><argument_list>(<argument><expr><name>pk</name></expr></argument>, <argument><expr><name>rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>pk</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rs256_pk_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pkey</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>eddsa_convert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>eddsa_pk_t</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eddsa_pk_t</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>eddsa_pk_to_EVP_PKEY</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>pk</name> <operator>=</operator> <call><name>eddsa_pk_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>eddsa_pk_from_EVP_PKEY</name><argument_list>(<argument><expr><name>pk</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>pk</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>eddsa_pk_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pkey</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>param</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es256_pk_t</name> <modifier>*</modifier></type><name>es256_pk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rs256_pk_t</name> <modifier>*</modifier></type><name>rs256_pk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eddsa_pk_t</name> <modifier>*</modifier></type><name>eddsa_pk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sigcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cose_alg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prng_init</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_init</name><argument_list>(<argument><expr><name>FIDO_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_set_log_handler</name><argument_list>(<argument><expr><name>consume_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>cose_alg</name> <operator>=</operator> <name>COSE_ES256</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>es256_pk</name> <operator>=</operator> <call><name>es256_pk_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es256_pk_from_ptr</name><argument_list>(<argument><expr><name>es256_pk</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>es256</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>es256</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pk</name> <operator>=</operator> <name>es256_pk</name></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>cose_alg</name> <operator>=</operator> <name>COSE_RS256</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rs256_pk</name> <operator>=</operator> <call><name>rs256_pk_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rs256_pk_from_ptr</name><argument_list>(<argument><expr><name>rs256_pk</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rs256</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rs256</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pk</name> <operator>=</operator> <name>rs256_pk</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rs256_convert</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>cose_alg</name> <operator>=</operator> <name>COSE_EDDSA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>eddsa_pk</name> <operator>=</operator> <call><name>eddsa_pk_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>eddsa_pk_from_ptr</name><argument_list>(<argument><expr><name>eddsa_pk</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>eddsa</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>eddsa</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pk</name> <operator>=</operator> <name>eddsa_pk</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eddsa_convert</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>assert</name> <operator>=</operator> <call><name>fido_assert_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_wire_data</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>wire_data</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>wire_data</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_assert</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>up</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pin</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cred_count</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>fido_assert_count</name><argument_list>(<argument><expr><name>assert</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>verify_assert</name><argument_list>(<argument><expr><name>cose_alg</name></expr></argument>,
<argument><expr><call><name>fido_assert_clientdata_hash_ptr</name><argument_list>(<argument><expr><name>assert</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_assert_clientdata_hash_len</name><argument_list>(<argument><expr><name>assert</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_assert_rp_id</name><argument_list>(<argument><expr><name>assert</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_assert_authdata_ptr</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_assert_authdata_len</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_assert_sig_ptr</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_assert_sig_len</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>up</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>, <argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume</name><argument_list>(<argument><expr><call><name>fido_assert_id_ptr</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_assert_id_len</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume</name><argument_list>(<argument><expr><call><name>fido_assert_user_id_ptr</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_assert_user_id_len</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume</name><argument_list>(<argument><expr><call><name>fido_assert_hmac_secret_ptr</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_assert_hmac_secret_len</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume_str</name><argument_list>(<argument><expr><call><name>fido_assert_user_icon</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume_str</name><argument_list>(<argument><expr><call><name>fido_assert_user_name</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume_str</name><argument_list>(<argument><expr><call><name>fido_assert_user_display_name</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume</name><argument_list>(<argument><expr><call><name>fido_assert_blob_ptr</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_assert_blob_len</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume</name><argument_list>(<argument><expr><call><name>fido_assert_largeblob_key_ptr</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>fido_assert_largeblob_key_len</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>fido_assert_flags</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sigcount</name> <operator>=</operator> <call><name>fido_assert_sigcount</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sigcount</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sigcount</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>es256_pk_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>es256_pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rs256_pk_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rs256_pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eddsa_pk_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eddsa_pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fido_assert_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>assert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>mutate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>param</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> NO_MSAN
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MUTATE_SEED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>seed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MUTATE_PARAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mutate_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>up</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cred_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rs256</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>es256</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>eddsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_string</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mutate_string</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MUTATE_WIREDATA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>wire_data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dummy_wire_data_u2f</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>wire_data</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_wire_data_u2f</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>wire_data</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>wire_data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dummy_wire_data_fido</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>wire_data</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_wire_data_fido</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>wire_data</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>mutate_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>wire_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
