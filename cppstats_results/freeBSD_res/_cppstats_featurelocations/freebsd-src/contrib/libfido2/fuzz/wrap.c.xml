<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/fuzz/wrap.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/bn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/evp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/sha.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cbor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mutator_aux.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>prng_up</name></decl>;</decl_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAP</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>args</name></type></parameter>, <parameter><type><name>retval</name></type></parameter>, <parameter><type><name>param</name></type></parameter>, <parameter><type><name>prob</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern type __wrap_##name args; extern type __real_##name args; type __wrap_##name args { if (prng_up &amp;&amp; uniform_random(400) &lt; (prob)) { return (retval); } return (__real_##name param); }</cpp:value></cpp:define>










<macro><name>WRAP</name><argument_list>(<argument>void *</argument>,
<argument>malloc</argument>,
<argument>(size_t size)</argument>,
<argument>NULL</argument>,
<argument>(size)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>void *</argument>,
<argument>calloc</argument>,
<argument>(size_t nmemb, size_t size)</argument>,
<argument>NULL</argument>,
<argument>(nmemb, size)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>char *</argument>,
<argument>strdup</argument>,
<argument>(const char *s)</argument>,
<argument>NULL</argument>,
<argument>(s)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_Cipher</argument>,
<argument>(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in,
unsigned int inl)</argument>,
<argument>-<literal type="number">1</literal></argument>,
<argument>(ctx, out, in, inl)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_CIPHER_CTX_ctrl</argument>,
<argument>(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, type, arg, ptr)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>EVP_CIPHER_CTX *</argument>,
<argument>EVP_CIPHER_CTX_new</argument>,
<argument>(void)</argument>,
<argument>NULL</argument>,
<argument>()</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_EncryptInit_ex</argument>,
<argument>(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, ENGINE *impl,
const unsigned char *key, const unsigned char *iv)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, type, impl, key, iv)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_CIPHER_CTX_set_padding</argument>,
<argument>(EVP_CIPHER_CTX *x, int padding)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(x, padding)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_EncryptUpdate</argument>,
<argument>(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,
const unsigned char *in, int inl)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, out, outl, in, inl)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_CipherInit</argument>,
<argument>(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
const unsigned char *key, const unsigned char *iv, int enc)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, cipher, key, iv, enc)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_DecryptInit_ex</argument>,
<argument>(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, ENGINE *impl,
const unsigned char *key, const unsigned char *iv)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, type, impl, key, iv)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_DecryptUpdate</argument>,
<argument>(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,
const unsigned char *in, int inl)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, out, outl, in, inl)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>SHA256_Init</argument>,
<argument>(SHA256_CTX *c)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(c)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>SHA256_Update</argument>,
<argument>(SHA256_CTX *c, const void *data, size_t len)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(c, data, len)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>SHA256_Final</argument>,
<argument>(unsigned char *md, SHA256_CTX *c)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(md, c)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>RSA *</argument>,
<argument>EVP_PKEY_get0_RSA</argument>,
<argument>(EVP_PKEY *pkey)</argument>,
<argument>NULL</argument>,
<argument>(pkey)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>EC_KEY *</argument>,
<argument>EVP_PKEY_get0_EC_KEY</argument>,
<argument>(EVP_PKEY *pkey)</argument>,
<argument>NULL</argument>,
<argument>(pkey)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_PKEY_get_raw_public_key</argument>,
<argument>(const EVP_PKEY *pkey, unsigned char *pub, size_t *len)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(pkey, pub, len)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>EVP_MD_CTX *</argument>,
<argument>EVP_MD_CTX_new</argument>,
<argument>(void)</argument>,
<argument>NULL</argument>,
<argument>()</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_DigestVerifyInit</argument>,
<argument>(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx, const EVP_MD *type, ENGINE *e,
EVP_PKEY *pkey)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, pctx, type, e, pkey)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>BIGNUM *</argument>,
<argument>BN_bin2bn</argument>,
<argument>(const unsigned char *s, int len, BIGNUM *ret)</argument>,
<argument>NULL</argument>,
<argument>(s, len, ret)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>BN_bn2bin</argument>,
<argument>(const BIGNUM *a, unsigned char *to)</argument>,
<argument>-<literal type="number">1</literal></argument>,
<argument>(a, to)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>BIGNUM *</argument>,
<argument>BN_CTX_get</argument>,
<argument>(BN_CTX *ctx)</argument>,
<argument>NULL</argument>,
<argument>(ctx)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>BN_CTX *</argument>,
<argument>BN_CTX_new</argument>,
<argument>(void)</argument>,
<argument>NULL</argument>,
<argument>()</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>BIGNUM *</argument>,
<argument>BN_new</argument>,
<argument>(void)</argument>,
<argument>NULL</argument>,
<argument>()</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>RSA_set0_key</argument>,
<argument>(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(r, n, e, d)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>EC_KEY *</argument>,
<argument>EC_KEY_new_by_curve_name</argument>,
<argument>(int nid)</argument>,
<argument>NULL</argument>,
<argument>(nid)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>const EC_GROUP *</argument>,
<argument>EC_KEY_get0_group</argument>,
<argument>(const EC_KEY *key)</argument>,
<argument>NULL</argument>,
<argument>(key)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>const BIGNUM *</argument>,
<argument>EC_KEY_get0_private_key</argument>,
<argument>(const EC_KEY *key)</argument>,
<argument>NULL</argument>,
<argument>(key)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>EC_POINT *</argument>,
<argument>EC_POINT_new</argument>,
<argument>(const EC_GROUP *group)</argument>,
<argument>NULL</argument>,
<argument>(group)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EC_POINT_get_affine_coordinates_GFp</argument>,
<argument>(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(group, p, x, y, ctx)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>EVP_PKEY *</argument>,
<argument>EVP_PKEY_new</argument>,
<argument>(void)</argument>,
<argument>NULL</argument>,
<argument>()</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_PKEY_assign</argument>,
<argument>(EVP_PKEY *pkey, int type, void *key)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(pkey, type, key)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_PKEY_keygen_init</argument>,
<argument>(EVP_PKEY_CTX *ctx)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_PKEY_keygen</argument>,
<argument>(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, ppkey)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_PKEY_paramgen_init</argument>,
<argument>(EVP_PKEY_CTX *ctx)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_PKEY_paramgen</argument>,
<argument>(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, ppkey)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>EVP_PKEY *</argument>,
<argument>EVP_PKEY_new_raw_public_key</argument>,
<argument>(int type, ENGINE *e, const unsigned char *key, size_t keylen)</argument>,
<argument>NULL</argument>,
<argument>(type, e, key, keylen)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>EVP_PKEY_CTX *</argument>,
<argument>EVP_PKEY_CTX_new</argument>,
<argument>(EVP_PKEY *pkey, ENGINE *e)</argument>,
<argument>NULL</argument>,
<argument>(pkey, e)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>EVP_PKEY_CTX *</argument>,
<argument>EVP_PKEY_CTX_new_id</argument>,
<argument>(int id, ENGINE *e)</argument>,
<argument>NULL</argument>,
<argument>(id, e)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_PKEY_derive</argument>,
<argument>(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *pkeylen)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, key, pkeylen)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_PKEY_derive_init</argument>,
<argument>(EVP_PKEY_CTX *ctx)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>EVP_PKEY_derive_set_peer</argument>,
<argument>(EVP_PKEY_CTX *ctx, EVP_PKEY *peer)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, peer)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>const EVP_MD *</argument>,
<argument>EVP_sha256</argument>,
<argument>(void)</argument>,
<argument>NULL</argument>,
<argument>()</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>unsigned char *</argument>,
<argument>HMAC</argument>,
<argument>(const EVP_MD *evp_md, const void *key, int key_len,
const unsigned char *d, int n, unsigned char *md,
unsigned int *md_len)</argument>,
<argument>NULL</argument>,
<argument>(evp_md, key, key_len, d, n, md, md_len)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>HMAC_CTX *</argument>,
<argument>HMAC_CTX_new</argument>,
<argument>(void)</argument>,
<argument>NULL</argument>,
<argument>()</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>HMAC_Init_ex</argument>,
<argument>(HMAC_CTX *ctx, const void *key, int key_len, const EVP_MD *md,
ENGINE *impl)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, key, key_len, md, impl)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>HMAC_Update</argument>,
<argument>(HMAC_CTX *ctx, const unsigned char *data, int len)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, data, len)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>HMAC_Final</argument>,
<argument>(HMAC_CTX *ctx, unsigned char *md, unsigned int *len)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(ctx, md, len)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>unsigned char *</argument>,
<argument>SHA256</argument>,
<argument>(const unsigned char *d, size_t n, unsigned char *md)</argument>,
<argument>NULL</argument>,
<argument>(d, n, md)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>cbor_item_t *</argument>,
<argument>cbor_build_string</argument>,
<argument>(const char *val)</argument>,
<argument>NULL</argument>,
<argument>(val)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>cbor_item_t *</argument>,
<argument>cbor_build_bytestring</argument>,
<argument>(cbor_data handle, size_t length)</argument>,
<argument>NULL</argument>,
<argument>(handle, length)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>cbor_item_t *</argument>,
<argument>cbor_build_bool</argument>,
<argument>(bool value)</argument>,
<argument>NULL</argument>,
<argument>(value)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>cbor_item_t *</argument>,
<argument>cbor_build_negint8</argument>,
<argument>(uint8_t value)</argument>,
<argument>NULL</argument>,
<argument>(value)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>cbor_item_t *</argument>,
<argument>cbor_build_negint16</argument>,
<argument>(uint16_t value)</argument>,
<argument>NULL</argument>,
<argument>(value)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>cbor_item_t *</argument>,
<argument>cbor_load</argument>,
<argument>(cbor_data source, size_t source_size, struct cbor_load_result *result)</argument>,
<argument>NULL</argument>,
<argument>(source, source_size, result)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>cbor_item_t *</argument>,
<argument>cbor_build_uint8</argument>,
<argument>(uint8_t value)</argument>,
<argument>NULL</argument>,
<argument>(value)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>cbor_item_t *</argument>,
<argument>cbor_build_uint32</argument>,
<argument>(uint32_t value)</argument>,
<argument>NULL</argument>,
<argument>(value)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>struct cbor_pair *</argument>,
<argument>cbor_map_handle</argument>,
<argument>(const cbor_item_t *item)</argument>,
<argument>NULL</argument>,
<argument>(item)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>cbor_item_t **</argument>,
<argument>cbor_array_handle</argument>,
<argument>(const cbor_item_t *item)</argument>,
<argument>NULL</argument>,
<argument>(item)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>bool</argument>,
<argument>cbor_array_push</argument>,
<argument>(cbor_item_t *array, cbor_item_t *pushee)</argument>,
<argument>false</argument>,
<argument>(array, pushee)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>bool</argument>,
<argument>cbor_map_add</argument>,
<argument>(cbor_item_t *item, struct cbor_pair pair)</argument>,
<argument>false</argument>,
<argument>(item, pair)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>cbor_item_t *</argument>,
<argument>cbor_new_definite_map</argument>,
<argument>(size_t size)</argument>,
<argument>NULL</argument>,
<argument>(size)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>cbor_item_t *</argument>,
<argument>cbor_new_definite_array</argument>,
<argument>(size_t size)</argument>,
<argument>NULL</argument>,
<argument>(size)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>size_t</argument>,
<argument>cbor_serialize_alloc</argument>,
<argument>(const cbor_item_t *item, cbor_mutable_data *buffer,
size_t *buffer_size)</argument>,
<argument><literal type="number">0</literal></argument>,
<argument>(item, buffer, buffer_size)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>fido_tx</argument>,
<argument>(fido_dev_t *d, uint8_t cmd, const void *buf, size_t count)</argument>,
<argument>-<literal type="number">1</literal></argument>,
<argument>(d, cmd, buf, count)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>

<macro><name>WRAP</name><argument_list>(<argument>int</argument>,
<argument>usleep</argument>,
<argument>(unsigned int usec)</argument>,
<argument>-<literal type="number">1</literal></argument>,
<argument>(usec)</argument>,
<argument><literal type="number">1</literal></argument>
)</argument_list></macro>
</unit>
