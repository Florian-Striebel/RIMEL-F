<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/src/winhello.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;webauthn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXCHARS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXCREDS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMSEC</name></cpp:macro> <cpp:value>6000 * 1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VENDORID</name></cpp:macro> <cpp:value>0x045e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRODID</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<struct>struct <name>winhello_assert</name> <block>{
<decl_stmt><decl><type><name>WEBAUTHN_CLIENT_DATA</name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WEBAUTHN_ASSERTION</name> <modifier>*</modifier></type><name>assert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>rp_id</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>winhello_cred</name> <block>{
<decl_stmt><decl><type><name>WEBAUTHN_RP_ENTITY_INFORMATION</name></type> <name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WEBAUTHN_USER_ENTITY_INFORMATION</name></type> <name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WEBAUTHN_COSE_CREDENTIAL_PARAMETER</name></type> <name>alg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WEBAUTHN_COSE_CREDENTIAL_PARAMETERS</name></type> <name>cose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WEBAUTHN_CLIENT_DATA</name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WEBAUTHN_CREDENTIAL_ATTESTATION</name> <modifier>*</modifier></type><name>att</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>rp_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>rp_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>user_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>user_icon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>display_name</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type>
<name>to_utf16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>utf16</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>utf8</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: NULL"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nch</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>utf8</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name>nch</name> <operator>&gt;</operator> <name>MAXCHARS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: MultiByteToWideChar %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>nch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>utf16</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>utf16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>utf8</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>utf16</name></expr></argument>, <argument><expr><name>nch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: MultiByteToWideChar"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>utf16</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>to_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>utf16</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf8</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>utf16</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: NULL"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nch</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>WC_ERR_INVALID_CHARS</name></expr></argument>, <argument><expr><name>utf16</name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>nch</name> <operator>&gt;</operator> <name>MAXCHARS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: WideCharToMultiByte %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>utf8</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>utf8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>WC_ERR_INVALID_CHARS</name></expr></argument>, <argument><expr><name>utf16</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>utf8</name></expr></argument>, <argument><expr><name>nch</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: WideCharToMultiByte"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>utf8</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>to_fido_str_array</name><parameter_list>(<parameter><decl><type><name>fido_str_array_t</name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sa</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sa</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>to_fido</name><parameter_list>(<parameter><decl><type><name>HRESULT</name></type> <name>hr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>hr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NTE_NOT_SUPPORTED</name></expr>:</case>
<return>return <expr><name>FIDO_ERR_UNSUPPORTED_OPTION</name></expr>;</return>
<case>case <expr><name>NTE_INVALID_PARAMETER</name></expr>:</case>
<return>return <expr><name>FIDO_ERR_INVALID_PARAMETER</name></expr>;</return>
<case>case <expr><name>NTE_TOKEN_KEYSET_STORAGE_FULL</name></expr>:</case>
<return>return <expr><name>FIDO_ERR_KEY_STORE_FULL</name></expr>;</return>
<case>case <expr><name>NTE_DEVICE_NOT_FOUND</name></expr>:</case>
<case>case <expr><name>NTE_NOT_FOUND</name></expr>:</case>
<return>return <expr><name>FIDO_ERR_NOT_ALLOWED</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: hr=0x%x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pack_cd</name><parameter_list>(<parameter><decl><type><name>WEBAUTHN_CLIENT_DATA</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: NULL"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>ULONG_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: in-&gt;len=%zu"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>dwVersion</name></name> <operator>=</operator> <name>WEBAUTHN_CLIENT_DATA_CURRENT_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>cbClientDataJSON</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pbClientDataJSON</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pwszHashAlgId</name></name> <operator>=</operator> <name>WEBAUTHN_HASH_ALGORITHM_SHA_256</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pack_credlist</name><parameter_list>(<parameter><decl><type><name>WEBAUTHN_CREDENTIALS</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_blob_array_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WEBAUTHN_CREDENTIAL</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>MAXCREDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: in-&gt;len=%zu"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>pCredentials</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>cCredentials</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&gt;</operator> <name>ULONG_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %zu"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>pCredentials</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dwVersion</name></name> <operator>=</operator> <name>WEBAUTHN_CREDENTIAL_CURRENT_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cbId</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pbId</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pwszCredentialType</name></name> <operator>=</operator> <name>WEBAUTHN_CREDENTIAL_TYPE_PUBLIC_KEY</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_uv</name><parameter_list>(<parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>fido_opt_t</name></type> <name>uv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>WEBAUTHN_USER_VERIFICATION_REQUIREMENT_REQUIRED</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>uv</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FIDO_OPT_OMIT</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>WEBAUTHN_USER_VERIFICATION_REQUIREMENT_ANY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FIDO_OPT_FALSE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>WEBAUTHN_USER_VERIFICATION_REQUIREMENT_DISCOURAGED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FIDO_OPT_TRUE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>WEBAUTHN_USER_VERIFICATION_REQUIREMENT_REQUIRED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pack_rp</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>WEBAUTHN_RP_ENTITY_INFORMATION</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>fido_rp_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>dwVersion</name></name> <operator>=</operator> <name>WEBAUTHN_RP_ENTITY_INFORMATION_CURRENT_VERSION</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>pwszId</name></name> <operator>=</operator> <operator>*</operator><name>id</name> <operator>=</operator> <call><name>to_utf16</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: id"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>pwszName</name></name> <operator>=</operator> <operator>*</operator><name>name</name> <operator>=</operator> <call><name>to_utf16</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: name"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pack_user</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>icon</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>display_name</name></decl></parameter>,
<parameter><decl><type><name>WEBAUTHN_USER_ENTITY_INFORMATION</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>fido_user_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>in</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>ULONG_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: id"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>dwVersion</name></name> <operator>=</operator> <name>WEBAUTHN_USER_ENTITY_INFORMATION_CURRENT_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>cbId</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pbId</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>pwszName</name></name> <operator>=</operator> <operator>*</operator><name>name</name> <operator>=</operator> <call><name>to_utf16</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: name"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>icon</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>pwszIcon</name></name> <operator>=</operator> <operator>*</operator><name>icon</name> <operator>=</operator> <call><name>to_utf16</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>icon</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: icon"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>display_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>pwszDisplayName</name></name> <operator>=</operator> <operator>*</operator><name>display_name</name> <operator>=</operator>
<call><name>to_utf16</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>display_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: display_name"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pack_cose</name><parameter_list>(<parameter><decl><type><name>WEBAUTHN_COSE_CREDENTIAL_PARAMETER</name> <modifier>*</modifier></type><name>alg</name></decl></parameter>,
<parameter><decl><type><name>WEBAUTHN_COSE_CREDENTIAL_PARAMETERS</name> <modifier>*</modifier></type><name>cose</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COSE_ES256</name></expr>:</case>
<expr_stmt><expr><name><name>alg</name><operator>-&gt;</operator><name>lAlg</name></name> <operator>=</operator> <name>WEBAUTHN_COSE_ALGORITHM_ECDSA_P256_WITH_SHA256</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COSE_EDDSA</name></expr>:</case>
<expr_stmt><expr><name><name>alg</name><operator>-&gt;</operator><name>lAlg</name></name> <operator>=</operator> <operator>-</operator><literal type="number">8</literal></expr>;</expr_stmt> <empty_stmt>;</empty_stmt>
<break>break;</break>
<case>case <expr><name>COSE_RS256</name></expr>:</case>
<expr_stmt><expr><name><name>alg</name><operator>-&gt;</operator><name>lAlg</name></name> <operator>=</operator> <name>WEBAUTHN_COSE_ALGORITHM_RSASSA_PKCS1_V1_5_WITH_SHA256</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: type %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>alg</name><operator>-&gt;</operator><name>dwVersion</name></name> <operator>=</operator> <name>WEBAUTHN_COSE_CREDENTIAL_PARAMETER_CURRENT_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alg</name><operator>-&gt;</operator><name>pwszCredentialType</name></name> <operator>=</operator> <name>WEBAUTHN_CREDENTIAL_TYPE_PUBLIC_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cose</name><operator>-&gt;</operator><name>cCredentialParameters</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cose</name><operator>-&gt;</operator><name>pCredentialParameters</name></name> <operator>=</operator> <name>alg</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pack_cred_ext</name><parameter_list>(<parameter><decl><type><name>WEBAUTHN_EXTENSIONS</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>fido_cred_ext_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WEBAUTHN_EXTENSION</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WEBAUTHN_CRED_PROTECT_EXTENSION_IN</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>mask</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>FIDO_EXT_HMAC_SECRET</name> <operator>|</operator> <name>FIDO_EXT_CRED_PROTECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: mask 0x%x"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>FIDO_EXT_HMAC_SECRET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>FIDO_EXT_CRED_PROTECT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>pExtensions</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>cExtensions</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>FIDO_EXT_HMAC_SECRET</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>pExtensions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>pwszExtensionIdentifier</name></name> <operator>=</operator>
<name>WEBAUTHN_EXTENSIONS_IDENTIFIER_HMAC_SECRET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>pvExtension</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>cbExtension</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>mask</name></name> <operator>&amp;</operator> <name>FIDO_EXT_CRED_PROTECT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dwCredProtect</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>prot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bRequireCredProtect</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>pExtensions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>pwszExtensionIdentifier</name></name> <operator>=</operator>
<name>WEBAUTHN_EXTENSIONS_IDENTIFIER_CRED_PROTECT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>pvExtension</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>cbExtension</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unpack_fmt</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>WEBAUTHN_CREDENTIAL_ATTESTATION</name> <modifier>*</modifier></type><name>att</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fmt</name> <operator>=</operator> <call><name>to_utf8</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>pwszFormatType</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fmt"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fido_cred_set_fmt</name><argument_list>(<argument><expr><name>cred</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_cred_set_fmt: %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unpack_cred_authdata</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>WEBAUTHN_CREDENTIAL_ATTESTATION</name> <modifier>*</modifier></type><name>att</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>cbAuthenticatorData</name></name> <operator>&gt;</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbAuthenticatorData"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_cred_set_authdata_raw</name><argument_list>(<argument><expr><name>cred</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>pbAuthenticatorData</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>att</name><operator>-&gt;</operator><name>cbAuthenticatorData</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_cred_set_authdata_raw: %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unpack_cred_sig</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>WEBAUTHN_COMMON_ATTESTATION</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>cbSignature</name></name> <operator>&gt;</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbSignature"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_cred_set_sig</name><argument_list>(<argument><expr><name>cred</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>pbSignature</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>attr</name><operator>-&gt;</operator><name>cbSignature</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_cred_set_sig: %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unpack_x5c</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>WEBAUTHN_COMMON_ATTESTATION</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %u cert(s)"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>cX5c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>cX5c</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>lAlg</name></name> <operator>!=</operator> <name>WEBAUTHN_COSE_ALGORITHM_ECDSA_P256_WITH_SHA256</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: lAlg %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>lAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>pX5c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbData</name> <operator>&gt;</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbData"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_cred_set_x509</name><argument_list>(<argument><expr><name>cred</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>pX5c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pbData</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>attr</name><operator>-&gt;</operator><name>pX5c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbData</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_cred_set_x509: %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unpack_assert_authdata</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>WEBAUTHN_ASSERTION</name> <modifier>*</modifier></type><name>wa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wa</name><operator>-&gt;</operator><name>cbAuthenticatorData</name></name> <operator>&gt;</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbAuthenticatorData"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_assert_set_authdata_raw</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>wa</name><operator>-&gt;</operator><name>pbAuthenticatorData</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>wa</name><operator>-&gt;</operator><name>cbAuthenticatorData</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_assert_set_authdata_raw: %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unpack_assert_sig</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>WEBAUTHN_ASSERTION</name> <modifier>*</modifier></type><name>wa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wa</name><operator>-&gt;</operator><name>cbSignature</name></name> <operator>&gt;</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbSignature"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_assert_set_sig</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>wa</name><operator>-&gt;</operator><name>pbSignature</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>wa</name><operator>-&gt;</operator><name>cbSignature</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_assert_set_sig: %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unpack_cred_id</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>WEBAUTHN_ASSERTION</name> <modifier>*</modifier></type><name>wa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wa</name><operator>-&gt;</operator><name>Credential</name><operator>.</operator><name>cbId</name></name> <operator>&gt;</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: Credential.cbId"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name><name>wa</name><operator>-&gt;</operator><name>Credential</name><operator>.</operator><name>pbId</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>wa</name><operator>-&gt;</operator><name>Credential</name><operator>.</operator><name>cbId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_blob_set"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unpack_user_id</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>WEBAUTHN_ASSERTION</name> <modifier>*</modifier></type><name>wa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wa</name><operator>-&gt;</operator><name>cbUserId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wa</name><operator>-&gt;</operator><name>cbUserId</name></name> <operator>&gt;</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbUserId"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>user</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>wa</name><operator>-&gt;</operator><name>pbUserId</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>wa</name><operator>-&gt;</operator><name>cbUserId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_blob_set"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>translate_fido_assert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winhello_assert</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>up</name></name> <operator>==</operator> <name>FIDO_OPT_FALSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: up %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>up</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_UNSUPPORTED_OPTION</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ext 0x%x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_UNSUPPORTED_EXTENSION</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>rp_id</name></name> <operator>=</operator> <call><name>to_utf16</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: rp_id"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pack_cd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pack_cd"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dwVersion</name></name> <operator>=</operator> <name>WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dwTimeoutMilliseconds</name></name> <operator>=</operator> <name>MAXMSEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pack_credlist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>CredentialList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pack_credlist"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_uv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>dwUserVerificationRequirement</name></name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><name>pin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set_uv"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FIDO_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>translate_winhello_assert</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>WEBAUTHN_ASSERTION</name> <modifier>*</modifier></type><name>wa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: stmt_len=%zu"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_assert_set_count</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_assert_set_count: %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unpack_assert_authdata</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unpack_assert_authdata"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unpack_assert_sig</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unpack_assert_sig"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unpack_cred_id</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unpack_cred_id"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unpack_user_id</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name>wa</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unpack_user_id"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FIDO_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>translate_fido_cred</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winhello_cred</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pack_rp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rp_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>rp</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pack_rp"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pack_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>user_icon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>display_name</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pack_user"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pack_cose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>alg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cose</name></name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pack_cose"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pack_cd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pack_cd"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dwVersion</name></name> <operator>=</operator> <name>WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dwTimeoutMilliseconds</name></name> <operator>=</operator> <name>MAXMSEC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pack_credlist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>CredentialList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>excl</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pack_credlist"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pack_cred_ext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>Extensions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pack_cred_ext"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_UNSUPPORTED_EXTENSION</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>set_uv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>dwUserVerificationRequirement</name></name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><name>pin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: set_uv"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>rk</name></name> <operator>==</operator> <name>FIDO_OPT_TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>bRequireResidentKey</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FIDO_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>translate_winhello_cred</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>WEBAUTHN_CREDENTIAL_ATTESTATION</name> <modifier>*</modifier></type><name>att</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unpack_fmt</name><argument_list>(<argument><expr><name>cred</name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unpack_fmt"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unpack_cred_authdata</name><argument_list>(<argument><expr><name>cred</name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unpack_cred_authdata"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>dwAttestationDecodeType</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WEBAUTHN_ATTESTATION_DECODE_NONE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>pvAttestationDecode</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pvAttestationDecode"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>WEBAUTHN_ATTESTATION_DECODE_COMMON</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>pvAttestationDecode</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pvAttestationDecode"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unpack_cred_sig</name><argument_list>(<argument><expr><name>cred</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>pvAttestationDecode</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unpack_cred_sig"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unpack_x5c</name><argument_list>(<argument><expr><name>cred</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>pvAttestationDecode</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unpack_x5c"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: dwAttestationDecodeType: %u"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name><name>att</name><operator>-&gt;</operator><name>dwAttestationDecodeType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>FIDO_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>winhello_manifest</name><parameter_list>(<parameter><decl><type><name>BOOL</name> <modifier>*</modifier></type><name>present</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>FIDO_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>WebAuthNGetApiVersionNumber</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unsupported api %u"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: api version %u"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable</name><argument_list>(<argument><expr><name>present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>to_fido</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %ls -&gt; %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>WebAuthNGetErrorName</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>winhello_get_assert</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>winhello_assert</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>FIDO_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>WebAuthNAuthenticatorGetAssertion</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>assert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>to_fido</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %ls -&gt; %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>WebAuthNGetErrorName</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>winhello_make_cred</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>winhello_cred</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>FIDO_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>WebAuthNAuthenticatorMakeCredential</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cose</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>att</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>to_fido</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %ls -&gt; %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><call><name>WebAuthNGetErrorName</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fido_strerr</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>winhello_assert_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winhello_assert</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>assert</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WebAuthNFreeAssertion</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>assert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>CredentialList</name><operator>.</operator><name>pCredentials</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>winhello_cred_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>winhello_cred</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>att</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WebAuthNFreeCredentialAttestation</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>att</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>display_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>CredentialList</name><operator>.</operator><name>pCredentials</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>Extensions</name><operator>.</operator><name>cExtensions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>WEBAUTHN_EXTENSION</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>Extensions</name><operator>.</operator><name>pExtensions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>pvExtension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>Extensions</name><operator>.</operator><name>pExtensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_winhello_manifest</name><parameter_list>(<parameter><decl><type><name>fido_dev_info_t</name> <modifier>*</modifier></type><name>devlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>present</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_info_t</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ilen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FIDO_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>devlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>winhello_manifest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>present</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: winhello_manifest"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>present</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: not present"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <operator>&amp;</operator><name><name>devlist</name><index>[<expr><operator>*</operator><name>olen</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>di</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>FIDO_WINHELLO_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>manufacturer</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"Microsoft Corporation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>product</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"Windows Hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>vendor_id</name></name> <operator>=</operator> <name>VENDORID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>product_id</name></name> <operator>=</operator> <name>PRODID</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>di</name><operator>-&gt;</operator><name>manufacturer</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>di</name><operator>-&gt;</operator><name>product</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>manufacturer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>product</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>explicit_bzero</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>di</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>olen</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>FIDO_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_winhello_open</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dev</name><operator>-&gt;</operator><name>flags</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>FIDO_CAP_CBOR</name> <operator>|</operator> <name>FIDO_CAP_WINK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dev</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>FIDO_DEV_WINHELLO</name> <operator>|</operator> <name>FIDO_DEV_CRED_PROT</name> <operator>|</operator> <name>FIDO_DEV_PIN_SET</name></expr>;</expr_stmt>

<return>return <expr><name>FIDO_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_winhello_close</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FIDO_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_winhello_cancel</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_winhello_get_assert</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>winhello_assert</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>FIDO_ERR_INTERNAL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctx</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>GetForegroundWindow</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: GetForegroundWindow"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>translate_fido_assert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>assert</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: translate_fido_assert"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>winhello_get_assert</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: winhello_get_assert"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>translate_winhello_assert</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>assert</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: translate_winhello_assert"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>winhello_assert_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_winhello_get_cbor_info</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_cbor_info_t</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"U2F_V2"</literal></expr>, <expr><literal type="string">"FIDO_2_0"</literal></expr>, <expr><literal type="string">"FIDO_2_1_PRE"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"credProtect"</literal></expr>, <expr><literal type="string">"hmac-secret"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"nfc"</literal></expr>, <expr><literal type="string">"usb"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>o</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"rk"</literal></expr>, <expr><literal type="string">"up"</literal></expr>, <expr><literal type="string">"plat"</literal></expr>, <expr><literal type="string">"clientPin"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fido_cbor_info_reset</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>to_fido_str_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>versions</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>to_fido_str_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>to_fido_str_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>transports</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: to_fido_str_array"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>nitems</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: strdup"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>FIDO_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_winhello_make_cred</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>winhello_cred</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>FIDO_ERR_INTERNAL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dev</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctx</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: calloc"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>GetForegroundWindow</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: GetForegroundWindow"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>translate_fido_cred</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cred</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: translate_fido_cred"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>winhello_make_cred</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: winhello_make_cred"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>translate_winhello_cred</name><argument_list>(<argument><expr><name>cred</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>att</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: translate_winhello_cred"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_OK</name></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>winhello_cred_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
</unit>
