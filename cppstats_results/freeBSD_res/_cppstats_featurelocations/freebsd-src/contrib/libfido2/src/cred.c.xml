<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/src/cred.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/sha.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido/es256.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_makecred_reply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>||</operator>
<call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CBOR_INT_8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor type"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>cbor_get_uint8</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cbor_decode_fmt</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>fido_blob_decode</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_raw</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_blob_decode"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cbor_decode_cred_authdata</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_ext</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cbor_decode_attstmt</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>fido_blob_decode</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>largeblob_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor type"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fido_dev_make_cred_tx</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name> <modifier>*</modifier></type><name>ecdh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_opt_t</name></type> <name>uv</name> <init>= <expr><name><name>cred</name><operator>-&gt;</operator><name>uv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es256_pk_t</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>cmd</name> <init>= <expr><name>CTAP_CBOR_MAKECRED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cred</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cdh=%p, type=%d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>fido_blob_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>cbor_encode_rp_entity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>rp</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>cbor_encode_user_entity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>cbor_encode_pubkey_param</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor encode"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>excl</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>cbor_encode_pubkey_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>excl</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_encode_pubkey_list"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>cbor_encode_cred_ext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_encode_cred_ext"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pin</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>uv</name> <operator>==</operator> <name>FIDO_OPT_TRUE</name> <operator>&amp;&amp;</operator>
<call><name>fido_dev_supports_permissions</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_do_ecdh</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecdh</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_do_ecdh"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>cbor_add_uv_params</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>ecdh</name></expr></argument>,
<argument><expr><name>pin</name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>rp</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_add_uv_params"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>uv</name> <operator>=</operator> <name>FIDO_OPT_OMIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>rk</name></name> <operator>!=</operator> <name>FIDO_OPT_OMIT</name> <operator>||</operator> <name>uv</name> <operator>!=</operator> <name>FIDO_OPT_OMIT</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>cbor_encode_cred_opt</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>rk</name></name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_encode_cred_opt"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>cbor_build_frame</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fido_tx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>CTAP_CMD_CBOR</name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_tx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_TX</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_OK</name></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>es256_pk_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbor_vector_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fido_dev_make_cred_rx</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>reply</name><index>[<expr><name>FIDO_MAXMSG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reply_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fido_cred_reset_rx</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reply_len</name> <operator>=</operator> <call><name>fido_rx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>CTAP_CMD_CBOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ms</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_rx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_RX</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>cbor_parse_reply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>reply_len</name></expr></argument>, <argument><expr><name>cred</name></expr></argument>,
<argument><expr><name>parse_makecred_reply</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: parse_makecred_reply"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>fido_blob_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>fido_blob_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_cred_reset_rx</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_CBOR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fido_dev_make_cred_wait</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_dev_make_cred_tx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>cred</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name> <operator>||</operator>
<operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_dev_make_cred_rx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>cred</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_dev_make_cred</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINHELLO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>dev</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FIDO_DEV_WINHELLO</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>fido_winhello_make_cred</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>cred</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>fido_dev_is_fido2</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pin</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>cred</name><operator>-&gt;</operator><name>rk</name></name> <operator>==</operator> <name>FIDO_OPT_TRUE</name> <operator>||</operator>
<name><name>cred</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_UNSUPPORTED_OPTION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>u2f_register</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>cred</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>fido_dev_make_cred_wait</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>cred</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_extensions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_ext_t</name> <modifier>*</modifier></type><name>authdata_ext</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>fido_cred_ext_t</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_ext_t</name></type> <name>tmp</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FIDO_EXT_LARGEBLOB_KEY</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>timingsafe_bcmp</name><argument_list>(<argument><expr><name>authdata_ext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>authdata_ext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_check_rp_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>obtained_hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>expected_hash</name><index>[<expr><name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>explicit_bzero</name><argument_list>(<argument><expr><name>expected_hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expected_hash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SHA256</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>id</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>expected_hash</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>expected_hash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: sha256"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>timingsafe_bcmp</name><argument_list>(<argument><expr><name>expected_hash</name></expr></argument>, <argument><expr><name>obtained_hash</name></expr></argument>,
<argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_signed_hash_u2f</name><parameter_list>(<parameter><decl><type><name>fido_blob_t</name> <modifier>*</modifier></type><name>dgst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rp_id</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>rp_id_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>clientdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es256_pk_t</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>four</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHA256_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name>SHA256_DIGEST_LENGTH</name> <operator>||</operator> <call><name>SHA256_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>SHA256_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>SHA256_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>rp_id</name></expr></argument>, <argument><expr><name>rp_id_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>SHA256_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>clientdata</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>clientdata</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>SHA256_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>SHA256_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>four</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>four</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>SHA256_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>SHA256_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>SHA256_Final</name><argument_list>(<argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: sha256"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>verify_sig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>dgst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>x5c</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>rawcert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>cert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name><name>x5c</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name><name>sig</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: dgst-&gt;len=%zu, x5c-&gt;len=%zu, sig-&gt;len=%zu"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>x5c</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rawcert</name> <operator>=</operator> <call><name>BIO_new_mem_buf</name><argument_list>(<argument><expr><name><name>x5c</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>x5c</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>cert</name> <operator>=</operator> <call><name>d2i_X509_bio</name><argument_list>(<argument><expr><name>rawcert</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>X509_get_pubkey</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>ec</name> <operator>=</operator> <call><name>EVP_PKEY_get0_EC_KEY</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: x509 key"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ECDSA_verify</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sig</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ECDSA_verify"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>rawcert</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>rawcert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cert</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pkey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ok</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_verify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>SHA256_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>dgst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dgst</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgst</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>x5c</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>id</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>cred</name><operator>-&gt;</operator><name>rp</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cdh=%p, authdata=%p, x5c=%p, sig=%p, "</literal>
<literal type="string">"fmt=%p id=%p, rp.id=%s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>x5c</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>id</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>rp</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_check_rp_id</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>rp</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>rp_id_hash</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_check_rp_id"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_check_flags</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><name>FIDO_OPT_TRUE</name></expr></argument>,
<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_check_flags"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_extensions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_ext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check_extensions"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fido_get_signed_hash</name><argument_list>(<argument><expr><name>COSE_ES256</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_get_signed_hash"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><literal type="string">"fido-u2f"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_signed_hash_u2f</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>rp_id_hash</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>rp_id_hash</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>es256</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: get_signed_hash_u2f"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unknown fmt %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>verify_sig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>x5c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: verify_sig"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_SIG</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_OK</name></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>explicit_bzero</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_verify_self</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>dgst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dgst</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgst</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>x5c</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>id</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>cred</name><operator>-&gt;</operator><name>rp</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cdh=%p, authdata=%p, x5c=%p, sig=%p, "</literal>
<literal type="string">"fmt=%p id=%p, rp.id=%s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>x5c</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>id</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>rp</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_check_rp_id</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>rp</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>rp_id_hash</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_check_rp_id"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_check_flags</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><name>FIDO_OPT_TRUE</name></expr></argument>,
<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_check_flags"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_extensions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_ext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check_extensions"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fido_get_signed_hash</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_get_signed_hash"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><literal type="string">"fido-u2f"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_signed_hash_u2f</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>rp_id_hash</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>rp_id_hash</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>es256</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: get_signed_hash_u2f"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unknown fmt %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COSE_ES256</name></expr>:</case>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>fido_verify_sig_es256</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>es256</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COSE_RS256</name></expr>:</case>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>fido_verify_sig_rs256</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>rs256</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COSE_EDDSA</name></expr>:</case>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>fido_verify_sig_eddsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>eddsa</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unsupported cose_alg %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_UNSUPPORTED_OPTION</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_SIG</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>explicit_bzero</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>fido_cred_t</name> <modifier>*</modifier></type>
<name>fido_cred_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fido_cred_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fido_cred_clean_authdata</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_ext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>authdata_ext</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>authdata</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>attcred</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fido_cred_reset_tx</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>rp</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>rp</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>display_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_free_blob_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>excl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>rp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>rp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>excl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>excl</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>rk</name></name> <operator>=</operator> <name>FIDO_OPT_OMIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>uv</name></name> <operator>=</operator> <name>FIDO_OPT_OMIT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fido_cred_reset_rx</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_cred_clean_authdata</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>x5c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>largeblob_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fido_cred_free</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>cred_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cred_p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>cred</name> <operator>=</operator> <operator>*</operator><name>cred_p</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fido_cred_reset_tx</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_cred_reset_rx</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cred_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_authdata</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_load_result</name></name></type> <name>cbor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>FIDO_ERR_INVALID_ARGUMENT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fido_cred_clean_authdata</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbor</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_load"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_blob_decode</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_raw</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_blob_decode"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cbor_decode_cred_authdata</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_ext</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_decode_cred_authdata"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_OK</name></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_cred_clean_authdata</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_authdata_raw</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>FIDO_ERR_INVALID_ARGUMENT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fido_cred_clean_authdata</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_raw</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_blob_set"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>cbor_build_bytestring</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_build_bytestring"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cbor_decode_cred_authdata</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_ext</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_decode_cred_authdata"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_OK</name></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_cred_clean_authdata</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_id</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_x509</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>x5c</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_sig</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_exclude</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>id_ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>id_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>id_blob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name> <modifier>*</modifier></type><name>list_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id_blob</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id_blob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id_blob</name></expr></argument>, <argument><expr><name>id_ptr</name></expr></argument>, <argument><expr><name>id_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>excl</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>id_blob</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>list_ptr</name> <operator>=</operator> <call><name>recallocarray</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>excl</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>cred</name><operator>-&gt;</operator><name>excl</name><operator>.</operator><name>len</name></name></expr></argument>,
<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>excl</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fido_blob_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>id_blob</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>list_ptr</name><index>[<expr><name><name>cred</name><operator>-&gt;</operator><name>excl</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>id_blob</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>excl</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>list_ptr</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_clientdata</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fido_blob_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fido_sha256</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_clientdata_hash</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fido_blob_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_rp</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_rp_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>rp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rp</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_user</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>user_id</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>user_id_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>display_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>icon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_user_t</name> <modifier>*</modifier></type><name>up</name> <init>= <expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>user</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>up</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>up</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>up</name><operator>-&gt;</operator><name>display_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>display_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>display_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>up</name><operator>-&gt;</operator><name>icon</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>icon</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>user_id</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>up</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>, <argument><expr><name>user_id_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>up</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>display_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>up</name><operator>-&gt;</operator><name>display_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>display_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>icon</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>up</name><operator>-&gt;</operator><name>icon</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>display_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>display_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>up</name><operator>-&gt;</operator><name>icon</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_extensions</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ext</name> <operator>&amp;</operator> <name>FIDO_EXT_CRED_MASK</name><operator>)</operator> <operator>!=</operator> <name>ext</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name> <operator>|=</operator> <name>ext</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_options</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rk</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>uv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>rk</name></name> <operator>=</operator> <ternary><condition><expr><name>rk</name></expr> ?</condition><then> <expr><name>FIDO_OPT_TRUE</name></expr> </then><else>: <expr><name>FIDO_OPT_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>uv</name></name> <operator>=</operator> <ternary><condition><expr><name>uv</name></expr> ?</condition><then> <expr><name>FIDO_OPT_TRUE</name></expr> </then><else>: <expr><name>FIDO_OPT_FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_rk</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>fido_opt_t</name></type> <name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>rk</name></name> <operator>=</operator> <name>rk</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_uv</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>fido_opt_t</name></type> <name>uv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>uv</name></name> <operator>=</operator> <name>uv</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_prot</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FIDO_EXT_CRED_PROTECT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>prot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prot</name> <operator>!=</operator> <name>FIDO_CRED_PROT_UV_OPTIONAL</name> <operator>&amp;&amp;</operator>
<name>prot</name> <operator>!=</operator> <name>FIDO_CRED_PROT_UV_OPTIONAL_WITH_ID</name> <operator>&amp;&amp;</operator>
<name>prot</name> <operator>!=</operator> <name>FIDO_CRED_PROT_UV_REQUIRED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name> <operator>|=</operator> <name>FIDO_EXT_CRED_PROTECT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>prot</name></name> <operator>=</operator> <name>prot</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_blob</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name> <operator>|=</operator> <name>FIDO_EXT_CRED_BLOB</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_fmt</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"packed"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"fido-u2f"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_set_type</name><parameter_list>(<parameter><decl><type><name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cose_alg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cose_alg</name> <operator>!=</operator> <name>COSE_ES256</name> <operator>&amp;&amp;</operator> <name>cose_alg</name> <operator>!=</operator> <name>COSE_RS256</name> <operator>&amp;&amp;</operator>
<name>cose_alg</name> <operator>!=</operator> <name>COSE_EDDSA</name><operator>)</operator> <operator>||</operator> <name><name>cred</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cose_alg</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type>
<name>fido_cred_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>flags</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type>
<name>fido_cred_sigcount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>sigcount</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_clientdata_hash_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_cred_clientdata_hash_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_x5c_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>x5c</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_cred_x5c_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>x5c</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_sig_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_cred_sig_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>attstmt</name><operator>.</operator><name>sig</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_authdata_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_cred_authdata_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_cbor</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_authdata_raw_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_raw</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_cred_authdata_raw_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>authdata_raw</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_pubkey_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COSE_ES256</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>es256</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COSE_RS256</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>rs256</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COSE_EDDSA</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>eddsa</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_cred_pubkey_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COSE_ES256</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>es256</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COSE_RS256</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>rs256</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COSE_EDDSA</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>pubkey</name><operator>.</operator><name>eddsa</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_id_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>id</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_cred_id_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>id</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_aaguid_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>aaguid</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_cred_aaguid_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>cred</name><operator>-&gt;</operator><name>attcred</name><operator>.</operator><name>aaguid</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_cred_prot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>prot</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>fmt</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_rp_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>rp</name><operator>.</operator><name>id</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_rp_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>rp</name><operator>.</operator><name>name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_user_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_display_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>display_name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_user_id_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>id</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_cred_user_id_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>user</name><operator>.</operator><name>id</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_cred_largeblob_key_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>largeblob_key</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_cred_largeblob_key_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_cred_t</name> <modifier>*</modifier></type><name>cred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>cred</name><operator>-&gt;</operator><name>largeblob_key</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
