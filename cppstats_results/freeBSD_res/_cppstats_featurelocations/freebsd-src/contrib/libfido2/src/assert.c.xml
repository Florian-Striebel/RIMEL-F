<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/src/assert.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ecdsa.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/sha.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido/es256.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido/rs256.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido/eddsa.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>adjust_assert_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>||</operator>
<call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CBOR_INT_8</name> <operator>||</operator>
<call><name>cbor_get_uint8</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_type"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cbor_decode_uint64</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_decode_uint64"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<operator>(</operator><name>size_t</name><operator>)</operator><name>n</name> <operator>&lt;</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: stmt_len=%zu, stmt_cnt=%zu, n=%zu"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_assert_set_count</name><argument_list>(<argument><expr><name>assert</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_assert_set_count"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_assert_reply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cbor_item_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_assert_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cbor_isa_uint</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>||</operator>
<call><name>cbor_int_get_width</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CBOR_INT_8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor type"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>cbor_get_uint8</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cbor_decode_cred_id</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cbor_decode_assert_authdata</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata_ext</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>fido_blob_decode</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cbor_decode_user</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>fido_blob_decode</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>largeblob_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor type"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fido_dev_get_assert_tx</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es256_pk_t</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>ecdh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_opt_t</name></type> <name>uv</name> <init>= <expr><name><name>assert</name><operator>-&gt;</operator><name>uv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>cmd</name> <init>= <expr><name>CTAP_CBOR_ASSERT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>assert</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: rp_id=%p, cdh.ptr=%p"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cbor_build_string</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fido_blob_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor encode"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>fido_blob_array_t</name> <modifier>*</modifier></type><name>cl</name> <init>= <expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>cbor_encode_pubkey_list</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_encode_pubkey_list"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>cbor_encode_assert_ext</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>, <argument><expr><name>ecdh</name></expr></argument>,
<argument><expr><name>pk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_encode_assert_ext"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pin</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>uv</name> <operator>==</operator> <name>FIDO_OPT_TRUE</name> <operator>&amp;&amp;</operator>
<call><name>fido_dev_supports_permissions</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>cbor_add_uv_params</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>ecdh</name></expr></argument>,
<argument><expr><name>pin</name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_add_uv_params"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>uv</name> <operator>=</operator> <name>FIDO_OPT_OMIT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>up</name></name> <operator>!=</operator> <name>FIDO_OPT_OMIT</name> <operator>||</operator> <name>uv</name> <operator>!=</operator> <name>FIDO_OPT_OMIT</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>cbor_encode_assert_opt</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>up</name></name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_encode_assert_opt"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>cbor_build_frame</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fido_tx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>CTAP_CMD_CBOR</name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_tx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_TX</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_OK</name></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>cbor_vector_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>nitems</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fido_dev_get_assert_rx</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>reply</name><index>[<expr><name>FIDO_MAXMSG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reply_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fido_assert_reset_rx</name><argument_list>(<argument><expr><name>assert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reply_len</name> <operator>=</operator> <call><name>fido_rx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>CTAP_CMD_CBOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ms</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_rx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_RX</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fido_assert_stmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>cbor_parse_reply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>reply_len</name></expr></argument>, <argument><expr><name>assert</name></expr></argument>,
<argument><expr><name>adjust_assert_count</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: adjust_assert_count"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>cbor_parse_reply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>reply_len</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>parse_assert_reply</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: parse_assert_reply"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fido_get_next_assert_tx</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>cbor</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>CTAP_CBOR_NEXT_ASSERT</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_tx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>CTAP_CMD_CBOR</name></expr></argument>, <argument><expr><name>cbor</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_tx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_TX</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fido_get_next_assert_rx</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>reply</name><index>[<expr><name>FIDO_MAXMSG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reply_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reply_len</name> <operator>=</operator> <call><name>fido_rx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>CTAP_CMD_CBOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ms</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_rx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_RX</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: stmt_len=%zu, stmt_cnt=%zu"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>cbor_parse_reply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>reply_len</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>parse_assert_reply</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: parse_assert_reply"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fido_dev_get_assert_wait</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>es256_pk_t</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>ecdh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_dev_get_assert_tx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>assert</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>ecdh</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name> <operator>||</operator>
<operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_dev_get_assert_rx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>assert</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>&lt;</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_get_next_assert_tx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name> <operator>||</operator>
<operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_get_next_assert_rx</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>assert</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decrypt_hmac_secrets</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>fido_assert_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>authdata_ext</name><operator>.</operator><name>hmac_secret_enc</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>aes256_cbc_dec</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata_ext</name><operator>.</operator><name>hmac_secret_enc</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>hmac_secret</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: aes256_cbc_dec %zu"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_dev_get_assert</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_blob_t</name> <modifier>*</modifier></type><name>ecdh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>es256_pk_t</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINHELLO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>dev</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FIDO_DEV_WINHELLO</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>fido_winhello_get_assert</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>assert</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>assert</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: rp_id=%p, cdh.ptr=%p"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_dev_is_fido2</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pin</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>assert</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_UNSUPPORTED_OPTION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>u2f_authenticate</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>assert</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pin</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>uv</name></name> <operator>==</operator> <name>FIDO_OPT_TRUE</name> <operator>&amp;&amp;</operator>
<call><name>fido_dev_supports_permissions</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name> <operator>&amp;</operator> <name>FIDO_EXT_HMAC_SECRET</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>fido_do_ecdh</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecdh</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_do_ecdh"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>fido_dev_get_assert_wait</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>assert</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>ecdh</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>FIDO_OK</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name> <operator>&amp;</operator> <name>FIDO_EXT_HMAC_SECRET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>decrypt_hmac_secrets</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>assert</name></expr></argument>, <argument><expr><name>ecdh</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: decrypt_hmac_secrets"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>es256_pk_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_check_flags</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>fido_opt_t</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>fido_opt_t</name></type> <name>uv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: flags=%02x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: up=%d, uv=%d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>up</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>up</name> <operator>==</operator> <name>FIDO_OPT_TRUE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CTAP_AUTHDATA_USER_PRESENT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: CTAP_AUTHDATA_USER_PRESENT"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uv</name> <operator>==</operator> <name>FIDO_OPT_TRUE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CTAP_AUTHDATA_USER_VERIFIED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: CTAP_AUTHDATA_USER_VERIFIED"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_extensions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>authdata_ext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>ext</name> <operator>&amp;=</operator> <operator>~</operator><name>FIDO_EXT_LARGEBLOB_KEY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>authdata_ext</name> <operator>!=</operator> <name>ext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: authdata_ext=0x%x != ext=0x%x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name>authdata_ext</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_get_signed_hash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cose_alg</name></decl></parameter>, <parameter><decl><type><name>fido_blob_t</name> <modifier>*</modifier></type><name>dgst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>clientdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>authdata_cbor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>authdata_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>authdata_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_load_result</name></name></type> <name>cbor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SHA256_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name><name>authdata_cbor</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>authdata_cbor</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cbor</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>cbor_isa_bytestring</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>||</operator>
<call><name>cbor_bytestring_is_definite</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: authdata"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>authdata_ptr</name> <operator>=</operator> <call><name>cbor_bytestring_handle</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>authdata_len</name> <operator>=</operator> <call><name>cbor_bytestring_length</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cose_alg</name> <operator>!=</operator> <name>COSE_EDDSA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>SHA256_DIGEST_LENGTH</name> <operator>||</operator> <call><name>SHA256_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>SHA256_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>authdata_ptr</name></expr></argument>, <argument><expr><name>authdata_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>SHA256_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>clientdata</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>clientdata</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>SHA256_Final</name><argument_list>(<argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: sha256"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>SHA256_DIGEST_LENGTH</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SIZE_MAX</name> <operator>-</operator> <name>authdata_len</name> <operator>&lt;</operator> <name><name>clientdata</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator>
<name><name>dgst</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>authdata_len</name> <operator>+</operator> <name><name>clientdata</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: memcpy"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>authdata_ptr</name></expr></argument>, <argument><expr><name>authdata_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name>authdata_len</name></expr></argument>, <argument><expr><name><name>clientdata</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
<argument><expr><name><name>clientdata</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>authdata_len</name> <operator>+</operator> <name><name>clientdata</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ok</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_verify_sig_es256</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>dgst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es256_pk_t</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name><name>sig</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: dgst-&gt;len=%zu, sig-&gt;len=%zu"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>es256_pk_to_EVP_PKEY</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>ec</name> <operator>=</operator> <call><name>EVP_PKEY_get0_EC_KEY</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pk -&gt; ec"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ECDSA_verify</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sig</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ECDSA_verify"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>pkey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ok</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_verify_sig_rs256</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>dgst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rs256_pk_t</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSA</name> <modifier>*</modifier></type><name>rsa</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>UINT_MAX</name> <operator>||</operator> <name><name>sig</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>UINT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: dgst-&gt;len=%zu, sig-&gt;len=%zu"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>rs256_pk_to_EVP_PKEY</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>rsa</name> <operator>=</operator> <call><name>EVP_PKEY_get0_RSA</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pk -&gt; ec"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RSA_verify</name><argument_list>(<argument><expr><name>NID_sha256</name></expr></argument>, <argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>sig</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>rsa</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: RSA_verify"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>pkey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ok</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_verify_sig_eddsa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>dgst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>eddsa_pk_t</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>mdctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name><name>sig</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: dgst-&gt;len=%zu, sig-&gt;len=%zu"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>eddsa_pk_to_EVP_PKEY</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: pk -&gt; pkey"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mdctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: EVP_MD_CTX_new"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_DigestVerifyInit</name><argument_list>(<argument><expr><name>mdctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: EVP_DigestVerifyInit"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_DigestVerify</name><argument_list>(<argument><expr><name>mdctx</name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
<argument><expr><name><name>dgst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: EVP_DigestVerify"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>mdctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>mdctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pkey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ok</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_verify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cose_alg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>dgst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>fido_assert_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dgst</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dgst</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>||</operator> <name>pk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stmt</name> <operator>=</operator> <operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>stmt</name><operator>-&gt;</operator><name>authdata_cbor</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cdh=%p, rp_id=%s, authdata=%p, sig=%p"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata_cbor</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>stmt</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_check_flags</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>up</name></name></expr></argument>,
<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_check_flags"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_extensions</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>authdata_ext</name><operator>.</operator><name>mask</name></name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: check_extensions"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_check_rp_id</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>authdata</name><operator>.</operator><name>rp_id_hash</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_check_rp_id"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_PARAM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_get_signed_hash</name><argument_list>(<argument><expr><name>cose_alg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_get_signed_hash"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>cose_alg</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COSE_ES256</name></expr>:</case>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>fido_verify_sig_es256</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COSE_RS256</name></expr>:</case>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>fido_verify_sig_rs256</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COSE_EDDSA</name></expr>:</case>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>fido_verify_sig_eddsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dgst</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>sig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: unsupported cose_alg %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>,
<argument><expr><name>cose_alg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_UNSUPPORTED_OPTION</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_SIG</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>explicit_bzero</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_clientdata</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fido_blob_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fido_sha256</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_clientdata_hash</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fido_blob_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_hmac_salt</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>salt_len</name> <operator>!=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>salt_len</name> <operator>!=</operator> <literal type="number">64</literal><operator>)</operator> <operator>||</operator>
<call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>hmac_salt</name></name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_hmac_secret</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>secret_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>||</operator> <operator>(</operator><name>secret_len</name> <operator>!=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>secret_len</name> <operator>!=</operator> <literal type="number">64</literal><operator>)</operator> <operator>||</operator>
<call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hmac_secret</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>,
<argument><expr><name>secret_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_rp</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_allow_cred</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name> <modifier>*</modifier></type><name>list_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>list_ptr</name> <operator>=</operator>
<call><name>recallocarray</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name><operator>.</operator><name>len</name></name></expr></argument>,
<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fido_blob_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>list_ptr</name><index>[<expr><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>list_ptr</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>id</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_extensions</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ext</name> <operator>&amp;</operator> <name>FIDO_EXT_ASSERT_MASK</name><operator>)</operator> <operator>!=</operator> <name>ext</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>mask</name></name> <operator>|=</operator> <name>ext</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_options</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>uv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>up</name></name> <operator>=</operator> <ternary><condition><expr><name>up</name></expr> ?</condition><then> <expr><name>FIDO_OPT_TRUE</name></expr> </then><else>: <expr><name>FIDO_OPT_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>uv</name></name> <operator>=</operator> <ternary><condition><expr><name>uv</name></expr> ?</condition><then> <expr><name>FIDO_OPT_TRUE</name></expr> </then><else>: <expr><name>FIDO_OPT_FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_up</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>fido_opt_t</name></type> <name>up</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>up</name></name> <operator>=</operator> <name>up</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_uv</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>fido_opt_t</name></type> <name>uv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>uv</name></name> <operator>=</operator> <name>uv</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_clientdata_hash_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_assert_clientdata_hash_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>fido_assert_t</name> <modifier>*</modifier></type>
<name>fido_assert_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fido_assert_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fido_assert_reset_tx</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>cdh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>ext</name><operator>.</operator><name>hmac_salt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_free_blob_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>allow_list</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>up</name></name> <operator>=</operator> <name>FIDO_OPT_OMIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>uv</name></name> <operator>=</operator> <name>FIDO_OPT_OMIT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fido_assert_reset_extattr</name><parameter_list>(<parameter><decl><type><name>fido_assert_extattr_t</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>hmac_secret_enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fido_assert_reset_rx</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>user</name><operator>.</operator><name>icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>user</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>user</name><operator>.</operator><name>display_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>user</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hmac_secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>authdata_cbor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>largeblob_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_assert_reset_extattr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>authdata_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fido_assert_free</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>assert_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>assert_p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>assert</name> <operator>=</operator> <operator>*</operator><name>assert_p</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fido_assert_reset_tx</name><argument_list>(<argument><expr><name>assert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_assert_reset_rx</name><argument_list>(<argument><expr><name>assert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>assert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>assert_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_assert_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_rp_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>rp_id</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type>
<name>fido_assert_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>authdata</name><operator>.</operator><name>flags</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type>
<name>fido_assert_sigcount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>authdata</name><operator>.</operator><name>sigcount</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_authdata_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>authdata_cbor</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_assert_authdata_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>authdata_cbor</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_sig_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>sig</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_assert_sig_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>sig</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_id_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>id</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_assert_id_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>id</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_user_id_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>user</name><operator>.</operator><name>id</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_assert_user_id_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>user</name><operator>.</operator><name>id</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_user_icon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>user</name><operator>.</operator><name>icon</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_user_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>user</name><operator>.</operator><name>name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_user_display_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>user</name><operator>.</operator><name>display_name</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_hmac_secret_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>hmac_secret</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_assert_hmac_secret_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>hmac_secret</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_largeblob_key_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>largeblob_key</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_assert_largeblob_key_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>largeblob_key</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>fido_assert_blob_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>authdata_ext</name><operator>.</operator><name>blob</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>fido_assert_blob_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>authdata_ext</name><operator>.</operator><name>blob</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fido_assert_clean_authdata</name><parameter_list>(<parameter><decl><type><name>fido_assert_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_assert_reset_extattr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata_ext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>authdata</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_authdata</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_assert_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cbor_load_result</name></name></type> <name>cbor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>||</operator> <name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stmt</name> <operator>=</operator> <operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_assert_clean_authdata</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>cbor_load</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbor</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_load"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cbor_decode_assert_authdata</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata_ext</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_decode_assert_authdata"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_OK</name></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_assert_clean_authdata</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_authdata_raw</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cbor_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_assert_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>||</operator> <name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stmt</name> <operator>=</operator> <operator>&amp;</operator><name><name>assert</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fido_assert_clean_authdata</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <call><name>cbor_build_bytestring</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_build_bytestring"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cbor_decode_assert_authdata</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata_cbor</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stmt</name><operator>-&gt;</operator><name>authdata_ext</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: cbor_decode_assert_authdata"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>FIDO_OK</name></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbor_decref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>FIDO_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_assert_clean_authdata</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_assert_set_sig</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>||</operator> <name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INVALID_ARGUMENT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fido_blob_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>stmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>sig</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>fido_assert_set_count</name><parameter_list>(<parameter><decl><type><name>fido_assert_t</name> <modifier>*</modifier></type><name>assert</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_stmt</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIDO_FUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>UINT8_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: n &gt; UINT8_MAX"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>new_stmt</name> <operator>=</operator> <call><name>recallocarray</name><argument_list>(<argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fido_assert_stmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FIDO_ERR_INTERNAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <name>new_stmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_cnt</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>assert</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>FIDO_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
