<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/src/hid.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_key_len</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>tag</name> <operator>&amp;</operator> <literal type="number">0xfc</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>key</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: *key=0x%02x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><operator>*</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>key_len</name> <operator>=</operator> <name>tag</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key_len</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>key_len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_key_val</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>body</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>body</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>key_len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: key_len=%zu"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_hid_get_usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>report_ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>report_len</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>usage_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>report_ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>report_len</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>tag</name> <init>= <expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>key_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>key_val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_key_len</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>key_len</name> <operator>&gt;</operator> <name>len</name> <operator>||</operator>
<call><name>get_key_val</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="number">0x4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>usage_page</name> <operator>=</operator> <name>key_val</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>key_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>key_len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_hid_get_report_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>report_ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>report_len</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>report_in_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>report_out_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>report_ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>report_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>report_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>tag</name> <init>= <expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>key_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>key_val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_key_len</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>key_len</name> <operator>&gt;</operator> <name>len</name> <operator>||</operator>
<call><name>get_key_val</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="number">0x94</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>report_size</name> <operator>=</operator> <name>key_val</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>report_in_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>report_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="number">0x90</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>report_out_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>report_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>key_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>key_len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>fido_dev_info_t</name> <modifier>*</modifier></type>
<name>fido_dev_info_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>calloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fido_dev_info_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fido_dev_info_free</name><parameter_list>(<parameter><decl><type><name>fido_dev_info_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>devlist_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_dev_info_t</name> <modifier>*</modifier></type><name>devlist</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>devlist_p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>devlist</name> <operator>=</operator> <operator>*</operator><name>devlist_p</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>fido_dev_info_t</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <operator>&amp;</operator><name><name>devlist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>manufacturer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>product</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>devlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>devlist_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>fido_dev_info_t</name> <modifier>*</modifier></type>
<name>fido_dev_info_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_dev_info_t</name> <modifier>*</modifier></type><name>devlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>devlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_dev_info_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_dev_info_t</name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int16_t</name></type>
<name>fido_dev_info_vendor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_dev_info_t</name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>vendor_id</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int16_t</name></type>
<name>fido_dev_info_product</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_dev_info_t</name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>product_id</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_dev_info_manufacturer_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_dev_info_t</name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>manufacturer</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fido_dev_info_product_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_dev_info_t</name> <modifier>*</modifier></type><name>di</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>product</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
