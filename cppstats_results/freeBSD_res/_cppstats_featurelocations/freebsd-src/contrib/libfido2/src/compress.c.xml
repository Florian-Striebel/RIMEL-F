<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/src/compress.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUND</name></cpp:macro> <cpp:value>(1024UL * 1024UL)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_compress</name><parameter_list>(<parameter><decl><type><name>fido_blob_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>origsiz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decomp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_long</name></type> <name>ilen</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>ULONG_MAX</name> <operator>||</operator> <operator>(</operator><name>ilen</name> <operator>=</operator> <operator>(</operator><name>u_long</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>&gt;</operator> <name>BOUND</name> <operator>||</operator>
<name>origsiz</name> <operator>&gt;</operator> <name>ULONG_MAX</name> <operator>||</operator> <operator>(</operator><name>olen</name> <operator>=</operator> <ternary><condition><expr><name>decomp</name></expr> ?</condition><then> <expr><operator>(</operator><name>u_long</name><operator>)</operator><name>origsiz</name></expr> </then><else>:
<expr><call><name>compressBound</name><argument_list>(<argument><expr><name>ilen</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>&gt;</operator> <name>BOUND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FIDO_ERR_INVALID_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FIDO_ERR_INTERNAL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>olen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>decomp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>uncompress</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>compress</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>Z_OK</name> <operator>||</operator> <name>olen</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>||</operator> <name>olen</name> <operator>&gt;</operator> <name><name>out</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_blob_reset</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FIDO_ERR_COMPRESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>olen</name></expr>;</expr_stmt>

<return>return <expr><name>FIDO_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_compress</name><parameter_list>(<parameter><decl><type><name>fido_blob_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>do_compress</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_uncompress</name><parameter_list>(<parameter><decl><type><name>fido_blob_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_blob_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>origsiz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>do_compress</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>origsiz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
