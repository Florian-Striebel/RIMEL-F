<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/src/fido/bio.h">





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_FIDO_BIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FIDO_BIO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_FIDO_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido/err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido/param.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido/types.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fido.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fido/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fido/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_FIDO_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>fido_bio_template</name> <block>{
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fido_bio_template_array</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>fido_bio_template</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n_rx</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fido_bio_enroll</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>remaining_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>last_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fido_bio_info</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_samples</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>fido_bio_template</name></name></type> <name>fido_bio_template_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>fido_bio_template_array</name></name></type> <name>fido_bio_template_array_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>fido_bio_enroll</name></name></type> <name>fido_bio_enroll_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>fido_bio_info</name></name></type> <name>fido_bio_info_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_GOOD</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_TOO_HIGH</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_TOO_LOW</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_TOO_LEFT</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_TOO_RIGHT</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_TOO_FAST</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_TOO_SLOW</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_POOR_QUALITY</name></cpp:macro> <cpp:value>0x07</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_TOO_SKEWED</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_TOO_SHORT</name></cpp:macro> <cpp:value>0x09</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_MERGE_FAILURE</name></cpp:macro> <cpp:value>0x0a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_EXISTS</name></cpp:macro> <cpp:value>0x0b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_FP_DATABASE_FULL</name></cpp:macro> <cpp:value>0x0c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_NO_USER_ACTIVITY</name></cpp:macro> <cpp:value>0x0d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDO_BIO_ENROLL_NO_USER_PRESENCE_TRANSITION</name></cpp:macro> <cpp:value>0x0e</cpp:value></cpp:define>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fido_bio_template_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_bio_template_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>fido_bio_template_t</name> <modifier>*</modifier></type><name>fido_bio_template</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_bio_template_array_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fido_bio_template_id_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_bio_template_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>fido_bio_enroll_t</name> <modifier>*</modifier></type><name>fido_bio_enroll_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>fido_bio_info_t</name> <modifier>*</modifier></type><name>fido_bio_info_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>fido_bio_template_array_t</name> <modifier>*</modifier></type><name>fido_bio_template_array_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>fido_bio_template_t</name> <modifier>*</modifier></type><name>fido_bio_template_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fido_bio_dev_enroll_begin</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>fido_bio_template_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>fido_bio_enroll_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fido_bio_dev_enroll_cancel</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fido_bio_dev_enroll_continue</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_bio_template_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>fido_bio_enroll_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fido_bio_dev_enroll_remove</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_bio_template_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fido_bio_dev_get_info</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>fido_bio_info_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fido_bio_dev_get_template_array</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>fido_bio_template_array_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fido_bio_dev_set_template_name</name><parameter_list>(<parameter><decl><type><name>fido_dev_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fido_bio_template_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fido_bio_template_set_id</name><parameter_list>(<parameter><decl><type><name>fido_bio_template_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fido_bio_template_set_name</name><parameter_list>(<parameter><decl><type><name>fido_bio_template_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>fido_bio_template_array_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_bio_template_array_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>fido_bio_template_id_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_bio_template_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint8_t</name></type> <name>fido_bio_enroll_last_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_bio_enroll_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint8_t</name></type> <name>fido_bio_enroll_remaining_samples</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_bio_enroll_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint8_t</name></type> <name>fido_bio_info_max_samples</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_bio_info_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint8_t</name></type> <name>fido_bio_info_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>fido_bio_info_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fido_bio_enroll_free</name><parameter_list>(<parameter><decl><type><name>fido_bio_enroll_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fido_bio_info_free</name><parameter_list>(<parameter><decl><type><name>fido_bio_info_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fido_bio_template_array_free</name><parameter_list>(<parameter><decl><type><name>fido_bio_template_array_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fido_bio_template_free</name><parameter_list>(<parameter><decl><type><name>fido_bio_template_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
