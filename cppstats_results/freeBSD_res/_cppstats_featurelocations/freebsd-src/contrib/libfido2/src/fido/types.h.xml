<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/src/fido/types.h">





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_FIDO_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FIDO_TYPES_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>fido_dev</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>void</name> <modifier>*</modifier></type><name>fido_dev_io_open_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>fido_dev_io_close_t</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>fido_dev_io_read_t</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>fido_dev_io_write_t</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>fido_dev_rx_t</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fido_dev</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>fido_dev_tx_t</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fido_dev</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>fido_dev_io</name> <block>{
<decl_stmt><decl><type><name>fido_dev_io_open_t</name> <modifier>*</modifier></type><name>open</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_io_close_t</name> <modifier>*</modifier></type><name>close</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_io_read_t</name> <modifier>*</modifier></type><name>read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_io_write_t</name> <modifier>*</modifier></type><name>write</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_dev_io_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_dev_transport</name> <block>{
<decl_stmt><decl><type><name>fido_dev_rx_t</name> <modifier>*</modifier></type><name>rx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_tx_t</name> <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_dev_transport_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>FIDO_OPT_OMIT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FIDO_OPT_FALSE</name></decl>,
<decl><name>FIDO_OPT_TRUE</name></decl>,
}</block></enum></type> <name>fido_opt_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> <name>fido_log_handler_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>fido_sigset_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>sigset_t</name></type> <name>fido_sigset_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_FIDO_INTERNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>es256_pk</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>x</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>y</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>es256_pk_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>es256_sk</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>d</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>es256_sk_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>rs256_pk</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>n</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>e</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>rs256_pk_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>eddsa_pk</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>x</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>eddsa_pk_t</name>;</typedef>

<macro><name>PACKED_TYPE</name><argument_list>(<argument>fido_authdata_t</argument>,
<argument>struct fido_authdata {
unsigned char rp_id_hash[<literal type="number">32</literal>];
uint8_t flags;
uint32_t sigcount;

}</argument>)</argument_list></macro>

<macro><name>PACKED_TYPE</name><argument_list>(<argument>fido_attcred_raw_t</argument>,
<argument>struct fido_attcred_raw {
unsigned char aaguid[<literal type="number">16</literal>];
uint16_t id_len;
uint8_t body[];
}</argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <name>fido_attcred</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aaguid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>es256_pk_t</name></type> <name>es256</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rs256_pk_t</name></type> <name>rs256</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>eddsa_pk_t</name></type> <name>eddsa</name></decl>;</decl_stmt>
}</block> <decl><name>pubkey</name></decl>;</union>
}</block></struct></type> <name>fido_attcred_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_attstmt</name> <block>{
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>x5c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>sig</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_attstmt_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_rp</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_rp_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_user</name> <block>{
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>icon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>display_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_user_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_cred_ext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prot</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_cred_ext_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_cred</name> <block>{
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>cdh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_rp_t</name></type> <name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_user_t</name></type> <name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_array_t</name></type> <name>excl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_opt_t</name></type> <name>rk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_opt_t</name></type> <name>uv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_cred_ext_t</name></type> <name>ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_cred_ext_t</name></type> <name>authdata_ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>authdata_cbor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>authdata_raw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_authdata_t</name></type> <name>authdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_attcred_t</name></type> <name>attcred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_attstmt_t</name></type> <name>attstmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>largeblob_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>blob</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_cred_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_assert_extattr</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>hmac_secret_enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>blob</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_assert_extattr_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_fido_assert_stmt</name> <block>{
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_user_t</name></type> <name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>hmac_secret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_assert_extattr_t</name></type> <name>authdata_ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>authdata_cbor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_authdata_t</name></type> <name>authdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>sig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>largeblob_key</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_assert_stmt</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_assert_ext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>hmac_salt</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_assert_ext_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_assert</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rp_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_t</name></type> <name>cdh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_blob_array_t</name></type> <name>allow_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_opt_t</name></type> <name>up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_opt_t</name></type> <name>uv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_assert_ext_t</name></type> <name>ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_assert_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stmt_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>stmt_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_assert_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_opt_array</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_opt_array_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_str_array</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_str_array_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_byte_array</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_byte_array_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_algo</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cose</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_algo_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_algo_array</name> <block>{
<decl_stmt><decl><type><name>fido_algo_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_algo_array_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_cbor_info</name> <block>{
<decl_stmt><decl><type><name>fido_str_array_t</name></type> <name>versions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_str_array_t</name></type> <name>extensions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_str_array_t</name></type> <name>transports</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aaguid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_opt_array_t</name></type> <name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>maxmsgsiz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_byte_array_t</name></type> <name>protocols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_algo_array_t</name></type> <name>algorithms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>maxcredcntlst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>maxcredidlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fwversion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>maxcredbloblen</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_cbor_info_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fido_dev_info</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>vendor_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>product_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>manufacturer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>product</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_io_t</name></type> <name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_transport_t</name></type> <name>transport</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_dev_info_t</name>;</typedef>

<macro><name>PACKED_TYPE</name><argument_list>(<argument>fido_ctap_info_t</argument>,

<argument>struct fido_ctap_info {
uint64_t nonce;
uint32_t cid;
uint8_t protocol;
uint8_t major;
uint8_t minor;
uint8_t build;
uint8_t flags;
}</argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <name>fido_dev</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nonce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_ctap_info_t</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>io_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_io_t</name></type> <name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>io_own</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rx_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tx_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fido_dev_transport_t</name></type> <name>transport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>maxmsgsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>fido_dev_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name><name>struct</name> <name>fido_assert</name></name></type> <name>fido_assert_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>fido_cbor_info</name></name></type> <name>fido_cbor_info_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>fido_cred</name></name></type> <name>fido_cred_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>fido_dev</name></name></type> <name>fido_dev_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>fido_dev_info</name></name></type> <name>fido_dev_info_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>es256_pk</name></name></type> <name>es256_pk_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>es256_sk</name></name></type> <name>es256_sk_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>rs256_pk</name></name></type> <name>rs256_pk_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>eddsa_pk</name></name></type> <name>eddsa_pk_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
