<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libfido2/src/netlink.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/genetlink.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/netlink.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/nfc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fido.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"netlink.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIDO_FUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> (<modifier>*</modifier><name>fuzz_read</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> (<modifier>*</modifier><name>fuzz_write</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name></cpp:macro> <cpp:value>fuzz_read</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE</name></cpp:macro> <cpp:value>fuzz_write</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name></cpp:macro> <cpp:value>read</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE</name></cpp:macro> <cpp:value>write</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOL_NETLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_NETLINK</name></cpp:macro> <cpp:value>270</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NLA_HDRLEN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLA_HDRLEN</name></cpp:macro> <cpp:value>NLMSG_ALIGN(sizeof(struct nlattr))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>nlmsgbuf</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>siz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>nlmsghdr</name></name></type> <name>nlmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NLMSG_HDRLEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>payload</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>nlmsgbuf_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>genlmsgbuf</name> <block>{
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>genlmsghdr</name></name></type> <name>genl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>GENL_HDRLEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
}</block></struct></type> <name>genlmsgbuf_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>nlamsgbuf</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>siz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>nlattr</name></name></type> <name>nla</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NLA_HDRLEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>payload</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>nlamsgbuf_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>nl_family</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mcastgrp</name></decl>;</decl_stmt>
}</block></struct></type> <name>nl_family_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>nl_poll</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>eventcnt</name></decl>;</decl_stmt>
}</block></struct></type> <name>nl_poll_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>nl_target</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>nl_target_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>nlmsg_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>nlmsg_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type>
<name>nlmsg_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_type</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nlmsgbuf_t</name> <modifier>*</modifier></type>
<name>nlmsg_new</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>siz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
<operator>(</operator><name>siz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&gt;</operator> <name>UINT16_MAX</name> <operator>||</operator>
<operator>(</operator><name>m</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>siz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>siz</name></name> <operator>=</operator> <name>siz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>payload</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_flags</name></name> <operator>=</operator> <name>NLM_F_REQUEST</name> <operator>|</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_len</name></name> <operator>=</operator> <name>NLMSG_HDRLEN</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>m</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nlamsgbuf_t</name> <modifier>*</modifier></type>
<name>nla_from_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nlamsgbuf_t</name></type> <name>h</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlalen</name></decl>, <decl><type ref="prev"/><name>skip</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nlalen</name> <operator>=</operator> <name><name>h</name><operator>.</operator><name>u</name><operator>.</operator><name>nla</name><operator>.</operator><name>nla_len</name></name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name>nlalen</name> <operator>&gt;</operator> <operator>*</operator><name>len</name> <operator>||</operator>
<name>nlalen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>UINT16_MAX</name> <operator>||</operator>
<name>nlalen</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
<operator>(</operator><name>skip</name> <operator>=</operator> <call><name>NLMSG_ALIGN</name><argument_list>(<argument><expr><name>nlalen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <operator>*</operator><name>len</name> <operator>||</operator>
<operator>(</operator><name>a</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nlalen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>u</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>nlalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>siz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nlalen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>payload</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>nlalen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>-=</operator> <name>skip</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nlamsgbuf_t</name> <modifier>*</modifier></type>
<name>nla_getattr</name><parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>nla_from_buf</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type>
<name>nla_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nla</name><operator>.</operator><name>nla_type</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nlamsgbuf_t</name> <modifier>*</modifier></type>
<name>nlmsg_getattr</name><parameter_list>(<parameter><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>nla_from_buf</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nla_read</name><parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nla</name><operator>.</operator><name>nla_len</name></name> <operator>||</operator>
<call><name>fido_buf_read</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nla</name><operator>.</operator><name>nla_len</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nla</name><operator>.</operator><name>nla_len</name></name> <operator>-</operator> <name>cnt</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nlmsgbuf_t</name> <modifier>*</modifier></type>
<name>nlmsg_from_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nlmsgbuf_t</name></type> <name>h</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>msglen</name></decl>, <decl><type ref="prev"/><name>skip</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msglen</name> <operator>=</operator> <name><name>h</name><operator>.</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_len</name></name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name>msglen</name> <operator>&gt;</operator> <operator>*</operator><name>len</name> <operator>||</operator>
<name>msglen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>UINT16_MAX</name> <operator>||</operator>
<operator>(</operator><name>skip</name> <operator>=</operator> <call><name>NLMSG_ALIGN</name><argument_list>(<argument><expr><name>msglen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <operator>*</operator><name>len</name> <operator>||</operator>
<operator>(</operator><name>m</name> <operator>=</operator> <call><name>nlmsg_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>msglen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>u</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>-=</operator> <name>skip</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>m</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlmsg_read</name><parameter_list>(<parameter><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_len</name></name> <operator>||</operator>
<call><name>fido_buf_read</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_len</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_len</name></name> <operator>-</operator> <name>cnt</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlmsg_write</name><parameter_list>(<parameter><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <name>UINT32_MAX</name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_len</name></name> <operator>||</operator>
<call><name>fido_buf_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_len</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>nlmsg</name><operator>.</operator><name>nlmsg_len</name></name> <operator>+</operator> <name>cnt</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlmsg_set_genl</name><parameter_list>(<parameter><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>genlmsgbuf_t</name></type> <name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>u</name><operator>.</operator><name>genl</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>.</operator><name>u</name><operator>.</operator><name>genl</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NFC_GENL_VERSION</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>nlmsg_write</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlmsg_get_genl</name><parameter_list>(<parameter><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>genlmsgbuf_t</name></type> <name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nlmsg_read</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>g</name><operator>.</operator><name>u</name><operator>.</operator><name>genl</name><operator>.</operator><name>cmd</name></name> <operator>!=</operator> <name>cmd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlmsg_get_status</name><parameter_list>(<parameter><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nlmsg_read</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>status</name> <operator>==</operator> <name>INT_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><name>status</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlmsg_setattr</name><parameter_list>(<parameter><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>skip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nlamsgbuf_t</name></type> <name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>skip</name> <operator>=</operator> <call><name>NLMSG_ALIGN</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>UINT16_MAX</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
<name>skip</name> <operator>&lt;</operator> <name>len</name> <operator>||</operator> <operator>(</operator><name>padding</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>skip</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>u</name><operator>.</operator><name>nla</name><operator>.</operator><name>nla_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>u</name><operator>.</operator><name>nla</name><operator>.</operator><name>nla_len</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><call><name>nlmsg_write</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>.</operator><name>u</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_write</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_write</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><name>skip</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlmsg_set_u16</name><parameter_list>(<parameter><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>nlmsg_setattr</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlmsg_set_u32</name><parameter_list>(<parameter><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>nlmsg_setattr</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlmsg_set_str</name><parameter_list>(<parameter><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>nlmsg_setattr</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nla_get_u16</name><parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>nla_read</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nla_get_u32</name><parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>nla_read</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>nla_get_str</name><parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<operator>(</operator><name>s</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>nla_read</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlmsg_tx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>WRITE</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>nlmsg_ptr</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nlmsg_len</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: write"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>r</name> <operator>!=</operator> <call><name>nlmsg_len</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: %zd != %zu"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>nlmsg_len</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fido_log_xxd</name><argument_list>(<argument><expr><call><name>nlmsg_ptr</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nlmsg_len</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>nlmsg_rx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>SSIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: len"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fido_hid_unix_wait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: fido_hid_unix_wait"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>READ</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: read %zd"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fido_log_xxd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>r</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nlmsg_iter</name><parameter_list>(<parameter><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parser</name>)<parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>nlmsg_getattr</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>parser</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: parser"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nla_iter</name><parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parser</name>)<parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>nla_getattr</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>parser</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: parser"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nl_parse_reply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>blob</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>blob_len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>msg_type</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>genl_cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parser</name>)<parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>blob_len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>nlmsg_from_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blob_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nlmsg"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nlmsg_type</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NLMSG_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>nlmsg_get_status</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nlmsg_type</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>msg_type</name> <operator>||</operator>
<call><name>nlmsg_get_genl</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>genl_cmd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: skipping"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>nlmsg_iter</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nlmsg_iter"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_mcastgrp</name><parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nl_family_t</name> <modifier>*</modifier></type><name>family</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>nla_type</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTRL_ATTR_MCAST_GRP_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>nla_get_str</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NFC_GENL_MCAST_EVENT_NAME</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>CTRL_ATTR_MCAST_GRP_ID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>family</name><operator>-&gt;</operator><name>mcastgrp</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nla_get_u32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>family</name><operator>-&gt;</operator><name>mcastgrp</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: group"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ignoring nla 0x%x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>nla_type</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_mcastgrps</name><parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>nla_iter</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>parse_mcastgrp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_family</name><parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nl_family_t</name> <modifier>*</modifier></type><name>family</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>nla_type</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CTRL_ATTR_FAMILY_ID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>family</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nla_get_u16</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>family</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: id"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>CTRL_ATTR_MCAST_GROUPS</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>nla_iter</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>parse_mcastgrps</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ignoring nla 0x%x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>nla_type</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nl_get_nfc_family</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>mcastgrp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>reply</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nl_family_t</name></type> <name>family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>nlmsg_new</name><argument_list>(<argument><expr><name>GENL_ID_CTRL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>nlmsg_set_genl</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>CTRL_CMD_GETFAMILY</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_set_u16</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>CTRL_ATTR_FAMILY_ID</name></expr></argument>, <argument><expr><name>GENL_ID_CTRL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_set_str</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>CTRL_ATTR_FAMILY_NAME</name></expr></argument>, <argument><expr><name>NFC_GENL_NAME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_tx</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>family</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>nlmsg_rx</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nlmsg_rx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>nl_parse_reply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name>GENL_ID_CTRL</name></expr></argument>,
<argument><expr><name>CTRL_CMD_NEWFAMILY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>family</name></expr></argument>, <argument><expr><name>parse_family</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nl_parse_reply: %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>family</name><operator>.</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>family</name><operator>.</operator><name>mcastgrp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: missing attr"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name><name>family</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mcastgrp</name> <operator>=</operator> <name><name>family</name><operator>.</operator><name>mcastgrp</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_target</name><parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nl_target_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>found</name></name> <operator>||</operator> <call><name>nla_type</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NFC_ATTR_TARGET_INDEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ignoring nla 0x%x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>nla_type</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nla_get_u32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: target"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_nl_power_nfc</name><parameter_list>(<parameter><decl><type><name>fido_nl_t</name> <modifier>*</modifier></type><name>nl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>reply</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>nlmsg_new</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>nfc_type</name></name></expr></argument>, <argument><expr><name>NLM_F_ACK</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>nlmsg_set_genl</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>NFC_CMD_DEV_UP</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_set_u32</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>NFC_ATTR_DEVICE_INDEX</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_tx</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>nlmsg_rx</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nlmsg_rx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>nl_parse_reply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name><name>nl</name><operator>-&gt;</operator><name>nfc_type</name></name></expr></argument>,
<argument><expr><name>NFC_CMD_DEV_UP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ok</name> <operator>!=</operator> <name>EALREADY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nl_parse_reply: %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nl_nfc_poll</name><parameter_list>(<parameter><decl><type><name>fido_nl_t</name> <modifier>*</modifier></type><name>nl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>reply</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>nlmsg_new</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>nfc_type</name></name></expr></argument>, <argument><expr><name>NLM_F_ACK</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>nlmsg_set_genl</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>NFC_CMD_START_POLL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_set_u32</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>NFC_ATTR_DEVICE_INDEX</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_set_u32</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>NFC_ATTR_PROTOCOLS</name></expr></argument>, <argument><expr><name>NFC_PROTO_ISO14443_MASK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_tx</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>nlmsg_rx</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nlmsg_rx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>nl_parse_reply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name><name>nl</name><operator>-&gt;</operator><name>nfc_type</name></name></expr></argument>,
<argument><expr><name>NFC_CMD_START_POLL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nl_parse_reply: %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nl_dump_nfc_target</name><parameter_list>(<parameter><decl><type><name>fido_nl_t</name> <modifier>*</modifier></type><name>nl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nlmsgbuf_t</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nl_target_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>reply</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>nlmsg_new</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>nfc_type</name></name></expr></argument>, <argument><expr><name>NLM_F_DUMP</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>nlmsg_set_genl</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>NFC_CMD_GET_TARGET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_set_u32</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>NFC_ATTR_DEVICE_INDEX</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>nlmsg_tx</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>nlmsg_rx</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nlmsg_rx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>nl_parse_reply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name><name>nl</name><operator>-&gt;</operator><name>nfc_type</name></name></expr></argument>,
<argument><expr><name>NFC_CMD_GET_TARGET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>parse_target</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nl_parse_reply: %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>.</operator><name>found</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: target not found"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_nfc_event</name><parameter_list>(<parameter><decl><type><name>nlamsgbuf_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nl_poll_t</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nla_type</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NFC_ATTR_DEVICE_INDEX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ignoring nla 0x%x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>nla_type</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nla_get_u32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: dev"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>eventcnt</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: ignoring dev 0x%x"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fido_nl_get_nfc_target</name><parameter_list>(<parameter><decl><type><name>fido_nl_t</name> <modifier>*</modifier></type><name>nl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>reply</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nl_poll_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nl_nfc_poll</name><argument_list>(<argument><expr><name>nl</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nl_nfc_poll"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FIDO_FUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_NETLINK</name></expr></argument>, <argument><expr><name>NETLINK_ADD_MEMBERSHIP</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>nl</name><operator>-&gt;</operator><name>nfc_mcastgrp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>nfc_mcastgrp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: setsockopt add"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>nlmsg_rx</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FIDO_FUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_NETLINK</name></expr></argument>, <argument><expr><name>NETLINK_DROP_MEMBERSHIP</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>nl</name><operator>-&gt;</operator><name>nfc_mcastgrp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>nfc_mcastgrp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: setsockopt drop"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nlmsg_rx"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>dev</name></name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>nl_parse_reply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name><name>nl</name><operator>-&gt;</operator><name>nfc_type</name></name></expr></argument>,
<argument><expr><name>NFC_EVENT_TARGETS_FOUND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>parse_nfc_event</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nl_parse_reply: %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>eventcnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: dev 0x%x not observed"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nl_dump_nfc_target</name><argument_list>(<argument><expr><name>nl</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nl_dump_nfc_target"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fido_nl_free</name><parameter_list>(<parameter><decl><type><name>fido_nl_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>nlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_nl_t</name> <modifier>*</modifier></type><name>nl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nlp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>nl</name> <operator>=</operator> <operator>*</operator><name>nlp</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_log_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: close"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nlp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>fido_nl_t</name> <modifier>*</modifier></type>
<name>fido_nl_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fido_nl_t</name> <modifier>*</modifier></type><name>nl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nl</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_NETLINK</name></expr></argument>, <argument><expr><name>SOCK_RAW</name> <operator>|</operator> <name>SOCK_CLOEXEC</name></expr></argument>,
<argument><expr><name>NETLINK_GENERIC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: socket"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>nl</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>nl_family</name></name> <operator>=</operator> <name>AF_NETLINK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>nl</name><operator>-&gt;</operator><name>saddr</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>saddr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: bind"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nl_get_nfc_family</name><argument_list>(<argument><expr><name><name>nl</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nl</name><operator>-&gt;</operator><name>nfc_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nl</name><operator>-&gt;</operator><name>nfc_mcastgrp</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fido_log_debug</name><argument_list>(<argument><expr><literal type="string">"%s: nl_get_nfc_family"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fido_nl_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>nl</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIDO_FUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>set_netlink_io_functions</name><parameter_list>(<parameter><function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>read_f</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>write_f</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>fuzz_read</name> <operator>=</operator> <name>read_f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fuzz_write</name> <operator>=</operator> <name>write_f</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
