<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/libdwarf_loclist.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libdwarf_loclist.c 3061 2014-06-02 00:42:41Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_loclist_add_locdesc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>off</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier><modifier>*</modifier></type><name>ld</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>ldlen</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>total_len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>total_len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>total_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>off</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ld</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ld</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ld_lopc</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ld</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ld_hipc</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>total_len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>total_len</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>end</name> <operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>start</name> <operator>==</operator> <operator>~</operator><literal type="number">0U</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>start</name> <operator>==</operator> <operator>~</operator><literal type="number">0ULL</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>off</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>,
<argument><expr><name>DW_DLE_DEBUG_LOC_SECTION_SHORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_DEBUG_LOC_SECTION_SHORT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>total_len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>total_len</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ld</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_loc_fill_locdesc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>ld</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>+</operator> <operator>*</operator><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_length_size</name></name> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_version</name></name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>off</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ldlen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ldlen</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_loclist_find</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>lloff</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ret_llbuf</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>listlen</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>entry_len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier><modifier>*</modifier></type><name>llbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Signed</name></type> <name>ldlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ds</name> <operator>=</operator> <call><name>_dwarf_find_section</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">".debug_loc"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lloff</name> <operator>&gt;=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>off</name> <operator>=</operator> <name>lloff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_loclist_add_locdesc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ldlen</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ldlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>llbuf</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>ldlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Locdesc</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ldlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>llbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Locdesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>lloff</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_loclist_add_locdesc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><name>llbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>entry_len</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail_cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_llbuf</name> <operator>=</operator> <name>llbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>listlen</name> <operator>=</operator> <name>ldlen</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>fail_cleanup</name>:</label>

<if_stmt><if>if <condition>(<expr><name>llbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ldlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>llbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ld_s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>llbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ld_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>llbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>llbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
