<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_errmsg.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_errmsg.c 2975 2014-01-21 20:08:04Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>_libdwarf_errors</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_ERROR</name><parameter_list>(<parameter><type><name>N</name></type></parameter>,<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[DW_DLE_##N] = S</cpp:value></cpp:define>
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>, <argument><expr><literal type="string">"No Error"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"An error"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>NO_ENTRY</name></expr></argument>, <argument><expr><literal type="string">"No entry found"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="string">"Invalid argument"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>DEBUG_INFO_NULL</name></expr></argument>, <argument><expr><literal type="string">"Debug info NULL"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>MEMORY</name></expr></argument>, <argument><expr><literal type="string">"Insufficient memory"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>ELF</name></expr></argument>, <argument><expr><literal type="string">"ELF error"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>CU_LENGTH_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid compilation unit data"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>VERSION_STAMP_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported version"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>DEBUG_ABBREV_NULL</name></expr></argument>, <argument><expr><literal type="string">"Abbrev not found"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>DIE_NO_CU_CONTEXT</name></expr></argument>, <argument><expr><literal type="string">"No current compilation unit"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>LOC_EXPR_BAD</name></expr></argument>, <argument><expr><literal type="string">"Invalid location expression"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>EXPR_LENGTH_BAD</name></expr></argument>, <argument><expr><literal type="string">"Invalid DWARF expression length"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>DEBUG_LOC_SECTION_SHORT</name></expr></argument>, <argument><expr><literal type="string">"Loclist section too short"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>ATTR_FORM_BAD</name></expr></argument>, <argument><expr><literal type="string">"Invalid attribute form"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>DEBUG_LINE_LENGTH_BAD</name></expr></argument>, <argument><expr><literal type="string">"Line info section too short"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>LINE_FILE_NUM_BAD</name></expr></argument>, <argument><expr><literal type="string">"Invalid file number."</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>DIR_INDEX_BAD</name></expr></argument>, <argument><expr><literal type="string">"Invalid dir index."</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>DEBUG_FRAME_LENGTH_BAD</name></expr></argument>, <argument><expr><literal type="string">"Frame section too short"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>NO_CIE_FOR_FDE</name></expr></argument>, <argument><expr><literal type="string">"FDE without corresponding CIE"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>FRAME_AUGMENTATION_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"Unknown CIE augmentation"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>FRAME_INSTR_EXEC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame instruction exec error"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>FRAME_VERSION_BAD</name></expr></argument>, <argument><expr><literal type="string">"Unsupported frame section version"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>FRAME_TABLE_COL_BAD</name></expr></argument>, <argument><expr><literal type="string">"Invalid table column value"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>DF_REG_NUM_TOO_HIGH</name></expr></argument>, <argument><expr><literal type="string">"Register number too large"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>PC_NOT_IN_FDE_RANGE</name></expr></argument>, <argument><expr><literal type="string">"PC requested not in the FDE range"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>ARANGE_OFFSET_BAD</name></expr></argument>, <argument><expr><literal type="string">"Invalid address range offset"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>DEBUG_MACRO_INCONSISTENT</name></expr></argument>, <argument><expr><literal type="string">"Invalid macinfo data"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>ELF_SECT_ERR</name></expr></argument>, <argument><expr><literal type="string">"Application callback failed"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>DEFINE_ERROR</name><argument_list>(<argument>NUM</argument>, <argument><literal type="string">"Unknown DWARF error"</literal></argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFINE_ERROR</name></cpp:undef>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dwarf_errmsg_</name><parameter_list>(<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>error</name><operator>-&gt;</operator><name>err_error</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>error</name><operator>-&gt;</operator><name>err_error</name></name> <operator>&gt;=</operator> <name>DW_DLE_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>_libdwarf_errors</name><index>[<expr><name>DW_DLE_NUM</name></expr>]</index></name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>error</name><operator>-&gt;</operator><name>err_error</name></name> <operator>==</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>_libdwarf_errors</name><index>[<expr><name>DW_DLE_NONE</name></expr>]</index></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>_libdwarf_errors</name><index>[<expr><name><name>error</name><operator>-&gt;</operator><name>err_error</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>error</name><operator>-&gt;</operator><name>err_error</name></name> <operator>==</operator> <name>DW_DLE_ELF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>error</name><operator>-&gt;</operator><name>err_msg</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>error</name><operator>-&gt;</operator><name>err_msg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"ELF error : %s [%s(%d)]"</literal></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><name><name>error</name><operator>-&gt;</operator><name>err_elferror</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>error</name><operator>-&gt;</operator><name>err_func</name></name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>err_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>error</name><operator>-&gt;</operator><name>err_msg</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>error</name><operator>-&gt;</operator><name>err_msg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s [%s(%d)]"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>err_func</name></name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>err_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>error</name><operator>-&gt;</operator><name>err_msg</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
