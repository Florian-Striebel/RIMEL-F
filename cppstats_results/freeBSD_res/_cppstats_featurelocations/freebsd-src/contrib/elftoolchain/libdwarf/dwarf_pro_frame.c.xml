<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_pro_frame.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_pro_frame.c 2074 2011-10-27 03:34:33Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Dwarf_P_Fde</name></type>
<name>dwarf_new_fde</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Fde</name></type> <name>fde</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fde</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Fde</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name> <operator>=</operator> <name>dbg</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fde</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_add_frame_cie</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>augmenter</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Small</name></type> <name>caf</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Small</name></type> <name>daf</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Small</name></type> <name>ra</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ptr</name></type> <name>initinst</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>inst_len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Cie</name></type> <name>cie</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cie</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Cie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>,<argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_cielist</name></name></expr></argument>, <argument><expr><name>cie</name></expr></argument>, <argument><expr><name>cie_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_index</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_cielen</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>augmenter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>augmenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_caf</name></name> <operator>=</operator> <name>caf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_daf</name></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator> <name>daf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_ra</name></name> <operator>=</operator> <name>ra</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>initinst</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>inst_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_initinst</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>inst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cie</name><operator>-&gt;</operator><name>cie_initinst</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_initinst</name></name></expr></argument>, <argument><expr><name>initinst</name></expr></argument>, <argument><expr><name>inst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_instlen</name></name> <operator>=</operator> <name>inst_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>cie</name><operator>-&gt;</operator><name>cie_index</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_add_frame_fde</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>cie</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>virt_addr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>code_len</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>symbol_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>dwarf_add_frame_fde_b</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>fde</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>cie</name></expr></argument>, <argument><expr><name>virt_addr</name></expr></argument>, <argument><expr><name>code_len</name></expr></argument>,
<argument><expr><name>symbol_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_add_frame_fde_b</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>cie</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>virt_addr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>code_len</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>symbol_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>end_symbol_index</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Addr</name></type> <name>offset_from_end_sym</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Cie</name></type> <name>ciep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>






<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>die</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fde</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name> <operator>!=</operator> <name>dbg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ciep</name> <operator>=</operator> <call><name>STAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_cielist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name>cie</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ciep</name> <operator>=</operator> <call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>ciep</name></expr></argument>, <argument><expr><name>cie_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ciep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ciep</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_symbol_index</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_cie</name></name> <operator>=</operator> <name>ciep</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>=</operator> <name>virt_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name> <operator>=</operator> <name>code_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_symndx</name></name> <operator>=</operator> <name>symbol_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_esymndx</name></name> <operator>=</operator> <name>end_symbol_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_eoff</name></name> <operator>=</operator> <name>offset_from_end_sym</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_fdelist</name></name></expr></argument>, <argument><expr><name>fde</name></expr></argument>, <argument><expr><name>fde_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_fdelen</name></name><operator>++</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Fde</name></type>
<name>dwarf_fde_cfa_offset</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>fde</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fde</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>reg</name> <operator>&gt;</operator> <literal type="number">0x3f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_fde_add_inst</name><argument_list>(<argument><expr><name>fde</name></expr></argument>, <argument><expr><name>DW_CFA_offset</name> <operator>|</operator> <operator>(</operator><name>reg</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>fde</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Fde</name></type>
<name>dwarf_add_fde_inst</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Small</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>val1</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>val2</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fde</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_fde_add_inst</name><argument_list>(<argument><expr><name>fde</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>fde</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
