<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_pro_reloc.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_pro_reloc.c 2074 2011-10-27 03:34:33Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>dwarf_get_relocation_info_count</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>reloc_cnt</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>drd_buffer_version</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>reloc_cnt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>drd_buffer_version</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>reloc_cnt</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drscnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>drd_buffer_version</name> <operator>=</operator> <name>DWARF_DRD_BUFFER_VERSION</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_relocation_info</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>elf_section_index</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>elf_section_link</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>reloc_entry_count</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Relocation_Data</name> <modifier>*</modifier></type><name>reloc_buffer</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Rel_Entry</name></type> <name>dre</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>elf_section_index</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>elf_section_link</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>reloc_entry_count</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>reloc_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drscnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drspos</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>drs</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drspos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>drs</name><operator>-&gt;</operator><name>drs_ref</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_drecnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>elf_section_index</name> <operator>=</operator> <name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name><operator>-&gt;</operator><name>ds_ndx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>elf_section_link</name> <operator>=</operator> <name><name>drs</name><operator>-&gt;</operator><name>drs_ref</name><operator>-&gt;</operator><name>ds_ndx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>reloc_entry_count</name> <operator>=</operator> <name><name>drs</name><operator>-&gt;</operator><name>drs_drecnt</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>drs</name><operator>-&gt;</operator><name>drs_drd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_drd</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>*</operator><name>reloc_entry_count</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Dwarf_Relocation_Data_s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>drs</name><operator>-&gt;</operator><name>drs_drd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>dre</name> <operator>=</operator> <call><name>STAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drs</name><operator>-&gt;</operator><name>drs_dre</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <operator>*</operator><name>reloc_entry_count</name> <operator>&amp;&amp;</operator> <name>dre</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dre</name> <operator>=</operator> <call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>dre</name></expr></argument>, <argument><expr><name>dre_next</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_drd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>drd_type</name> <operator>=</operator> <name><name>dre</name><operator>-&gt;</operator><name>dre_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_drd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>drd_length</name> <operator>=</operator> <name><name>dre</name><operator>-&gt;</operator><name>dre_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_drd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>drd_offset</name> <operator>=</operator> <name><name>dre</name><operator>-&gt;</operator><name>dre_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_drd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>drd_symbol_index</name> <operator>=</operator> <name><name>dre</name><operator>-&gt;</operator><name>dre_symndx</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator> <name>i</name> <operator>==</operator> <operator>*</operator><name>reloc_entry_count</name> <operator>&amp;&amp;</operator> <name>dre</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>reloc_buffer</name> <operator>=</operator> <name><name>drs</name><operator>-&gt;</operator><name>drs_drd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drspos</name></name> <operator>=</operator> <call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drspos</name></name></expr></argument>, <argument><expr><name>drs_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
