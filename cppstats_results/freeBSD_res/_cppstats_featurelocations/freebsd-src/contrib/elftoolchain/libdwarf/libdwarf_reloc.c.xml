<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/libdwarf_reloc.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libdwarf_reloc.c 3741 2019-06-07 06:32:01Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Dwarf_Unsigned</name></type>
<name>_dwarf_get_reloc_type</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is64</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_isa</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_ISA_AARCH64</name></expr>:</case>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>R_AARCH64_ABS64</name></expr> </then><else>: <expr><name>R_AARCH64_ABS32</name></expr></else></ternary><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_ISA_X86</name></expr>:</case>
<return>return <expr><operator>(</operator><name>R_386_32</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_ISA_X86_64</name></expr>:</case>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>R_X86_64_64</name></expr> </then><else>: <expr><name>R_X86_64_32</name></expr></else></ternary><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_ISA_SPARC</name></expr>:</case>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>R_SPARC_UA64</name></expr> </then><else>: <expr><name>R_SPARC_UA32</name></expr></else></ternary><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_ISA_PPC</name></expr>:</case>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>R_PPC64_ADDR64</name></expr> </then><else>: <expr><name>R_PPC_ADDR32</name></expr></else></ternary><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_ISA_ARM</name></expr>:</case>
<return>return <expr><operator>(</operator><name>R_ARM_ABS32</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_ISA_MIPS</name></expr>:</case>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>R_MIPS_64</name></expr> </then><else>: <expr><name>R_MIPS_32</name></expr></else></ternary><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_ISA_RISCV</name></expr>:</case>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>R_RISCV_64</name></expr> </then><else>: <expr><name>R_RISCV_32</name></expr></else></ternary><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_ISA_IA64</name></expr>:</case>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>R_IA_64_DIR64LSB</name></expr> </then><else>: <expr><name>R_IA_64_DIR32LSB</name></expr></else></ternary><operator>)</operator></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_get_reloc_size</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>rel_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_machine</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EM_NONE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>EM_AARCH64</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_AARCH64_ABS32</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_AARCH64_ABS64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EM_ARM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_ARM_ABS32</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EM_386</name></expr>:</case>
<case>case <expr><name>EM_IAMCU</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_386_32</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EM_X86_64</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_X86_64_32</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_X86_64_64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EM_SPARC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_SPARC_UA32</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_SPARC_UA64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EM_PPC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_PPC_ADDR32</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EM_PPC64</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_PPC_ADDR32</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_PPC64_ADDR64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EM_MIPS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_MIPS_32</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_MIPS_64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EM_RISCV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_RISCV_32</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_RISCV_64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EM_IA_64</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_IA_64_SECREL32LSB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rel_type</name> <operator>==</operator> <name>R_IA_64_DIR64LSB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>


<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_reloc_section_init</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Rel_Section</name> <modifier>*</modifier></type><name>drsp</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_P_Section</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pseudo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>drsp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ref</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>drs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Rel_Section</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_ref</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SIZE_64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_addend</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_addend</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pseudo</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pseudo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_addend</name></name></expr> ?</condition><then> <expr><literal type="string">".rela"</literal></expr> </then><else>: <expr><literal type="string">".rel"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>ds_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_dwarf_section_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pseudo</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>drs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drs</name><operator>-&gt;</operator><name>drs_dre</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drslist</name></name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>drs_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drscnt</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>drsp</name> <operator>=</operator> <name>drs</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_reloc_section_free</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Rel_Section</name> <modifier>*</modifier></type><name>drsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl>, <decl><type ref="prev"/><name>tdrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Rel_Entry</name></type> <name>dre</name></decl>, <decl><type ref="prev"/><name>tdre</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>drsp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>drsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>drs</argument>, <argument>&amp;dbg-&gt;dbgp_drslist</argument>, <argument>drs_next</argument>, <argument>tdrs</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>drs</name> <operator>!=</operator> <operator>*</operator><name>drsp</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drslist</name></name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>_Dwarf_Rel_Section</name></expr></argument>,
<argument><expr><name>drs_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>dre</argument>, <argument>&amp;drs-&gt;drs_dre</argument>, <argument>dre_next</argument>, <argument>tdre</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drs</name><operator>-&gt;</operator><name>drs_dre</name></name></expr></argument>, <argument><expr><name>dre</name></expr></argument>, <argument><expr><name>_Dwarf_Rel_Entry</name></expr></argument>,
<argument><expr><name>dre_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_dwarf_section_free</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name><operator>-&gt;</operator><name>ds_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name><operator>-&gt;</operator><name>ds_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>drs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>drsp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drscnt</name></name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_reloc_entry_add</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>symndx</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>addend</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>secname</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Rel_Entry</name></type> <name>dre</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>reloff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>drs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset</name> <operator>&lt;=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reloff</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name><operator>)</operator> <operator>||</operator>
<name><name>drs</name><operator>-&gt;</operator><name>drs_addend</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>write_alloc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>,
<argument><expr><name>addend</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>write_alloc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dre</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Rel_Entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drs</name><operator>-&gt;</operator><name>drs_dre</name></name></expr></argument>, <argument><expr><name>dre</name></expr></argument>, <argument><expr><name>dre_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_offset</name></name> <operator>=</operator> <name>reloff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_symndx</name></name> <operator>=</operator> <name>symndx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_addend</name></name> <operator>=</operator> <name>addend</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_secname</name></name> <operator>=</operator> <name>secname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_drecnt</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_reloc_entry_add_pair</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>symndx</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>esymndx</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>symoff</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>esymoff</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Rel_Entry</name></type> <name>dre</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>reloff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>drs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset</name> <operator>&lt;=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reloff</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>write_alloc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>,
<argument><expr><name>esymoff</name> <operator>-</operator> <name>symoff</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dre</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Rel_Entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drs</name><operator>-&gt;</operator><name>drs_dre</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dre_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drs</name><operator>-&gt;</operator><name>drs_dre</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dre</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dre_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dre_type</name> <operator>=</operator> <name>dwarf_drt_first_of_length_pair</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dre_length</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dre_offset</name> <operator>=</operator> <name>reloff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dre_symndx</name> <operator>=</operator> <name>symndx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dre_addend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dre_secname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dre_type</name> <operator>=</operator> <name>dwarf_drt_second_of_length_pair</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dre_length</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dre_offset</name> <operator>=</operator> <name>reloff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dre_symndx</name> <operator>=</operator> <name>esymndx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dre_addend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dre_secname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_drecnt</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_reloc_section_finalize</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>unit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>drs</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>drs</name><operator>-&gt;</operator><name>drs_ref</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SIZE_64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>unit</name> <operator>=</operator> <ternary><condition><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_addend</name></name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Elf64_Rela</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Elf64_Rel</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>unit</name> <operator>=</operator> <ternary><condition><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_addend</name></name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Elf32_Rela</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Elf32_Rel</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>drs</name><operator>-&gt;</operator><name>drs_drecnt</name></name> <operator>*</operator> <name>unit</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_dwarf_reloc_section_free</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_pro_callback</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_name</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_addend</name></name></expr> ?</condition><then> <expr><name>SHT_RELA</name></expr> </then><else>: <expr><name>SHT_REL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_ref</name><operator>-&gt;</operator><name>ds_ndx</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_symndx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ELF_SECT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_ELF_SECT_ERR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_ndx</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_reloc_section_gen</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Rel_Entry</name></type> <name>dre</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>STAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drs</name><operator>-&gt;</operator><name>drs_dre</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ds</name> <operator>=</operator> <name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name></name></expr>;</expr_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>dre</argument>, <argument>&amp;drs-&gt;drs_dre</argument>, <argument>dre_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_length</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>dre</name><operator>-&gt;</operator><name>dre_length</name></name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>_dwarf_get_reloc_type</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_length</name></name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SIZE_64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>write_alloc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_offset</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>write_alloc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><call><name>ELF64_R_INFO</name><argument_list>(<argument><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_symndx</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>drs</name><operator>-&gt;</operator><name>drs_addend</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>write_alloc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_addend</name></name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>write_alloc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_offset</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>write_alloc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><call><name>ELF32_R_INFO</name><argument_list>(<argument><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_symndx</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>drs</name><operator>-&gt;</operator><name>drs_addend</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>write_alloc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_addend</name></name></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>==</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_reloc_gen</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Rel_Entry</name></type> <name>dre</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>drs</argument>, <argument>&amp;dbg-&gt;dbgp_drslist</argument>, <argument>drs_next</argument>)</argument_list></macro> <block>{<block_content>




<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>dre</argument>, <argument>&amp;drs-&gt;drs_dre</argument>, <argument>dre_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dre</name><operator>-&gt;</operator><name>dre_secname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ds</name> <operator>=</operator> <call><name>_dwarf_pro_find_section</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_secname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ds</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_symndx</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dre</name><operator>-&gt;</operator><name>dre_symndx</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_symndx</name></name></expr>;</expr_stmt>
</block_content>}</block>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_reloc_section_gen</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_reloc_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl>, <decl><type ref="prev"/><name>tdrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Rel_Entry</name></type> <name>dre</name></decl>, <decl><type ref="prev"/><name>tdre</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>drs</argument>, <argument>&amp;dbg-&gt;dbgp_drslist</argument>, <argument>drs_next</argument>, <argument>tdrs</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drslist</name></name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>_Dwarf_Rel_Section</name></expr></argument>,
<argument><expr><name>drs_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_drd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>dre</argument>, <argument>&amp;drs-&gt;drs_dre</argument>, <argument>dre_next</argument>, <argument>tdre</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drs</name><operator>-&gt;</operator><name>drs_dre</name></name></expr></argument>, <argument><expr><name>dre</name></expr></argument>, <argument><expr><name>_Dwarf_Rel_Entry</name></expr></argument>,
<argument><expr><name>dre_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name><operator>-&gt;</operator><name>ds_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name><operator>-&gt;</operator><name>ds_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>drs</name><operator>-&gt;</operator><name>drs_ds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>drs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drscnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_drspos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
