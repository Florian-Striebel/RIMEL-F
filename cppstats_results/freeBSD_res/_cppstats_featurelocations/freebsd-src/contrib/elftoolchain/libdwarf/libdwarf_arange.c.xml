<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/libdwarf_arange.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libdwarf_arange.c 3029 2014-04-21 23:26:02Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type>
<name>_dwarf_arange_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_ArangeSet</name></type> <name>as</name></decl>, <decl><type ref="prev"/><name>tas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Arange</name></type> <name>ar</name></decl>, <decl><type ref="prev"/><name>tar</name></decl>;</decl_stmt>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>as</argument>, <argument>&amp;dbg-&gt;dbg_aslist</argument>, <argument>as_next</argument>, <argument>tas</argument>)</argument_list></macro> <block>{<block_content>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>ar</argument>, <argument>&amp;as-&gt;as_arlist</argument>, <argument>ar_next</argument>, <argument>tar</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>as_arlist</name></name></expr></argument>, <argument><expr><name>ar</name></expr></argument>, <argument><expr><name>_Dwarf_Arange</name></expr></argument>,
<argument><expr><name>ar_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_aslist</name></name></expr></argument>, <argument><expr><name>as</name></expr></argument>, <argument><expr><name>_Dwarf_ArangeSet</name></expr></argument>, <argument><expr><name>as_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_arange_array</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_arange_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_arange_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_arange_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_arange_init</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_ArangeSet</name></type> <name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Arange</name></type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>dwarf_size</name></decl>, <decl><type ref="prev"/><name>length</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>, <decl><type ref="prev"/><name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ds</name> <operator>=</operator> <call><name>_dwarf_find_section</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">".debug_aranges"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_info_loaded</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_info_load</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>as</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_ArangeSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>as_arlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_aslist</name></name></expr></argument>, <argument><expr><name>as</name></expr></argument>, <argument><expr><name>as_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dwarf_size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dwarf_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_version</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>as</name><operator>-&gt;</operator><name>as_version</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_VERSION_STAMP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_VERSION_STAMP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_cu_offset</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>dwarf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>cu</argument>, <argument>&amp;dbg-&gt;dbg_cu</argument>, <argument>cu_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cu</name><operator>-&gt;</operator><name>cu_offset</name></name> <operator>==</operator> <name><name>as</name><operator>-&gt;</operator><name>as_cu_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>cu</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARANGE_OFFSET_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_ARANGE_OFFSET_BAD</name></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_cu</name></name> <operator>=</operator> <name>cu</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_addrsz</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_segsz</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>as</name><operator>-&gt;</operator><name>as_addrsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>as_addrsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>as_addrsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>range</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ar</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Arange</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_as</name></name> <operator>=</operator> <name>as</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_address</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_range</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>as_arlist</name></name></expr></argument>, <argument><expr><name>ar</name></expr></argument>, <argument><expr><name>ar_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_arange_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_arange_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_arange_array</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_arange_cnt</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Arange</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>as</argument>, <argument>&amp;dbg-&gt;dbg_aslist</argument>, <argument>as_next</argument>)</argument_list></macro> <block>{<block_content>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ar</argument>, <argument>&amp;as-&gt;as_arlist</argument>, <argument>ar_next</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_arange_array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ar</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator><name>i</name> <operator>==</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_arange_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>fail_cleanup</name>:</label>

<expr_stmt><expr><call><name>_dwarf_arange_cleanup</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_arange_gen</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_ArangeSet</name></type> <name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Arange</name></type> <name>ar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>as</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_as</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>as</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>as_arlist</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_version</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_cu_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_addrsz</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_segsz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_section_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><literal type="string">".debug_aranges"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>gen_fail0</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_section_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>as_length</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>as_version</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_entry_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>dwarf_drt_data_reloc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>as_cu_offset</name></name></expr></argument>, <argument><expr><literal type="string">".debug_info"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>as_addrsz</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>as_segsz</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>as</name><operator>-&gt;</operator><name>as_addrsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_PADDING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>offset</name> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ar</argument>, <argument>&amp;as-&gt;as_arlist</argument>, <argument>ar_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_entry_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><name>dwarf_drt_data_reloc</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>,
<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_symndx</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_address</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>ar_esymndx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_entry_add_pair</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_symndx</name></name></expr></argument>,
<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_esymndx</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_address</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_eoff</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_range</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>as_length</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>as_length</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_section_callback</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>SHT_PROGBITS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_section_finalize</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>gen_fail</name>:</label>
<expr_stmt><expr><call><name>_dwarf_reloc_section_free</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>gen_fail0</name>:</label>
<expr_stmt><expr><call><name>_dwarf_section_free</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_arange_pro_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_ArangeSet</name></type> <name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Arange</name></type> <name>ar</name></decl>, <decl><type ref="prev"/><name>tar</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_as</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>as</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_as</name></name></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>ar</argument>, <argument>&amp;as-&gt;as_arlist</argument>, <argument>ar_next</argument>, <argument>tar</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>as_arlist</name></name></expr></argument>, <argument><expr><name>ar</name></expr></argument>, <argument><expr><name>_Dwarf_Arange</name></expr></argument>, <argument><expr><name>ar_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_as</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
