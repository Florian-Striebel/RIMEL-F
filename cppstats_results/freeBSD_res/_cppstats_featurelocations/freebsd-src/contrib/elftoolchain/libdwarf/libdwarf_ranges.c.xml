<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/libdwarf_ranges.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libdwarf_ranges.c 2972 2013-12-23 06:46:04Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_ranges_parse</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ranges</name> <modifier>*</modifier></type><name>rg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dwr_addr1</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dwr_addr2</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>end</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dwr_type</name> <operator>=</operator> <name>DW_RANGES_END</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <operator>~</operator><literal type="number">0U</literal> <operator>&amp;&amp;</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>start</name> <operator>==</operator> <operator>~</operator><literal type="number">0ULL</literal> <operator>&amp;&amp;</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dwr_type</name> <operator>=</operator> <name>DW_RANGES_ADDRESS_SELECTION</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dwr_type</name> <operator>=</operator> <name>DW_RANGES_ENTRY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>end</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cnt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_ranges_find</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Rangelist</name> <modifier>*</modifier></type><name>ret_rl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Rangelist</name></type> <name>rl</name></decl>;</decl_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>rl</argument>, <argument>&amp;dbg-&gt;dbg_rllist</argument>, <argument>rl_next</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>rl</name><operator>-&gt;</operator><name>rl_offset</name></name> <operator>==</operator> <name>off</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret_rl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ret_rl</name> <operator>=</operator> <name>rl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_ranges_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Rangelist</name></type> <name>rl</name></decl>, <decl><type ref="prev"/><name>trl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_rllist</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>rl</argument>, <argument>&amp;dbg-&gt;dbg_rllist</argument>, <argument>rl_next</argument>, <argument>trl</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_rllist</name></name></expr></argument>, <argument><expr><name>rl</name></expr></argument>, <argument><expr><name>_Dwarf_Rangelist</name></expr></argument>, <argument><expr><name>rl_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rl</name><operator>-&gt;</operator><name>rl_rgarray</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rl</name><operator>-&gt;</operator><name>rl_rgarray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_ranges_add</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>off</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Rangelist</name> <modifier>*</modifier></type><name>ret_rl</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Rangelist</name></type> <name>rl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ds</name> <operator>=</operator> <call><name>_dwarf_find_section</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">".debug_ranges"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rl</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Rangelist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rl</name><operator>-&gt;</operator><name>rl_offset</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_ranges_parse</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rl</name><operator>-&gt;</operator><name>rl_rglen</name></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rl</name><operator>-&gt;</operator><name>rl_rgarray</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Ranges</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_ranges_parse</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>rl</name><operator>-&gt;</operator><name>rl_rgarray</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rl</name><operator>-&gt;</operator><name>rl_rgarray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rl</name><operator>-&gt;</operator><name>rl_rgarray</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_rllist</name></name></expr></argument>, <argument><expr><name>rl</name></expr></argument>, <argument><expr><name>rl_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_rl</name> <operator>=</operator> <name>rl</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
