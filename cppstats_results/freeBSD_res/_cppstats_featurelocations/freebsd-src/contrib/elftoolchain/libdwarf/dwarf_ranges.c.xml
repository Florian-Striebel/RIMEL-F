<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_ranges.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_ranges.c 3029 2014-04-21 23:26:02Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_get_ranges</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>off</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Ranges</name> <modifier>*</modifier><modifier>*</modifier></type><name>ranges</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>ret_cnt</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>ret_byte_cnt</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Rangelist</name></type> <name>rl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_dwarf_ranges_find</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DW_DLE_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_ranges_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ranges</name> <operator>=</operator> <name><name>rl</name><operator>-&gt;</operator><name>rl_rgarray</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_cnt</name> <operator>=</operator> <name><name>rl</name><operator>-&gt;</operator><name>rl_rglen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret_byte_cnt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ret_byte_cnt</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name> <operator>*</operator> <name><name>rl</name><operator>-&gt;</operator><name>rl_rglen</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_ranges</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ranges</name> <modifier>*</modifier><modifier>*</modifier></type><name>ranges</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>ret_cnt</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>ret_byte_cnt</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ranges</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_cnt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_info_loaded</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_dwarf_info_load</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>_dwarf_get_ranges</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><call><name>STAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_cu</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>ret_cnt</name></expr></argument>, <argument><expr><name>ret_byte_cnt</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_ranges_a</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Ranges</name> <modifier>*</modifier><modifier>*</modifier></type><name>ranges</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>ret_cnt</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>ret_byte_cnt</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ranges</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_cnt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>_dwarf_get_ranges</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_cu</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>ret_cnt</name></expr></argument>,
<argument><expr><name>ret_byte_cnt</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
