<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_form.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_form.c 2073 2011-10-27 03:30:47Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>dwarf_hasform</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>form</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Bool</name> <modifier>*</modifier></type><name>return_hasform</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_hasform</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>return_hasform</name> <operator>=</operator> <operator>(</operator><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>==</operator> <name>form</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_whatform</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name> <modifier>*</modifier></type><name>return_form</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_form</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>return_form</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_whatform_direct</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name> <modifier>*</modifier></type><name>return_form</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_form</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_indirect</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>return_form</name> <operator>=</operator> <name>DW_FORM_indirect</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>return_form</name> <operator>=</operator> <operator>(</operator><name>Dwarf_Half</name><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_whatattr</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name> <modifier>*</modifier></type><name>return_attr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>return_attr</name> <operator>=</operator> <operator>(</operator><name>Dwarf_Half</name><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_formref</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name> <modifier>*</modifier></type><name>return_offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_offset</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_ref1</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref2</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref4</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref8</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref_udata</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>return_offset</name> <operator>=</operator> <operator>(</operator><name>Dwarf_Off</name><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_global_formref</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name> <modifier>*</modifier></type><name>return_offset</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_offset</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_ref_addr</name></expr>:</case>
<case>case <expr><name>DW_FORM_sec_offset</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>return_offset</name> <operator>=</operator> <operator>(</operator><name>Dwarf_Off</name><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref1</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref2</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref4</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref8</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref_udata</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>return_offset</name> <operator>=</operator> <operator>(</operator><name>Dwarf_Off</name><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>+</operator>
<name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_cu</name><operator>-&gt;</operator><name>cu_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_formaddr</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>return_addr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>==</operator> <name>DW_FORM_addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>return_addr</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_formflag</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Bool</name> <modifier>*</modifier></type><name>return_bool</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_bool</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>==</operator> <name>DW_FORM_flag</name> <operator>||</operator>
<name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>==</operator> <name>DW_FORM_flag_present</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>return_bool</name> <operator>=</operator> <operator>(</operator><name>Dwarf_Bool</name><operator>)</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_formudata</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>return_uvalue</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_uvalue</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_data1</name></expr>:</case>
<case>case <expr><name>DW_FORM_data2</name></expr>:</case>
<case>case <expr><name>DW_FORM_data4</name></expr>:</case>
<case>case <expr><name>DW_FORM_data8</name></expr>:</case>
<case>case <expr><name>DW_FORM_udata</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>return_uvalue</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_formsdata</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>return_svalue</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_svalue</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_data1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>return_svalue</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>return_svalue</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>return_svalue</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data8</name></expr>:</case>
<case>case <expr><name>DW_FORM_sdata</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>return_svalue</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_formblock</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Block</name> <modifier>*</modifier><modifier>*</modifier></type><name>return_block</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_block</name></expr>:</case>
<case>case <expr><name>DW_FORM_block1</name></expr>:</case>
<case>case <expr><name>DW_FORM_block2</name></expr>:</case>
<case>case <expr><name>DW_FORM_block4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>return_block</name> <operator>=</operator> <operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>at_block</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_formsig8</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Sig8</name> <modifier>*</modifier></type><name>return_sig8</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_sig8</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>!=</operator> <name>DW_FORM_ref_sig8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>return_sig8</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_formexprloc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>return_exprlen</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Ptr</name> <modifier>*</modifier></type><name>return_expr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_exprlen</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>!=</operator> <name>DW_FORM_exprloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>return_exprlen</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>return_expr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_formstring</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>return_string</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>return_string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_string</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>return_string</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_strp</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>return_string</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_OK</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLV_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>Dwarf_Form_Class</name></name></type>
<name>dwarf_get_form_class</name><parameter_list>(<parameter><decl><type><name>Dwarf_Half</name></type> <name>dwversion</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Half</name></type> <name>offset_size</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>form</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name>form</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_addr</name></expr>:</case>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_ADDRESS</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_FORM_block</name></expr>:</case>
<case>case <expr><name>DW_FORM_block1</name></expr>:</case>
<case>case <expr><name>DW_FORM_block2</name></expr>:</case>
<case>case <expr><name>DW_FORM_block4</name></expr>:</case>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_BLOCK</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_FORM_string</name></expr>:</case>
<case>case <expr><name>DW_FORM_strp</name></expr>:</case>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_STRING</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_FORM_flag</name></expr>:</case>
<case>case <expr><name>DW_FORM_flag_present</name></expr>:</case>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_FLAG</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_FORM_ref_addr</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref_sig8</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref_udata</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref1</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref2</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref4</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref8</name></expr>:</case>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_REFERENCE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_FORM_exprloc</name></expr>:</case>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_EXPRLOC</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_FORM_data1</name></expr>:</case>
<case>case <expr><name>DW_FORM_data2</name></expr>:</case>
<case>case <expr><name>DW_FORM_sdata</name></expr>:</case>
<case>case <expr><name>DW_FORM_udata</name></expr>:</case>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_CONSTANT</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_FORM_data4</name></expr>:</case>
<case>case <expr><name>DW_FORM_data8</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>dwversion</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_CONSTANT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>form</name> <operator>==</operator> <name>DW_FORM_data4</name> <operator>&amp;&amp;</operator> <name>offset_size</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_CONSTANT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>form</name> <operator>==</operator> <name>DW_FORM_data8</name> <operator>&amp;&amp;</operator> <name>offset_size</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_CONSTANT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><name>DW_FORM_sec_offset</name></expr>:</case>








<switch>switch <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_AT_location</name></expr>:</case>
<case>case <expr><name>DW_AT_string_length</name></expr>:</case>
<case>case <expr><name>DW_AT_return_addr</name></expr>:</case>
<case>case <expr><name>DW_AT_data_member_location</name></expr>:</case>
<case>case <expr><name>DW_AT_frame_base</name></expr>:</case>
<case>case <expr><name>DW_AT_segment</name></expr>:</case>
<case>case <expr><name>DW_AT_static_link</name></expr>:</case>
<case>case <expr><name>DW_AT_use_location</name></expr>:</case>
<case>case <expr><name>DW_AT_vtable_elem_location</name></expr>:</case>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_LOCLISTPTR</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_AT_stmt_list</name></expr>:</case>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_LINEPTR</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_AT_start_scope</name></expr>:</case>
<case>case <expr><name>DW_AT_ranges</name></expr>:</case>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_RANGELISTPTR</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_AT_macro_info</name></expr>:</case>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_MACPTR</name><operator>)</operator></expr>;</return>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>form</name> <operator>==</operator> <name>DW_FORM_data4</name> <operator>||</operator> <name>form</name> <operator>==</operator> <name>DW_FORM_data8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_CONSTANT</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_UNKNOWN</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></switch>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_FORM_CLASS_UNKNOWN</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
