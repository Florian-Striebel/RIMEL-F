<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_die.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_die.c 3039 2014-05-18 15:10:56Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>dwarf_child</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name> <modifier>*</modifier></type><name>ret_die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_ab</name><operator>-&gt;</operator><name>ab_children</name></name> <operator>==</operator> <name>DW_CHILDREN_no</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cu</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_cu</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ds</name> <operator>=</operator> <ternary><condition><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_is_info</name></name></expr> ?</condition><then> <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_info_sec</name></name></expr> </then><else>: <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_types_sec</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_die_parse</name><argument_list>(<argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_dwarf_size</name></name></expr></argument>,
<argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_next_off</name></name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_next_offset</name></name></expr></argument>, <argument><expr><name>ret_die</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DW_DLE_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_siblingof_b</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name> <modifier>*</modifier></type><name>ret_die</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Bool</name></type> <name>is_info</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>search_sibling</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <ternary><condition><expr><name>is_info</name></expr> ?</condition><then> <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_info_sec</name></name></expr> </then><else>: <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_types_sec</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>cu</name> <operator>=</operator> <ternary><condition><expr><name>is_info</name></expr> ?</condition><then> <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_cu_current</name></name></expr> </then><else>: <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_tu_current</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cu</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_DIE_NO_CU_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>dwarf_offdie_b</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_1st_offset</name></name></expr></argument>, <argument><expr><name>is_info</name></expr></argument>,
<argument><expr><name>ret_die</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>is_info</name> <operator>!=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_cu</name><operator>-&gt;</operator><name>cu_is_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>search_sibling</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_ab</name><operator>-&gt;</operator><name>ab_children</name></name> <operator>==</operator> <name>DW_CHILDREN_no</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_next_off</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>at</name> <operator>=</operator> <call><name>_dwarf_attr_find</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_sibling</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>!=</operator> <name>DW_FORM_ref_addr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>+</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_offset</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_next_off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_sibling</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_die_parse</name><argument_list>(<argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_dwarf_size</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_next_offset</name></name></expr></argument>, <argument><expr><name>ret_die</name></expr></argument>, <argument><expr><name>search_sibling</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DW_DLE_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>dwarf_siblingof</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name> <modifier>*</modifier></type><name>ret_die</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>dwarf_siblingof_b</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>ret_die</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_search_die_within_cu</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Off</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name> <modifier>*</modifier></type><name>ret_die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ret_die</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>_dwarf_die_parse</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_dwarf_size</name></name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_next_offset</name></name></expr></argument>, <argument><expr><name>ret_die</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_offdie_b</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Bool</name></type> <name>is_info</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Die</name> <modifier>*</modifier></type><name>ret_die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <ternary><condition><expr><name>is_info</name></expr> ?</condition><then> <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_info_sec</name></name></expr> </then><else>: <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_types_sec</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>cu</name> <operator>=</operator> <ternary><condition><expr><name>is_info</name></expr> ?</condition><then> <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_cu_current</name></name></expr> </then><else>: <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_tu_current</name></name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_offset</name></name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&lt;</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_next_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_search_die_within_cu</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>ret_die</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DW_DLE_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_info_load</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>is_info</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_info</name></expr>)</condition> <block>{<block_content>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>cu</argument>, <argument>&amp;dbg-&gt;dbg_cu</argument>, <argument>cu_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_offset</name></name> <operator>||</operator>
<name>offset</name></expr></argument> &gt;</argument_list></name> <name><name>cu</name><operator>-&gt;</operator><name>cu_next_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_search_die_within_cu</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>ret_die</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DW_DLE_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>cu</argument>, <argument>&amp;dbg-&gt;dbg_tu</argument>, <argument>cu_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_offset</name></name> <operator>||</operator>
<name>offset</name></expr></argument> &gt;</argument_list></name> <name><name>cu</name><operator>-&gt;</operator><name>cu_next_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_search_die_within_cu</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>ret_die</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DW_DLE_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_offdie</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name> <modifier>*</modifier></type><name>ret_die</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>dwarf_offdie_b</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ret_die</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_tag</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>tag</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_ab</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <operator>(</operator><name>Dwarf_Half</name><operator>)</operator> <name><name>die</name><operator>-&gt;</operator><name>die_ab</name><operator>-&gt;</operator><name>ab_tag</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_dieoffset</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name> <modifier>*</modifier></type><name>ret_offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_offset</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_offset</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_offset</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_die_CU_offset</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name> <modifier>*</modifier></type><name>ret_offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_offset</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cu</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_cu</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_offset</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_offset</name></name> <operator>-</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_offset</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_die_CU_offset_range</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name> <modifier>*</modifier></type><name>cu_offset</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Off</name> <modifier>*</modifier></type><name>cu_length</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cu_offset</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cu_length</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cu</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_cu</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cu_offset</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cu_length</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_length</name></name> <operator>+</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_length_size</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_diename</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_name</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_name</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_name</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_die_abbrev_code</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>die</name><operator>-&gt;</operator><name>die_abnum</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_cu_die_offset_given_cu_header_offset_b</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Off</name></type> <name>in_cu_header_offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Bool</name></type> <name>is_info</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Off</name> <modifier>*</modifier></type><name>out_cu_die_offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>out_cu_die_offset</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_info</name></expr>)</condition> <block>{<block_content>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>cu</argument>, <argument>&amp;dbg-&gt;dbg_cu</argument>, <argument>cu_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cu</name><operator>-&gt;</operator><name>cu_offset</name></name> <operator>==</operator> <name>in_cu_header_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_cu_die_offset</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_1st_offset</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>cu</argument>, <argument>&amp;dbg-&gt;dbg_tu</argument>, <argument>cu_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cu</name><operator>-&gt;</operator><name>cu_offset</name></name> <operator>==</operator> <name>in_cu_header_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_cu_die_offset</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_1st_offset</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cu</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_cu_die_offset_given_cu_header_offset</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Off</name></type> <name>in_cu_header_offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name> <modifier>*</modifier></type><name>out_cu_die_offset</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>dwarf_get_cu_die_offset_given_cu_header_offset_b</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>,
<argument><expr><name>in_cu_header_offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out_cu_die_offset</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_address_size</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name> <modifier>*</modifier></type><name>addr_size</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>addr_size</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>addr_size</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Bool</name></type>
<name>dwarf_get_die_infotypes_flag</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>die</name><operator>-&gt;</operator><name>die_cu</name><operator>-&gt;</operator><name>cu_is_info</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
