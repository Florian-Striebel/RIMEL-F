<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_dealloc.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_dealloc.c 2073 2011-10-27 03:30:47Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type>
<name>dwarf_dealloc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ptr</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>alloc_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Abbrev</name></type> <name>ab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_AttrDef</name></type> <name>ad</name></decl>, <decl><type ref="prev"/><name>tad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>, <decl><type ref="prev"/><name>tat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl>;</decl_stmt>









<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dbg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alloc_type</name> <operator>==</operator> <name>DW_DLA_LIST</name> <operator>||</operator> <name>alloc_type</name> <operator>==</operator> <name>DW_DLA_FRAME_BLOCK</name> <operator>||</operator>
<name>alloc_type</name> <operator>==</operator> <name>DW_DLA_LOC_BLOCK</name> <operator>||</operator> <name>alloc_type</name> <operator>==</operator> <name>DW_DLA_LOCDESC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>alloc_type</name> <operator>==</operator> <name>DW_DLA_ABBREV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ab</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>ad</argument>, <argument>&amp;ab-&gt;ab_attrdef</argument>, <argument>ad_next</argument>, <argument>tad</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ab</name><operator>-&gt;</operator><name>ab_attrdef</name></name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name>_Dwarf_AttrDef</name></expr></argument>,
<argument><expr><name>ad_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>alloc_type</name> <operator>==</operator> <name>DW_DLA_DIE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>die</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>at</argument>, <argument>&amp;die-&gt;die_attr</argument>, <argument>at_next</argument>, <argument>tat</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>,
<argument><expr><name>_Dwarf_Attribute</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_ld</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_ld</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_attrarray</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_attrarray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dwarf_srclines_dealloc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Line</name> <modifier>*</modifier></type><name>linebuf</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dbg</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>linebuf</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dwarf_ranges_dealloc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ranges</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name></type> <name>range_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dbg</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ranges</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>range_count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dwarf_fde_cie_list_dealloc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Cie</name> <modifier>*</modifier></type><name>cie_list</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name></type> <name>cie_count</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Fde</name> <modifier>*</modifier></type><name>fde_list</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name></type> <name>fde_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dbg</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cie_list</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cie_count</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>fde_list</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>fde_count</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
