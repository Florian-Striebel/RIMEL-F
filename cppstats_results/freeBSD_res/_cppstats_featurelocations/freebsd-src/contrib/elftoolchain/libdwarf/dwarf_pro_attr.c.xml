<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_pro_attr.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_pro_attr.c 2074 2011-10-27 03:34:33Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_location_expr</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_P_Expr</name></type> <name>loc_expr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>loc_expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_expr</name></name> <operator>=</operator> <name>loc_expr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_expr_into_block</name><argument_list>(<argument><expr><name>loc_expr</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <name><name>loc_expr</name><operator>-&gt;</operator><name>pe_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name> <operator>=</operator> <name><name>loc_expr</name><operator>-&gt;</operator><name>pe_block</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>loc_expr</name><operator>-&gt;</operator><name>pe_length</name></name> <operator>&lt;=</operator> <name>UCHAR_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_block1</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>loc_expr</name><operator>-&gt;</operator><name>pe_length</name></name> <operator>&lt;=</operator> <name>USHRT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_block2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>loc_expr</name><operator>-&gt;</operator><name>pe_length</name></name> <operator>&lt;=</operator> <name>UINT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_block4</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_block</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_name</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_add_string_attr</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>DW_AT_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_comp_dir</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_add_string_attr</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>DW_AT_comp_dir</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_producer</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>producer</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_add_string_attr</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>DW_AT_producer</name></expr></argument>, <argument><expr><name>producer</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_const_value_signedint</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>=</operator> <name>DW_AT_const_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_sdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s64</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_const_value_unsignedint</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>=</operator> <name>DW_AT_const_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_udata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_const_value_string</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_add_string_attr</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>DW_AT_const_value</name></expr></argument>, <argument><expr><name>string</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_targ_address</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>pc_value</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name></type> <name>sym_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>dwarf_add_AT_targ_address_b</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>pc_value</name></expr></argument>, <argument><expr><name>sym_index</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_targ_address_b</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>pc_value</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>sym_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_relsym</name></name> <operator>=</operator> <name>sym_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <name>pc_value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_dataref</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>pc_value</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>sym_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_add_AT_dataref</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>pc_value</name></expr></argument>, <argument><expr><name>sym_index</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_ref_address</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>pc_value</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>sym_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_ref_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_relsym</name></name> <operator>=</operator> <name>sym_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <name>pc_value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_unsigned_const</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <name>UCHAR_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_data1</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <name>USHRT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_data2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <name>UINT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_data4</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_data8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_signed_const</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>SCHAR_MIN</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>SCHAR_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_data1</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>SHRT_MIN</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>SHRT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_data2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>INT_MIN</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_data4</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_data8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_reference</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>ref_die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_offset_size</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_ref4</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_ref8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_refdie</name></name> <operator>=</operator> <name>ref_die</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_flag</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Small</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <ternary><condition><expr><name>flag</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Attribute</name></type>
<name>dwarf_add_AT_string</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>die</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>_dwarf_add_string_attr</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
