<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/libdwarf_die.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libdwarf_die.c 3039 2014-05-18 15:10:56Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>_dwarf_die_alloc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name> <modifier>*</modifier></type><name>ret_die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret_die</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>die</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Die</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_die</name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_die_add</name><parameter_list>(<parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>abnum</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Abbrev</name></type> <name>ab</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Die</name> <modifier>*</modifier></type><name>diep</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ab</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_dbg</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_die_alloc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>die</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_abnum</name></name> <operator>=</operator> <name>abnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_ab</name></name> <operator>=</operator> <name>ab</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_cu</name></name> <operator>=</operator> <name>cu</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_dbg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>diep</name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>Dwarf_Die</name></type>
<name>_dwarf_die_find</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>die1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Error</name></type> <name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cu</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_cu</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ds</name> <operator>=</operator> <ternary><condition><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_is_info</name></name></expr> ?</condition><then> <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_info_sec</name></name></expr> </then><else>: <expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_types_sec</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_die_parse</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_dwarf_size</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_next_offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>die1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>die1</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_die_parse</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dwarf_size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>next_offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name> <modifier>*</modifier></type><name>ret_die</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>search_sibling</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Abbrev</name></type> <name>ab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_AttrDef</name></type> <name>ad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>abnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>die_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>level</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>die</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>next_offset</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>die_offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>abnum</name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>abnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>search_sibling</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_abbrev_find</name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>abnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_die_add</name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>die_offset</name></expr></argument>, <argument><expr><name>abnum</name></expr></argument>, <argument><expr><name>ab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>die</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ad</argument>, <argument>&amp;ab-&gt;ab_attrdef</argument>, <argument>ad_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_attr_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>,
<argument><expr><name>dwarf_size</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name><name>ad</name><operator>-&gt;</operator><name>ad_form</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_next_off</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>search_sibling</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dwarf_dealloc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_DLA_DIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ab</name><operator>-&gt;</operator><name>ab_children</name></name> <operator>==</operator> <name>DW_CHILDREN_yes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_die</name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_die_link</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>child</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>left_sibling</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>right_sibling</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Die</name></type> <name>last_child</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_parent</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_parent</name></name> <operator>!=</operator> <name>parent</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_parent</name><operator>-&gt;</operator><name>die_child</name></name> <operator>==</operator> <name>die</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_parent</name><operator>-&gt;</operator><name>die_child</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>last_child</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>die_child</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last_child</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>last_child</name><operator>-&gt;</operator><name>die_right</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_child</name> <operator>=</operator> <name><name>last_child</name><operator>-&gt;</operator><name>die_right</name></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>last_child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>last_child</name><operator>-&gt;</operator><name>die_right</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last_child</name><operator>-&gt;</operator><name>die_right</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_left</name></name> <operator>=</operator> <name>last_child</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>die_child</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_child</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_child</name></name> <operator>!=</operator> <name>child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_child</name><operator>-&gt;</operator><name>die_parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_child</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_child</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>die_parent</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left_sibling</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_left</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_left</name></name> <operator>!=</operator> <name>left_sibling</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_left</name><operator>-&gt;</operator><name>die_right</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_left</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_left</name></name> <operator>=</operator> <name>left_sibling</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left_sibling</name><operator>-&gt;</operator><name>die_right</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>right_sibling</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_right</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_right</name></name> <operator>!=</operator> <name>right_sibling</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_right</name><operator>-&gt;</operator><name>die_left</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_right</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_right</name></name> <operator>=</operator> <name>right_sibling</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>right_sibling</name><operator>-&gt;</operator><name>die_left</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_die_count_links</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>child</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>left_sibling</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>right_sibling</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>left_sibling</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>right_sibling</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_die_gen_recursive</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass2</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Abbrev</name></type> <name>ab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_AttrDef</name></type> <name>ad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ds</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pass2</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>attr_gen</name>;</goto></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_child</name></name> <operator>&amp;&amp;</operator> <name><name>die</name><operator>-&gt;</operator><name>die_right</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_dwarf_attr_find</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_sibling</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>dwarf_add_AT_reference</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_sibling</name></expr></argument>,
<argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_right</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_ab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ab</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_hash</name></name></expr>;</init> <condition><expr><name>ab</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ab</name> <operator>=</operator> <name><name>ab</name><operator>-&gt;</operator><name>ab_hh</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_tag</name></name> <operator>!=</operator> <name><name>ab</name><operator>-&gt;</operator><name>ab_tag</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ab</name><operator>-&gt;</operator><name>ab_children</name></name> <operator>==</operator> <name>DW_CHILDREN_no</name> <operator>&amp;&amp;</operator> <name><name>die</name><operator>-&gt;</operator><name>die_child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ab</name><operator>-&gt;</operator><name>ab_children</name></name> <operator>==</operator> <name>DW_CHILDREN_yes</name> <operator>&amp;&amp;</operator>
<name><name>die</name><operator>-&gt;</operator><name>die_child</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>STAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>STAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ab</name><operator>-&gt;</operator><name>ab_attrdef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>at</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>!=</operator> <name><name>ad</name><operator>-&gt;</operator><name>ad_attrib</name></name> <operator>||</operator>
<name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>!=</operator> <name><name>ad</name><operator>-&gt;</operator><name>ad_form</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>ad_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>at</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>at</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_ab</name></name> <operator>=</operator> <name>ab</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_ab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_abbrev_add</name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><operator>++</operator><name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_cnt</name></name></expr></argument>, <argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_tag</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>die</name><operator>-&gt;</operator><name>die_child</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>DW_CHILDREN_yes</name></expr> </then><else>: <expr><name>DW_CHILDREN_no</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>at</argument>, <argument>&amp;die-&gt;die_attr</argument>, <argument>at_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_attrdef_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ab</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name></expr></argument>,
<argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_ab</name></name> <operator>=</operator> <name>ab</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_offset</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_write_uleb128_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_ab</name><operator>-&gt;</operator><name>ab_entry</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<label><name>attr_gen</name>:</label>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_attr_gen</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>pass2</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_die_gen_recursive</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_child</name></name></expr></argument>,
<argument><expr><name>pass2</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_right</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_die_gen_recursive</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_right</name></name></expr></argument>,
<argument><expr><name>pass2</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>die</name><operator>-&gt;</operator><name>die_right</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_write_uleb128_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_die_gen</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Abbrev</name></type> <name>ab</name></decl>, <decl><type ref="prev"/><name>tab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_AttrDef</name></type> <name>ad</name></decl>, <decl><type ref="prev"/><name>tad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cu</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_root_die</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>die</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_root_die</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name><operator>-&gt;</operator><name>li_lnlist</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_add_AT_dataref</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_stmt_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">".debug_line"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_die_gen_recursive</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pass2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_die_gen_recursive</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>gen_fail</name>:</label>

<macro><name>HASH_ITER</name><argument_list>(<argument>ab_hh</argument>, <argument>cu-&gt;cu_abbrev_hash</argument>, <argument>ab</argument>, <argument>tab</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>HASH_DELETE</name><argument_list>(<argument><expr><name>ab_hh</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_hash</name></name></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>ad</argument>, <argument>&amp;ab-&gt;ab_attrdef</argument>, <argument>ad_next</argument>, <argument>tad</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ab</name><operator>-&gt;</operator><name>ab_attrdef</name></name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name>_Dwarf_AttrDef</name></expr></argument>,
<argument><expr><name>ad_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_die_pro_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl>, <decl><type ref="prev"/><name>tdie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_P_Attribute</name></type> <name>at</name></decl>, <decl><type ref="prev"/><name>tat</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>die</argument>, <argument>&amp;dbg-&gt;dbgp_dielist</argument>, <argument>die_pro_next</argument>, <argument>tdie</argument>)</argument_list></macro> <block>{<block_content>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>at</argument>, <argument>&amp;die-&gt;die_attr</argument>, <argument>at_next</argument>, <argument>tat</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>_Dwarf_Attribute</name></expr></argument>,
<argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>
</unit>
