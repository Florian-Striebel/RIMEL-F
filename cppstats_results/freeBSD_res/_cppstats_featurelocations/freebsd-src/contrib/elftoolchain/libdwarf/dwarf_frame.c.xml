<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_frame.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_frame.c 3106 2014-12-19 16:00:58Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>dwarf_get_fde_list</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Cie</name> <modifier>*</modifier><modifier>*</modifier></type><name>cie_list</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>cie_count</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Fde</name> <modifier>*</modifier><modifier>*</modifier></type><name>fde_list</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>fde_count</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cie_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cie_count</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>fde_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fde_count</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_internal_reg_table</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_dwarf_frame_interal_table_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_dwarf_frame_section_load</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name><operator>-&gt;</operator><name>fs_ciearray</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name><operator>-&gt;</operator><name>fs_fdearray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cie_list</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name><operator>-&gt;</operator><name>fs_ciearray</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cie_count</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name><operator>-&gt;</operator><name>fs_cielen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fde_list</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name><operator>-&gt;</operator><name>fs_fdearray</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fde_count</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name><operator>-&gt;</operator><name>fs_fdelen</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_fde_list_eh</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Cie</name> <modifier>*</modifier><modifier>*</modifier></type><name>cie_list</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>cie_count</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Fde</name> <modifier>*</modifier><modifier>*</modifier></type><name>fde_list</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>fde_count</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cie_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cie_count</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>fde_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fde_count</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_internal_reg_table</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_dwarf_frame_interal_table_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_dwarf_frame_section_load_eh</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name><operator>-&gt;</operator><name>fs_ciearray</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name><operator>-&gt;</operator><name>fs_fdearray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cie_list</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name><operator>-&gt;</operator><name>fs_ciearray</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cie_count</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name><operator>-&gt;</operator><name>fs_cielen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fde_list</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name><operator>-&gt;</operator><name>fs_fdearray</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fde_count</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name><operator>-&gt;</operator><name>fs_fdelen</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_fde_n</name><parameter_list>(<parameter><decl><type><name>Dwarf_Fde</name> <modifier>*</modifier></type><name>fdelist</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>fde_index</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Fde</name> <modifier>*</modifier></type><name>ret_fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_FrameSec</name></type> <name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>fdelist</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><operator>(</operator><operator>*</operator><name>fdelist</name><operator>)</operator><operator>-&gt;</operator><name>fde_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fdelist</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_fde</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fs</name> <operator>=</operator> <name><name>fdelist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>fde_fs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fde_index</name> <operator>&gt;=</operator> <name><name>fs</name><operator>-&gt;</operator><name>fs_fdelen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_fde</name> <operator>=</operator> <name><name>fdelist</name><index>[<expr><name>fde_index</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_fde_at_pc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Fde</name> <modifier>*</modifier></type><name>fdelist</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Fde</name> <modifier>*</modifier></type><name>ret_fde</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>lopc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>hipc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_FrameSec</name></type> <name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>fdelist</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><operator>(</operator><operator>*</operator><name>fdelist</name><operator>)</operator><operator>-&gt;</operator><name>fde_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fdelist</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_fde</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>lopc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>hipc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fs</name> <operator>=</operator> <name><name>fdelist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>fde_fs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name><name>fs</name><operator>-&gt;</operator><name>fs_fdelen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>fde</name> <operator>=</operator> <name><name>fdelist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&gt;=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>&amp;&amp;</operator> <name>pc</name> <operator>&lt;</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>+</operator>
<name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret_fde</name> <operator>=</operator> <name>fde</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lopc</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hipc</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>+</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_cie_of_fde</name><parameter_list>(<parameter><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Cie</name> <modifier>*</modifier></type><name>ret_cie</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>fde</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fde</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_cie</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_cie</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_cie</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_fde_range</name><parameter_list>(<parameter><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>low_pc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>func_len</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Ptr</name> <modifier>*</modifier></type><name>fde_bytes</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>fde_byte_len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name> <modifier>*</modifier></type><name>cie_offset</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>cie_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Off</name> <modifier>*</modifier></type><name>fde_offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>fde</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fde</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>low_pc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>func_len</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>fde_bytes</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fde_byte_len</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cie_offset</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>cie_index</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fde_offset</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>low_pc</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>func_len</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fde_bytes</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fde_byte_len</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cie_offset</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_cieoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cie_index</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_cie</name><operator>-&gt;</operator><name>cie_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fde_offset</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_offset</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_cie_info</name><parameter_list>(<parameter><decl><type><name>Dwarf_Cie</name></type> <name>cie</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>bytes_in_cie</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Small</name> <modifier>*</modifier></type><name>version</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>augmenter</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>caf</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>daf</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name> <modifier>*</modifier></type><name>ra</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ptr</name> <modifier>*</modifier></type><name>initinst</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>inst_len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cie</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>bytes_in_cie</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>version</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>augmenter</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>caf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>daf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ra</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>initinst</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>inst_len</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>bytes_in_cie</name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>version</name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>augmenter</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>caf</name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_caf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>daf</name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_daf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ra</name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_ra</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>initinst</name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_initinst</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>inst_len</name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_instlen</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_cie_index</name><parameter_list>(<parameter><decl><type><name>Dwarf_Cie</name></type> <name>cie</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>cie_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cie</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cie_index</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cie_index</name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_index</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_fde_instr_bytes</name><parameter_list>(<parameter><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ptr</name> <modifier>*</modifier></type><name>ret_inst</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>ret_len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>fde</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fde</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_inst</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_len</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_inst</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_inst</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_len</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_instlen</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL</name></cpp:macro> <cpp:value>rt-&gt;rt3_rules[table_column]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFA</name></cpp:macro> <cpp:value>rt-&gt;rt3_cfa_rule</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>dwarf_get_fde_info_for_reg</name><parameter_list>(<parameter><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>table_column</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Addr</name></type> <name>pc_requested</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>offset_relevant</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>register_num</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>row_pc</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>rt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Addr</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>fde</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fde</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>offset_relevant</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>register_num</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>offset</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>row_pc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pc_requested</name> <operator>&lt;</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>||</operator>
<name>pc_requested</name> <operator>&gt;=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>+</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_PC_NOT_IN_FDE_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_get_internal_table</name><argument_list>(<argument><expr><name>fde</name></expr></argument>, <argument><expr><name>pc_requested</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>table_column</name> <operator>==</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_cfa_value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>offset_relevant</name> <operator>=</operator> <name><name>CFA</name><operator>.</operator><name>dw_offset_relevant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>register_num</name> <operator>=</operator> <name><name>CFA</name><operator>.</operator><name>dw_regnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>CFA</name><operator>.</operator><name>dw_offset_or_block_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>table_column</name> <operator>&gt;=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_rule_table_size</name></name> <operator>||</operator>
<name>table_column</name> <operator>&gt;=</operator> <name>DW_REG_TABLE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_FRAME_TABLE_COL_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>offset_relevant</name> <operator>=</operator> <name><name>RL</name><operator>.</operator><name>dw_offset_relevant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>register_num</name> <operator>=</operator> <name><name>RL</name><operator>.</operator><name>dw_regnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>RL</name><operator>.</operator><name>dw_offset_or_block_len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_fde_info_for_all_regs</name><parameter_list>(<parameter><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>pc_requested</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Regtable</name> <modifier>*</modifier></type><name>reg_table</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>row_pc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>rt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Addr</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>cfa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>fde</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fde</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>reg_table</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>row_pc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pc_requested</name> <operator>&lt;</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>||</operator>
<name>pc_requested</name> <operator>&gt;=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>+</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_PC_NOT_IN_FDE_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_get_internal_table</name><argument_list>(<argument><expr><name>fde</name></expr></argument>, <argument><expr><name>pc_requested</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>cfa</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_cfa_value</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cfa</name> <operator>&lt;</operator> <name>DW_REG_TABLE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reg_table</name><operator>-&gt;</operator><name>rules</name><index>[<expr><name>cfa</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator>
<name><name>CFA</name><operator>.</operator><name>dw_offset_relevant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg_table</name><operator>-&gt;</operator><name>rules</name><index>[<expr><name>cfa</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name> <operator>=</operator> <name><name>CFA</name><operator>.</operator><name>dw_regnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg_table</name><operator>-&gt;</operator><name>rules</name><index>[<expr><name>cfa</name></expr>]</index></name><operator>.</operator><name>dw_offset</name> <operator>=</operator> <name><name>CFA</name><operator>.</operator><name>dw_offset_or_block_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DW_REG_TABLE_SIZE</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_rule_table_size</name></name></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>cfa</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>reg_table</name><operator>-&gt;</operator><name>rules</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator>
<name><name>rt</name><operator>-&gt;</operator><name>rt3_rules</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg_table</name><operator>-&gt;</operator><name>rules</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rt3_rules</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reg_table</name><operator>-&gt;</operator><name>rules</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dw_offset</name> <operator>=</operator>
<name><name>rt</name><operator>-&gt;</operator><name>rt3_rules</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dw_offset_or_block_len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_fde_info_for_reg3</name><parameter_list>(<parameter><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>table_column</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Addr</name></type> <name>pc_requested</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Small</name> <modifier>*</modifier></type><name>value_type</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>offset_relevant</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>register_num</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>offset_or_block_len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ptr</name> <modifier>*</modifier></type><name>block_ptr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>row_pc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>rt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Addr</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>fde</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fde</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>value_type</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>offset_relevant</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>register_num</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>offset_or_block_len</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>block_ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>row_pc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pc_requested</name> <operator>&lt;</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>||</operator>
<name>pc_requested</name> <operator>&gt;=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>+</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_PC_NOT_IN_FDE_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_get_internal_table</name><argument_list>(<argument><expr><name>fde</name></expr></argument>, <argument><expr><name>pc_requested</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>table_column</name> <operator>&gt;=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_rule_table_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_FRAME_TABLE_COL_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>value_type</name> <operator>=</operator> <name><name>RL</name><operator>.</operator><name>dw_value_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset_relevant</name> <operator>=</operator> <name><name>RL</name><operator>.</operator><name>dw_offset_relevant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>register_num</name> <operator>=</operator> <name><name>RL</name><operator>.</operator><name>dw_regnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset_or_block_len</name> <operator>=</operator> <name><name>RL</name><operator>.</operator><name>dw_offset_or_block_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>block_ptr</name> <operator>=</operator> <name><name>RL</name><operator>.</operator><name>dw_block_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_fde_info_for_cfa_reg3</name><parameter_list>(<parameter><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>pc_requested</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Small</name> <modifier>*</modifier></type><name>value_type</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>offset_relevant</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>register_num</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>offset_or_block_len</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Ptr</name> <modifier>*</modifier></type><name>block_ptr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>row_pc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>rt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Addr</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>fde</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fde</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>value_type</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>offset_relevant</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>register_num</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>offset_or_block_len</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>block_ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>row_pc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pc_requested</name> <operator>&lt;</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>||</operator>
<name>pc_requested</name> <operator>&gt;=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>+</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_PC_NOT_IN_FDE_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_get_internal_table</name><argument_list>(<argument><expr><name>fde</name></expr></argument>, <argument><expr><name>pc_requested</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>value_type</name> <operator>=</operator> <name><name>CFA</name><operator>.</operator><name>dw_value_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset_relevant</name> <operator>=</operator> <name><name>CFA</name><operator>.</operator><name>dw_offset_relevant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>register_num</name> <operator>=</operator> <name><name>CFA</name><operator>.</operator><name>dw_regnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset_or_block_len</name> <operator>=</operator> <name><name>CFA</name><operator>.</operator><name>dw_offset_or_block_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>block_ptr</name> <operator>=</operator> <name><name>CFA</name><operator>.</operator><name>dw_block_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CFA</name></cpp:undef>

<function><type><name>int</name></type>
<name>dwarf_get_fde_info_for_all_regs3</name><parameter_list>(<parameter><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>pc_requested</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>reg_table</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>row_pc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>rt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Addr</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>fde</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fde</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>reg_table</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>reg_table</name><operator>-&gt;</operator><name>rt3_rules</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>row_pc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pc_requested</name> <operator>&lt;</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>||</operator>
<name>pc_requested</name> <operator>&gt;=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>+</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_PC_NOT_IN_FDE_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_get_internal_table</name><argument_list>(<argument><expr><name>fde</name></expr></argument>, <argument><expr><name>pc_requested</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_regtable_copy</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg_table</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_expand_frame_instructions</name><parameter_list>(<parameter><decl><type><name>Dwarf_Cie</name></type> <name>cie</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ptr</name></type> <name>instruction</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Frame_Op</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_oplist</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>ret_opcnt</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>cie</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>cie</name><operator>-&gt;</operator><name>cie_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cie</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>instruction</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name>ret_oplist</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret_opcnt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_get_fop</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_addrsize</name></name></expr></argument>, <argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>ret_oplist</name></expr></argument>, <argument><expr><name>ret_opcnt</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Half</name></type>
<name>dwarf_set_frame_rule_table_size</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>old_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_value</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_rule_table_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_rule_table_size</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>old_value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Half</name></type>
<name>dwarf_set_frame_rule_initial_value</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>old_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_value</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_rule_initial_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_rule_initial_value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>old_value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Half</name></type>
<name>dwarf_set_frame_cfa_value</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>old_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_value</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_cfa_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_cfa_value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>old_value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Half</name></type>
<name>dwarf_set_frame_same_value</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>old_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_value</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_same_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_same_value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>old_value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Half</name></type>
<name>dwarf_set_frame_undefined_value</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>old_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_value</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_undefined_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_undefined_value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>old_value</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
