<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/libdwarf_frame.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libdwarf_frame.c 3589 2018-03-13 20:34:33Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_frame_find_cie</name><parameter_list>(<parameter><decl><type><name>Dwarf_FrameSec</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Cie</name> <modifier>*</modifier></type><name>ret_cie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Cie</name></type> <name>cie</name></decl>;</decl_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>cie</argument>, <argument>&amp;fs-&gt;fs_cielist</argument>, <argument>cie_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cie</name><operator>-&gt;</operator><name>cie_offset</name></name> <operator>==</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>cie</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret_cie</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ret_cie</name> <operator>=</operator> <name>cie</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_frame_read_lsb_encoded</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Cie</name></type> <name>cie</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>offsetp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>encode</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>pc</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>application</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>encode</name> <operator>==</operator> <name>DW_EH_PE_omit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>application</name> <operator>=</operator> <name>encode</name> <operator>&amp;</operator> <literal type="number">0xf0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>encode</name> <operator>&amp;=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>encode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_EH_PE_absptr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_addrsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_uleb128</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_udata2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_udata4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_udata8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_sleb128</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>_dwarf_read_sleb128</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_sdata2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_sdata4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_sdata8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_FRAME_AUGMENTATION_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_FRAME_AUGMENTATION_UNKNOWN</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>application</name> <operator>==</operator> <name>DW_EH_PE_pcrel</name></expr>)</condition> <block>{<block_content>



<switch>switch <condition>(<expr><name>encode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_EH_PE_uleb128</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_udata2</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_udata4</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_udata8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>+=</operator> <name>pc</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_sleb128</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_sdata2</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_sdata4</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_sdata8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>pc</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <operator>*</operator><name>val</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>



<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_frame_parse_lsb_cie_augment</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Cie</name></type> <name>cie</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>aug_p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>augdata_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>encode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name> <operator>==</operator> <literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>aug_p</name> <operator>=</operator> <operator>&amp;</operator><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>augdata_p</name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_augdata</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>aug_p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>aug_p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><name>augdata_p</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<expr_stmt><expr><name>encode</name> <operator>=</operator> <operator>*</operator><name>augdata_p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_read_lsb_encoded</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cie</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>,
<argument><expr><name>augdata_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>augdata_p</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_fde_encode</name></name> <operator>=</operator> <operator>*</operator><name>augdata_p</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>,
<argument><expr><name>DW_DLE_FRAME_AUGMENTATION_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_FRAME_AUGMENTATION_UNKNOWN</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>aug_p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_frame_add_cie</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_FrameSec</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>off</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Cie</name> <modifier>*</modifier></type><name>ret_cie</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Cie</name></type> <name>cie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dwarf_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>_dwarf_frame_find_cie</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>*</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cie</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>off</name> <operator>+=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_length</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cie</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Cie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>fs_cielist</name></name></expr></argument>, <argument><expr><name>cie</name></expr></argument>, <argument><expr><name>cie_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_dbg</name></name> <operator>=</operator> <name>dbg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_index</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>fs_cielen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_offset</name></name> <operator>=</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dwarf_size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dwarf_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>-</operator> <operator>*</operator><name>off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_DEBUG_FRAME_LENGTH_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_DEBUG_FRAME_LENGTH_BAD</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>dwarf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_version</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cie</name><operator>-&gt;</operator><name>cie_version</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_version</name></name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>
<name><name>cie</name><operator>-&gt;</operator><name>cie_version</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_FRAME_VERSION_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_FRAME_VERSION_BAD</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>+</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>p</name><index>[<expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name> <operator>!=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>off</name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_offset</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>dwarf_size</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>
<name><name>cie</name><operator>-&gt;</operator><name>cie_length</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name></expr></argument>, <argument><expr><literal type="string">"eh"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_ehdata</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cie</name><operator>-&gt;</operator><name>cie_version</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_addrsize</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_segmentsize</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_addrsize</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_caf</name></name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_daf</name></name> <operator>=</operator> <call><name>_dwarf_read_sleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cie</name><operator>-&gt;</operator><name>cie_version</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_ra</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_ra</name></name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_auglen</name></name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_augdata</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>+</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>off</name> <operator>+=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_auglen</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_fde_encode</name></name> <operator>=</operator> <name>DW_EH_PE_absptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_parse_lsb_cie_augment</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cie</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_initinst</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>+</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dwarf_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_instlen</name></name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_offset</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>length</name> <operator>-</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_instlen</name></name> <operator>=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_offset</name></name> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <name>length</name> <operator>-</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>off</name> <operator>+=</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_instlen</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"cie:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tcie_version=%u cie_offset=%ju cie_length=%ju cie_augment=%s"</literal>
<literal type="string">" cie_instlen=%ju cie-&gt;cie_caf=%ju cie-&gt;cie_daf=%jd off=%ju\n"</literal></expr></argument>,
<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_version</name></name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_offset</name></name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_length</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_instlen</name></name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_caf</name></name></expr></argument>,
<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_daf</name></name></expr></argument>, <argument><expr><operator>*</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret_cie</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ret_cie</name> <operator>=</operator> <name>cie</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>fs_cielen</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_frame_add_fde</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_FrameSec</name></type> <name>fs</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eh_frame</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Cie</name></type> <name>cie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>cieoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dwarf_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fde</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Fde</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>fs_fdelist</name></name></expr></argument>, <argument><expr><name>fde</name></expr></argument>, <argument><expr><name>fde_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name> <operator>=</operator> <name>dbg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_fs</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_addr</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>+</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_offset</name></name> <operator>=</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dwarf_size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dwarf_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>-</operator> <operator>*</operator><name>off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_DEBUG_FRAME_LENGTH_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_DEBUG_FRAME_LENGTH_BAD</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eh_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_cieoff</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cieoff</name> <operator>=</operator> <operator>*</operator><name>off</name> <operator>-</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_cieoff</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cieoff</name> <operator>==</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_CIE_FOR_FDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_CIE_FOR_FDE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_cieoff</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>dwarf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cieoff</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_cieoff</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_frame_find_cie</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>cieoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cie</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name>DW_DLE_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_add_cie</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cieoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cie</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_cie</name></name> <operator>=</operator> <name>cie</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eh_frame</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_read_lsb_encoded</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cie</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_fde_encode</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_addr</name></name> <operator>+</operator> <operator>*</operator><name>off</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_read_lsb_encoded</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>cie</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_fde_encode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_addrsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>,
<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_addrsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>eh_frame</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_auglen</name></name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_augdata</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>+</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>off</name> <operator>+=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_auglen</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_inst</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>+</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dwarf_size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_instlen</name></name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_offset</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>length</name> <operator>-</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_instlen</name></name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_offset</name></name> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <name>length</name> <operator>-</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>off</name> <operator>+=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_instlen</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fde:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eh_frame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(eh_frame)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tfde_offset=%ju fde_length=%ju fde_cieoff=%ju"</literal>
<literal type="string">" fde_instlen=%ju off=%ju\n"</literal></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_offset</name></name></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_length</name></name></expr></argument>,
<argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_cieoff</name></name></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_instlen</name></name></expr></argument>, <argument><expr><operator>*</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>fs_fdelen</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_dwarf_frame_section_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_FrameSec</name></type> <name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Cie</name></type> <name>cie</name></decl>, <decl><type ref="prev"/><name>tcie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl>, <decl><type ref="prev"/><name>tfde</name></decl>;</decl_stmt>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>cie</argument>, <argument>&amp;fs-&gt;fs_cielist</argument>, <argument>cie_next</argument>, <argument>tcie</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>fs_cielist</name></name></expr></argument>, <argument><expr><name>cie</name></expr></argument>, <argument><expr><name>_Dwarf_Cie</name></expr></argument>, <argument><expr><name>cie_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>fde</argument>, <argument>&amp;fs-&gt;fs_fdelist</argument>, <argument>fde_next</argument>, <argument>tfde</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>fs_fdelist</name></name></expr></argument>, <argument><expr><name>fde</name></expr></argument>, <argument><expr><name>_Dwarf_Fde</name></expr></argument>, <argument><expr><name>fde_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>fs_ciearray</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fs_ciearray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>fs_fdearray</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fs_fdearray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_frame_section_init</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_FrameSec</name> <modifier>*</modifier></type><name>frame_sec</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eh_frame</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_FrameSec</name></type> <name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Cie</name></type> <name>cie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>cie_id</name></decl>, <decl><type ref="prev"/><name>entry_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dwarf_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>frame_sec</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>frame_sec</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_FrameSec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>fs_cielist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>fs_fdelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry_off</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dwarf_size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dwarf_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>-</operator> <name>offset</name> <operator>||</operator>
<operator>(</operator><name>length</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>eh_frame</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_DEBUG_FRAME_LENGTH_BAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>eh_frame</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cie_id</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>dwarf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eh_frame</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cie_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_add_cie</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>entry_off</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_add_fde</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>entry_off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dwarf_size</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>cie_id</name> <operator>==</operator> <operator>~</operator><literal type="number">0U</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>dwarf_size</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>cie_id</name> <operator>==</operator> <operator>~</operator><literal type="number">0ULL</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_add_cie</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>entry_off</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_add_fde</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>entry_off</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail_cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>entry_off</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>fs_cielen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>fs_ciearray</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Cie</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<name><name>fs</name><operator>-&gt;</operator><name>fs_cielen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>cie</argument>, <argument>&amp;fs-&gt;fs_cielist</argument>, <argument>cie_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>fs_ciearray</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cie</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator><name>i</name> <operator>==</operator> <name><name>fs</name><operator>-&gt;</operator><name>fs_cielen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>fs_fdelen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>fs_fdearray</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Fde</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<name><name>fs</name><operator>-&gt;</operator><name>fs_fdelen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>fde</argument>, <argument>&amp;fs-&gt;fs_fdelist</argument>, <argument>fde_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>fs_fdearray</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fde</name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator><name>i</name> <operator>==</operator> <name><name>fs</name><operator>-&gt;</operator><name>fs_fdelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>frame_sec</name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>fail_cleanup</name>:</label>

<expr_stmt><expr><call><name>_dwarf_frame_section_cleanup</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_frame_run_inst</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>rt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>addr_size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>insts</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>caf</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name></type> <name>daf</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Addr</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>pc_req</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>row_pc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>init_rt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>saved_rt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>high2</name></decl>, <decl><type ref="prev"/><name>low6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>reg</name></decl>, <decl><type ref="prev"/><name>reg2</name></decl>, <decl><type ref="prev"/><name>uoff</name></decl>, <decl><type ref="prev"/><name>soff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFA</name></cpp:macro> <cpp:value>rt-&gt;rt3_cfa_rule</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITCFA</name></cpp:macro> <cpp:value>init_rt-&gt;rt3_cfa_rule</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL</name></cpp:macro> <cpp:value>rt-&gt;rt3_rules</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITRL</name></cpp:macro> <cpp:value>init_rt-&gt;rt3_rules</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_TABLE_SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((x) &gt;= rt-&gt;rt3_reg_table_size) { DWARF_SET_ERROR(dbg, error, DW_DLE_DF_REG_NUM_TOO_HIGH); ret = DW_DLE_DF_REG_NUM_TOO_HIGH; goto program_done; } } while(0)</cpp:value></cpp:define>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"frame_run_inst: (caf=%ju, daf=%jd)\n"</literal></expr></argument>, <argument><expr><name>caf</name></expr></argument>, <argument><expr><name>daf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>init_rt</name> <operator>=</operator> <name>saved_rt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_dwarf_frame_regtable_copy</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>init_rt</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>insts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pe</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>pe</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"p=%p pe=%p pc=%#jx pc_req=%#jx\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pc_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>DW_CFA_nop</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_nop\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>high2</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>low6</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>high2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>high2</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_CFA_advance_loc</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <name>low6</name> <operator>*</operator> <name>caf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_advance_loc(%#jx(%u))\n"</literal></expr></argument>, <argument><expr><name>pc</name></expr></argument>,
<argument><expr><name>low6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>pc_req</name> <operator>&lt;</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>program_done</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_offset</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>low6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>low6</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>low6</name></expr>]</index></name><operator>.</operator><name>dw_value_type</name> <operator>=</operator> <name>DW_EXPR_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>low6</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_cfa_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>low6</name></expr>]</index></name><operator>.</operator><name>dw_offset_or_block_len</name> <operator>=</operator>
<call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>daf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_offset(%jd)\n"</literal></expr></argument>,
<argument><expr><name><name>RL</name><index>[<expr><name>low6</name></expr>]</index></name><operator>.</operator><name>dw_offset_or_block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_restore</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>low6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>RL</name><index>[<expr><name>low6</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>INITRL</name><index>[<expr><name>low6</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Regtable_Entry3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_restore(%u)\n"</literal></expr></argument>, <argument><expr><name>low6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>,
<argument><expr><name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>program_done</name>;</goto>
</block_content>}</block></switch>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>low6</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_CFA_set_loc</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>addr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_set_loc(pc=%#jx)\n"</literal></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>pc_req</name> <operator>&lt;</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>program_done</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc1</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>caf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_set_loc1(pc=%#jx)\n"</literal></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>pc_req</name> <operator>&lt;</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>program_done</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc2</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>caf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_set_loc2(pc=%#jx)\n"</literal></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>pc_req</name> <operator>&lt;</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>program_done</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc4</name></expr>:</case>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>caf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_set_loc4(pc=%#jx)\n"</literal></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>pc_req</name> <operator>&lt;</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>program_done</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_offset_extended</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uoff</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_value_type</name> <operator>=</operator> <name>DW_EXPR_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_cfa_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_or_block_len</name> <operator>=</operator> <name>uoff</name> <operator>*</operator> <name>daf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_offset_extended(reg=%ju,uoff=%ju)\n"</literal></expr></argument>,
<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>uoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_restore_extended</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>INITRL</name><index>[<expr><name>reg</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Regtable_Entry3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_restore_extended(%ju)\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_undefined</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_undefined_value</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_undefined(%ju)\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_same_value</name></expr>:</case>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_same_value</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_same_value(%ju)\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_register</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name> <operator>=</operator> <name>reg2</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_register(reg=%ju,reg2=%ju)\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>,
<argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_remember_state</name></expr>:</case>
<expr_stmt><expr><call><name>_dwarf_frame_regtable_copy</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saved_rt</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_remember_state\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_restore_state</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_dwarf_frame_regtable_copy</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rt</name></expr></argument>, <argument><expr><name>saved_rt</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_restore_state\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uoff</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_offset_relevant</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_value_type</name></name> <operator>=</operator> <name>DW_EXPR_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_regnum</name></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_offset_or_block_len</name></name> <operator>=</operator> <name>uoff</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_def_cfa(reg=%ju,uoff=%ju)\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>uoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_register</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_regnum</name></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_def_cfa_register(%ju)\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_offset</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uoff</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_offset_relevant</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_value_type</name></name> <operator>=</operator> <name>DW_EXPR_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_offset_or_block_len</name></name> <operator>=</operator> <name>uoff</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_def_cfa_offset(%ju)\n"</literal></expr></argument>, <argument><expr><name>uoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_expression</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_offset_relevant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_value_type</name></name> <operator>=</operator> <name>DW_EXPR_EXPRESSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_offset_or_block_len</name></name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_block_ptr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>CFA</name><operator>.</operator><name>dw_offset_or_block_len</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_def_cfa_expression\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_expression</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_value_type</name> <operator>=</operator> <name>DW_EXPR_EXPRESSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_or_block_len</name> <operator>=</operator>
<call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_block_ptr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_or_block_len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_expression\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_offset_extended_sf</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>soff</name> <operator>=</operator> <call><name>_dwarf_decode_sleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_value_type</name> <operator>=</operator> <name>DW_EXPR_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_cfa_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_or_block_len</name> <operator>=</operator> <name>soff</name> <operator>*</operator> <name>daf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_offset_extended_sf(reg=%ju,soff=%jd)\n"</literal></expr></argument>,
<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>soff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_sf</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>soff</name> <operator>=</operator> <call><name>_dwarf_decode_sleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_offset_relevant</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_value_type</name></name> <operator>=</operator> <name>DW_EXPR_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_regnum</name></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_offset_or_block_len</name></name> <operator>=</operator> <name>soff</name> <operator>*</operator> <name>daf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_def_cfa_sf(reg=%ju,soff=%jd)\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>,
<argument><expr><name>soff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_offset_sf</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>soff</name> <operator>=</operator> <call><name>_dwarf_decode_sleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_offset_relevant</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_value_type</name></name> <operator>=</operator> <name>DW_EXPR_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>CFA</name><operator>.</operator><name>dw_offset_or_block_len</name></name> <operator>=</operator> <name>soff</name> <operator>*</operator> <name>daf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_def_cfa_offset_sf(soff=%jd)\n"</literal></expr></argument>, <argument><expr><name>soff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_val_offset</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uoff</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_value_type</name> <operator>=</operator> <name>DW_EXPR_VAL_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_cfa_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_or_block_len</name> <operator>=</operator> <name>uoff</name> <operator>*</operator> <name>daf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_val_offset(reg=%ju,uoff=%ju)\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>,
<argument><expr><name>uoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_val_offset_sf</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>soff</name> <operator>=</operator> <call><name>_dwarf_decode_sleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_value_type</name> <operator>=</operator> <name>DW_EXPR_VAL_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_cfa_value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_or_block_len</name> <operator>=</operator> <name>soff</name> <operator>*</operator> <name>daf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_val_offset_sf(reg=%ju,soff=%jd)\n"</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>,
<argument><expr><name>soff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>DW_CFA_val_expression</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>row_pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_TABLE_SIZE</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_relevant</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_value_type</name> <operator>=</operator> <name>DW_EXPR_VAL_EXPRESSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_or_block_len</name> <operator>=</operator>
<call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_block_ptr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>RL</name><index>[<expr><name>reg</name></expr>]</index></name><operator>.</operator><name>dw_offset_or_block_len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FRAME_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DW_CFA_val_expression\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>,
<argument><expr><name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>program_done</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></while>

<label><name>program_done</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>init_rt</name><operator>-&gt;</operator><name>rt3_rules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>init_rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>saved_rt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>saved_rt</name><operator>-&gt;</operator><name>rt3_rules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>saved_rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CFA</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INITCFA</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INITRL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_TABLE_SIZE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_frame_convert_inst</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>addr_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>insts</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Frame_Op</name> <modifier>*</modifier></type><name>fop</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Frame_Op3</name> <modifier>*</modifier></type><name>fop3</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>high2</name></decl>, <decl><type ref="prev"/><name>low6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>reg</name></decl>, <decl><type ref="prev"/><name>reg2</name></decl>, <decl><type ref="prev"/><name>uoff</name></decl>, <decl><type ref="prev"/><name>soff</name></decl>, <decl><type ref="prev"/><name>blen</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BASE_OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (fop != NULL) fop[*count].fp_base_op = (x) &gt;&gt; 6; if (fop3 != NULL) fop3[*count].fp_base_op = (x) &gt;&gt; 6; } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_EXTENDED_OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (fop != NULL) fop[*count].fp_extended_op = (x); if (fop3 != NULL) fop3[*count].fp_extended_op = (x); } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_REGISTER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (fop != NULL) fop[*count].fp_register = (x); if (fop3 != NULL) fop3[*count].fp_register = (x); } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (fop != NULL) fop[*count].fp_offset = (x); if (fop3 != NULL) fop3[*count].fp_offset_or_block_len = (x); } while(0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_INSTR_OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (fop != NULL) fop[*count].fp_instr_offset = (x); if (fop3 != NULL) fop3[*count].fp_instr_offset = (x); } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BLOCK_LEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (fop3 != NULL) fop3[*count].fp_offset_or_block_len = (x); } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_EXPR_BLOCK</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (fop3 != NULL) { fop3[*count].fp_expr_block = malloc((size_t) (len)); if (fop3[*count].fp_expr_block == NULL) { DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY); return (DW_DLE_MEMORY); } memcpy(&amp;fop3[*count].fp_expr_block, (addr), (len)); } } while(0)</cpp:value></cpp:define>














<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>insts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pe</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>pe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SET_INSTR_OFFSET</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>insts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>DW_CFA_nop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>high2</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>low6</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>high2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>high2</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_CFA_advance_loc</name></expr>:</case>
<expr_stmt><expr><call><name>SET_BASE_OP</name><argument_list>(<argument><expr><name>high2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_OFFSET</name><argument_list>(<argument><expr><name>low6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_offset</name></expr>:</case>
<expr_stmt><expr><call><name>SET_BASE_OP</name><argument_list>(<argument><expr><name>high2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_REGISTER</name><argument_list>(<argument><expr><name>low6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uoff</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_OFFSET</name><argument_list>(<argument><expr><name>uoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_restore</name></expr>:</case>
<expr_stmt><expr><call><name>SET_BASE_OP</name><argument_list>(<argument><expr><name>high2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_REGISTER</name><argument_list>(<argument><expr><name>low6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>,
<argument><expr><name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SET_EXTENDED_OP</name><argument_list>(<argument><expr><name>low6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>low6</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_CFA_set_loc</name></expr>:</case>
<expr_stmt><expr><name>uoff</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>addr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_OFFSET</name><argument_list>(<argument><expr><name>uoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc1</name></expr>:</case>
<expr_stmt><expr><name>uoff</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_OFFSET</name><argument_list>(<argument><expr><name>uoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc2</name></expr>:</case>
<expr_stmt><expr><name>uoff</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_OFFSET</name><argument_list>(<argument><expr><name>uoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc4</name></expr>:</case>
<expr_stmt><expr><name>uoff</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_OFFSET</name><argument_list>(<argument><expr><name>uoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_offset_extended</name></expr>:</case>
<case>case <expr><name>DW_CFA_def_cfa</name></expr>:</case>
<case>case <expr><name>DW_CFA_val_offset</name></expr>:</case>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uoff</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_REGISTER</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_OFFSET</name><argument_list>(<argument><expr><name>uoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_restore_extended</name></expr>:</case>
<case>case <expr><name>DW_CFA_undefined</name></expr>:</case>
<case>case <expr><name>DW_CFA_same_value</name></expr>:</case>
<case>case <expr><name>DW_CFA_def_cfa_register</name></expr>:</case>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_REGISTER</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_register</name></expr>:</case>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_REGISTER</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_OFFSET</name><argument_list>(<argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_remember_state</name></expr>:</case>
<case>case <expr><name>DW_CFA_restore_state</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_offset</name></expr>:</case>
<expr_stmt><expr><name>uoff</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_OFFSET</name><argument_list>(<argument><expr><name>uoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_expression</name></expr>:</case>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_BLOCK_LEN</name><argument_list>(<argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_EXPR_BLOCK</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_expression</name></expr>:</case>
<case>case <expr><name>DW_CFA_val_expression</name></expr>:</case>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blen</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_REGISTER</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_BLOCK_LEN</name><argument_list>(<argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_EXPR_BLOCK</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_offset_extended_sf</name></expr>:</case>
<case>case <expr><name>DW_CFA_def_cfa_sf</name></expr>:</case>
<case>case <expr><name>DW_CFA_val_offset_sf</name></expr>:</case>
<expr_stmt><expr><name>reg</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>soff</name> <operator>=</operator> <call><name>_dwarf_decode_sleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_REGISTER</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_OFFSET</name><argument_list>(<argument><expr><name>soff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_offset_sf</name></expr>:</case>
<expr_stmt><expr><name>soff</name> <operator>=</operator> <call><name>_dwarf_decode_sleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_OFFSET</name><argument_list>(<argument><expr><name>soff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>,
<argument><expr><name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_frame_get_fop</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>addr_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>insts</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Frame_Op</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_oplist</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>ret_opcnt</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Frame_Op</name> <modifier>*</modifier></type><name>oplist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_convert_inst</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr_size</name></expr></argument>, <argument><expr><name>insts</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oplist</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Frame_Op</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_convert_inst</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>addr_size</name></expr></argument>, <argument><expr><name>insts</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>,
<argument><expr><name>oplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_oplist</name> <operator>=</operator> <name>oplist</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_opcnt</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_frame_regtable_copy</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dest</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>dest</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Regtable3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>dest</name><operator>)</operator><operator>-&gt;</operator><name>rt3_reg_table_size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>rt3_reg_table_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>dest</name><operator>)</operator><operator>-&gt;</operator><name>rt3_rules</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>rt3_reg_table_size</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Regtable_Entry3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>dest</name><operator>)</operator><operator>-&gt;</operator><name>rt3_rules</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>dest</name><operator>)</operator><operator>-&gt;</operator><name>rt3_cfa_rule</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>rt3_cfa_rule</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Regtable_Entry3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>dest</name><operator>)</operator><operator>-&gt;</operator><name>rt3_reg_table_size</name></name> <operator>&amp;&amp;</operator>
<name>i</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>rt3_reg_table_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>dest</name><operator>)</operator><operator>-&gt;</operator><name>rt3_rules</name></name><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>rt3_rules</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Regtable_Entry3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>dest</name><operator>)</operator><operator>-&gt;</operator><name>rt3_reg_table_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>dest</name><operator>)</operator><operator>-&gt;</operator><name>rt3_rules</name></name><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>dw_regnum</name> <operator>=</operator>
<name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_undefined_value</name></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_frame_get_internal_table</name><parameter_list>(<parameter><decl><type><name>Dwarf_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>pc_req</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_rt</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>ret_row_pc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Cie</name></type> <name>cie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>rt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Addr</name></type> <name>row_pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret_rt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rt</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_internal_reg_table</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>rt3_cfa_rule</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Regtable_Entry3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rt3_rules</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rt3_reg_table_size</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Regtable_Entry3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>rt3_reg_table_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>rt3_rules</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dw_regnum</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_rule_initial_value</name></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>cie</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_cie</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cie</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_run_inst</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_addrsize</name></name></expr></argument>,
<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_initinst</name></name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_instlen</name></name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_caf</name></name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_daf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>~</operator><literal type="number">0ULL</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>row_pc</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pc_req</name> <operator>&gt;=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_frame_run_inst</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_addrsize</name></name></expr></argument>,
<argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_inst</name></name></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_instlen</name></name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_caf</name></name></expr></argument>,
<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_daf</name></name></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name></expr></argument>, <argument><expr><name>pc_req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row_pc</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_rt</name> <operator>=</operator> <name>rt</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_row_pc</name> <operator>=</operator> <name>row_pc</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_frame_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>rt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_internal_reg_table</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rt</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_internal_reg_table</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rt3_rules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_internal_reg_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_dwarf_frame_section_cleanup</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_dwarf_frame_section_cleanup</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_frame_section_load</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ds</name> <operator>=</operator> <call><name>_dwarf_find_section</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">".debug_frame"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>_dwarf_frame_section_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame</name></name></expr></argument>,
<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_frame_section_load_eh</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ds</name> <operator>=</operator> <call><name>_dwarf_find_section</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">".eh_frame"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>_dwarf_frame_section_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_eh_frame</name></name></expr></argument>,
<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_frame_params_init</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_rule_table_size</name></name> <operator>=</operator> <name>DW_FRAME_LAST_REG_NUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_rule_initial_value</name></name> <operator>=</operator> <name>DW_FRAME_REG_INITIAL_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_cfa_value</name></name> <operator>=</operator> <name>DW_FRAME_CFA_COL3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_same_value</name></name> <operator>=</operator> <name>DW_FRAME_SAME_VAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_undefined_value</name></name> <operator>=</operator> <name>DW_FRAME_UNDEFINED_VAL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_frame_interal_table_init</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Regtable3</name> <modifier>*</modifier></type><name>rt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_internal_reg_table</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rt</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Regtable3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>rt3_reg_table_size</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_frame_rule_table_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>rt3_rules</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rt3_reg_table_size</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Regtable_Entry3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_internal_reg_table</name></name> <operator>=</operator> <name>rt</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_FDE_INST_INIT_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>_dwarf_frame_fde_add_inst</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Small</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>val1</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>val2</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>high2</name></decl>, <decl><type ref="prev"/><name>low6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ds</name></cpp:macro> <cpp:value>fde</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ds_data</name></cpp:macro> <cpp:value>fde_inst</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ds_cap</name></cpp:macro> <cpp:value>fde_instcap</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ds_size</name></cpp:macro> <cpp:value>fde_instlen</cpp:value></cpp:define>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fde</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_dbg</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fde</name><operator>-&gt;</operator><name>fde_inst</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_instcap</name></name> <operator>=</operator> <name>_FDE_INST_INIT_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_instlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fde</name><operator>-&gt;</operator><name>fde_inst</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_instcap</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_instcap</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>DW_CFA_nop</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>high2</name> <operator>=</operator> <name>op</name> <operator>&amp;</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>low6</name> <operator>=</operator> <name>op</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>high2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>high2</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_CFA_advance_loc</name></expr>:</case>
<case>case <expr><name>DW_CFA_restore</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>DW_CFA_offset</name></expr>:</case>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>,
<argument><expr><name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>low6</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_CFA_set_loc</name></expr>:</case>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc1</name></expr>:</case>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc2</name></expr>:</case>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc4</name></expr>:</case>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_offset_extended</name></expr>:</case>
<case>case <expr><name>DW_CFA_def_cfa</name></expr>:</case>
<case>case <expr><name>DW_CFA_register</name></expr>:</case>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name>val2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_restore_extended</name></expr>:</case>
<case>case <expr><name>DW_CFA_undefined</name></expr>:</case>
<case>case <expr><name>DW_CFA_same_value</name></expr>:</case>
<case>case <expr><name>DW_CFA_def_cfa_register</name></expr>:</case>
<case>case <expr><name>DW_CFA_def_cfa_offset</name></expr>:</case>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_CFA_remember_state</name></expr>:</case>
<case>case <expr><name>DW_CFA_restore_state</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_FRAME_INSTR_EXEC_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>gen_fail</name>:</label>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ds</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ds_data</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ds_cap</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ds_size</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_frame_gen_cie</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Cie</name></type> <name>cie</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ds</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cie</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_offset</name></name> <operator>=</operator> <name>offset</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_length</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0U</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_version</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_BLOCK</name><argument_list>(<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_caf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_SLEB128</name><argument_list>(<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_daf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_ra</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cie</name><operator>-&gt;</operator><name>cie_initinst</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_BLOCK</name><argument_list>(<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_initinst</name></name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_instlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>-</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_offset</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_length</name></name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name><operator>++</operator> <operator>&lt;</operator> <name><name>cie</name><operator>-&gt;</operator><name>cie_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_CFA_nop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_length</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>gen_fail</name>:</label>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_frame_gen_fde</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Fde</name></type> <name>fde</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ds</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>drs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fde</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_cie</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_offset</name></name> <operator>=</operator> <name>offset</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_cieoff</name></name> <operator>=</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_cie</name><operator>-&gt;</operator><name>cie_offset</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_length</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_entry_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>dwarf_drt_data_reloc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_cieoff</name></name></expr></argument>, <argument><expr><literal type="string">".debug_frame"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_entry_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>dwarf_drt_data_reloc</name></expr></argument>,
<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_symndx</name></name></expr></argument>,
<argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>fde</name><operator>-&gt;</operator><name>fde_esymndx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_entry_add_pair</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_symndx</name></name></expr></argument>,
<argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_esymndx</name></name></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_initloc</name></name></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_eoff</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_adrange</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_BLOCK</name><argument_list>(<argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_inst</name></name></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_instlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>-</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_offset</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_length</name></name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name><operator>++</operator> <operator>&lt;</operator> <name><name>fde</name><operator>-&gt;</operator><name>fde_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_CFA_nop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_length</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>gen_fail</name>:</label>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_frame_gen</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_P_Cie</name></type> <name>cie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_P_Fde</name></type> <name>fde</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_cielist</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_section_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><literal type="string">".debug_frame"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>gen_fail0</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_section_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>cie</argument>, <argument>&amp;dbg-&gt;dbgp_cielist</argument>, <argument>cie_next</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_frame_gen_cie</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>cie</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>fde</argument>, <argument>&amp;dbg-&gt;dbgp_fdelist</argument>, <argument>fde_next</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_frame_gen_fde</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>fde</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_section_callback</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>SHT_PROGBITS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_section_finalize</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>gen_fail</name>:</label>
<expr_stmt><expr><call><name>_dwarf_reloc_section_free</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>gen_fail0</name>:</label>
<expr_stmt><expr><call><name>_dwarf_section_free</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_frame_pro_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Cie</name></type> <name>cie</name></decl>, <decl><type ref="prev"/><name>tcie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_P_Fde</name></type> <name>fde</name></decl>, <decl><type ref="prev"/><name>tfde</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>cie</argument>, <argument>&amp;dbg-&gt;dbgp_cielist</argument>, <argument>cie_next</argument>, <argument>tcie</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_cielist</name></name></expr></argument>, <argument><expr><name>cie</name></expr></argument>, <argument><expr><name>_Dwarf_Cie</name></expr></argument>, <argument><expr><name>cie_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_augment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cie</name><operator>-&gt;</operator><name>cie_initinst</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cie</name><operator>-&gt;</operator><name>cie_initinst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_cielen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>fde</argument>, <argument>&amp;dbg-&gt;dbgp_fdelist</argument>, <argument>fde_next</argument>, <argument>tfde</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_fdelist</name></name></expr></argument>, <argument><expr><name>fde</name></expr></argument>, <argument><expr><name>_Dwarf_Fde</name></expr></argument>, <argument><expr><name>fde_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fde</name><operator>-&gt;</operator><name>fde_inst</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fde</name><operator>-&gt;</operator><name>fde_inst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_fdelen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
