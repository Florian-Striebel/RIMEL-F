<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/libdwarf_lineno.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libdwarf_lineno.c 3164 2015-02-19 01:20:12Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_lineno_add_file</name><parameter_list>(<parameter><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compdir</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_LineFile</name></type> <name>lf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>filepath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>incdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>slen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_LineFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_fullpath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_fname</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_fname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_dirndx</name></name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>-&gt;</operator><name>lf_dirndx</name></name> <operator>&gt;</operator> <name><name>li</name><operator>-&gt;</operator><name>li_inclen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_DIR_INDEX_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_DIR_INDEX_BAD</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>lf</name><operator>-&gt;</operator><name>lf_fname</name></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filepath</name> <operator>=</operator> <call><name>open_memstream</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lf</name><operator>-&gt;</operator><name>lf_fullpath</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filepath</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>-&gt;</operator><name>lf_dirndx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>incdir</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name><index>[<expr><name><name>lf</name><operator>-&gt;</operator><name>lf_dirndx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>incdir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>incdir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>incdir</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><name>compdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>incdir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><name>incdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_mtime</name></name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_size</name></name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lflist</name></name></expr></argument>, <argument><expr><name>lf</name></expr></argument>, <argument><expr><name>lf_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_lflen</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_lineno_run_program</name><parameter_list>(<parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compdir</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Line</name></type> <name>ln</name></decl>, <decl><type ref="prev"/><name>tln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>address</name></decl>, <decl><type ref="prev"/><name>file</name></decl>, <decl><type ref="prev"/><name>line</name></decl>, <decl><type ref="prev"/><name>column</name></decl>, <decl><type ref="prev"/><name>opsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_stmt</name></decl>, <decl><type ref="prev"/><name>basic_block</name></decl>, <decl><type ref="prev"/><name>end_sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_REGISTERS</name></cpp:macro> <cpp:value>do { address = 0; file = 1; line = 1; column = 0; is_stmt = li-&gt;li_defstmt; basic_block = 0; end_sequence = 0; } while(0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND_ROW</name></cpp:macro> <cpp:value>do { ln = malloc(sizeof(struct _Dwarf_Line)); if (ln == NULL) { ret = DW_DLE_MEMORY; DWARF_SET_ERROR(dbg, error, ret); goto prog_fail; } ln-&gt;ln_li = li; ln-&gt;ln_addr = address; ln-&gt;ln_symndx = 0; ln-&gt;ln_fileno = file; ln-&gt;ln_lineno = line; ln-&gt;ln_column = column; ln-&gt;ln_bblock = basic_block; ln-&gt;ln_stmt = is_stmt; ln-&gt;ln_endseq = end_sequence; STAILQ_INSERT_TAIL(&amp;li-&gt;li_lnlist, ln, ln_next);li-&gt;li_lnlen++; } while(0)</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(li-&gt;li_lbase + (((x) - li-&gt;li_opbase) % li-&gt;li_lrange))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x) - li-&gt;li_opbase) / li-&gt;li_lrange) * li-&gt;li_minlen)</cpp:value></cpp:define>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_dbg</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>RESET_REGISTERS</name></expr>;</expr_stmt>




<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>pe</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>opsize</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_LNE_end_sequence</name></expr>:</case>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>end_sequence</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>APPEND_ROW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET_REGISTERS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNE_set_address</name></expr>:</case>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNE_define_file</name></expr>:</case>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_lineno_add_file</name><argument_list>(<argument><expr><name>li</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>compdir</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>prog_fail</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>opsize</name></expr>;</expr_stmt>
</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <name><name>li</name><operator>-&gt;</operator><name>li_opbase</name></name></expr>)</condition> <block>{<block_content>





<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_LNS_copy</name></expr>:</case>
<expr_stmt><expr><name>APPEND_ROW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>basic_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_advance_pc</name></expr>:</case>
<expr_stmt><expr><name>address</name> <operator>+=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator>
<name><name>li</name><operator>-&gt;</operator><name>li_minlen</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_advance_line</name></expr>:</case>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <call><name>_dwarf_decode_sleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_file</name></expr>:</case>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_column</name></expr>:</case>
<expr_stmt><expr><name>column</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_negate_stmt</name></expr>:</case>
<expr_stmt><expr><name>is_stmt</name> <operator>=</operator> <operator>!</operator><name>is_stmt</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_basic_block</name></expr>:</case>
<expr_stmt><expr><name>basic_block</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_const_add_pc</name></expr>:</case>
<expr_stmt><expr><name>address</name> <operator>+=</operator> <call><name>ADDRESS</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_fixed_advance_pc</name></expr>:</case>
<expr_stmt><expr><name>address</name> <operator>+=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_prologue_end</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_epilogue_begin</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>DW_LNS_set_isa</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><name>line</name> <operator>+=</operator> <call><name>LINE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>address</name> <operator>+=</operator> <call><name>ADDRESS</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>APPEND_ROW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>basic_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>prog_fail</name>:</label>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>ln</argument>, <argument>&amp;li-&gt;li_lnlist</argument>, <argument>ln_next</argument>, <argument>tln</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lnlist</name></name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>_Dwarf_Line</name></expr></argument>, <argument><expr><name>ln_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RESET_REGISTERS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APPEND_ROW</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LINE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADDRESS</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_lineno_init</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_LineFile</name></type> <name>lf</name></decl>, <decl><type ref="prev"/><name>tlf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>hdroff</name></decl>, <decl><type ref="prev"/><name>endoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dwarf_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cu</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_cu</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_dbg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ds</name> <operator>=</operator> <call><name>_dwarf_find_section</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">".debug_line"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>compdir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>_dwarf_attr_find</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_comp_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_strp</name></expr>:</case>
<expr_stmt><expr><name>compdir</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_string</name></expr>:</case>
<expr_stmt><expr><name>compdir</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dwarf_size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dwarf_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>-</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_DEBUG_LINE_LENGTH_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_DEBUG_LINE_LENGTH_BAD</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>li</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_LineInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endoff</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_version</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_hdrlen</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>dwarf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdroff</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_minlen</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_version</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_maxop</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_defstmt</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_lbase</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_lrange</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_opbase</name></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lflist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lnlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>li</name><operator>-&gt;</operator><name>li_hdrlen</name></name> <operator>-</operator> <literal type="number">5</literal> <operator>&lt;</operator> <name><name>li</name><operator>-&gt;</operator><name>li_opbase</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_DEBUG_LINE_LENGTH_BAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>li</name><operator>-&gt;</operator><name>li_oplen</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_opbase</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>li</name><operator>-&gt;</operator><name>li_opbase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_oplen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>




<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_inclen</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_DEBUG_LINE_LENGTH_BAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>length</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></while>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>




<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_lineno_add_file</name><argument_list>(<argument><expr><name>li</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>compdir</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail_cleanup</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_DEBUG_LINE_LENGTH_BAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>-</operator> <name>hdroff</name> <operator>!=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_hdrlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_DEBUG_LINE_LENGTH_BAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_lineno_run_program</name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>li</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>+</operator> <name>endoff</name></expr></argument>, <argument><expr><name>compdir</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail_cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_lineinfo</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>fail_cleanup</name>:</label>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>lf</argument>, <argument>&amp;li-&gt;li_lflist</argument>, <argument>lf_next</argument>, <argument>tlf</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lflist</name></name></expr></argument>, <argument><expr><name>lf</name></expr></argument>, <argument><expr><name>_Dwarf_LineFile</name></expr></argument>, <argument><expr><name>lf_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>-&gt;</operator><name>lf_fullpath</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_fullpath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_oplen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_oplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_lineno_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_LineFile</name></type> <name>lf</name></decl>, <decl><type ref="prev"/><name>tlf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Line</name></type> <name>ln</name></decl>, <decl><type ref="prev"/><name>tln</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>lf</argument>, <argument>&amp;li-&gt;li_lflist</argument>, <argument>lf_next</argument>, <argument>tlf</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lflist</name></name></expr></argument>, <argument><expr><name>lf</name></expr></argument>,
<argument><expr><name>_Dwarf_LineFile</name></expr></argument>, <argument><expr><name>lf_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>-&gt;</operator><name>lf_fullpath</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_fullpath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>ln</argument>, <argument>&amp;li-&gt;li_lnlist</argument>, <argument>ln_next</argument>, <argument>tln</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lnlist</name></name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>_Dwarf_Line</name></expr></argument>,
<argument><expr><name>ln_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_oplen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_oplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_lnarray</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_lnarray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_lfnarray</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_lfnarray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_lineno_gen_program</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Line</name></type> <name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>address</name></decl>, <decl><type ref="prev"/><name>file</name></decl>, <decl><type ref="prev"/><name>line</name></decl>, <decl><type ref="prev"/><name>spc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>addr0</name></decl>, <decl><type ref="prev"/><name>maddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Signed</name></type> <name>line0</name></decl>, <decl><type ref="prev"/><name>column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_stmt</name></decl>, <decl><type ref="prev"/><name>basic_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_REGISTERS</name></cpp:macro> <cpp:value>do { address = 0; file = 1; line = 1; column = 0; is_stmt = li-&gt;li_defstmt; basic_block = 0; } while(0)</cpp:value></cpp:define>









<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>maddr</name> <operator>=</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>li</name><operator>-&gt;</operator><name>li_opbase</name></name><operator>)</operator> <operator>/</operator> <name><name>li</name><operator>-&gt;</operator><name>li_lrange</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>RESET_REGISTERS</name></expr>;</expr_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ln</argument>, <argument>&amp;li-&gt;li_lnlist</argument>, <argument>ln_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ln</name><operator>-&gt;</operator><name>ln_symndx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_LNE_set_address</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_entry_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><name>dwarf_drt_data_reloc</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_symndx</name></name></expr></argument>, <argument><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_addr</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>address</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>ln_addr</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ln</name><operator>-&gt;</operator><name>ln_endseq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr0</name> <operator>=</operator> <operator>(</operator><name><name>ln</name><operator>-&gt;</operator><name>ln_addr</name></name> <operator>-</operator> <name>address</name><operator>)</operator> <operator>/</operator> <name><name>li</name><operator>-&gt;</operator><name>li_minlen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_LNS_advance_pc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name>addr0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_LNE_end_sequence</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RESET_REGISTERS</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>ln</name><operator>-&gt;</operator><name>ln_fileno</name></name> <operator>!=</operator> <name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_LNS_set_file</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_fileno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>ln_fileno</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ln</name><operator>-&gt;</operator><name>ln_column</name></name> <operator>!=</operator> <name>column</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_LNS_set_column</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_column</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>column</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>ln_column</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ln</name><operator>-&gt;</operator><name>ln_stmt</name></name> <operator>!=</operator> <name>is_stmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_LNS_negate_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_stmt</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>ln_stmt</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ln</name><operator>-&gt;</operator><name>ln_bblock</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>basic_block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_LNS_set_basic_block</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>basic_block</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>addr0</name> <operator>=</operator> <operator>(</operator><name><name>ln</name><operator>-&gt;</operator><name>ln_addr</name></name> <operator>-</operator> <name>address</name><operator>)</operator> <operator>/</operator> <name><name>li</name><operator>-&gt;</operator><name>li_minlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>line0</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>ln_lineno</name></name> <operator>-</operator> <name>line</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr0</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>line0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_lbase</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line0</name> <operator>&gt;=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_lbase</name></name> <operator>&amp;&amp;</operator>
<name>line0</name> <operator>&lt;=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_lbase</name></name> <operator>+</operator> <name><name>li</name><operator>-&gt;</operator><name>li_lrange</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>spc</name> <operator>=</operator> <operator>(</operator><name>line0</name> <operator>-</operator> <name><name>li</name><operator>-&gt;</operator><name>li_lbase</name></name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>li</name><operator>-&gt;</operator><name>li_lrange</name></name> <operator>*</operator> <name>addr0</name><operator>)</operator> <operator>+</operator> <name><name>li</name><operator>-&gt;</operator><name>li_opbase</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spc</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>spc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>basic_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>next_line</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>line0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_LNS_advance_line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_SLEB128</name><argument_list>(<argument><expr><name>line0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_copy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>need_copy</name> <operator>=</operator> <name>basic_block</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addr0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>spc</name> <operator>=</operator> <operator>(</operator><name>line0</name> <operator>-</operator> <name><name>li</name><operator>-&gt;</operator><name>li_lbase</name></name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>li</name><operator>-&gt;</operator><name>li_lrange</name></name> <operator>*</operator> <operator>(</operator><name>addr0</name> <operator>-</operator> <name>maddr</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>li</name><operator>-&gt;</operator><name>li_opbase</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr0</name> <operator>&gt;=</operator> <name>maddr</name> <operator>&amp;&amp;</operator> <name>spc</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_LNS_const_add_pc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>spc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_LNS_advance_pc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name>addr0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>DW_LNS_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>basic_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>next_line</name>:</label>
<expr_stmt><expr><name>address</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>ln_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>ln</name><operator>-&gt;</operator><name>ln_lineno</name></name></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>gen_fail</name>:</label>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RESET_REGISTERS</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type>
<name>_dwarf_get_minlen</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_isa</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_ISA_ARM</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_ISA_X86</name></expr>:</case>
<case>case <expr><name>DW_ISA_X86_64</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>oplen</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>_dwarf_lineno_gen</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_LineFile</name></type> <name>lf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lnlist</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_version</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_hdrlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_minlen</name></name> <operator>=</operator> <call><name>_dwarf_get_minlen</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_defstmt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_lbase</name></name> <operator>=</operator> <operator>-</operator><literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_lrange</name></name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_opbase</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_section_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><literal type="string">".debug_line"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_reloc_section_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>gen_fail1</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_version</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_hdrlen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_minlen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_defstmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_lbase</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_lrange</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_opbase</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_BLOCK</name><argument_list>(<argument><expr><name>oplen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oplen</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>oplen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name><name>li</name><operator>-&gt;</operator><name>li_inclen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_STRING</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>lf</argument>, <argument>&amp;li-&gt;li_lflist</argument>, <argument>lf_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_STRING</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_fname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_dirndx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_mtime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_hdrlen</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>-</operator> <name>offset</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_hdrlen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_lineno_gen_program</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_length</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_length</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_section_callback</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>SHT_PROGBITS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_reloc_section_finalize</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>gen_fail</name>:</label>
<expr_stmt><expr><call><name>_dwarf_reloc_section_free</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>gen_fail1</name>:</label>
<expr_stmt><expr><call><name>_dwarf_section_free</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_lineno_pro_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_LineFile</name></type> <name>lf</name></decl>, <decl><type ref="prev"/><name>tlf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Line</name></type> <name>ln</name></decl>, <decl><type ref="prev"/><name>tln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name></name></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>lf</argument>, <argument>&amp;li-&gt;li_lflist</argument>, <argument>lf_next</argument>, <argument>tlf</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lflist</name></name></expr></argument>, <argument><expr><name>lf</name></expr></argument>, <argument><expr><name>_Dwarf_LineFile</name></expr></argument>,
<argument><expr><name>lf_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lf</name><operator>-&gt;</operator><name>lf_fname</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>ln</argument>, <argument>&amp;li-&gt;li_lnlist</argument>, <argument>ln_next</argument>, <argument>tln</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lnlist</name></name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>_Dwarf_Line</name></expr></argument>, <argument><expr><name>ln_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name><name>li</name><operator>-&gt;</operator><name>li_inclen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
