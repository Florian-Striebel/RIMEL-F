<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_pro_expr.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_pro_expr.c 2074 2011-10-27 03:34:33Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>_Dwarf_P_Expr_Entry</name></name> <modifier>*</modifier></type>
<name>_dwarf_add_expr</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Expr</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Small</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>val1</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>val2</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_Dwarf_P_Expr_Entry</name></name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name><name>expr</name><operator>-&gt;</operator><name>pe_dbg</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_loc_expr_add_atom</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ee</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ee</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>expr</name><operator>-&gt;</operator><name>pe_eelist</name></name></expr></argument>, <argument><expr><name>ee</name></expr></argument>, <argument><expr><name>ee_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>ee_loc</name><operator>.</operator><name>lr_atom</name></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>ee_loc</name><operator>.</operator><name>lr_number</name></name> <operator>=</operator> <name>val1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>ee_loc</name><operator>.</operator><name>lr_number2</name></name> <operator>=</operator> <name>val2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>ee_loc</name><operator>.</operator><name>lr_offset</name></name> <operator>=</operator> <name><name>expr</name><operator>-&gt;</operator><name>pe_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>pe_length</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>pe_invalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ee</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_expr_into_block</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Expr</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_Dwarf_P_Expr_Entry</name></name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name><name>expr</name><operator>-&gt;</operator><name>pe_dbg</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>pe_block</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>pe_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>pe_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>pe_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_EXPR_LENGTH_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_EXPR_LENGTH_BAD</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>pe_block</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>pe_length</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ee</argument>, <argument>&amp;expr-&gt;pe_eelist</argument>, <argument>ee_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator> <name>pos</name> <operator>&lt;</operator> <name><name>expr</name><operator>-&gt;</operator><name>pe_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_loc_expr_add_atom</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>expr</name><operator>-&gt;</operator><name>pe_block</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>expr</name><operator>-&gt;</operator><name>pe_block</name><index>[<expr><name><name>expr</name><operator>-&gt;</operator><name>pe_length</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>ee_loc</name><operator>.</operator><name>lr_atom</name></name></expr></argument>, <argument><expr><name><name>ee</name><operator>-&gt;</operator><name>ee_loc</name><operator>.</operator><name>lr_number</name></name></expr></argument>,
<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>ee_loc</name><operator>.</operator><name>lr_number2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>DW_DLE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>pe_invalid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_expr_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Expr</name></type> <name>pe</name></decl>, <decl><type ref="prev"/><name>tpe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_Dwarf_P_Expr_Entry</name></name> <modifier>*</modifier></type><name>ee</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tee</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>pe</argument>, <argument>&amp;dbg-&gt;dbgp_pelist</argument>, <argument>pe_next</argument>, <argument>tpe</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_pelist</name></name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>_Dwarf_P_Expr</name></expr></argument>, <argument><expr><name>pe_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>ee</argument>, <argument>&amp;pe-&gt;pe_eelist</argument>, <argument>ee_next</argument>, <argument>tee</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_eelist</name></name></expr></argument>, <argument><expr><name>ee</name></expr></argument>, <argument><expr><name>_Dwarf_P_Expr_Entry</name></expr></argument>,
<argument><expr><name>ee_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_block</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>Dwarf_P_Expr</name></type>
<name>dwarf_new_expr</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Expr</name></type> <name>pe</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pe</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_P_Expr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_eelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_pelist</name></name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>pe_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dbg</name></name> <operator>=</operator> <name>dbg</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>pe</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_add_expr_gen</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Expr</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Small</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>val1</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>val2</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_dwarf_add_expr</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>pe_length</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_add_expr_addr</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Expr</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>address</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name></type> <name>sym_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>dwarf_add_expr_addr_b</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>sym_index</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_add_expr_addr_b</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Expr</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>address</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>sym_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_Dwarf_P_Expr_Entry</name></name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ee</name> <operator>=</operator> <call><name>_dwarf_add_expr</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>DW_OP_addr</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>ee_sym</name></name> <operator>=</operator> <name>sym_index</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>pe_length</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_expr_current_offset</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Expr</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>pe_length</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Addr</name></type>
<name>dwarf_expr_into_block</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Expr</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>length</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>expr</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>expr</name><operator>-&gt;</operator><name>pe_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>length</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>Dwarf_Addr</name><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>pe_block</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>expr</name><operator>-&gt;</operator><name>pe_invalid</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>_dwarf_expr_into_block</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>Dwarf_Addr</name><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>DW_DLV_BADADDR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name><name>expr</name><operator>-&gt;</operator><name>pe_length</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>Dwarf_Addr</name><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>pe_block</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
