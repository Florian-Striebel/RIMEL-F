<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_pro_arange.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_pro_arange.c 2074 2011-10-27 03:34:33Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_add_arange</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name></type> <name>symbol_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>dwarf_add_arange_b</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>symbol_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_add_arange_b</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>symbol_index</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>end_symbol_index</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Addr</name></type> <name>offset_from_end_symbol</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_ArangeSet</name></type> <name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Arange</name></type> <name>ar</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>as</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_as</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_symbol_index</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbgp_flags</name></name> <operator>&amp;</operator> <name>DW_DLC_SYMBOLIC_RELOCATIONS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ar</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Arange</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_as</name></name> <operator>=</operator> <name>as</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_address</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_range</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_symndx</name></name> <operator>=</operator> <name>symbol_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_esymndx</name></name> <operator>=</operator> <name>end_symbol_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>ar_eoff</name></name> <operator>=</operator> <name>offset_from_end_symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>as_arlist</name></name></expr></argument>, <argument><expr><name>ar</name></expr></argument>, <argument><expr><name>ar_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
