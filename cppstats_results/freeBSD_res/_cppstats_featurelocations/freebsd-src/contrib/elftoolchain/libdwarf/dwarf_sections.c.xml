<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_sections.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_sections.c 3226 2015-06-23 13:00:16Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>N</name></type></parameter>, <parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((N) != NULL) *(N) = (V); } while (0)</cpp:value></cpp:define>





<function><type><name>int</name></type>
<name>dwarf_get_section_max_offsets_b</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_info</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_abbrev</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_line</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_loc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_aranges</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_macinfo</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_pubnames</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_str</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_frame</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_ranges</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_pubtypes</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_abbrev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_loc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_aranges</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_macinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_pubnames</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_ranges</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_pubtypes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_types</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_seccnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_section</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ds_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_section</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ds_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_info"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_info</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_abbrev"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_abbrev</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_line"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_line</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_loc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_loc</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_aranges"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_aranges</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_macinfo"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_macinfo</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_pubnames"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_pubnames</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_str"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_str</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_frame"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_frame</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_ranges"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_ranges</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_pubtypes"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_pubtypes</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".debug_types"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>debug_types</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_section_max_offsets</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_info</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_abbrev</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_line</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_loc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_aranges</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_macinfo</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_pubnames</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_str</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_frame</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_ranges</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>debug_pubtypes</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>dwarf_get_section_max_offsets_b</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>debug_info</name></expr></argument>, <argument><expr><name>debug_abbrev</name></expr></argument>,
<argument><expr><name>debug_line</name></expr></argument>, <argument><expr><name>debug_loc</name></expr></argument>, <argument><expr><name>debug_aranges</name></expr></argument>, <argument><expr><name>debug_macinfo</name></expr></argument>,
<argument><expr><name>debug_pubnames</name></expr></argument>, <argument><expr><name>debug_str</name></expr></argument>, <argument><expr><name>debug_frame</name></expr></argument>, <argument><expr><name>debug_ranges</name></expr></argument>,
<argument><expr><name>debug_pubtypes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
