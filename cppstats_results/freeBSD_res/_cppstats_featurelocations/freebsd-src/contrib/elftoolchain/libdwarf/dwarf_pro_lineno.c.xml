<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_pro_lineno.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_pro_lineno.c 2973 2013-12-23 06:46:16Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_add_line_entry</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>file</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Addr</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name></type> <name>column</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Bool</name></type> <name>is_stmt</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Bool</name></type> <name>basic_block</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Line</name></type> <name>ln</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>STAILQ_LAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lnlist</name></name></expr></argument>, <argument><expr><name>_Dwarf_Line</name></expr></argument>, <argument><expr><name>ln_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ln</name><operator>-&gt;</operator><name>ln_addr</name></name> <operator>&gt;</operator> <name>off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_li</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_addr</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_symndx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_fileno</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_column</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_bblock</name></name> <operator>=</operator> <name>basic_block</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_stmt</name></name> <operator>=</operator> <name>is_stmt</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_endseq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lnlist</name></name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>ln_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_lnlen</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_lne_set_address</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>offs</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>symndx</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Line</name></type> <name>ln</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>symndx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_li</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_addr</name></name> <operator>=</operator> <name>offs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_symndx</name></name> <operator>=</operator> <name>symndx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lnlist</name></name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>ln_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_lnlen</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_lne_end_sequence</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Line</name></type> <name>ln</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>STAILQ_LAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lnlist</name></name></expr></argument>, <argument><expr><name>_Dwarf_Line</name></expr></argument>, <argument><expr><name>ln_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>&amp;&amp;</operator> <name><name>ln</name><operator>-&gt;</operator><name>ln_addr</name></name> <operator>&gt;=</operator> <name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ln</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_li</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ln</name><operator>-&gt;</operator><name>ln_endseq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lnlist</name></name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>ln_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_lnlen</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_add_directory_decl</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>li</name><operator>-&gt;</operator><name>li_inclen</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>li</name><operator>-&gt;</operator><name>li_incdirs</name><index>[<expr><name><name>li</name><operator>-&gt;</operator><name>li_inclen</name></name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>++</operator><name><name>li</name><operator>-&gt;</operator><name>li_inclen</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Unsigned</name></type>
<name>dwarf_add_file_decl</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>dirndx</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>mtime</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_LineInfo</name></type> <name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_LineFile</name></type> <name>lf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NOCOUNT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbgp_lineinfo</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_LineFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lf</name><operator>-&gt;</operator><name>lf_fname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_dirndx</name></name> <operator>=</operator> <name>dirndx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_mtime</name></name> <operator>=</operator> <name>mtime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lf</name><operator>-&gt;</operator><name>lf_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_lflist</name></name></expr></argument>, <argument><expr><name>lf</name></expr></argument>, <argument><expr><name>lf_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>++</operator><name><name>li</name><operator>-&gt;</operator><name>li_lflen</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
