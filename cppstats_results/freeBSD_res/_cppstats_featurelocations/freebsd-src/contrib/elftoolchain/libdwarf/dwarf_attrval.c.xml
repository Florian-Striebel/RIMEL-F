<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_attrval.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_attrval.c 3509 2016-12-29 03:58:41Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>dwarf_attrval_flag</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Bool</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>valp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>at</name> <operator>=</operator> <call><name>_dwarf_attr_find</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_flag</name></expr>:</case>
<case>case <expr><name>DW_FORM_flag_present</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <operator>(</operator><name>Dwarf_Bool</name><operator>)</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_attrval_string</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>strp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>at</name> <operator>=</operator> <call><name>_dwarf_attr_find</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_strp</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_string</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_attrval_signed</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>valp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>at</name> <operator>=</operator> <call><name>_dwarf_attr_find</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_data1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s64</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s64</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s64</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data8</name></expr>:</case>
<case>case <expr><name>DW_FORM_sdata</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s64</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_attrval_unsigned</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Die</name></type> <name>die1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>valp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>die1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>at</name> <operator>=</operator> <call><name>_dwarf_attr_find</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
<name>attr</name> <operator>!=</operator> <name>DW_AT_type</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>at</name> <operator>=</operator> <call><name>_dwarf_attr_find</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_abstract_origin</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>at</name> <operator>=</operator> <call><name>_dwarf_attr_find</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_AT_specification</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_ref1</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref2</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref4</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref8</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref_udata</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <operator>(</operator><name>die1</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>die1</name> <operator>=</operator> <call><name>_dwarf_die_find</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dwarf_dealloc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>die</name></expr></argument>, <argument><expr><name>DW_DLA_DIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>die1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>die</name> <operator>=</operator> <name>die1</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_addr</name></expr>:</case>
<case>case <expr><name>DW_FORM_data1</name></expr>:</case>
<case>case <expr><name>DW_FORM_data2</name></expr>:</case>
<case>case <expr><name>DW_FORM_data4</name></expr>:</case>
<case>case <expr><name>DW_FORM_data8</name></expr>:</case>
<case>case <expr><name>DW_FORM_udata</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref1</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref2</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref4</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref8</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref_udata</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>die1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dwarf_dealloc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>die1</name></expr></argument>, <argument><expr><name>DW_DLA_DIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>die1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dwarf_dealloc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>die1</name></expr></argument>, <argument><expr><name>DW_DLA_DIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
