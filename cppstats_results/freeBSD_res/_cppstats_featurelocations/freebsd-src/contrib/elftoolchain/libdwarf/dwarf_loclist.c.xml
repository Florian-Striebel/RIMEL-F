<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_loclist.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_loclist.c 3066 2014-06-06 19:36:06Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_locdesc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ld_lopc</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>ld_lopc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ld_hipc</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>ld_hipc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ld_cents</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>ld_cents</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>ld_cents</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ld_s</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>ld_cents</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Loc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>ld_s</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>ld_s</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ld_s</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ld_cents</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Loc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ld_s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_loclist_n</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>llbuf</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>listlen</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>at</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>at</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>llbuf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>listlen</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_AT_location</name></expr>:</case>
<case>case <expr><name>DW_AT_string_length</name></expr>:</case>
<case>case <expr><name>DW_AT_return_addr</name></expr>:</case>
<case>case <expr><name>DW_AT_data_member_location</name></expr>:</case>
<case>case <expr><name>DW_AT_frame_base</name></expr>:</case>
<case>case <expr><name>DW_AT_segment</name></expr>:</case>
<case>case <expr><name>DW_AT_static_link</name></expr>:</case>
<case>case <expr><name>DW_AT_use_location</name></expr>:</case>
<case>case <expr><name>DW_AT_vtable_elem_location</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_data4</name></expr>:</case>
<case>case <expr><name>DW_FORM_data8</name></expr>:</case>






<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_cu</name><operator>-&gt;</operator><name>cu_version</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>DW_FORM_sec_offset</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_loclist_find</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name><operator>-&gt;</operator><name>die_cu</name></name></expr></argument>,
<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><name>llbuf</name></expr></argument>, <argument><expr><name>listlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DW_DLE_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_FORM_block</name></expr>:</case>
<case>case <expr><name>DW_FORM_block1</name></expr>:</case>
<case>case <expr><name>DW_FORM_block2</name></expr>:</case>
<case>case <expr><name>DW_FORM_block4</name></expr>:</case>
<case>case <expr><name>DW_FORM_exprloc</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_ld</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_loc_add</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>llbuf</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Locdesc</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>llbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>llbuf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Locdesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>llbuf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>llbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>copy_locdesc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>llbuf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_ld</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>llbuf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>llbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>listlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
<default>default:</default>

<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<default>default:</default>

<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_loclist</name><parameter_list>(<parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier><modifier>*</modifier></type><name>llbuf</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>listlen</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier><modifier>*</modifier></type><name>_llbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dwarf_loclist_n</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_llbuf</name></expr></argument>, <argument><expr><name>listlen</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>llbuf</name> <operator>=</operator> <name><name>_llbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>listlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>_llbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ld_s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_llbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ld_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_llbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>_llbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>listlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_loclist_entry</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>hipc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name> <modifier>*</modifier></type><name>lopc</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ptr</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>entry_len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>next_entry</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier></type><name>ld</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>llbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Signed</name></type> <name>listlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hipc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>lopc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>entry_len</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>next_entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_loclist_find</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><call><name>STAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_cu</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>llbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listlen</name></expr></argument>, <argument><expr><name>entry_len</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DW_DLE_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLV_NO_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>hipc</name> <operator>=</operator> <operator>*</operator><name>lopc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>listlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ld</name> <operator>=</operator> <name><name>llbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hipc</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>ld_hipc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lopc</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>ld_lopc</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ld</name><operator>-&gt;</operator><name>ld_lopc</name></name> <operator>&lt;</operator> <operator>*</operator><name>lopc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lopc</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>ld_lopc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ld</name><operator>-&gt;</operator><name>ld_hipc</name></name> <operator>&gt;</operator> <operator>*</operator><name>hipc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>hipc</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>ld_hipc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <call><name>_dwarf_find_section</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">".debug_loc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ds</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>next_entry</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <operator>*</operator><name>entry_len</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_loclist_from_expr</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ptr</name></type> <name>bytes_in</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>bytes_len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier><modifier>*</modifier></type><name>llbuf</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>listlen</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>dwarf_loclist_from_expr_a</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>bytes_in</name></expr></argument>, <argument><expr><name>bytes_len</name></expr></argument>,
<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>, <argument><expr><name>llbuf</name></expr></argument>, <argument><expr><name>listlen</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_loclist_from_expr_a</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ptr</name></type> <name>bytes_in</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>bytes_len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>addr_size</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier><modifier>*</modifier></type><name>llbuf</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>listlen</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Half</name></type> <name>offset_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Small</name></type> <name>version</name></decl>;</decl_stmt>










<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_cu_current</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset_size</name> <operator>=</operator> <ternary><condition><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_cu_current</name><operator>-&gt;</operator><name>cu_length_size</name></name> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_cu_current</name><operator>-&gt;</operator><name>cu_version</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_tu_current</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset_size</name> <operator>=</operator> <ternary><condition><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_tu_current</name><operator>-&gt;</operator><name>cu_length_size</name></name> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_tu_current</name><operator>-&gt;</operator><name>cu_version</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>offset_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><call><name>dwarf_loclist_from_expr_b</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>bytes_in</name></expr></argument>, <argument><expr><name>bytes_len</name></expr></argument>, <argument><expr><name>addr_size</name></expr></argument>,
<argument><expr><name>offset_size</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>llbuf</name></expr></argument>, <argument><expr><name>listlen</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_loclist_from_expr_b</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Ptr</name></type> <name>bytes_in</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>bytes_len</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>addr_size</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>offset_size</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Small</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier><modifier>*</modifier></type><name>llbuf</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Signed</name> <modifier>*</modifier></type><name>listlen</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier></type><name>ld</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dbg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>bytes_in</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>bytes_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name>llbuf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>listlen</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addr_size</name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>addr_size</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset_size</name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>offset_size</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_loc_fill_locexpr</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ld</name></expr></argument>, <argument><expr><name>bytes_in</name></expr></argument>, <argument><expr><name>bytes_len</name></expr></argument>, <argument><expr><name>addr_size</name></expr></argument>,
<argument><expr><name>offset_size</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLV_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>llbuf</name> <operator>=</operator> <name>ld</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>listlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
