<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/libdwarf_str.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libdwarf_str.c 2070 2011-10-27 03:05:32Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_INIT_DWARF_STRTAB_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>_dwarf_strtab_add</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>off</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>string</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_cap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_cap</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>off</name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name><index>[<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name><index>[<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>_dwarf_strtab_get_table</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_strtab_init</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_READ</name> <operator>||</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_RDWR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ds</name> <operator>=</operator> <call><name>_dwarf_find_section</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">".debug_str"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ds</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_cap</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_cap</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_RDWR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_cap</name></name> <operator>=</operator> <name>_INIT_DWARF_STRTAB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_cap</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_strtab_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_RDWR</name> <operator>||</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_mode</name></name> <operator>==</operator> <name>DW_DLC_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_strtab_gen</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_section_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><literal type="string">".debug_str"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name> <operator>&gt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_dwarf_section_free</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab</name></name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name> <operator>=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_strtab_size</name></name></expr>;</expr_stmt>






<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_section_callback</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>SHT_PROGBITS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
