<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/libdwarf_attr.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libdwarf_attr.c 3748 2019-06-28 01:11:13Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>_dwarf_attr_alloc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Attribute</name> <modifier>*</modifier></type><name>atp</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>atp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>at</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Attribute</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>atp</name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_attr_add</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Attribute</name></type> <name>atref</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Attribute</name> <modifier>*</modifier></type><name>atp</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>atref</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Attribute</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>==</operator> <name>DW_AT_name</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_strp</name></expr>:</case>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_name</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_string</name></expr>:</case>
<expr_stmt><expr><name><name>die</name><operator>-&gt;</operator><name>die_name</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>atp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>atp</name> <operator>=</operator> <name>at</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Dwarf_Attribute</name></type>
<name>_dwarf_attr_find</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>at</argument>, <argument>&amp;die-&gt;die_attr</argument>, <argument>at_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>==</operator> <name>attr</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>at</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_attr_init</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>offsetp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dwarf_size</name></decl></parameter>, <parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_AttrDef</name></type> <name>ad</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>form</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indirect</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_Dwarf_Attribute</name></name></type> <name>atref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>atref</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>atref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>at_offset</name></name> <operator>=</operator> <operator>*</operator><name>offsetp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>at_attrib</name></name> <operator>=</operator> <name><name>ad</name><operator>-&gt;</operator><name>ad_attrib</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>at_form</name></name> <operator>=</operator> <ternary><condition><expr><name>indirect</name></expr> ?</condition><then> <expr><name>form</name></expr> </then><else>: <expr><name><name>ad</name><operator>-&gt;</operator><name>ad_form</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>at_indirect</name></name> <operator>=</operator> <name>indirect</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>at_ld</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>form</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_addr</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>,
<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_block</name></expr>:</case>
<case>case <expr><name>DW_FORM_exprloc</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name> <operator>=</operator> <call><name>_dwarf_read_block</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>,
<argument><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_block1</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name> <operator>=</operator> <call><name>_dwarf_read_block</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>,
<argument><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_block2</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name> <operator>=</operator> <call><name>_dwarf_read_block</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>,
<argument><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_block4</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name> <operator>=</operator> <call><name>_dwarf_read_block</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>,
<argument><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data1</name></expr>:</case>
<case>case <expr><name>DW_FORM_flag</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref1</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data2</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref2</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data4</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref4</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data8</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref8</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_indirect</name></expr>:</case>
<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>_dwarf_attr_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><name>dwarf_size</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>die</name></expr></argument>,
<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>DW_FORM_ref_addr</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>cu</name><operator>-&gt;</operator><name>cu_version</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>,
<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>,
<argument><expr><name>dwarf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref_udata</name></expr>:</case>
<case>case <expr><name>DW_FORM_udata</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_sdata</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s64</name> <operator>=</operator> <call><name>_dwarf_read_sleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_sec_offset</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><name>dwarf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_string</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <call><name>_dwarf_read_string</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>,
<argument><expr><name>offsetp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_strp</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>, <argument><expr><name>dwarf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <call><name>_dwarf_strtab_get_table</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref_sig8</name></expr>:</case>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name> <operator>=</operator> <call><name>_dwarf_read_block</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offsetp</name></expr></argument>,
<argument><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_flag_present</name></expr>:</case>

<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_ATTR_FORM_BAD</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DW_DLE_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>form</name> <operator>==</operator> <name>DW_FORM_block</name> <operator>||</operator> <name>form</name> <operator>==</operator> <name>DW_FORM_block1</name> <operator>||</operator>
<name>form</name> <operator>==</operator> <name>DW_FORM_block2</name> <operator>||</operator> <name>form</name> <operator>==</operator> <name>DW_FORM_block4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>at_block</name><operator>.</operator><name>bl_len</name></name> <operator>=</operator> <name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atref</name><operator>.</operator><name>at_block</name><operator>.</operator><name>bl_data</name></name> <operator>=</operator> <name><name>atref</name><operator>.</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_attr_add</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_attr_write</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass2</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>_Dwarf_P_Expr_Entry</name></name> <modifier>*</modifier></type><name>ee</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ds</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>at</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>pass2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>!=</operator> <name>DW_FORM_ref4</name> <operator>&amp;&amp;</operator> <name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>!=</operator> <name>DW_FORM_ref8</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_refdie</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>at</name><operator>-&gt;</operator><name>at_offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>at_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_refdie</name><operator>-&gt;</operator><name>die_offset</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>==</operator> <name>DW_FORM_ref4</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_addr</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_relsym</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_reloc_entry_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><name>dwarf_drt_data_reloc</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_relsym</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_block</name></expr>:</case>
<case>case <expr><name>DW_FORM_block1</name></expr>:</case>
<case>case <expr><name>DW_FORM_block2</name></expr>:</case>
<case>case <expr><name>DW_FORM_block4</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>==</operator> <name>DW_FORM_block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_write_uleb128_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_cap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>==</operator> <name>DW_FORM_block1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>==</operator> <name>DW_FORM_block2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_BLOCK</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_expr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ee</argument>, <argument>&amp;at-&gt;at_expr-&gt;pe_eelist</argument>, <argument>ee_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>ee_loc</name><operator>.</operator><name>lr_atom</name></name> <operator>!=</operator> <name>DW_OP_addr</name> <operator>||</operator> <name><name>ee</name><operator>-&gt;</operator><name>ee_sym</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_reloc_entry_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><name>dwarf_drt_data_reloc</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>,
<argument><expr><name>offset</name> <operator>+</operator> <name><name>ee</name><operator>-&gt;</operator><name>ee_loc</name><operator>.</operator><name>lr_offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ee</name><operator>-&gt;</operator><name>ee_sym</name></name></expr></argument>,
<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>ee_loc</name><operator>.</operator><name>lr_number</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>DW_FORM_data1</name></expr>:</case>
<case>case <expr><name>DW_FORM_flag</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref1</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data2</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref2</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data4</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_relsym</name></name> <operator>||</operator> <name><name>at</name><operator>-&gt;</operator><name>at_relsec</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_reloc_entry_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><name>dwarf_drt_data_reloc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_relsym</name></name></expr></argument>,
<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_relsec</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_data8</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_relsym</name></name> <operator>||</operator> <name><name>at</name><operator>-&gt;</operator><name>at_relsec</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_reloc_entry_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><name>dwarf_drt_data_reloc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_relsym</name></name></expr></argument>,
<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_relsec</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref4</name></expr>:</case>
<case>case <expr><name>DW_FORM_ref8</name></expr>:</case>






<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_refdie</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>at_refdie</name><operator>-&gt;</operator><name>die_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pass2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_offset</name></name> <operator>=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>==</operator> <name>DW_FORM_ref4</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_indirect</name></expr>:</case>

<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_ATTR_FORM_BAD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref_addr</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>at_relsym</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_reloc_entry_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>,
<argument><expr><name>dwarf_drt_data_reloc</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>,
<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_relsym</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_ref_udata</name></expr>:</case>
<case>case <expr><name>DW_FORM_udata</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_sdata</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_SLEB128</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_string</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WRITE_STRING</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_FORM_strp</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_reloc_entry_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>dwarf_drt_data_reloc</name></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><literal type="string">".debug_str"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ATTR_FORM_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>DW_DLE_ATTR_FORM_BAD</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_add_AT_dataref</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>pc_value</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>sym_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>secname</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_P_Attribute</name> <modifier>*</modifier></type><name>atp</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>die</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_data4</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_data8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_relsym</name></name> <operator>=</operator> <name>sym_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_relsec</name></name> <operator>=</operator> <name>secname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <name>pc_value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>atp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>atp</name> <operator>=</operator> <name>at</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_add_string_attr</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Attribute</name> <modifier>*</modifier></type><name>atp</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Half</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>die</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>die</name><operator>-&gt;</operator><name>die_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>atp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_ARGUMENT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_attr_alloc</name><argument_list>(<argument><expr><name>die</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_die</name></name> <operator>=</operator> <name>die</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_attrib</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>at_form</name></name> <operator>=</operator> <name>DW_FORM_strp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_strtab_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <call><name>_dwarf_strtab_get_table</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>atp</name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>die</name><operator>-&gt;</operator><name>die_attr</name></name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>at_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_attr_gen</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Rel_Section</name></type> <name>drs</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass2</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ds</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>die</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>at</argument>, <argument>&amp;die-&gt;die_attr</argument>, <argument>at_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_attr_write</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>drs</name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>pass2</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
