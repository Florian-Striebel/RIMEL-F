<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/libdwarf_abbrev.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libdwarf_abbrev.c 3420 2016-02-27 02:14:05Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>_dwarf_abbrev_add</name><parameter_list>(<parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>children</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>aboff</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Abbrev</name> <modifier>*</modifier></type><name>abp</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Abbrev</name></type> <name>ab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <ternary><condition><expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>cu</name><operator>-&gt;</operator><name>cu_dbg</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ab</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_Abbrev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>ab_entry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>ab_tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>ab_children</name></name> <operator>=</operator> <name>children</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>ab_offset</name></name> <operator>=</operator> <name>aboff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>ab_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>ab_atnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>STAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ab</name><operator>-&gt;</operator><name>ab_attrdef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HASH_ADD</name><argument_list>(<argument><expr><name>ab_hh</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_hash</name></name></expr></argument>, <argument><expr><name>ab_entry</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ab</name><operator>-&gt;</operator><name>ab_entry</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>abp</name> <operator>=</operator> <name>ab</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_attrdef_add</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Abbrev</name></type> <name>ab</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>form</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>adoff</name></decl></parameter>, <parameter><decl><type><name>Dwarf_AttrDef</name> <modifier>*</modifier></type><name>adp</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_AttrDef</name></type> <name>ad</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ab</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_ARGUMENT</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ad</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_Dwarf_AttrDef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>ad_attrib</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>ad_form</name></name> <operator>=</operator> <name>form</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>ad_offset</name></name> <operator>=</operator> <name>adoff</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ab</name><operator>-&gt;</operator><name>ab_attrdef</name></name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name>ad_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>ab_atnum</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>adp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>adp</name> <operator>=</operator> <name>ad</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_abbrev_parse</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Abbrev</name> <modifier>*</modifier></type><name>abp</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>form</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>aboff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>adoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>abp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <call><name>_dwarf_find_section</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><literal type="string">".debug_abbrev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ds</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>offset</name> <operator>&gt;=</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>aboff</name> <operator>=</operator> <operator>*</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_abbrev_add</name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>aboff</name></expr></argument>, <argument><expr><name>abp</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DW_DLE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>abp</name><operator>)</operator><operator>-&gt;</operator><name>ab_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>children</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_abbrev_add</name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>children</name></expr></argument>, <argument><expr><name>aboff</name></expr></argument>,
<argument><expr><name>abp</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name>adoff</name> <operator>=</operator> <operator>*</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>_dwarf_read_uleb128</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>ds_data</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_attrdef_add</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>*</operator><name>abp</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>,
<argument><expr><name>form</name></expr></argument>, <argument><expr><name>adoff</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>abp</name><operator>)</operator><operator>-&gt;</operator><name>ab_length</name></name> <operator>=</operator> <operator>*</operator><name>offset</name> <operator>-</operator> <name>aboff</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_abbrev_find</name><parameter_list>(<parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Abbrev</name> <modifier>*</modifier></type><name>abp</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Abbrev</name></type> <name>ab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Section</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>HASH_FIND</name><argument_list>(<argument><expr><name>ab_hh</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>abp</name> <operator>=</operator> <name>ab</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_loaded</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ds</name> <operator>=</operator> <call><name>_dwarf_find_section</name><argument_list>(<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_dbg</name></name></expr></argument>, <argument><expr><literal type="string">".debug_abbrev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ds</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_offset_cur</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>ds_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_abbrev_parse</name><argument_list>(<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_dbg</name></name></expr></argument>, <argument><expr><name>cu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ab</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ab</name><operator>-&gt;</operator><name>ab_entry</name></name> <operator>==</operator> <name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_offset_cur</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>abp</name> <operator>=</operator> <name>ab</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ab</name><operator>-&gt;</operator><name>ab_entry</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_offset_cur</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_loaded</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>DW_DLE_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_dwarf_abbrev_cleanup</name><parameter_list>(<parameter><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Abbrev</name></type> <name>ab</name></decl>, <decl><type ref="prev"/><name>tab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_AttrDef</name></type> <name>ad</name></decl>, <decl><type ref="prev"/><name>tad</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>HASH_ITER</name><argument_list>(<argument>ab_hh</argument>, <argument>cu-&gt;cu_abbrev_hash</argument>, <argument>ab</argument>, <argument>tab</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>HASH_DELETE</name><argument_list>(<argument><expr><name>ab_hh</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_hash</name></name></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>ad</argument>, <argument>&amp;ab-&gt;ab_attrdef</argument>, <argument>ad_next</argument>, <argument>tad</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ab</name><operator>-&gt;</operator><name>ab_attrdef</name></name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name>_Dwarf_AttrDef</name></expr></argument>,
<argument><expr><name>ad_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_abbrev_gen</name><parameter_list>(<parameter><decl><type><name>Dwarf_P_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Abbrev</name></type> <name>ab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_AttrDef</name></type> <name>ad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_P_Section</name></type> <name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cu</name> <operator>=</operator> <call><name>STAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dbg</name><operator>-&gt;</operator><name>dbg_cu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_dwarf_section_init</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><literal type="string">".debug_abbrev"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
<name>DW_DLE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ab</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_abbrev_hash</name></name></expr>;</init> <condition><expr><name>ab</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ab</name> <operator>=</operator> <name><name>ab</name><operator>-&gt;</operator><name>ab_hh</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>ab</name><operator>-&gt;</operator><name>ab_entry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>ab</name><operator>-&gt;</operator><name>ab_tag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_VALUE</name><argument_list>(<argument><expr><name><name>ab</name><operator>-&gt;</operator><name>ab_children</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ad</argument>, <argument>&amp;ab-&gt;ab_attrdef</argument>, <argument>ad_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>ad_attrib</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>ad_form</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>WRITE_ULEB128</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RCHECK</name><argument_list>(<argument><expr><call><name>_dwarf_section_callback</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>SHT_PROGBITS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>

<label><name>gen_fail</name>:</label>

<expr_stmt><expr><call><name>_dwarf_section_free</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
