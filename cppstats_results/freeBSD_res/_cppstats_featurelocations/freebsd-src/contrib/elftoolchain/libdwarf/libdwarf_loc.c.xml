<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/libdwarf_loc.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libdwarf_loc.c 3070 2014-06-23 03:08:33Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>_dwarf_loc_fill_loc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier></type><name>lbuf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>pointer_size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>offset_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>operand1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>operand2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ps</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pe</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>





<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>pe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>operand1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>operand2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lbuf</name><operator>-&gt;</operator><name>ld_s</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>lr_atom</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lbuf</name><operator>-&gt;</operator><name>ld_s</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>lr_offset</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>ps</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DW_OP_deref</name></expr>:</case>
<case>case <expr><name>DW_OP_reg0</name></expr>:</case>
<case>case <expr><name>DW_OP_reg1</name></expr>:</case>
<case>case <expr><name>DW_OP_reg2</name></expr>:</case>
<case>case <expr><name>DW_OP_reg3</name></expr>:</case>
<case>case <expr><name>DW_OP_reg4</name></expr>:</case>
<case>case <expr><name>DW_OP_reg5</name></expr>:</case>
<case>case <expr><name>DW_OP_reg6</name></expr>:</case>
<case>case <expr><name>DW_OP_reg7</name></expr>:</case>
<case>case <expr><name>DW_OP_reg8</name></expr>:</case>
<case>case <expr><name>DW_OP_reg9</name></expr>:</case>
<case>case <expr><name>DW_OP_reg10</name></expr>:</case>
<case>case <expr><name>DW_OP_reg11</name></expr>:</case>
<case>case <expr><name>DW_OP_reg12</name></expr>:</case>
<case>case <expr><name>DW_OP_reg13</name></expr>:</case>
<case>case <expr><name>DW_OP_reg14</name></expr>:</case>
<case>case <expr><name>DW_OP_reg15</name></expr>:</case>
<case>case <expr><name>DW_OP_reg16</name></expr>:</case>
<case>case <expr><name>DW_OP_reg17</name></expr>:</case>
<case>case <expr><name>DW_OP_reg18</name></expr>:</case>
<case>case <expr><name>DW_OP_reg19</name></expr>:</case>
<case>case <expr><name>DW_OP_reg20</name></expr>:</case>
<case>case <expr><name>DW_OP_reg21</name></expr>:</case>
<case>case <expr><name>DW_OP_reg22</name></expr>:</case>
<case>case <expr><name>DW_OP_reg23</name></expr>:</case>
<case>case <expr><name>DW_OP_reg24</name></expr>:</case>
<case>case <expr><name>DW_OP_reg25</name></expr>:</case>
<case>case <expr><name>DW_OP_reg26</name></expr>:</case>
<case>case <expr><name>DW_OP_reg27</name></expr>:</case>
<case>case <expr><name>DW_OP_reg28</name></expr>:</case>
<case>case <expr><name>DW_OP_reg29</name></expr>:</case>
<case>case <expr><name>DW_OP_reg30</name></expr>:</case>
<case>case <expr><name>DW_OP_reg31</name></expr>:</case>

<case>case <expr><name>DW_OP_lit0</name></expr>:</case>
<case>case <expr><name>DW_OP_lit1</name></expr>:</case>
<case>case <expr><name>DW_OP_lit2</name></expr>:</case>
<case>case <expr><name>DW_OP_lit3</name></expr>:</case>
<case>case <expr><name>DW_OP_lit4</name></expr>:</case>
<case>case <expr><name>DW_OP_lit5</name></expr>:</case>
<case>case <expr><name>DW_OP_lit6</name></expr>:</case>
<case>case <expr><name>DW_OP_lit7</name></expr>:</case>
<case>case <expr><name>DW_OP_lit8</name></expr>:</case>
<case>case <expr><name>DW_OP_lit9</name></expr>:</case>
<case>case <expr><name>DW_OP_lit10</name></expr>:</case>
<case>case <expr><name>DW_OP_lit11</name></expr>:</case>
<case>case <expr><name>DW_OP_lit12</name></expr>:</case>
<case>case <expr><name>DW_OP_lit13</name></expr>:</case>
<case>case <expr><name>DW_OP_lit14</name></expr>:</case>
<case>case <expr><name>DW_OP_lit15</name></expr>:</case>
<case>case <expr><name>DW_OP_lit16</name></expr>:</case>
<case>case <expr><name>DW_OP_lit17</name></expr>:</case>
<case>case <expr><name>DW_OP_lit18</name></expr>:</case>
<case>case <expr><name>DW_OP_lit19</name></expr>:</case>
<case>case <expr><name>DW_OP_lit20</name></expr>:</case>
<case>case <expr><name>DW_OP_lit21</name></expr>:</case>
<case>case <expr><name>DW_OP_lit22</name></expr>:</case>
<case>case <expr><name>DW_OP_lit23</name></expr>:</case>
<case>case <expr><name>DW_OP_lit24</name></expr>:</case>
<case>case <expr><name>DW_OP_lit25</name></expr>:</case>
<case>case <expr><name>DW_OP_lit26</name></expr>:</case>
<case>case <expr><name>DW_OP_lit27</name></expr>:</case>
<case>case <expr><name>DW_OP_lit28</name></expr>:</case>
<case>case <expr><name>DW_OP_lit29</name></expr>:</case>
<case>case <expr><name>DW_OP_lit30</name></expr>:</case>
<case>case <expr><name>DW_OP_lit31</name></expr>:</case>

<case>case <expr><name>DW_OP_dup</name></expr>:</case>
<case>case <expr><name>DW_OP_drop</name></expr>:</case>

<case>case <expr><name>DW_OP_over</name></expr>:</case>

<case>case <expr><name>DW_OP_swap</name></expr>:</case>
<case>case <expr><name>DW_OP_rot</name></expr>:</case>
<case>case <expr><name>DW_OP_xderef</name></expr>:</case>

<case>case <expr><name>DW_OP_abs</name></expr>:</case>
<case>case <expr><name>DW_OP_and</name></expr>:</case>
<case>case <expr><name>DW_OP_div</name></expr>:</case>
<case>case <expr><name>DW_OP_minus</name></expr>:</case>
<case>case <expr><name>DW_OP_mod</name></expr>:</case>
<case>case <expr><name>DW_OP_mul</name></expr>:</case>
<case>case <expr><name>DW_OP_neg</name></expr>:</case>
<case>case <expr><name>DW_OP_not</name></expr>:</case>
<case>case <expr><name>DW_OP_or</name></expr>:</case>
<case>case <expr><name>DW_OP_plus</name></expr>:</case>

<case>case <expr><name>DW_OP_shl</name></expr>:</case>
<case>case <expr><name>DW_OP_shr</name></expr>:</case>
<case>case <expr><name>DW_OP_shra</name></expr>:</case>
<case>case <expr><name>DW_OP_xor</name></expr>:</case>

<case>case <expr><name>DW_OP_eq</name></expr>:</case>
<case>case <expr><name>DW_OP_ge</name></expr>:</case>
<case>case <expr><name>DW_OP_gt</name></expr>:</case>
<case>case <expr><name>DW_OP_le</name></expr>:</case>
<case>case <expr><name>DW_OP_lt</name></expr>:</case>
<case>case <expr><name>DW_OP_ne</name></expr>:</case>

<case>case <expr><name>DW_OP_nop</name></expr>:</case>
<case>case <expr><name>DW_OP_push_object_address</name></expr>:</case>
<case>case <expr><name>DW_OP_form_tls_address</name></expr>:</case>
<case>case <expr><name>DW_OP_call_frame_cfa</name></expr>:</case>
<case>case <expr><name>DW_OP_stack_value</name></expr>:</case>
<case>case <expr><name>DW_OP_GNU_push_tls_address</name></expr>:</case>
<case>case <expr><name>DW_OP_GNU_uninit</name></expr>:</case>
<break>break;</break>


<case>case <expr><name>DW_OP_const1u</name></expr>:</case>
<case>case <expr><name>DW_OP_pick</name></expr>:</case>
<case>case <expr><name>DW_OP_deref_size</name></expr>:</case>
<case>case <expr><name>DW_OP_xderef_size</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DW_OP_const1s</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_call2</name></expr>:</case>
<case>case <expr><name>DW_OP_const2u</name></expr>:</case>
<case>case <expr><name>DW_OP_bra</name></expr>:</case>
<case>case <expr><name>DW_OP_skip</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DW_OP_const2s</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_call4</name></expr>:</case>
<case>case <expr><name>DW_OP_const4u</name></expr>:</case>
<case>case <expr><name>DW_OP_GNU_parameter_ref</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DW_OP_const4s</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_const8u</name></expr>:</case>
<case>case <expr><name>DW_OP_const8s</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_constu</name></expr>:</case>
<case>case <expr><name>DW_OP_plus_uconst</name></expr>:</case>
<case>case <expr><name>DW_OP_regx</name></expr>:</case>
<case>case <expr><name>DW_OP_piece</name></expr>:</case>
<case>case <expr><name>DW_OP_GNU_deref_type</name></expr>:</case>
<case>case <expr><name>DW_OP_GNU_convert</name></expr>:</case>
<case>case <expr><name>DW_OP_GNU_reinterpret</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_consts</name></expr>:</case>
<case>case <expr><name>DW_OP_breg0</name></expr>:</case>
<case>case <expr><name>DW_OP_breg1</name></expr>:</case>
<case>case <expr><name>DW_OP_breg2</name></expr>:</case>
<case>case <expr><name>DW_OP_breg3</name></expr>:</case>
<case>case <expr><name>DW_OP_breg4</name></expr>:</case>
<case>case <expr><name>DW_OP_breg5</name></expr>:</case>
<case>case <expr><name>DW_OP_breg6</name></expr>:</case>
<case>case <expr><name>DW_OP_breg7</name></expr>:</case>
<case>case <expr><name>DW_OP_breg8</name></expr>:</case>
<case>case <expr><name>DW_OP_breg9</name></expr>:</case>
<case>case <expr><name>DW_OP_breg10</name></expr>:</case>
<case>case <expr><name>DW_OP_breg11</name></expr>:</case>
<case>case <expr><name>DW_OP_breg12</name></expr>:</case>
<case>case <expr><name>DW_OP_breg13</name></expr>:</case>
<case>case <expr><name>DW_OP_breg14</name></expr>:</case>
<case>case <expr><name>DW_OP_breg15</name></expr>:</case>
<case>case <expr><name>DW_OP_breg16</name></expr>:</case>
<case>case <expr><name>DW_OP_breg17</name></expr>:</case>
<case>case <expr><name>DW_OP_breg18</name></expr>:</case>
<case>case <expr><name>DW_OP_breg19</name></expr>:</case>
<case>case <expr><name>DW_OP_breg20</name></expr>:</case>
<case>case <expr><name>DW_OP_breg21</name></expr>:</case>
<case>case <expr><name>DW_OP_breg22</name></expr>:</case>
<case>case <expr><name>DW_OP_breg23</name></expr>:</case>
<case>case <expr><name>DW_OP_breg24</name></expr>:</case>
<case>case <expr><name>DW_OP_breg25</name></expr>:</case>
<case>case <expr><name>DW_OP_breg26</name></expr>:</case>
<case>case <expr><name>DW_OP_breg27</name></expr>:</case>
<case>case <expr><name>DW_OP_breg28</name></expr>:</case>
<case>case <expr><name>DW_OP_breg29</name></expr>:</case>
<case>case <expr><name>DW_OP_breg30</name></expr>:</case>
<case>case <expr><name>DW_OP_breg31</name></expr>:</case>
<case>case <expr><name>DW_OP_fbreg</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name>_dwarf_decode_sleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>




<case>case <expr><name>DW_OP_bit_piece</name></expr>:</case>
<case>case <expr><name>DW_OP_GNU_regval_type</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand2</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>





<case>case <expr><name>DW_OP_bregx</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand2</name> <operator>=</operator> <call><name>_dwarf_decode_sleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>









<case>case <expr><name>DW_OP_implicit_value</name></expr>:</case>
<case>case <expr><name>DW_OP_GNU_entry_value</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand2</name> <operator>=</operator> <operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>operand1</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_addr</name></expr>:</case>
<case>case <expr><name>DW_OP_GNU_addr_index</name></expr>:</case>
<case>case <expr><name>DW_OP_GNU_const_index</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>pointer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_call_ref</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>offset_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>






<case>case <expr><name>DW_OP_GNU_encoded_addr</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>pointer_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>








<case>case <expr><name>DW_OP_GNU_implicit_pointer</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>pointer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name><name>dbg</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>offset_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>operand2</name> <operator>=</operator> <call><name>_dwarf_decode_sleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>






<case>case <expr><name>DW_OP_GNU_const_type</name></expr>:</case>
<expr_stmt><expr><name>operand1</name> <operator>=</operator> <call><name>_dwarf_decode_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operand2</name> <operator>=</operator> <operator>(</operator><name>Dwarf_Unsigned</name><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
<break>break;</break>


<default>default:</default>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>lbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lbuf</name><operator>-&gt;</operator><name>ld_s</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>lr_number</name> <operator>=</operator> <name>operand1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lbuf</name><operator>-&gt;</operator><name>ld_s</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>lr_number2</name> <operator>=</operator> <name>operand2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>done</name>:</label>
<return>return <expr><operator>(</operator><name>count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_loc_expr_add_atom</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><name>Dwarf_Small</name></type> <name>atom</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>operand1</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Unsigned</name></type> <name>operand2</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pe</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>out</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pe</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>atom</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DW_OP_deref</name></expr>:</case>
<case>case <expr><name>DW_OP_reg0</name></expr>:</case>
<case>case <expr><name>DW_OP_reg1</name></expr>:</case>
<case>case <expr><name>DW_OP_reg2</name></expr>:</case>
<case>case <expr><name>DW_OP_reg3</name></expr>:</case>
<case>case <expr><name>DW_OP_reg4</name></expr>:</case>
<case>case <expr><name>DW_OP_reg5</name></expr>:</case>
<case>case <expr><name>DW_OP_reg6</name></expr>:</case>
<case>case <expr><name>DW_OP_reg7</name></expr>:</case>
<case>case <expr><name>DW_OP_reg8</name></expr>:</case>
<case>case <expr><name>DW_OP_reg9</name></expr>:</case>
<case>case <expr><name>DW_OP_reg10</name></expr>:</case>
<case>case <expr><name>DW_OP_reg11</name></expr>:</case>
<case>case <expr><name>DW_OP_reg12</name></expr>:</case>
<case>case <expr><name>DW_OP_reg13</name></expr>:</case>
<case>case <expr><name>DW_OP_reg14</name></expr>:</case>
<case>case <expr><name>DW_OP_reg15</name></expr>:</case>
<case>case <expr><name>DW_OP_reg16</name></expr>:</case>
<case>case <expr><name>DW_OP_reg17</name></expr>:</case>
<case>case <expr><name>DW_OP_reg18</name></expr>:</case>
<case>case <expr><name>DW_OP_reg19</name></expr>:</case>
<case>case <expr><name>DW_OP_reg20</name></expr>:</case>
<case>case <expr><name>DW_OP_reg21</name></expr>:</case>
<case>case <expr><name>DW_OP_reg22</name></expr>:</case>
<case>case <expr><name>DW_OP_reg23</name></expr>:</case>
<case>case <expr><name>DW_OP_reg24</name></expr>:</case>
<case>case <expr><name>DW_OP_reg25</name></expr>:</case>
<case>case <expr><name>DW_OP_reg26</name></expr>:</case>
<case>case <expr><name>DW_OP_reg27</name></expr>:</case>
<case>case <expr><name>DW_OP_reg28</name></expr>:</case>
<case>case <expr><name>DW_OP_reg29</name></expr>:</case>
<case>case <expr><name>DW_OP_reg30</name></expr>:</case>
<case>case <expr><name>DW_OP_reg31</name></expr>:</case>

<case>case <expr><name>DW_OP_lit0</name></expr>:</case>
<case>case <expr><name>DW_OP_lit1</name></expr>:</case>
<case>case <expr><name>DW_OP_lit2</name></expr>:</case>
<case>case <expr><name>DW_OP_lit3</name></expr>:</case>
<case>case <expr><name>DW_OP_lit4</name></expr>:</case>
<case>case <expr><name>DW_OP_lit5</name></expr>:</case>
<case>case <expr><name>DW_OP_lit6</name></expr>:</case>
<case>case <expr><name>DW_OP_lit7</name></expr>:</case>
<case>case <expr><name>DW_OP_lit8</name></expr>:</case>
<case>case <expr><name>DW_OP_lit9</name></expr>:</case>
<case>case <expr><name>DW_OP_lit10</name></expr>:</case>
<case>case <expr><name>DW_OP_lit11</name></expr>:</case>
<case>case <expr><name>DW_OP_lit12</name></expr>:</case>
<case>case <expr><name>DW_OP_lit13</name></expr>:</case>
<case>case <expr><name>DW_OP_lit14</name></expr>:</case>
<case>case <expr><name>DW_OP_lit15</name></expr>:</case>
<case>case <expr><name>DW_OP_lit16</name></expr>:</case>
<case>case <expr><name>DW_OP_lit17</name></expr>:</case>
<case>case <expr><name>DW_OP_lit18</name></expr>:</case>
<case>case <expr><name>DW_OP_lit19</name></expr>:</case>
<case>case <expr><name>DW_OP_lit20</name></expr>:</case>
<case>case <expr><name>DW_OP_lit21</name></expr>:</case>
<case>case <expr><name>DW_OP_lit22</name></expr>:</case>
<case>case <expr><name>DW_OP_lit23</name></expr>:</case>
<case>case <expr><name>DW_OP_lit24</name></expr>:</case>
<case>case <expr><name>DW_OP_lit25</name></expr>:</case>
<case>case <expr><name>DW_OP_lit26</name></expr>:</case>
<case>case <expr><name>DW_OP_lit27</name></expr>:</case>
<case>case <expr><name>DW_OP_lit28</name></expr>:</case>
<case>case <expr><name>DW_OP_lit29</name></expr>:</case>
<case>case <expr><name>DW_OP_lit30</name></expr>:</case>
<case>case <expr><name>DW_OP_lit31</name></expr>:</case>

<case>case <expr><name>DW_OP_dup</name></expr>:</case>
<case>case <expr><name>DW_OP_drop</name></expr>:</case>

<case>case <expr><name>DW_OP_over</name></expr>:</case>

<case>case <expr><name>DW_OP_swap</name></expr>:</case>
<case>case <expr><name>DW_OP_rot</name></expr>:</case>
<case>case <expr><name>DW_OP_xderef</name></expr>:</case>

<case>case <expr><name>DW_OP_abs</name></expr>:</case>
<case>case <expr><name>DW_OP_and</name></expr>:</case>
<case>case <expr><name>DW_OP_div</name></expr>:</case>
<case>case <expr><name>DW_OP_minus</name></expr>:</case>
<case>case <expr><name>DW_OP_mod</name></expr>:</case>
<case>case <expr><name>DW_OP_mul</name></expr>:</case>
<case>case <expr><name>DW_OP_neg</name></expr>:</case>
<case>case <expr><name>DW_OP_not</name></expr>:</case>
<case>case <expr><name>DW_OP_or</name></expr>:</case>
<case>case <expr><name>DW_OP_plus</name></expr>:</case>

<case>case <expr><name>DW_OP_shl</name></expr>:</case>
<case>case <expr><name>DW_OP_shr</name></expr>:</case>
<case>case <expr><name>DW_OP_shra</name></expr>:</case>
<case>case <expr><name>DW_OP_xor</name></expr>:</case>

<case>case <expr><name>DW_OP_eq</name></expr>:</case>
<case>case <expr><name>DW_OP_ge</name></expr>:</case>
<case>case <expr><name>DW_OP_gt</name></expr>:</case>
<case>case <expr><name>DW_OP_le</name></expr>:</case>
<case>case <expr><name>DW_OP_lt</name></expr>:</case>
<case>case <expr><name>DW_OP_ne</name></expr>:</case>

<case>case <expr><name>DW_OP_nop</name></expr>:</case>
<case>case <expr><name>DW_OP_GNU_push_tls_address</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_const1u</name></expr>:</case>
<case>case <expr><name>DW_OP_const1s</name></expr>:</case>
<case>case <expr><name>DW_OP_pick</name></expr>:</case>
<case>case <expr><name>DW_OP_deref_size</name></expr>:</case>
<case>case <expr><name>DW_OP_xderef_size</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>operand1</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_const2u</name></expr>:</case>
<case>case <expr><name>DW_OP_const2s</name></expr>:</case>
<case>case <expr><name>DW_OP_bra</name></expr>:</case>
<case>case <expr><name>DW_OP_skip</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>operand1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_const4u</name></expr>:</case>
<case>case <expr><name>DW_OP_const4s</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>operand1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_const8u</name></expr>:</case>
<case>case <expr><name>DW_OP_const8s</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>operand1</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_constu</name></expr>:</case>
<case>case <expr><name>DW_OP_plus_uconst</name></expr>:</case>
<case>case <expr><name>DW_OP_regx</name></expr>:</case>
<case>case <expr><name>DW_OP_piece</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>_dwarf_write_uleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>operand1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_consts</name></expr>:</case>
<case>case <expr><name>DW_OP_breg0</name></expr>:</case>
<case>case <expr><name>DW_OP_breg1</name></expr>:</case>
<case>case <expr><name>DW_OP_breg2</name></expr>:</case>
<case>case <expr><name>DW_OP_breg3</name></expr>:</case>
<case>case <expr><name>DW_OP_breg4</name></expr>:</case>
<case>case <expr><name>DW_OP_breg5</name></expr>:</case>
<case>case <expr><name>DW_OP_breg6</name></expr>:</case>
<case>case <expr><name>DW_OP_breg7</name></expr>:</case>
<case>case <expr><name>DW_OP_breg8</name></expr>:</case>
<case>case <expr><name>DW_OP_breg9</name></expr>:</case>
<case>case <expr><name>DW_OP_breg10</name></expr>:</case>
<case>case <expr><name>DW_OP_breg11</name></expr>:</case>
<case>case <expr><name>DW_OP_breg12</name></expr>:</case>
<case>case <expr><name>DW_OP_breg13</name></expr>:</case>
<case>case <expr><name>DW_OP_breg14</name></expr>:</case>
<case>case <expr><name>DW_OP_breg15</name></expr>:</case>
<case>case <expr><name>DW_OP_breg16</name></expr>:</case>
<case>case <expr><name>DW_OP_breg17</name></expr>:</case>
<case>case <expr><name>DW_OP_breg18</name></expr>:</case>
<case>case <expr><name>DW_OP_breg19</name></expr>:</case>
<case>case <expr><name>DW_OP_breg20</name></expr>:</case>
<case>case <expr><name>DW_OP_breg21</name></expr>:</case>
<case>case <expr><name>DW_OP_breg22</name></expr>:</case>
<case>case <expr><name>DW_OP_breg23</name></expr>:</case>
<case>case <expr><name>DW_OP_breg24</name></expr>:</case>
<case>case <expr><name>DW_OP_breg25</name></expr>:</case>
<case>case <expr><name>DW_OP_breg26</name></expr>:</case>
<case>case <expr><name>DW_OP_breg27</name></expr>:</case>
<case>case <expr><name>DW_OP_breg28</name></expr>:</case>
<case>case <expr><name>DW_OP_breg29</name></expr>:</case>
<case>case <expr><name>DW_OP_breg30</name></expr>:</case>
<case>case <expr><name>DW_OP_breg31</name></expr>:</case>
<case>case <expr><name>DW_OP_fbreg</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>_dwarf_write_sleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>operand1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<break>break;</break>





<case>case <expr><name>DW_OP_bregx</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>_dwarf_write_uleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>operand1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>_dwarf_write_sleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>operand2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>DW_OP_addr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>dbg</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>operand1</name></expr></argument>, <argument><expr><name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dbg</name><operator>-&gt;</operator><name>dbg_pointer_size</name></name></expr>;</expr_stmt>
<break>break;</break>


<default>default:</default>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_LOC_EXPR_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_LOC_EXPR_BAD</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>out</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_loc_fill_locdesc</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier></type><name>llbuf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>in_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>pointer_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>offset_size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>llbuf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>in_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>=</operator> <call><name>_dwarf_loc_fill_loc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pointer_size</name></expr></argument>, <argument><expr><name>offset_size</name></expr></argument>,
<argument><expr><name>version</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_LOC_EXPR_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_LOC_EXPR_BAD</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>llbuf</name><operator>-&gt;</operator><name>ld_cents</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>llbuf</name><operator>-&gt;</operator><name>ld_s</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Loc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>_dwarf_loc_fill_loc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>llbuf</name></expr></argument>, <argument><expr><name>pointer_size</name></expr></argument>, <argument><expr><name>offset_size</name></expr></argument>,
<argument><expr><name>version</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DW_DLE_NONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_loc_fill_locexpr</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_llbuf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>in_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>pointer_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>offset_size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Locdesc</name> <modifier>*</modifier></type><name>llbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>llbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dwarf_Locdesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DWARF_SET_ERROR</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>DW_DLE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>DW_DLE_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>llbuf</name><operator>-&gt;</operator><name>ld_lopc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>llbuf</name><operator>-&gt;</operator><name>ld_hipc</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>llbuf</name><operator>-&gt;</operator><name>ld_s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_loc_fill_locdesc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>llbuf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>pointer_size</name></expr></argument>,
<argument><expr><name>offset_size</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLE_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>llbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_llbuf</name> <operator>=</operator> <name>llbuf</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_dwarf_loc_add</name><parameter_list>(<parameter><decl><type><name>Dwarf_Die</name></type> <name>die</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Attribute</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Error</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_CU</name></type> <name>cu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>at_ld</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cu</name> <operator>=</operator> <name><name>die</name><operator>-&gt;</operator><name>die_cu</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dbg</name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cu_dbg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_dwarf_loc_fill_locexpr</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>at_ld</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8p</name></expr></argument>,
<argument><expr><name><name>at</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_pointer_size</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_length_size</name></name> <operator>==</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>cu_version</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
