<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libdwarf/dwarf_dump.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libdwarf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: dwarf_dump.c 3749 2019-06-28 01:10:44Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>dwarf_get_ACCESS_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>access</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>access</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_ACCESS_public</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ACCESS_public"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ACCESS_protected</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ACCESS_protected"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ACCESS_private</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ACCESS_private"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_AT_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_AT_abstract_origin</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_abstract_origin"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_accessibility</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_accessibility"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_address_class</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_address_class"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_artificial</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_artificial"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_allocated</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_allocated"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_associated</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_associated"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_base_types</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_base_types"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_binary_scale</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_binary_scale"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_bit_offset</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_bit_offset"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_bit_size</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_bit_size"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_bit_stride</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_bit_stride"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_byte_size</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_byte_size"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_byte_stride</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_byte_stride"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_calling_convention</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_calling_convention"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_common_reference</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_common_reference"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_comp_dir</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_comp_dir"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_const_expr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_const_expr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_const_value</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_const_value"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_containing_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_containing_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_count</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_count"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_call_column</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_call_column"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_call_file</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_call_file"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_call_line</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_call_line"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_data_bit_offset</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_data_bit_offset"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_data_location</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_data_location"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_data_member_location</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_data_member_location"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_decl_column</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_decl_column"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_decl_file</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_decl_file"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_decl_line</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_decl_line"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_declaration</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_declaration"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_default_value</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_default_value"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_decimal_scale</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_decimal_scale"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_decimal_sign</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_decimal_sign"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_description</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_description"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_digit_count</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_digit_count"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_discr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_discr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_discr_list</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_discr_list"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_discr_value</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_discr_value"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_element_list</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_element_list"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_encoding</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_encoding"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_enum_class</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_enum_class"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_external</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_external"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_entry_pc</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_entry_pc"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_extension</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_extension"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_explicit</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_explicit"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_endianity</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_endianity"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_elemental</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_elemental"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_frame_base</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_frame_base"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_friend</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_friend"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_high_pc</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_high_pc"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_hi_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_hi_user"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_identifier_case</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_identifier_case"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_import</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_import"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_inline</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_inline"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_is_optional</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_is_optional"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_language</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_language"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_linkage_name</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_linkage_name"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_lo_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_lo_user"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_location</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_location"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_low_pc</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_low_pc"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_lower_bound</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_lower_bound"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_macro_info</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_macro_info"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_main_subprogram</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_main_subprogram"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_mutable</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_mutable"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_member</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_member"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_name</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_name"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_namelist_item</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_namelist_item"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_ordering</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_ordering"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_object_pointer</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_object_pointer"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_priority</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_priority"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_producer</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_producer"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_prototyped</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_prototyped"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_picture_string</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_picture_string"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_pure</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_pure"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_return_addr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_return_addr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_ranges</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_ranges"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_recursive</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_recursive"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_segment</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_segment"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_sibling</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_sibling"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_signature</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_signature"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_specification</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_specification"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_start_scope</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_start_scope"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_static_link</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_static_link"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_stmt_list</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_stmt_list"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_string_length</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_string_length"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_subscr_data</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_subscr_data"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_small</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_small"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_trampoline</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_trampoline"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_threads_scaled</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_threads_scaled"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_upper_bound</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_upper_bound"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_use_location</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_use_location"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_use_UTF8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_use_UTF8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_variable_parameter</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_variable_parameter"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_virtuality</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_virtuality"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_visibility</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_visibility"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_vtable_elem_location</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_vtable_elem_location"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_sf_names</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_sf_names"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_src_info</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_src_info"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_mac_info</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_mac_info"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_src_coords</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_src_coords"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_body_begin</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_body_begin"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_body_end</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_body_end"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_fde</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_fde"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_loop_begin</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_loop_begin"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_tail_loop_begin</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_tail_loop_begin"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_epilog_begin</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_epilog_begin"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_loop_unroll_factor</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_loop_unroll_factor"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_software_pipeline_depth</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_software_pipeline_depth"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_linkage_name</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_linkage_name"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_stride</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_stride"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_abstract_name</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_abstract_name"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_clone_origin</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_clone_origin"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_has_inlines</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_has_inlines"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_stride_byte</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_stride_byte"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_stride_elem</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_stride_elem"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_ptr_dopetype</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_ptr_dopetype"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_allocatable_dopetype</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_allocatable_dopetype"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_assumed_shape_dopetype</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_assumed_shape_dopetype"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_MIPS_assumed_size</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_MIPS_assumed_size"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_vector</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_vector"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_guarded_by</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_guarded_by"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_pt_guarded_by</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_pt_guarded_by"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_guarded</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_guarded"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_pt_guarded</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_pt_guarded"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_locks_excluded</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_locks_excluded"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_exclusive_locks_required</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_exclusive_locks_required"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_shared_locks_required</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_shared_locks_required"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_odr_signature</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_odr_signature"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_template_name</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_template_name"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_call_site_value</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_call_site_value"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_call_site_data_value</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_call_site_data_value"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_call_site_target</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_call_site_target"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_call_site_target_clobbered</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_call_site_target_clobbered"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_tail_call</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_tail_call"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_all_tail_call_sites</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_all_tail_call_sites"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_all_call_sites</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_all_call_sites"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_GNU_all_source_call_sites</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_GNU_all_source_call_sites"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_optimized</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_optimized"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_flags</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_flags"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_isa</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_isa"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_block</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_block"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_major_runtime_vers</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_major_runtime_vers"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_runtime_class</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_runtime_class"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_omit_frame_ptr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_omit_frame_ptr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_property_name</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_property_name"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_property_getter</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_property_getter"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_property_setter</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_property_setter"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_property_attribute</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_property_attribute"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_objc_complete_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_objc_complete_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_AT_APPLE_property</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_AT_APPLE_property"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_ATE_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>ate</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_ATE_address</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_address"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_boolean</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_boolean"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_complex_float</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_complex_float"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_float</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_float"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_signed</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_signed"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_signed_char</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_signed_char"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_unsigned</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_unsigned"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_unsigned_char</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_unsigned_char"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_imaginary_float</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_imaginary_float"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_packed_decimal</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_packed_decimal"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_numeric_string</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_numeric_string"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_edited</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_edited"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_signed_fixed</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_signed_fixed"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_unsigned_fixed</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_unsigned_fixed"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_decimal_float</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_decimal_float"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_lo_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_lo_user"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ATE_hi_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ATE_hi_user"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_CC_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>cc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_CC_normal</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CC_normal"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CC_program</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CC_program"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CC_nocall</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CC_nocall"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CC_lo_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CC_lo_user"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CC_hi_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CC_hi_user"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_CFA_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>cfa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>cfa</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_CFA_advance_loc</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_advance_loc"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_offset</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_offset"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_restore</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_restore"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_nop</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_nop"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_set_loc</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_set_loc"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_advance_loc1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_advance_loc2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_advance_loc4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_advance_loc4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_offset_extended</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_offset_extended"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_restore_extended</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_restore_extended"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_undefined</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_undefined"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_same_value</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_same_value"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_register</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_register"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_remember_state</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_remember_state"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_restore_state</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_restore_state"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_def_cfa"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_register</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_def_cfa_register"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_offset</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_def_cfa_offset"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_expression</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_def_cfa_expression"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_expression</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_expression"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_offset_extended_sf</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_offset_extended_sf"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_sf</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_def_cfa_sf"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_def_cfa_offset_sf</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_def_cfa_offset_sf"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_val_offset</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_val_offset"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_val_offset_sf</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_val_offset_sf"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_val_expression</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_val_expression"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_lo_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_lo_user"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CFA_high_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CFA_high_user"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_CHILDREN_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>children</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>children</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_CHILDREN_no</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CHILDREN_no"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_CHILDREN_yes</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_CHILDREN_yes"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_FORM_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>form</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>form</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_FORM_addr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_addr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_block</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_block"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_block1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_block1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_block2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_block2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_block4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_block4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_data1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_data1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_data2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_data2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_data4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_data4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_data8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_data8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_exprloc</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_exprloc"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_flag</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_flag"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_flag_present</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_flag_present"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_indirect</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_indirect"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_ref1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_ref1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_ref2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_ref2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_ref4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_ref4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_ref8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_ref8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_ref_addr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_ref_addr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_ref_sig8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_ref_sig8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_ref_udata</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_ref_udata"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_sdata</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_sdata"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_sec_offset</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_sec_offset"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_string</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_string"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_strp</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_strp"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_FORM_udata</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_FORM_udata"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_DS_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ds</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_DS_unsigned</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_DS_unsigned"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_DS_leading_overpunch</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_DS_leading_overpunch"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_DS_trailing_overpunch</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_DS_trailing_overpunch"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_DS_leading_separate</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_DS_leading_separate"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_DS_trailing_separate</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_DS_trailing_separate"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_DSC_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>dsc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>dsc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_DSC_label</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_DSC_label"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_DSC_range</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_DSC_range"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_EH_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>eh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>eh</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_EH_PE_absptr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_absptr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_uleb128</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_uleb128"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_udata2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_udata2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_udata4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_udata4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_udata8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_udata8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_sleb128</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_sleb128"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_sdata2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_sdata2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_sdata4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_sdata4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_sdata8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_sdata8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_pcrel</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_pcrel"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_textrel</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_textrel"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_datarel</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_datarel"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_funcrel</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_funcrel"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_aligned</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_aligned"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_EH_PE_omit</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_EH_PE_omit"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_END_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_END_default</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_END_default"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_END_big</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_END_big"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_END_little</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_END_little"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_END_lo_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_END_lo_user"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_END_high_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_END_high_user"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_ID_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_ID_case_sensitive</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ID_case_sensitive"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ID_up_case</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ID_up_case"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ID_down_case</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ID_down_case"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ID_case_insensitive</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ID_case_insensitive"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_INL_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>inl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>inl</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_INL_not_inlined</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_INL_not_inlined"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_INL_inlined</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_INL_inlined"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_INL_declared_not_inlined</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_INL_declared_not_inlined"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_INL_declared_inlined</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_INL_declared_inlined"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_LANG_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>lang</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>lang</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_LANG_C89</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_C89"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_C</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_C"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Ada83</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Ada83"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_C_plus_plus</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_C_plus_plus"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Cobol74</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Cobol74"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Cobol85</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Cobol85"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Fortran77</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Fortran77"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Fortran90</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Fortran90"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Pascal83</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Pascal83"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Modula2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Modula2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Java</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Java"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_C99</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_C99"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Ada95</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Ada95"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Fortran95</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Fortran95"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_PLI</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_PLI"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_ObjC</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_ObjC"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_ObjC_plus_plus</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_ObjC_plus_plus"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_UPC</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_UPC"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_D</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_D"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Python</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Python"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_OpenCL</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_OpenCL"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Go</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Go"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Modula3</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Modula3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Haskell</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Haskell"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_C_plus_plus_03</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_C_plus_plus_03"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_C_plus_plus_11</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_C_plus_plus_11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_OCaml</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_OCaml"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Rust</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Rust"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_C11</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_C11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Swift</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Swift"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Julia</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Julia"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Dylan</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Dylan"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_C_plus_plus_14</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_C_plus_plus_14"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Fortran03</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Fortran03"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Fortran08</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Fortran08"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_RenderScript</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_RenderScript"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_BLISS</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_BLISS"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_lo_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_lo_user"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_Mips_Assembler</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_Mips_Assembler"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LANG_hi_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LANG_hi_user"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_LNE_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>lne</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>lne</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_LNE_end_sequence</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNE_end_sequence"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNE_set_address</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNE_set_address"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNE_define_file</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNE_define_file"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNE_lo_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNE_lo_user"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNE_hi_user</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNE_hi_user"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_LNS_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>lns</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>lns</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_LNS_copy</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_copy"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNS_advance_pc</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_advance_pc"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNS_advance_line</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_advance_line"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNS_set_file</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_set_file"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNS_set_column</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_set_column"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNS_negate_stmt</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_negate_stmt"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNS_set_basic_block</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_set_basic_block"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNS_const_add_pc</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_const_add_pc"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNS_fixed_advance_pc</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_fixed_advance_pc"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNS_set_prologue_end</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_set_prologue_end"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNS_set_epilogue_begin</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_set_epilogue_begin"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_LNS_set_isa</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_LNS_set_isa"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_MACINFO_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mi</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_MACINFO_define</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_MACINFO_define"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_MACINFO_undef</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_MACINFO_undef"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_MACINFO_start_file</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_MACINFO_start_file"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_MACINFO_end_file</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_MACINFO_end_file"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_MACINFO_vendor_ext</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_MACINFO_vendor_ext"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_OP_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_OP_deref</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_deref"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg0</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg3</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg5</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg5"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg6</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg6"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg7</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg7"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg9</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg9"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg10</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg10"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg11</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg12</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg12"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg13</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg13"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg14</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg14"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg15</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg15"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg16</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg16"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg17</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg17"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg18</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg18"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg19</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg19"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg20</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg20"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg21</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg21"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg22</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg22"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg23</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg23"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg24</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg24"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg25</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg25"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg26</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg26"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg27</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg27"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg28</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg28"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg29</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg29"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg30</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg30"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_reg31</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_reg31"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit0</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit3</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit5</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit5"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit6</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit6"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit7</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit7"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit9</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit9"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit10</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit10"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit11</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit12</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit12"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit13</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit13"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit14</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit14"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit15</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit15"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit16</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit16"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit17</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit17"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit18</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit18"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit19</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit19"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit20</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit20"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit21</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit21"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit22</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit22"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit23</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit23"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit24</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit24"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit25</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit25"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit26</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit26"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit27</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit27"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit28</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit28"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit29</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit29"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit30</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit30"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lit31</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lit31"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_dup</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_dup"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_drop</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_drop"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_over</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_over"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_swap</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_swap"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_rot</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_rot"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_xderef</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_xderef"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_abs</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_abs"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_and</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_and"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_div</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_div"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_minus</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_minus"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_mod</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_mod"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_mul</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_mul"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_neg</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_neg"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_not</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_not"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_or</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_or"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_plus</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_plus"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_shl</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_shl"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_shr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_shr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_shra</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_shra"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_xor</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_xor"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_eq</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_eq"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_ge</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_ge"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_gt</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_gt"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_le</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_le"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_lt</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_lt"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_ne</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_ne"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_nop</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_nop"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_const1u</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_const1u"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_const1s</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_const1s"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_pick</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_pick"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_deref_size</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_deref_size"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_xderef_size</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_xderef_size"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_const2u</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_const2u"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_const2s</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_const2s"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_bra</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_bra"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_skip</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_skip"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_const4u</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_const4u"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_const4s</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_const4s"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_const8u</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_const8u"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_const8s</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_const8s"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_constu</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_constu"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_plus_uconst</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_plus_uconst"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_regx</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_regx"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_piece</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_piece"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_consts</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_consts"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg0</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg0"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg1"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg3</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg3"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg5</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg5"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg6</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg6"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg7</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg7"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg8</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg8"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg9</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg9"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg10</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg10"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg11</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg11"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg12</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg12"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg13</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg13"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg14</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg14"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg15</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg15"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg16</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg16"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg17</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg17"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg18</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg18"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg19</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg19"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg20</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg20"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg21</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg21"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg22</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg22"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg23</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg23"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg24</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg24"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg25</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg25"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg26</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg26"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg27</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg27"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg28</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg28"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg29</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg29"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg30</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg30"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_breg31</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_breg31"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_fbreg</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_fbreg"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_bregx</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_bregx"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_addr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_addr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_push_object_address</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_push_object_address"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_call2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_call2"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_call4</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_call4"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_call_ref</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_call_ref"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_form_tls_address</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_form_tls_address"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_call_frame_cfa</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_call_frame_cfa"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_bit_piece</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_bit_piece"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_implicit_value</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_implicit_value"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_stack_value</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_stack_value"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_push_tls_address</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_push_tls_address"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_uninit</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_uninit"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_encoded_addr</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_encoded_addr"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_implicit_pointer</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_implicit_pointer"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_entry_value</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_entry_value"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_const_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_const_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_regval_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_regval_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_deref_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_deref_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_convert</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_convert"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_reinterpret</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_reinterpret"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_parameter_ref</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_parameter_ref"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_addr_index</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_addr_index"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_OP_GNU_const_index</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_OP_GNU_const_index"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_ORD_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ord</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>ord</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_ORD_row_major</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ORD_row_major"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_ORD_col_major</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_ORD_col_major"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_TAG_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_TAG_access_declaration</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_access_declaration"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_array_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_array_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_base_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_base_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_catch_block</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_catch_block"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_class_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_class_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_common_block</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_common_block"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_common_inclusion</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_common_inclusion"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_compile_unit</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_compile_unit"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_condition</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_condition"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_const_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_const_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_constant</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_constant"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_dwarf_procedure</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_dwarf_procedure"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_entry_point</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_entry_point"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_enumeration_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_enumeration_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_enumerator</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_enumerator"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_formal_parameter</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_formal_parameter"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_friend</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_friend"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_imported_declaration</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_imported_declaration"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_imported_module</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_imported_module"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_imported_unit</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_imported_unit"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_inheritance</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_inheritance"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_inlined_subroutine</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_inlined_subroutine"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_interface_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_interface_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_label</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_label"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_lexical_block</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_lexical_block"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_member</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_member"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_module</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_module"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_namelist</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_namelist"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_namelist_item</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_namelist_item"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_namespace</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_namespace"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_packed_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_packed_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_partial_unit</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_partial_unit"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_pointer_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_pointer_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_ptr_to_member_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_ptr_to_member_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_reference_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_reference_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_restrict_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_restrict_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_rvalue_reference_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_rvalue_reference_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_set_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_set_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_shared_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_shared_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_string_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_string_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_structure_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_structure_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_subprogram</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_subprogram"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_subrange_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_subrange_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_subroutine_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_subroutine_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_template_alias</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_template_alias"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_template_type_parameter</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_template_type_parameter"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_template_value_parameter</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_template_value_parameter"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_thrown_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_thrown_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_try_block</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_try_block"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_type_unit</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_type_unit"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_typedef</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_typedef"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_union_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_union_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_unspecified_parameters</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_unspecified_parameters"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_unspecified_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_unspecified_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_variable</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_variable"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_variant</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_variant"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_variant_part</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_variant_part"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_volatile_type</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_volatile_type"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_with_stmt</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_with_stmt"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_format_label</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_format_label"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_function_template</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_function_template"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_class_template</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_class_template"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_GNU_BINCL</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_GNU_BINCL"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_GNU_EINCL</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_GNU_EINCL"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_GNU_template_template_param</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_GNU_template_template_param"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_GNU_template_parameter_pack</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_GNU_template_parameter_pack"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_GNU_formal_parameter_pack</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_GNU_formal_parameter_pack"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_GNU_call_site</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_GNU_call_site"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_TAG_GNU_call_site_parameter</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_TAG_GNU_call_site_parameter"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_VIRTUALITY_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>vir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>vir</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_VIRTUALITY_none</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_VIRTUALITY_none"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_VIRTUALITY_virtual</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_VIRTUALITY_virtual"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_VIRTUALITY_pure_virtual</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_VIRTUALITY_pure_virtual"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dwarf_get_VIS_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>vis</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>vis</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DW_VIS_local</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_VIS_local"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_VIS_exported</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_VIS_exported"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>DW_VIS_qualified</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="string">"DW_VIS_qualified"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>DW_DLV_NO_ENTRY</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><name>DW_DLV_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
