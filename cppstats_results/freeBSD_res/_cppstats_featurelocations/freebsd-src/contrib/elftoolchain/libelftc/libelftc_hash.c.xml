<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelftc/libelftc_hash.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelftc.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelftc_hash.c 2870 2013-01-07 10:38:43Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INT_MAX</name> <operator>==</operator> <literal type="number">2147483647UL</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNV_PRIME</name></cpp:macro> <cpp:value>16777619UL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNV_OFFSET</name></cpp:macro> <cpp:value>2166136261UL</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>INT_MAX</name> <operator>==</operator> <literal type="number">18446744073709551615ULL</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNV_PRIME</name></cpp:macro> <cpp:value>1099511628211ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNV_OFFSET</name></cpp:macro> <cpp:value>14695981039346656037ULL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> sizeof(int) is unknown.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>unsigned</name> <name>int</name></type>
<name>libelftc_hash_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <name>FNV_OFFSET</name></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>*=</operator> <name>FNV_PRIME</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>hash</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
