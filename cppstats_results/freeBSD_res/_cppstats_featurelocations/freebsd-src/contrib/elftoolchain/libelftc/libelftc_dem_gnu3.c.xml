<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelftc/libelftc_dem_gnu3.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelftc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelftc.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelftc_dem_gnu3.c 3583 2017-10-15 15:38:47Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<enum>enum <name>type_qualifier</name> <block>{
<decl><name>TYPE_PTR</name></decl>, <decl><name>TYPE_REF</name></decl>, <decl><name>TYPE_CMX</name></decl>, <decl><name>TYPE_IMG</name></decl>, <decl><name>TYPE_EXT</name></decl>, <decl><name>TYPE_RST</name></decl>, <decl><name>TYPE_VAT</name></decl>,
<decl><name>TYPE_CST</name></decl>, <decl><name>TYPE_VEC</name></decl>, <decl><name>TYPE_RREF</name></decl>
}</block>;</enum>

<struct>struct <name>vector_type_qualifier</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>capacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>type_qualifier</name></name> <modifier>*</modifier></type><name>q_container</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name></type> <name>ext_name</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>read_cmd</name> <block>{
<decl><name>READ_FAIL</name></decl>, <decl><name>READ_NEST</name></decl>, <decl><name>READ_TMPL</name></decl>, <decl><name>READ_EXPR</name></decl>, <decl><name>READ_EXPL</name></decl>, <decl><name>READ_LOCAL</name></decl>,
<decl><name>READ_TYPE</name></decl>, <decl><name>READ_FUNC</name></decl>, <decl><name>READ_PTRMEM</name></decl>
}</block>;</enum>

<struct>struct <name>read_cmd_item</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>read_cmd</name></name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>vector_read_cmd</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>capacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>read_cmd_item</name></name> <modifier>*</modifier></type><name>r_container</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>push_qualifier</name> <block>{
<decl><name>PUSH_ALL_QUALIFIER</name></decl>,
<decl><name>PUSH_CV_QUALIFIER</name></decl>,
<decl><name>PUSH_NON_CV_QUALIFIER</name></decl>,
}</block>;</enum>

<struct>struct <name>cpp_demangle_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name></type> <name>subst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name></type> <name>tmpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name></type> <name>class_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>cur_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_read_cmd</name></name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mem_rst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mem_vat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mem_cst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mem_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mem_rref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_tmpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_functype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ref_qualifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>type_qualifier</name></name></type> <name>ref_qualifier_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>push_qualifier</name></name></type> <name>push_qualifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>func_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last_sname</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>type_delimit</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>paren</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>firstp</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPP_DEMANGLE_TRY_LIMIT</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_SPRINTF_TRY_LIMIT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_QUADRUPLE_BYTES</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_EXTENED_BYTES</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLE_HASH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(64 * x + y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEM_PUSH_STR</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cpp_demangle_push_str((d), (s), strlen((s)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_PUSH_STR</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vector_str_push((d), (s), strlen((s)))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cpp_demangle_data_dest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_data_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_get_subst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_get_tmpl_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_push_fp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_push_str</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_pop_str</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_push_subst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_push_subst_v</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_push_type_qualifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_encoding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_expr_primary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_expression</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_expression_flat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_expression_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_expression_unary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_expression_trinary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_function</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_local_source_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_local_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_name_flat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_nested_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_number</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_number_as_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_nv_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_offset_number</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_pointer_to_member</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_sname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_subst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_subst_std</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_subst_stdtmpl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_tmpl_arg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_tmpl_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_tmpl_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>type_delimit</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_type_flat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_uqname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpp_demangle_read_v_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>decode_fp_to_double</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>decode_fp_to_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>decode_fp_to_float128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>decode_fp_to_float80</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>decode_fp_to_long_double</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>hex_to_dec</name><parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vector_read_cmd_dest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_read_cmd</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>read_cmd_item</name></name> <modifier>*</modifier></type><name>vector_read_cmd_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_read_cmd</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>read_cmd</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vector_read_cmd_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_read_cmd</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vector_read_cmd_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_read_cmd</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vector_read_cmd_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_read_cmd</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>read_cmd</name></name></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vector_type_qualifier_dest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vector_type_qualifier_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vector_type_qualifier_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>type_qualifier</name></name></type></decl></parameter>)</parameter_list>;</function_decl>








<function><type><name>char</name> <modifier>*</modifier></type>
<name>cpp_demangle_gnu3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>org</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name></type> <name>ddata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name></type> <name>ret_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>type_delimit</name></name></type> <name>td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>org_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_ret</name></decl>, <decl><type ref="prev"/><name>more_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>org</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>org_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>org</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>org_len</name> <operator>&gt;</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr><literal type="string">"_GLOBAL__I_"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rtn</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>org_len</name> <operator>+</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr><name>org_len</name> <operator>+</operator> <literal type="number">19</literal></expr></argument>,
<argument><expr><literal type="string">"global constructors keyed to %s"</literal></expr></argument>, <argument><expr><name>org</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>org</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>||</operator> <name><name>org</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ddata</name></expr></argument>, <argument><expr><name>org</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>has_ret</name> <operator>=</operator> <name>more_type</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_encoding</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>.</operator><name>cur</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ddata</name><operator>.</operator><name>subst</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>.</operator><name>subst</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>paren</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>firstp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>.</operator><name>is_tmpl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ddata</name><operator>.</operator><name>is_tmpl</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>.</operator><name>cur_output</name></name> <operator>=</operator> <operator>&amp;</operator><name>ret_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>has_ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>.</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>.</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>ddata</name><operator>.</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret_type</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_push_vector_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>.</operator><name>output</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ret_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>.</operator><name>cur_output</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ddata</name><operator>.</operator><name>output</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>more_type</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>more_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>more_type</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name><operator>++</operator> <operator>&gt;</operator> <name>CPP_DEMANGLE_TRY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>more_type</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>.</operator><name>output</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>.</operator><name>paren</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>.</operator><name>mem_vat</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">" volatile"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>.</operator><name>mem_cst</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">" const"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>.</operator><name>mem_rst</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">" restrict"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>.</operator><name>mem_ref</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">" &amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>.</operator><name>mem_rref</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">" &amp;&amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <call><name>vector_str_get_flat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>clean</name>:</label>
<if_stmt><if>if <condition>(<expr><name>has_ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cpp_demangle_data_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ddata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cpp_demangle_data_dest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vector_read_cmd_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>class_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>tmpl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>subst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_data_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>subst</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean1</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>tmpl</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean2</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>class_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean3</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_read_cmd_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean4</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>container</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>subst</name><operator>.</operator><name>container</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>tmpl</name><operator>.</operator><name>container</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>class_type</name><operator>.</operator><name>container</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mem_rst</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mem_vat</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mem_cst</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mem_ref</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mem_rref</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>is_tmpl</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>is_functype</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ref_qualifier</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>=</operator> <name>PUSH_ALL_QUALIFIER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>func_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cur_output</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>output</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>last_sname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>clean4</name>:</label>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>class_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>clean3</name>:</label>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>tmpl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>clean2</name>:</label>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>subst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>clean1</name>:</label>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_push_fp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>,
<parameter><function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>decoder</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>decoder</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>decoder</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>-</operator> <name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_push_str</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>is_tmpl</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_pop_str</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>vector_str_pop</name><argument_list>(<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_push_subst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>subst</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>subst</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_push_subst_v</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>str_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>=</operator> <call><name>vector_str_get_flat</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <call><name>cpp_demangle_push_subst</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_push_type_qualifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name></type> <name>subst_v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>type_qualifier</name></name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>e_idx</name></decl>, <decl><type ref="prev"/><name>e_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>, <argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cv</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>q_container</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TYPE_PTR</name></expr>:</case>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_CV_QUALIFIER</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>TYPE_REF</name></expr>:</case>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_CV_QUALIFIER</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>TYPE_RREF</name></expr>:</case>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_CV_QUALIFIER</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&amp;&amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>, <argument><expr><literal type="string">"&amp;&amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>TYPE_CMX</name></expr>:</case>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_CV_QUALIFIER</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" complex"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>, <argument><expr><literal type="string">" complex"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>TYPE_IMG</name></expr>:</case>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_CV_QUALIFIER</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" imaginary"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>, <argument><expr><literal type="string">" imaginary"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>TYPE_EXT</name></expr>:</case>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_CV_QUALIFIER</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ext_name</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name>e_idx</name> <operator>&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>ext_name</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ext_name</name><operator>.</operator><name>container</name><index>[<expr><name>e_idx</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>e_len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>e_len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ext_name</name><operator>.</operator><name>container</name><index>[<expr><name>e_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>e_idx</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TYPE_RST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_NON_CV_QUALIFIER</name> <operator>&amp;&amp;</operator>
<name>cv</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_CV_QUALIFIER</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cv</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" restrict"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>, <argument><expr><literal type="string">" restrict"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>q_container</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>TYPE_RST</name> <operator>||</operator> <name>t</name> <operator>==</operator> <name>TYPE_VAT</name> <operator>||</operator>
<name>t</name> <operator>==</operator> <name>TYPE_CST</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>TYPE_VAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_NON_CV_QUALIFIER</name> <operator>&amp;&amp;</operator>
<name>cv</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_CV_QUALIFIER</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cv</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" volatile"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>, <argument><expr><literal type="string">" volatile"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>q_container</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>TYPE_RST</name> <operator>||</operator> <name>t</name> <operator>==</operator> <name>TYPE_VAT</name> <operator>||</operator>
<name>t</name> <operator>==</operator> <name>TYPE_CST</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>TYPE_CST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_NON_CV_QUALIFIER</name> <operator>&amp;&amp;</operator>
<name>cv</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_CV_QUALIFIER</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cv</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" const"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>, <argument><expr><literal type="string">" const"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>q_container</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>TYPE_RST</name> <operator>||</operator> <name>t</name> <operator>==</operator> <name>TYPE_VAT</name> <operator>||</operator>
<name>t</name> <operator>==</operator> <name>TYPE_CST</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>TYPE_VEC</name></expr>:</case>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>==</operator> <name>PUSH_CV_QUALIFIER</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ext_name</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name>e_idx</name> <operator>&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>ext_name</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ext_name</name><operator>.</operator><name>container</name><index>[<expr><name>e_idx</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>e_len</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>e_len</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">" __vector(%s)"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ext_name</name><operator>.</operator><name>container</name><index>[<expr><name>e_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>e_idx</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>--</operator><name>idx</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>clean</name>:</label>
<if_stmt><if>if <condition>(<expr><name>type_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subst_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_get_subst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ddata</name><operator>-&gt;</operator><name>subst</name><operator>.</operator><name>size</name></name> <operator>&lt;=</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>subst</name><operator>.</operator><name>container</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>subst</name><operator>.</operator><name>container</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_get_tmpl_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ddata</name><operator>-&gt;</operator><name>tmpl</name><operator>.</operator><name>size</name></name> <operator>&lt;=</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>tmpl</name><operator>.</operator><name>container</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>tmpl</name><operator>.</operator><name>container</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_len</name></decl>, <decl><type ref="prev"/><name>exp_len</name></decl>, <decl><type ref="prev"/><name>p_idx</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>num_len</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>-</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>num_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_expression</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>exp</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>,
<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>p_idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>exp_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_expr_primary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_encoding</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_push_fp</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>decode_fp_to_double</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr>sizeof<operator>(</operator><name>long</name> <name>double</name><operator>)</operator> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_push_fp</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><name>decode_fp_to_double</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_push_fp</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>decode_fp_to_float80</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_push_fp</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>decode_fp_to_float</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr>sizeof<operator>(</operator><name>long</name> <name>double</name><operator>)</operator> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_push_fp</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><name>decode_fp_to_double</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_push_fp</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>decode_fp_to_float128</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>num</name></expr></argument>,
<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>-</operator> <name>num</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_expression</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_uqname</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_tmpl_args</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&amp;&amp;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_unary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&amp;="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"()"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"~"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"(cast)"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_unary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"delete []"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_unary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_unary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"delete"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"/="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"^="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;="</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"-="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"*="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_unary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"new []"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"!="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_unary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_unary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"||"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"|="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"+="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"-&gt;*"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"++"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_unary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"-&gt;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'q'</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_trinary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"%="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_binary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;="</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_unary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"sizeof"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression_unary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"sizeof"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expr_primary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_tmpl_param</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_expression_flat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p_idx</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>exp_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>output</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_expression</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>exp</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>exp_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>p_idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_pop</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_expression_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_expression</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_expression_unary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_expression</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_expression_trinary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len2</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>name2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<name>len2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_expression</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_expression</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>name2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expression</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_function</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ext_c</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>type_delimit</name></name></type> <name>td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>read_cmd_item</name></name> <modifier>*</modifier></type><name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>class_type_size</name></decl>, <decl><type ref="prev"/><name>class_type_len</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>paren</name></decl>, <decl><type ref="prev"/><name>non_cv_qualifier</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'F'</literal> <operator>||</operator> <name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'Y'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ext_c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ext_c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>non_cv_qualifier</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>q_container</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>TYPE_RST</name> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>q_container</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>TYPE_VAT</name> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>q_container</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>TYPE_CST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>non_cv_qualifier</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>paren</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vector_read_cmd_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>READ_PTRMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>non_cv_qualifier</name> <operator>||</operator> <name>rc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>paren</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>=</operator> <name>PUSH_NON_CV_QUALIFIER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_type_qualifier</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>non_cv_qualifier</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>class_type_size</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>class_type</name><operator>.</operator><name>size</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>class_type</name> <operator>=</operator>
<name><name>ddata</name><operator>-&gt;</operator><name>class_type</name><operator>.</operator><name>container</name><index>[<expr><name>class_type_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>class_type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>class_type_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>class_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>class_type</name></expr></argument>,
<argument><expr><name>class_type_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"::*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>=</operator> <name>PUSH_ALL_QUALIFIER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_type_qualifier</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>func_type</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>paren</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>paren</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>paren</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>firstp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>is_functype</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name><operator>++</operator> <operator>&gt;</operator> <name>CPP_DEMANGLE_TRY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>is_functype</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>.</operator><name>paren</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>paren</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>=</operator> <name>PUSH_CV_QUALIFIER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_type_qualifier</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>push_qualifier</name></name> <operator>=</operator> <name>PUSH_ALL_QUALIFIER</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vector_type_qualifier_dest</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_init</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>ref_qualifier</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>ref_qualifier_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TYPE_REF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" &amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TYPE_RREF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" &amp;&amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>ref_qualifier</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_encoding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>num_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"hidden alias for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_encoding</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"reference temporary #"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_name_flat</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_number_as_string</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean1</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>num_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean2</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean2</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean2</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>clean2</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>num_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>clean1</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"non-transaction clone for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"transaction clone for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_encoding</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"guard variable for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><literal type="string">"virtual function covariant override "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_offset</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_offset</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_encoding</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"construction vtable for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type_flat</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_number</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean3</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean3</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean3</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"-in-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean3</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean3</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>clean3</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>:</case>

<break>break;</break>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"typeinfo fn for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><literal type="string">"virtual function non-virtual override "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_nv_offset</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_encoding</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"TLS init function for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"typeinfo for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'J'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"java Class for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"typeinfo name for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"VTT for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"virtual function virtual override "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_v_offset</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_encoding</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"vtable for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"TLS wrapper function for "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_name</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_local_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name></type> <name>local_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>type_delimit</name></name></type> <name>td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>more_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name> <operator>=</operator> <operator>&amp;</operator><name>local_name</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_encoding</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>output</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>paren</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>firstp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>more_type</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>is_tmpl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>is_tmpl</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>more_type</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_push_vector</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>more_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>more_type</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name><operator>++</operator> <operator>&gt;</operator> <name>CPP_DEMANGLE_TRY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>more_type</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>.</operator><name>paren</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>paren</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_name</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>output</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>p_idx</name></decl>, <decl><type ref="prev"/><name>subst_str_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subst_str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>subst_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_subst</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_nested_name</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_local_name</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_uqname</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subst_str</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_str_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>subst_str_len</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>, <argument><expr><literal type="string">"operator"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>subst_str</name></expr></argument>, <argument><expr><name>subst_str_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_tmpl_args</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subst_str</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>subst_str_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>subst_str</name></expr></argument>, <argument><expr><name>subst_str_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>clean</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_name_flat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p_idx</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_name</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>name_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>p_idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_pop</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_nested_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>output</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>limit</name></decl>, <decl><type ref="prev"/><name>p_idx</name></decl>, <decl><type ref="prev"/><name>subst_str_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subst_str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'N'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>mem_rst</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>mem_vat</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>mem_cst</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>mem_ref</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>mem_rref</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>next</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block> while <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator></expr>)</condition>;</do>

<label><name>next</name>:</label>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_tmpl_args</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_subst</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_tmpl_param</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_uqname</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>p_idx</name> <operator>==</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_comp</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subst_str</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>subst_str_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>subst_str</name></expr></argument>, <argument><expr><name>subst_str_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<label><name>next_comp</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'I'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'C'</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'D'</literal> <operator>&amp;&amp;</operator> <name>p_idx</name> <operator>!=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name><operator>++</operator> <operator>&gt;</operator> <name>CPP_DEMANGLE_TRY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>clean</name>:</label>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_number</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>rtn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>negative_factor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rtn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>negative_factor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>negative_factor</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>negative_factor</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>negative_factor</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rtn</name> <operator>=</operator> <name>len</name> <operator>*</operator> <name>negative_factor</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_number_as_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_number</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_nv_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"offset : "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_offset_number</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_nv_offset</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_v_offset</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_offset_number</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>negative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>negative</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_pointer_to_member</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>class_type_len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>p_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p_func_type</name></decl>, <decl><type ref="prev"/><name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>class_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'M'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>class_type</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>,
<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>class_type_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>p_idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean1</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_read_cmd_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>READ_PTRMEM</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean1</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>class_type</name></name></expr></argument>, <argument><expr><name>class_type</name></expr></argument>, <argument><expr><name>class_type_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean2</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_func_type</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>func_type</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean3</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_func_type</name> <operator>==</operator> <name><name>ddata</name><operator>-&gt;</operator><name>func_type</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean3</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>class_type</name></expr></argument>, <argument><expr><name>class_type_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean3</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"::*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean3</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>clean3</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>class_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>clean2</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_read_cmd_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>clean1</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>class_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vector_type_qualifier_dest</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_init</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_sname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>cpp_demangle_read_number</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"_GLOBAL__N_1"</literal></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"(anonymous namespace)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vector_read_cmd_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>READ_TMPL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>last_sname</name></name> <operator>=</operator>
<name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name><operator>-&gt;</operator><name>container</name><index>[<expr><name><name>ddata</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_subst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>nth</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"std::allocator"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_subst_stdtmpl</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><literal type="string">"std::allocator"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"std::basic_string"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_subst_stdtmpl</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><literal type="string">"std::basic_string"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"std::basic_iostream&lt;char, "</literal>
<literal type="string">"std::char_traits&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>last_sname</name></name> <operator>=</operator> <literal type="string">"basic_iostream"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_subst_stdtmpl</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><literal type="string">"std::basic_iostream&lt;char, std::char_traits"</literal>
<literal type="string">"&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"std::basic_istream&lt;char, "</literal>
<literal type="string">"std::char_traits&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>last_sname</name></name> <operator>=</operator> <literal type="string">"basic_istream"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_subst_stdtmpl</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><literal type="string">"std::basic_istream&lt;char, std::char_traits"</literal>
<literal type="string">"&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"std::basic_ostream&lt;char, "</literal>
<literal type="string">"std::char_traits&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>last_sname</name></name> <operator>=</operator> <literal type="string">"basic_ostream"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_subst_stdtmpl</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><literal type="string">"std::basic_ostream&lt;char, std::char_traits"</literal>
<literal type="string">"&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>






<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"std::basic_string&lt;char, "</literal>
<literal type="string">"std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>last_sname</name></name> <operator>=</operator> <literal type="string">"string"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_subst_stdtmpl</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><literal type="string">"std::basic_string&lt;char, std::char_traits&lt;char&gt;,"</literal>
<literal type="string">" std::allocator&lt;char&gt; &gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_subst_std</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_get_subst</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nth</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>++</operator><name>nth</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>cpp_demangle_get_subst</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>


<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_subst_std</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>output</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>p_idx</name></decl>, <decl><type ref="prev"/><name>subst_str_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subst_str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>subst_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"std::"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="string">"std::"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_uqname</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subst_str</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>subst_str_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>subst_str</name></expr></argument>, <argument><expr><name>subst_str_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_tmpl_args</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subst_str</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>subst_str_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>subst_str</name></expr></argument>, <argument><expr><name>subst_str_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>clean</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_subst_stdtmpl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>p_idx</name></decl>, <decl><type ref="prev"/><name>substr_len</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subst_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>substr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>substr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subst_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_tmpl_args</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>substr</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>substr_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subst_str</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>substr_len</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subst_str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>substr</name></expr></argument>, <argument><expr><name>substr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subst_str</name><index>[<expr><name>substr_len</name> <operator>+</operator> <name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>subst_str</name></expr></argument>, <argument><expr><name>substr_len</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>clean</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_tmpl_arg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_expr_primary</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_expression</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name><operator>++</operator> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_tmpl_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>arg_len</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_read_cmd_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>READ_TMPL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_tmpl_arg</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>tmpl</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg_len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>tmpl</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>container</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">" &gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>is_tmpl</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'I'</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>limit</name><operator>++</operator> <operator>&gt;</operator> <name>CPP_DEMANGLE_TRY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><call><name>vector_read_cmd_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_tmpl_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>nth</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'T'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_get_tmpl_param</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nth</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>++</operator><name>nth</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>cpp_demangle_get_tmpl_param</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>


<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>type_delimit</name></name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>output</name></decl>, <decl><type ref="prev"/><name>sv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>p_idx</name></decl>, <decl><type ref="prev"/><name>type_str_len</name></decl>, <decl><type ref="prev"/><name>subst_str_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extern_c</name></decl>, <decl><type ref="prev"/><name>is_builtin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>exp_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>num_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>subst_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>skip_ref_qualifier</name></decl>, <decl><type ref="prev"/><name>omit_void</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>paren</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>paren</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'I'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>output</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extern_c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>is_builtin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_str</name> <operator>=</operator> <name>exp_str</name> <operator>=</operator> <name>num_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skip_ref_qualifier</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<label><name>again</name>:</label>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'O'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>ref_qualifier</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"signed char"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_array</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>is_builtin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_CMX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"decltype(auto)"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"decimal64"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"decimal128"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"decimal32"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"half"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"char32_t"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"decltype(nullptr)"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"char16_t"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_expression_flat</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>exp_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>ext_name</name></name></expr></argument>, <argument><expr><name>exp_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_number_as_string</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>num_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>ext_name</name></name></expr></argument>, <argument><expr><name>num_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_VEC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>
<default>default:</default>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"long double"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>ref_qualifier</name></name> <operator>&amp;&amp;</operator> <name><name>ddata</name><operator>-&gt;</operator><name>is_functype</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip_ref_qualifier</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cpp_demangle_pop_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>clean</name>;</goto>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_function</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extern_c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>is_builtin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"__float128"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_IMG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"unsigned char"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>


<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_tmpl_args</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subst_str</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>subst_str_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>, <argument><expr><name>subst_str</name></expr></argument>, <argument><expr><name>subst_str_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subst_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_subst_v</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"unsigned int"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_CST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"unsigned long"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<goto>goto <name>rtn</name>;</goto>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_pointer_to_member</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>is_builtin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"__int128"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"unsigned __int128"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>ref_qualifier</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_RREF</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>ref_qualifier</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>ref_qualifier_type</name></name> <operator>=</operator> <name>TYPE_RREF</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_PTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_RST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>ref_qualifier</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_REF</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>ref_qualifier</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>ref_qualifier_type</name></name> <operator>=</operator> <name>TYPE_REF</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_subst</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>is_builtin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"unsigned short"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_tmpl_param</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>is_builtin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_sname</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>is_builtin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_number</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>ext_name</name></name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_EXT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><name>omit_void</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name> <operator>&amp;&amp;</operator> <name><name>td</name><operator>-&gt;</operator><name>firstp</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>omit_void</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'O'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>omit_void</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>omit_void</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_type_qualifier_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>TYPE_VAT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"wchar_t"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"long long"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'y'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"unsigned long long"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<goto>goto <name>rtn</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_name</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>is_builtin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>rtn</name>:</label>

<expr_stmt><expr><name>type_str</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>type_str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_builtin</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>subst</name></name></expr></argument>, <argument><expr><name>type_str</name></expr></argument>, <argument><expr><name>type_str_len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddata</name><operator>-&gt;</operator><name>subst</name></name></expr></argument>, <argument><expr><name>type_str</name></expr></argument>, <argument><expr><name>type_str_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_ref_qualifier</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>cpp_demangle_push_type_qualifier</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>firstp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>num_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_type_qualifier_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<label><name>clean</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>num_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_type_qualifier_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_type_flat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p_idx</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>type_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>ddata</name><operator>-&gt;</operator><name>cur_output</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>p_idx</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>type_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>p_idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_pop</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_uqname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&amp;&amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&amp;="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator()"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator,"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator~"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator(cast)"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_type</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator delete []"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator delete"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator/="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator^"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator^="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator=="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&gt;="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator[]"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&lt;="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&lt;&lt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&lt;&lt;="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&lt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator-="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator*="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator--"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator new []"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator!="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator!"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator new"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator||"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator|"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator|="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator+"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator+="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator-&gt;*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator++"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator+"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator-&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'q'</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator?"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator%"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator%="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator&gt;&gt;="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator sizeof "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"scope resolution operator "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"operator sizeof "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'v'</literal> <operator>&amp;&amp;</operator> <call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"vendor extened operator "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_sname</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>last_sname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>last_sname</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>last_sname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ddata</name><operator>-&gt;</operator><name>last_sname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>last_sname</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"::~"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_push_str</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><name><name>ddata</name><operator>-&gt;</operator><name>last_sname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_read_sname</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>cpp_demangle_local_source_name</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_local_source_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>!=</operator> <literal type="char">'L'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_sname</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>ddata</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cpp_demangle_read_v_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpp_demangle_data</name></name> <modifier>*</modifier></type><name>ddata</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ddata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"offset : "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpp_demangle_read_offset_number</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DEM_PUSH_STR</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>, <argument><expr><literal type="string">"virtual offset : "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>!</operator><call><name>cpp_demangle_read_offset_number</name><argument_list>(<argument><expr><name>ddata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>decode_fp_to_double</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rtn_len</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>hex_to_dec</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>hex_to_dec</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>byte</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>byte</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ELFTC_BYTE_ORDER</name> <operator>==</operator> <name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f</name><operator>)</operator><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator>
<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><name>rtn_len</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rtn</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>rtn_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snprintf</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr><name>rtn_len</name></expr></argument>, <argument><expr><literal type="string">"%fld"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>rtn_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name><operator>++</operator> <operator>&gt;</operator> <name>FLOAT_SPRINTF_TRY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rtn_len</name> <operator>*=</operator> <name>BUFFER_GROWFACTOR</name></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rtn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>decode_fp_to_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rtn_len</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>hex_to_dec</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>hex_to_dec</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>byte</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>byte</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ELFTC_BYTE_ORDER</name> <operator>==</operator> <name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f</name><operator>)</operator><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator>
<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><name>rtn_len</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rtn</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>rtn_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snprintf</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr><name>rtn_len</name></expr></argument>, <argument><expr><literal type="string">"%ff"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>rtn_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name><operator>++</operator> <operator>&gt;</operator> <name>FLOAT_SPRINTF_TRY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rtn_len</name> <operator>*=</operator> <name>BUFFER_GROWFACTOR</name></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rtn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>decode_fp_to_float128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rtn_len</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>FLOAT_QUADRUPLE_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtn</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr>sizeof<operator>(</operator><name>long</name> <name>double</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FLOAT_QUADRUPLE_BYTES</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>decode_fp_to_long_double</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>FLOAT_EXTENED_BYTES</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<name>len</name> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>FLOAT_QUADRUPLE_BYTES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FLOAT_QUADRUPLE_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>hex_to_dec</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>hex_to_dec</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>byte</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>byte</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ELFTC_BYTE_ORDER</name> <operator>==</operator> <name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>FLOAT_QUADRUPLE_BYTES</name> <operator>-</operator> <name>i</name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FLOAT_EXTENED_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ELFTC_BYTE_ORDER</name> <operator>==</operator> <name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FLOAT_EXTENED_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>FLOAT_EXTENED_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rtn_len</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rtn</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>rtn_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snprintf</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr><name>rtn_len</name></expr></argument>, <argument><expr><literal type="string">"%Lfd"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>rtn_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name><operator>++</operator> <operator>&gt;</operator> <name>FLOAT_SPRINTF_TRY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rtn_len</name> <operator>*=</operator> <name>BUFFER_GROWFACTOR</name></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>decode_fp_to_float80</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rtn_len</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>FLOAT_EXTENED_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtn</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr>sizeof<operator>(</operator><name>long</name> <name>double</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FLOAT_QUADRUPLE_BYTES</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<name>len</name> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>FLOAT_EXTENED_BYTES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FLOAT_EXTENED_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>hex_to_dec</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>hex_to_dec</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>byte</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>byte</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ELFTC_BYTE_ORDER</name> <operator>==</operator> <name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>FLOAT_EXTENED_BYTES</name> <operator>-</operator> <name>i</name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FLOAT_QUADRUPLE_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ELFTC_BYTE_ORDER</name> <operator>==</operator> <name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FLOAT_EXTENED_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>f</name><operator>)</operator> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FLOAT_EXTENED_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rtn_len</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rtn</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>rtn_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snprintf</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr><name>rtn_len</name></expr></argument>, <argument><expr><literal type="string">"%Lfd"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>rtn_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name><operator>++</operator> <operator>&gt;</operator> <name>FLOAT_SPRINTF_TRY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rtn_len</name> <operator>*=</operator> <name>BUFFER_GROWFACTOR</name></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
<case>case <expr><name>FLOAT_EXTENED_BYTES</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>decode_fp_to_long_double</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>decode_fp_to_long_double</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rtn_len</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<name>len</name> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;</operator> sizeof<operator>(</operator><name>long</name> <name>double</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>long</name> <name>double</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>hex_to_dec</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>hex_to_dec</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>byte</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>byte</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ELFTC_BYTE_ORDER</name> <operator>==</operator> <name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>f</name><operator>)</operator><index>[<expr/></index>sizeof<operator>(</operator><name>long</name> <name>double</name><operator>)</operator> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal>] <operator>=</operator>
<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>byte</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><name>rtn_len</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rtn</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>rtn_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snprintf</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>, <argument><expr><name>rtn_len</name></expr></argument>, <argument><expr><literal type="string">"%Lfd"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>rtn_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rtn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name><operator>++</operator> <operator>&gt;</operator> <name>FLOAT_SPRINTF_TRY_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rtn_len</name> <operator>*=</operator> <name>BUFFER_GROWFACTOR</name></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>hex_to_dec</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">3</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">5</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">6</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">7</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">9</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">10</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">11</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">12</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">13</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">14</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">15</literal><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>







<function><type><name>bool</name></type>
<name>is_cpp_mangled_gnu3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>org</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>org</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>org</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr><literal type="string">"_GLOBAL__I_"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vector_read_cmd_dest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_read_cmd</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>r_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>read_cmd_item</name></name> <modifier>*</modifier></type>
<name>vector_read_cmd_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_read_cmd</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>read_cmd</name></name></type> <name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dst</name> <operator>==</operator> <name>READ_FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>r_container</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name> <operator>==</operator> <name>dst</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>r_container</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vector_read_cmd_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_read_cmd</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>VECTOR_DEF_CAPACITY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>r_container</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>v</name><operator>-&gt;</operator><name>r_container</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vector_read_cmd_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_read_cmd</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>r_container</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>cmd</name> <operator>=</operator> <name>READ_FAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>r_container</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vector_read_cmd_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_read_cmd</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>read_cmd</name></name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>read_cmd_item</name></name> <modifier>*</modifier></type><name>tmp_r_ctn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tmp_cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp_cap</name> <operator>=</operator> <call><name>BUFFER_GROW</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp_r_ctn</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp_r_ctn</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>tmp_cap</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp_r_ctn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>r_container</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>r_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>r_container</name></name> <operator>=</operator> <name>tmp_r_ctn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>tmp_cap</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>r_container</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>cmd</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>r_container</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vector_type_qualifier_dest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>q_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ext_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>vector_type_qualifier_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>VECTOR_DEF_CAPACITY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>q_container</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>enum <name>type_qualifier</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>q_container</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ext_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>q_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>vector_type_qualifier_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_type_qualifier</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>type_qualifier</name></name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>type_qualifier</name></name> <modifier>*</modifier></type><name>tmp_ctn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tmp_cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp_cap</name> <operator>=</operator> <call><name>BUFFER_GROW</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp_ctn</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>enum <name>type_qualifier</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>tmp_cap</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp_ctn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>q_container</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>q_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>q_container</name></name> <operator>=</operator> <name>tmp_ctn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>tmp_cap</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>q_container</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>v</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
