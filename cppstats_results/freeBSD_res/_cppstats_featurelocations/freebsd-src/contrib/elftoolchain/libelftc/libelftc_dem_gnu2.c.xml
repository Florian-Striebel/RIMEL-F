<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelftc/libelftc_dem_gnu2.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelftc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelftc.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelftc_dem_gnu2.c 3513 2016-12-29 07:04:22Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<enum>enum <name>encode_type</name> <block>{
<decl><name>ENCODE_FUNC</name></decl>, <decl><name>ENCODE_OP</name></decl>, <decl><name>ENCODE_OP_CT</name></decl>, <decl><name>ENCODE_OP_DT</name></decl>, <decl><name>ENCODE_OP_USER</name></decl>,
<decl><name>ENCODE_OP_TF</name></decl>, <decl><name>ENCODE_OP_TI</name></decl>, <decl><name>ENCODE_OP_VT</name></decl>
}</block>;</enum>

<struct>struct <name>cstring</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>demangle_data</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>ref</name></decl>, <decl><type ref="prev"/><name>cnst</name></decl>, <decl><type ref="prev"/><name>array</name></decl>, <decl><type ref="prev"/><name>cnst_fn</name></decl>, <decl><type ref="prev"/><name>class_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cstring</name></name></type> <name>array_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>encode_type</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name></type> <name>vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vector_str</name></name></type> <name>arg</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLE_HASH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(64 * x + y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_PUSH_STR</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vector_str_push((d), (s), strlen((s)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPP_DEMANGLE_GNU2_TRY</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dest_cstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cstring</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dest_demangle_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>init_cstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cstring</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>init_demangle_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>push_CTDT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_class</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_func_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_func_ptr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_memptr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_op</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_op_user</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_qual_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_subst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_subst_iter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>read_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>char</name> <modifier>*</modifier></type>
<name>cpp_demangle_gnu2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>org</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_data</name></name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>arg_begin</name></decl>, <decl><type ref="prev"/><name>arg_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>try</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>org</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>try</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>org</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read_func_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>d</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENCODE_FUNC</name></expr> :</case>
<case>case <expr><name>ENCODE_OP</name></expr> :</case>
<break>break;</break>

<case>case <expr><name>ENCODE_OP_CT</name></expr> :</case>
<if_stmt><if>if <condition>(<expr><call><name>push_CTDT</name><argument_list>(<argument><expr><literal type="string">"::"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>
<case>case <expr><name>ENCODE_OP_DT</name></expr> :</case>
<if_stmt><if>if <condition>(<expr><call><name>push_CTDT</name><argument_list>(<argument><expr><literal type="string">"::~"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"(void)"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<goto>goto <name>flat</name>;</goto>
<case>case <expr><name>ENCODE_OP_USER</name></expr> :</case>
<case>case <expr><name>ENCODE_OP_TF</name></expr> :</case>
<case>case <expr><name>ENCODE_OP_TI</name></expr> :</case>
<case>case <expr><name>ENCODE_OP_VT</name></expr> :</case>
<goto>goto <name>flat</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>.</operator><name>p</name></name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>d</name><operator>.</operator><name>p</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>class_name</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"(void)"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<goto>goto <name>flat</name>;</goto>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>.</operator><name>p</name></name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rtn_subst</name> <init>= <expr><call><name>read_subst</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rtn_subst</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rtn_subst</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>.</operator><name>p</name></name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rtn_subst_iter</name> <init>= <expr><call><name>read_subst_iter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rtn_subst_iter</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>rtn_subst_iter</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg_begin</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>vec</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>ref</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>cnst</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">" const"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>cnst</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>array</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>array_str</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>d</name><operator>.</operator><name>array_str</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dest_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>array_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>.</operator><name>p</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>vector_str_substr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><name>arg_begin</name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>vec</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>arg_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>arg</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>clean</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>try</name> <operator>&gt;</operator> <name>CPP_DEMANGLE_GNU2_TRY</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
<label><name>flat</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>.</operator><name>cnst_fn</name></name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">" const"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <call><name>vector_str_get_flat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>clean</name>:</label>
<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type>
<name>is_cpp_mangled_gnu2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>org</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rtn</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>org</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr><literal type="string">"__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'C'</literal> <operator>||</operator>
<operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'F'</literal> <operator>||</operator>
<operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'Q'</literal> <operator>||</operator>
<call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rtn</name> <operator>|=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr> :</case>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name>rtn</name> <operator>|=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>rtn</name> <operator>|=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr><literal type="string">"_$_"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtn</name> <operator>|=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr><literal type="string">"_vt$"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dest_cstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cstring</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dest_demangle_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dest_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>array_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>init_cstring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cstring</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>init_demangle_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cnst</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cnst_fn</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>array_str</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>array_str</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ENCODE_FUNC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vector_str_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vector_str_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>push_CTDT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>l</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vector_str_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>container</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>read_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dest_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>array_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>init_cstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>array_str</name></name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>array_str</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>array_str</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>array_str</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>read_class</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>class_name</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>read_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>delim</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <literal type="string">"d-&gt;p (org str) is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>delim</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="string">"__"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>delim</name> <operator>-</operator> <name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>delim</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cnst_fn</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'Q'</literal> <operator>&amp;&amp;</operator> <call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_qual_name</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_class</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>read_func_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>op_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <literal type="string">"d-&gt;p (org str) is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'Q'</literal> <operator>&amp;&amp;</operator> <call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ENCODE_OP_CT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_qual_name</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>vector_str_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ENCODE_OP_CT</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>read_class</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ENCODE_OP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read_op</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ENCODE_FUNC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"__"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>read_func</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ENCODE_OP_USER</name> <operator>||</operator>
<name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ENCODE_OP_TF</name> <operator>||</operator>
<name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ENCODE_OP_TI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cnst_fn</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'Q'</literal> <operator>&amp;&amp;</operator> <call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>container</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op_name</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>d</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>container</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_qual_name</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>op_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>container</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op_name</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>d</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>container</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vector_str_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_class</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>op_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="string">"_$_"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ENCODE_OP_DT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'Q'</literal> <operator>&amp;&amp;</operator> <call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_qual_name</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>vector_str_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>read_class</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="string">"_vt$"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ENCODE_OP_VT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'Q'</literal> <operator>&amp;&amp;</operator> <call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_qual_name</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vector_str_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_class</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">" virtual table"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>read_func</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<label><name>clean</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>op_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>read_func_ptr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_data</name></name></type> <name>fptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>arg_len</name></decl>, <decl><type ref="prev"/><name>rtn_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg_type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rtn_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lim</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fptr</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtn_type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fptr</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fptr</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fptr</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fptr</name><operator>.</operator><name>ref</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fptr</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fptr</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fptr</name><operator>.</operator><name>cnst</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fptr</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">" const"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fptr</name><operator>.</operator><name>cnst</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>fptr</name><operator>.</operator><name>p</name></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fptr</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>lim</name> <operator>&gt;</operator> <name>CPP_DEMANGLE_GNU2_TRY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>arg_type</name> <operator>=</operator> <call><name>vector_str_get_flat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fptr</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>fptr</name><operator>.</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fptr</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rtn_type</name> <operator>=</operator> <call><name>vector_str_get_flat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fptr</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtn_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>fptr</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>rtn_type</name></expr></argument>, <argument><expr><name>rtn_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rtn_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rtn_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">" (*)("</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>arg_type</name></expr></argument>, <argument><expr><name>arg_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>read_memptr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_data</name></name></type> <name>mptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mptr_str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mptr_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mptr</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>mptr</name><operator>.</operator><name>p</name></name> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>mptr</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_qual_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>read_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>mptr</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mptr_str</name> <operator>=</operator> <call><name>vector_str_get_flat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mptr</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>mptr_str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"::*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<label><name>clean</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mptr_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>read_op</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <literal type="string">"d-&gt;p (org str) is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator*"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator/"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator%"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator+"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator-"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator&lt;&lt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator&gt;&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator=="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator!="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator&lt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator&lt;="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator&gt;="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator/="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator&amp;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator|"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator^"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator&amp;="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator&amp;&amp;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator||"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator!"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator~"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator++"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator--"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator-&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr> :</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator+="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator-="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator*="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator%="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr> :</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator&lt;&lt;="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr> :</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator&gt;&gt;="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr> :</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator|="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr> :</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator^="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator,"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator-&gt;*"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator new()"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"operator delete()"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr> :</case>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ENCODE_OP_USER</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>read_op_user</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ENCODE_OP_TF</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_type</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">" type_info function"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><call><name>SIMPLE_HASH</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr> :</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ENCODE_OP_TI</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_type</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">" type_info node"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<default>default :</default>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>read_op_user</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>demangle_data</name></name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>from_len</name></decl>, <decl><type ref="prev"/><name>to_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rtn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>from_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to_str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>from</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>from_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>to_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>init_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>to</name><operator>.</operator><name>p</name></name> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>to</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_qual_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vector_str_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>.</operator><name>vec</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>to</name><operator>.</operator><name>p</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>to_str</name> <operator>=</operator> <call><name>vector_str_get_flat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>from</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>to</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>from</name><operator>.</operator><name>p</name></name> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>from</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_qual_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>from</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vector_str_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>from</name><operator>.</operator><name>vec</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>read_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>from</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>from_str</name> <operator>=</operator> <call><name>vector_str_get_flat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>from</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>from_str</name></expr></argument>, <argument><expr><name>from_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"::operator "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vector_str_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name>to_str</name></expr></argument>, <argument><expr><name>to_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>clean</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>clean</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>to_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>from_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dest_demangle_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>rtn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>read_qual_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <literal type="string">"d-&gt;p (org str) is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>&gt;</operator> <literal type="number">48</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <literal type="number">58</literal> <operator>&amp;&amp;</operator> <literal type="string">"*d-&gt;p not in ASCII numeric range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>-</operator> <literal type="number">48</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read_class</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_subst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>arg</name><operator>.</operator><name>container</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>arg</name><operator>.</operator><name>container</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_subst_iter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>repeat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>&gt;</operator> <literal type="number">48</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <literal type="number">58</literal> <operator>&amp;&amp;</operator> <literal type="string">"*d-&gt;p not in ASCII numeric range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>repeat</name> <operator>=</operator> <operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>-</operator> <literal type="number">48</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>repeat</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>repeat</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>arg</name><operator>.</operator><name>container</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>arg</name><operator>.</operator><name>container</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>repeat</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>read_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>demangle_data</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <literal type="string">"d-&gt;p (org str) is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'U'</literal> <operator>||</operator> <operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'C'</literal> <operator>||</operator> <operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'V'</literal> <operator>||</operator> <operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>||</operator>
<operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>||</operator> <operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>||</operator> <operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'A'</literal> <operator>||</operator> <operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'F'</literal> <operator>||</operator>
<operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'U'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"unsigned "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cnst</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"const "</literal></expr></argument>)</argument_list></call> <operator>==</operator>
<name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'V'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"volatile "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"signed "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>read_func_ptr</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr> :</case>
<break>break;</break>
<case>case <expr><literal type="char">'A'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_array</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'M'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_memptr</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>
<default>default :</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>ELFTC_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>read_class</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'Q'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>read_qual_name</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'v'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'c'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'s'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'i'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'l'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'f'</literal></expr> :</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"long double"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"wchar_t"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name><name>d</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>VEC_PUSH_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="string">"long long"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>


<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
