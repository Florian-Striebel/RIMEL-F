<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelftc/_libelftc.h">




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBELFTC_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LIBELFTC_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_elftc.h"</cpp:file></cpp:include>

<struct>struct <name>_Elftc_Bfd_Target</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bt_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bt_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bt_byteorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bt_elfclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bt_machine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bt_osabi</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>_Elftc_Bfd_Target</name></name></type> <name><name>_libelftc_targets</name><index>[]</index></name></decl>;</decl_stmt>


<struct>struct <name>vector_str</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>capacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>container</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_GROWFACTOR</name></cpp:macro> <cpp:value>1.618</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_GROW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)+0.5)*BUFFER_GROWFACTOR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_FAILURE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_ISDIGIT</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isdigit((C) &amp; 0xFF))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_SUCCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VECTOR_DEF_CAPACITY</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>cpp_demangle_ARM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_org</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>cpp_demangle_gnu2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_org</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>cpp_demangle_gnu3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_org</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>is_cpp_mangled_ARM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_org</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>is_cpp_mangled_gnu2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_org</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>is_cpp_mangled_gnu3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_org</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>libelftc_hash_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>vector_str_dest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>_vec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>vector_str_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>_vs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_str</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>vector_str_get_flat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>_vs</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>vector_str_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>_vs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>vector_str_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>_vs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>vector_str_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>_vs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_str</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>vector_str_push_vector</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>_org</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>vector_str_push_vector_head</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>_org</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>vector_str_substr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vector_str</name></name> <modifier>*</modifier></type><name>_vs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_begin</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>_end</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_rlen</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
