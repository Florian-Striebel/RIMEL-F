<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/ar/write.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;archive.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;archive_entry.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ar.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: write.c 3629 2018-09-30 19:26:28Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ARMAG_LEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ARHDR_LEN</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_INIT_AS_CAP</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_INIT_SYMOFF_CAP</name></cpp:macro> <cpp:value>(256*(sizeof(uint32_t)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_INIT_SYMNAME_CAP</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MAXNAMELEN_SVR4</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MAXNAMELEN_BSD</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TRUNCATE_LEN</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_to_ar_str_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_to_ar_sym_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>create_obj_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>mtime</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>create_symtab_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_obj</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>insert_obj</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>read_objs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archive</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>checkargv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>write_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>write_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>write_objs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type>
<name>create_obj_from_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>mtime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ar_obj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"can't open file: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmpname</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bname</name> <operator>=</operator> <call><name>basename</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"basename failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_TR</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>bname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>_TRUNCATE_LEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>_TRUNCATE_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strncpy</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>bname</name></expr></argument>, <argument><expr><name>_TRUNCATE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>_TRUNCATE_LEN</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else
if <condition>(<expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>bname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"strdup failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"can't fstat file: %s"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>giveup</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s is not an ordinary file"</literal></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>giveup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>.</operator><name>st_dev</name></name> <operator>==</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>ar_dev</name></name> <operator>&amp;&amp;</operator> <name><name>sb</name><operator>.</operator><name>st_ino</name></name> <operator>==</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>ar_ino</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"cannot add archive \"%s\" to itself"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>giveup</name>;</goto>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>mtime</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_U</name> <operator>&amp;&amp;</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name> <operator>&lt;=</operator> <name>mtime</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>giveup</name>;</goto></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_D</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>md</name></name> <operator>=</operator> <name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_uid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_gid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>md</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ino</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>obj</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name> <operator>=</operator> <call><name>elf_open</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"file initialization failed for %s: %s"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>giveup</name>;</goto>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>elf_cntl</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name></expr></argument>, <argument><expr><name>ELF_C_FDREAD</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s could not be read in: %s"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>giveup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"close failed: %s"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>obj</name><operator>)</operator></expr>;</return>

<label><name>giveup</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elf_end</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"close failed: %s"</literal></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_obj</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>elf_end</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>insert_obj</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"try to insert a null obj"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>obj</name> <operator>==</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>





<goto>goto <name>tail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_B</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_INSERT_BEFORE</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>objs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_A</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_INSERT_AFTER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsdar</name><operator>-&gt;</operator><name>v_obj</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>objs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<label><name>tail</name>:</label>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsdar</name><operator>-&gt;</operator><name>v_obj</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>objs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>read_objs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>archive</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>checkargv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>av</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>find</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_read_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"archive_read_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_read_support_format_ar</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AC</name><argument_list>(<argument><expr><call><name>archive_read_open_filename</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>archive</name></expr></argument>, <argument><expr><name>DEF_BLKSZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>archive_read_next_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_WARN</name> <operator>||</operator> <name>r</name> <operator>==</operator> <name>ARCHIVE_RETRY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ARCHIVE_RETRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Retrying..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>archive_entry_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>bsdar_is_pseudomember</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>checkargv</name> <operator>&amp;&amp;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>find</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>av</name> <operator>=</operator> <operator>&amp;</operator><name><name>bsdar</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>av</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bname</name> <operator>=</operator> <call><name>basename</name><argument_list>(<argument><expr><operator>*</operator><name>av</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"basename failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>bname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>av</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>find</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>find</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>archive_entry_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buff</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>archive_read_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>buff</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ar_obj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name> <operator>=</operator> <call><name>elf_openmemory</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"elf_openmemory() "</literal>
<literal type="string">"failed for %s: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"strdup failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>archive_entry_uid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <call><name>archive_entry_gid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>md</name></name> <operator>=</operator> <call><name>archive_entry_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>archive_entry_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>ino</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsdar</name><operator>-&gt;</operator><name>v_obj</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>objs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>AC</name><argument_list>(<argument><expr><call><name>archive_read_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACV</name><argument_list>(<argument><expr><call><name>archive_read_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>ar_write_archive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>nobj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj_temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>av</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exitcode</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsdar</name><operator>-&gt;</operator><name>v_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exitcode</name> <operator>=</operator> <name>EXIT_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nobj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mode</name> <operator>==</operator> <literal type="char">'A'</literal> <operator>||</operator> <name>mode</name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name>mode</name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name>mode</name> <operator>==</operator> <literal type="char">'q'</literal> <operator>||</operator>
<name>mode</name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name>mode</name> <operator>==</operator> <literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"stat %s failed"</literal></expr></argument>,
<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>EXIT_FAILURE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <literal type="char">'r'</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s: no such file"</literal></expr></argument>,
<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>EXIT_FAILURE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_C</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"creating %s"</literal></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>new_archive</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>ar_dev</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>ar_ino</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>read_objs</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>write_objs</name>;</goto></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>new_archive</name>;</goto></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>read_objs</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>addlib</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>write_objs</name>;</goto>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_A</name> <operator>||</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_B</name></expr>)</condition> <block>{<block_content>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>obj</argument>, <argument>&amp;bsdar-&gt;v_obj</argument>, <argument>objs</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>posarg</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>






<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>AR_A</name> <operator>|</operator> <name>AR_B</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>av</name> <operator>=</operator> <operator>&amp;</operator><name><name>bsdar</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<macro><name>TAILQ_FOREACH_SAFE</name><argument_list>(<argument>obj</argument>, <argument>&amp;bsdar-&gt;v_obj</argument>, <argument>objs</argument>, <argument>obj_temp</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bname</name> <operator>=</operator> <call><name>basename</name><argument_list>(<argument><expr><operator>*</operator><name>av</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"basename failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_TR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>bname</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>_TRUNCATE_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else
if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>bname</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>nobj</name> <operator>=</operator> <call><name>create_obj_from_file</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><operator>*</operator><name>av</name></expr></argument>,
<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nobj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exitcode</name> <operator>=</operator> <name>EXIT_FAILURE</name></expr>;</expr_stmt>
<goto>goto <name>skip_obj</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_V</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"%c - %s\n"</literal></expr></argument>,
<argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>*</operator><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsdar</name><operator>-&gt;</operator><name>v_obj</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>objs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name>mode</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_obj</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_obj</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>skip_obj</name>:</label>
<expr_stmt><expr><operator>*</operator><name>av</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

</block_content>}</block></for>

<label><name>new_archive</name>:</label>







<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>av</name> <operator>=</operator> <operator>&amp;</operator><name><name>bsdar</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>av</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>mode</name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name>mode</name> <operator>==</operator> <literal type="char">'q'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nobj</name> <operator>=</operator> <call><name>create_obj_from_file</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><operator>*</operator><name>av</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nobj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exitcode</name> <operator>=</operator> <name>EXIT_FAILURE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>av</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>insert_obj</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>nobj</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_V</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"a - %s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>av</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>av</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>write_objs</name>:</label>
<expr_stmt><expr><call><name>write_objs</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_cleanup</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>exitcode</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj_temp</name></decl>;</decl_stmt>

<macro><name>TAILQ_FOREACH_SAFE</name><argument_list>(<argument>obj</argument>, <argument>&amp;bsdar-&gt;v_obj</argument>, <argument>objs</argument>, <argument>obj_temp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsdar</name><operator>-&gt;</operator><name>v_obj</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>objs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>archive_write_data</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>archive_error_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>bsdar_symtab_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_BSD</name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator>
<name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>sz</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_svr4_symtab_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>htobe32</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>htobe32</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_data</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_data</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_data</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name></name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_bsd_symtab_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>br_sz</name></decl>, <decl><type ref="prev"/><name>br_off</name></decl>, <decl><type ref="prev"/><name>br_strx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>






<expr_stmt><expr><name>br_sz</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_data</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>s</name> <operator>=</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>br_strx</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>br_off</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_data</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_strx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_data</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_off</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>*</operator><name>s</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></for>





<expr_stmt><expr><name>br_sz</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_data</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_data</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name></name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_objs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_obj</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pm_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>obj_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>entry_name</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>rela_off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>obj</argument>, <argument>&amp;bsdar-&gt;v_obj</argument>, <argument>objs</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_SS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>elf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>create_symtab_entry</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj_sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_BSD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&gt;</operator> <name>_MAXNAMELEN_BSD</name> <operator>||</operator>
<call><name>strchr</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>obj_sz</name> <operator>+=</operator> <name>namelen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>namelen</name> <operator>&gt;</operator> <name>_MAXNAMELEN_SVR4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_to_ar_str_table</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj_sz</name> <operator>+=</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>rela_off</name></name> <operator>+=</operator> <name>_ARHDR_LEN</name> <operator>+</operator> <name>obj_sz</name> <operator>+</operator> <operator>(</operator><name>obj_sz</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>







<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name><index>[<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>as_sz</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name><index>[<expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_sz</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>









<expr_stmt><expr><name>s_sz</name> <operator>=</operator> <call><name>bsdar_symtab_size</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pm_sz</name> <operator>=</operator> <name>_ARMAG_LEN</name> <operator>+</operator> <operator>(</operator><name>_ARHDR_LEN</name> <operator>+</operator> <name>s_sz</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pm_sz</name> <operator>+=</operator> <name>_ARHDR_LEN</name> <operator>+</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>as_sz</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>pm_sz</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"archive_write_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_BSD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_write_set_format_ar_bsd</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_write_set_format_ar_svr4</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>AC</name><argument_list>(<argument><expr><call><name>archive_write_open_filename</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_SS</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_S</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_BSD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>entry_name</name> <operator>=</operator> <name>AR_SYMTAB_NAME_BSD</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>entry_name</name> <operator>=</operator> <name>AR_SYMTAB_NAME_SVR4</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>entry_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_D</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>s_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AC</name><argument_list>(<argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_BSD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_bsd_symtab_entry</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_svr4_symtab_entry</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>AR_STRINGTAB_NAME_SVR4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AC</name><argument_list>(<argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_data</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name></name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>obj</argument>, <argument>&amp;bsdar-&gt;v_obj</argument>, <argument>objs</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>elf_rawfile</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>elf</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"elf_rawfile() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_copy_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_uid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_gid</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>md</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_mtime</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_dev</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_ino</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_set_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>AE_IFREG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AC</name><argument_list>(<argument><expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_data</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>AC</name><argument_list>(<argument><expr><call><name>archive_write_close</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ACV</name><argument_list>(<argument><expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_symtab_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Shdr</name></type> <name>shdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Sym</name></type> <name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>shstrndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>elferr</name></decl>, <decl><type ref="prev"/><name>tabndx</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>elf_kind</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ELF_K_ELF</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>elf_getshstrndx</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shstrndx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"elf_getshstrndx failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tabndx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>elf_nextscn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shdr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>&amp;</operator><name>shdr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"elf_getshdr failed: %s"</literal></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>elf_strptr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>shstrndx</name></expr></argument>, <argument><expr><name><name>shdr</name><operator>.</operator><name>sh_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"elf_strptr failed: %s"</literal></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".strtab"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tabndx</name> <operator>=</operator> <call><name>elf_ndxscn</name><argument_list>(<argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>elferr</name> <operator>=</operator> <call><name>elf_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elferr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"elf_nextscn failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><name>elferr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tabndx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"can't find .strtab section"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>scn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>elf_nextscn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shdr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>&amp;</operator><name>shdr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"elf_getshdr failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shdr</name><operator>.</operator><name>sh_type</name></name> <operator>!=</operator> <name>SHT_SYMTAB</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>shdr</name><operator>.</operator><name>sh_size</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>data</name> <operator>=</operator> <call><name>elf_getdata</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>d_size</name></name> <operator>/</operator> <name><name>shdr</name><operator>.</operator><name>sh_entsize</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getsym</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sym</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>&amp;</operator><name>sym</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"gelf_getsym failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>GELF_ST_BIND</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STB_GLOBAL</name> <operator>&amp;&amp;</operator>
<call><name>GELF_ST_BIND</name><argument_list>(<argument><expr><name><name>sym</name><operator>.</operator><name>st_info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STB_WEAK</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sym</name><operator>.</operator><name>st_shndx</name></name> <operator>==</operator> <name>SHN_UNDEF</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>elf_strptr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>tabndx</name></expr></argument>,
<argument><expr><name><name>sym</name><operator>.</operator><name>st_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"elf_strptr failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_to_ar_sym_table</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
</block_content>}</block></while>
<expr_stmt><expr><name>elferr</name> <operator>=</operator> <call><name>elf_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elferr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"elf_nextscn failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><name>elferr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_to_ar_str_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_cap</name></name> <operator>=</operator> <name>_INIT_AS_CAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>as</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_cap</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<while>while <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_sz</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>as_cap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_cap</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name></name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"realloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsdar</name><operator>-&gt;</operator><name>as</name><index>[<expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_sz</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_sz</name></name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name><index>[<expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_sz</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>as</name><index>[<expr><name><name>bsdar</name><operator>-&gt;</operator><name>as_sz</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_to_ar_sym_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>_INIT_SYMOFF_CAP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so_cap</name></name> <operator>=</operator> <name>_INIT_SYMOFF_CAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>_INIT_SYMNAME_CAP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_cap</name></name> <operator>=</operator> <name>_INIT_SYMNAME_CAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_so_cap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so_cap</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name></name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so_cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"realloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_so</name><index>[<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name></expr>]</index></name> <operator>=</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>rela_off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_cnt</name></name><operator>++</operator></expr>;</expr_stmt>






<while>while <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_cap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_cap</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name></name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"realloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name><index>[<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn</name><index>[<expr><name><name>bsdar</name><operator>-&gt;</operator><name>s_sn_sz</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
