<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/ar/ar.c">



























































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;archive.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelftc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ar.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: ar.c 3629 2018-09-30 19:26:28Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<enum>enum <name>options</name>
<block>{
<decl><name>OPTION_HELP</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>longopts</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="string">"flavor"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'F'</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>OPTION_HELP</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"version"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'V'</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bsdar_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ranlib_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>only_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>valid_modes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bsdar_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl>, <decl><type ref="prev"/><name>bsdar_storage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arcmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>argv1_saved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exitcode</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>opt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bsdar</name> <operator>=</operator> <operator>&amp;</operator><name>bsdar_storage</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bsdar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exitcode</name> <operator>=</operator> <name>EXIT_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arcmd</name> <operator>=</operator> <name>argv1_saved</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>progname</name></name> <operator>=</operator> <call><name>ELFTC_GETPROGNAME</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>progname</name></name> <operator>=</operator> <literal type="string">"ar"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>elf_version</name><argument_list>(<argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EV_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ELF library initialization failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>progname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"ranlib"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>progname</name></name> <operator>+</operator> <name>len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"ranlib"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ranlib"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"tDUV"</literal></expr></argument>, <argument><expr><name>longopts</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_D</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AR_D</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><call><name>bsdar_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPTION_HELP</name></expr>:</case>
<expr_stmt><expr><call><name>ranlib_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><call><name>ranlib_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ranlib_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_S</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <operator>*</operator><name>argv</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exitcode</name> <operator>|=</operator> <call><name>ar_write_archive</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argv1_saved</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arcmd</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>arcmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"-%s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>arcmd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"abCcdDfF:ijlMmopqrSsTtUuVvxz"</literal></expr></argument>,
<argument><expr><name>longopts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_A</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_B</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_CC</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_C</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_D</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"svr4"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"gnu"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AR_BSD</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"bsd"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_BSD</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_TR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_O</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_SS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_S</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AR_D</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_U</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><call><name>bsdar_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>AR_V</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<break>break;</break>
<case>case <expr><name>OPTION_HELP</name></expr>:</case>
<expr_stmt><expr><call><name>bsdar_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><call><name>bsdar_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>arcmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>argv1_saved</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arcmd</name> <operator>=</operator> <name>argv1_saved</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argv</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <literal type="char">'M'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_A</name> <operator>&amp;&amp;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_B</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"only one of -a and -[bi] options allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_J</name> <operator>&amp;&amp;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_Z</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"only one of -j and -z options allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_S</name> <operator>&amp;&amp;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_SS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"only one of -s and -S options allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <operator>(</operator><name>AR_A</name> <operator>|</operator> <name>AR_B</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"no position operand specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>posarg</name></name> <operator>=</operator> <call><name>basename</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"basename failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_A</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="string">"-a"</literal></expr></argument>, <argument><expr><literal type="string">"mqr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_B</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>, <argument><expr><literal type="string">"mqr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_C</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="string">"qr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_CC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="string">"-C"</literal></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_D</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="string">"-D"</literal></expr></argument>, <argument><expr><literal type="string">"qr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_O</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="string">"-o"</literal></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_SS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="string">"-S"</literal></expr></argument>, <argument><expr><literal type="string">"mqr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_U</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>only_mode</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="string">"-u"</literal></expr></argument>, <argument><expr><literal type="string">"qrx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ar_mode_script</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bsdar</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <operator>*</operator><name>argv</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <operator>--</operator><name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <operator>++</operator><name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"ptx"</literal></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>bsdar</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>AR_S</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exitcode</name> <operator>=</operator> <call><name>ar_write_archive</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'m'</literal></expr>:</case> <case>case <expr><literal type="char">'q'</literal></expr>:</case> <case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>exitcode</name> <operator>=</operator> <call><name>ar_write_archive</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> <case>case <expr><literal type="char">'t'</literal></expr>:</case> <case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>exitcode</name> <operator>=</operator> <call><name>ar_read_archive</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>bsdar_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bsdar_warnc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s: not found in archive"</literal></expr></argument>,
<argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exitcode</name> <operator>=</operator> <name>EXIT_FAILURE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Can't specify both -%c and -%c"</literal></expr></argument>,
<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>only_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>bsdar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>valid_modes</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>valid_modes</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsdar_errc</name><argument_list>(<argument><expr><name>bsdar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Option %s is not permitted in mode -%c"</literal></expr></argument>,
<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>bsdar</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_USAGE_MESSAGE</name></cpp:macro> <cpp:value>"Usage: %s &lt;command&gt; [options] archive file...\nManage archives.\n\nWhere &lt;command&gt; is one of:\n-d Delete members from the archive.\n-m Move archive members within the archive.\n-p Write the contents of members to standard output.\n-q Append files to an archive.\n-r Replace (add) files to an archive.\n-s Add an archive symbol to an archive.\n-t List files in an archive.\n-x Extract members from an archive.\n-M Execute MRI librarian commands.\n-V Print a version identifier and exit.\n\nOptions:\n-a MEMBER Add members after the specified member.\n-b MEMBER | -i MEMBER\nAdd members before the specified member.\n-c Do not print a message when creating a new archive.\n-f | -T Only use the first fifteen characters of the member name.\n-j (This option is accepted, but is ignored).\n-l (This option is accepted, but is ignored).\n-o Preserve modification times when extracting members.\n-u Conditionally update or extract members.\n-v Be verbose.\n-z (This option is accepted, but is ignored).\n-C Do not overwrite existing files in the file system.\n-D Use fixed metadata, for consistent archive checksums.\n-F FORMAT | --flavor=FORMAT\nCreate archives with the specified format.\n-S Do not generate an archive symbol table.\n-U Use original metadata for archive members.\n"</cpp:value></cpp:define>
































<function><type><specifier>static</specifier> <name>void</name></type>
<name>bsdar_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>AR_USAGE_MESSAGE</name></expr></argument>, <argument><expr><call><name>ELFTC_GETPROGNAME</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANLIB_USAGE_MESSAGE</name></cpp:macro> <cpp:value>"Usage: %s [options] archive...\nUpdate or create archive symbol tables.\n\nOptions:\n-t (This option is accepted, but ignored).\n-D Use fixed metadata, for consistent archive checksums.\n-U Use original metadata, for unique archive checksums.\n-V Print a version identifier and exit.\n"</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>ranlib_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>RANLIB_USAGE_MESSAGE</name></expr></argument>, <argument><expr><call><name>ELFTC_GETPROGNAME</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bsdar_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s (%s, %s)\n"</literal></expr></argument>, <argument><expr><call><name>ELFTC_GETPROGNAME</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>archive_version_string</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>elftc_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
