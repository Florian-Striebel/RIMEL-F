<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/ar/ar.h">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_elftc.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_A</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_B</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_C</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_CC</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_J</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_O</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_S</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_SS</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_TR</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_U</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_V</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_Z</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_D</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_BSD</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_BLKSZ</name></cpp:macro> <cpp:value>10240</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_STRINGTAB_NAME_SVR4</name></cpp:macro> <cpp:value>"//"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_SYMTAB_NAME_BSD</name></cpp:macro> <cpp:value>"__.SYMDEF"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AR_SYMTAB_NAME_SVR4</name></cpp:macro> <cpp:value>"/"</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC</name><parameter_list>(<parameter><type><name>CALL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((CALL)) bsdar_errc(bsdar, 0, "%s", archive_error_string(a)); } while (0)</cpp:value></cpp:define>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCHIVE_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">2000000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACV</name><parameter_list>(<parameter><type><name>CALL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AC(CALL)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACV</name><parameter_list>(<parameter><type><name>CALL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (CALL); } while (0)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<struct>struct <name>ar_obj</name> <block>{
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ino_t</name></type> <name>ino</name></decl>;</decl_stmt>

<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>ar_obj</argument>)</argument_list></macro> <expr_stmt><expr><name>objs</name></expr>;</expr_stmt>
}</block>;</struct>




<struct>struct <name>bsdar</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addlib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>posarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dev_t</name></type> <name>ar_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ino_t</name></type> <name>ar_ino</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>as_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>as_cap</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint32_t</name></type> <name>s_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>s_so</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_so_cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s_sn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_sn_cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_sn_sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>rela_off</name></decl>;</decl_stmt>

<macro><name>TAILQ_HEAD</name><argument_list>(<argument/>, <argument>ar_obj</argument>)</argument_list></macro> <expr_stmt><expr><name>v_obj</name></expr>;</expr_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>ar_mode_script</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ar_read_archive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>_ar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ar_write_archive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>_ar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bsdar_errc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>bsdar_is_pseudomember</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type><name>_ar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bsdar_strmode</name><parameter_list>(<parameter><decl><type><name>mode_t</name></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>bsdar_warnc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsdar</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
</unit>
