<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/common/_elftc.h">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_ELFTC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ELFTC_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>((void *) 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>offsetof</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>offsetof</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) &amp;((T*) 0) -&gt; M)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIST_FOREACH_SAFE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_FOREACH_SAFE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>tvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((var) = LIST_FIRST((head)); (var) &amp;&amp; ((tvar) = LIST_NEXT((var), field), 1); (var) = (tvar))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SLIST_FOREACH_SAFE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLIST_FOREACH_SAFE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>tvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((var) = SLIST_FIRST((head)); (var) &amp;&amp; ((tvar) = SLIST_NEXT((var), field), 1); (var) = (tvar))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_CONCAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_CONCAT</name><parameter_list>(<parameter><type><name>head1</name></type></parameter>, <parameter><type><name>head2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!STAILQ_EMPTY((head2))) { *(head1)-&gt;stqh_last = (head2)-&gt;stqh_first; (head1)-&gt;stqh_last = (head2)-&gt;stqh_last; STAILQ_INIT((head2)); } } while (0)</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_EMPTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_EMPTY</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;stqh_first == NULL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_ENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_ENTRY</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct { struct type *stqe_next; }</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_FIRST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_FIRST</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((head)-&gt;stqh_first)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_HEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct name { struct type *stqh_first; struct type **stqh_last; }</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_HEAD_INITIALIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_HEAD_INITIALIZER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ NULL, &amp;(head).stqh_first }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_FOREACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_FOREACH</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((var) = ((head)-&gt;stqh_first); (var); (var) = ((var)-&gt;field.stqe_next))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_FOREACH_SAFE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_FOREACH_SAFE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>tvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((var) = STAILQ_FIRST((head)); (var) &amp;&amp; ((tvar) = STAILQ_NEXT((var), field), 1); (var) = (tvar))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_INIT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (head)-&gt;stqh_first = NULL; (head)-&gt;stqh_last = &amp;(head)-&gt;stqh_first; } while (0)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_INSERT_HEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_INSERT_HEAD</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm)-&gt;field.stqe_next = (head)-&gt;stqh_first) == NULL) (head)-&gt;stqh_last = &amp;(elm)-&gt;field.stqe_next; (head)-&gt;stqh_first = (elm); } while (0)</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_INSERT_TAIL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_INSERT_TAIL</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (elm)-&gt;field.stqe_next = NULL; *(head)-&gt;stqh_last = (elm); (head)-&gt;stqh_last = &amp;(elm)-&gt;field.stqe_next; } while (0)</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_INSERT_AFTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_INSERT_AFTER</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>listelm</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((elm)-&gt;field.stqe_next = (listelm)-&gt;field.stqe_next) == NULL)(head)-&gt;stqh_last = &amp;(elm)-&gt;field.stqe_next; (listelm)-&gt;field.stqe_next = (elm); } while (0)</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_LAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_LAST</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(STAILQ_EMPTY((head)) ? NULL : ((struct type *)(void *) ((char *)((head)-&gt;stqh_last) - offsetof(struct type, field))))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_NEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_NEXT</name><parameter_list>(<parameter><type><name>elm</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((elm)-&gt;field.stqe_next)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_REMOVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_REMOVE</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>elm</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((head)-&gt;stqh_first == (elm)) { STAILQ_REMOVE_HEAD((head), field); } else { struct type *curelm = (head)-&gt;stqh_first; while (curelm-&gt;field.stqe_next != (elm)) curelm = curelm-&gt;field.stqe_next; if ((curelm-&gt;field.stqe_next = curelm-&gt;field.stqe_next-&gt;field.stqe_next) == NULL) (head)-&gt;stqh_last = &amp;(curelm)-&gt;field.stqe_next; } } while (0)</cpp:value></cpp:define>











<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_REMOVE_HEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_REMOVE_HEAD</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((head)-&gt;stqh_first = (head)-&gt;stqh_first-&gt;field.stqe_next) == NULL) (head)-&gt;stqh_last = &amp;(head)-&gt;stqh_first; } while (0)</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STAILQ_SORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAILQ_SORT</name><parameter_list>(<parameter><type><name>head</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { STAILQ_HEAD(, type) _la, _lb; struct type *_p, *_q, *_e; int _i, _sz, _nmerges, _psz, _qsz; _sz = 1; do { _nmerges = 0; STAILQ_INIT(&amp;_lb); while (!STAILQ_EMPTY((head))) { _nmerges++; STAILQ_INIT(&amp;_la); _psz = 0; for (_i = 0; _i &lt; _sz &amp;&amp; !STAILQ_EMPTY((head)); _i++) { _e = STAILQ_FIRST((head)); if (_e == NULL) break; _psz++; STAILQ_REMOVE_HEAD((head), field); STAILQ_INSERT_TAIL(&amp;_la, _e, field); } _p = STAILQ_FIRST(&amp;_la); _qsz = _sz; _q = STAILQ_FIRST((head)); while (_psz &gt; 0 || (_qsz &gt; 0 &amp;&amp; _q != NULL)) { if (_psz == 0) { _e = _q; _q = STAILQ_NEXT(_q, field); STAILQ_REMOVE_HEAD((head), field); _qsz--; } else if (_qsz == 0 || _q == NULL) { _e = _p; _p = STAILQ_NEXT(_p, field); STAILQ_REMOVE_HEAD(&amp;_la, field);_psz--; } else if (cmp(_p, _q) &lt;= 0) { _e = _p; _p = STAILQ_NEXT(_p, field); STAILQ_REMOVE_HEAD(&amp;_la, field);_psz--; } else { _e = _q; _q = STAILQ_NEXT(_q, field); STAILQ_REMOVE_HEAD((head), field); _qsz--; } STAILQ_INSERT_TAIL(&amp;_lb, _e, field); } } (head)-&gt;stqh_first = _lb.stqh_first; (head)-&gt;stqh_last = _lb.stqh_last; _sz *= 2; } while (_nmerges &gt; 1); } while (0)</cpp:value></cpp:define>
























































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TAILQ_FOREACH_SAFE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAILQ_FOREACH_SAFE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>head</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>tvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((var) = TAILQ_FIRST((head)); (var) &amp;&amp; ((tvar) = TAILQ_NEXT((var), field), 1); (var) = (tvar))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ELFTC_VCSID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_VCSID</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__RCSID(ID)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_VCSID</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__FBSDID(ID)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNU__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_VCSID</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__(".ident\t\"" ID "\"")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_VCSID</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__minix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_VCSID</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__(".ident\t\"" ID "\"")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_VCSID</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_VCSID</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__RCSID(ID)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_VCSID</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__(".ident\t\"" ID "\"")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_VCSID</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ELFTC_GETPROGNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__minix</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_GETPROGNAME</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>getprogname()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>program_invocation_short_name</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_GETPROGNAME</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>program_invocation_short_name</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__progname</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_GETPROGNAME</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__progname</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libkern/OSByteOrder.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htobe32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OSSwapHostToBigInt32(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htole32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OSSwapHostToLittleInt32(x)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>roundup2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>roundup2</name></cpp:macro> <cpp:value>roundup</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER</name></cpp:macro> <cpp:value>__DARWIN_BYTE_ORDER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>__DARWIN_LITTLE_ENDIAN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_BIG_ENDIAN</name></cpp:macro> <cpp:value>__DARWIN_BIG_ENDIAN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_MMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_STRMODE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_NEED_BYTEORDER_EXTENSIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;osreldate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/endian.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER</name></cpp:macro> <cpp:value>_BYTE_ORDER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>_LITTLE_ENDIAN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_BIG_ENDIAN</name></cpp:macro> <cpp:value>_BIG_ENDIAN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_MMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endian.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER</name></cpp:macro> <cpp:value>__BYTE_ORDER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>__LITTLE_ENDIAN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_BIG_ENDIAN</name></cpp:macro> <cpp:value>__BIG_ENDIAN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_MMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_STRMODE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_NEED_BYTEORDER_EXTENSIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>roundup2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>roundup2</name></cpp:macro> <cpp:value>roundup</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;osreldate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/endian.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER</name></cpp:macro> <cpp:value>_BYTE_ORDER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>_LITTLE_ENDIAN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_BIG_ENDIAN</name></cpp:macro> <cpp:value>_BIG_ENDIAN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_MMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_STRMODE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD_version</name> <operator>&lt;=</operator> <literal type="number">900000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BROKEN_YY_NO_INPUT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__minix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_MMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/endian.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER</name></cpp:macro> <cpp:value>_BYTE_ORDER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>_LITTLE_ENDIAN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_BIG_ENDIAN</name></cpp:macro> <cpp:value>_BIG_ENDIAN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_MMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_STRMODE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__NetBSD_Version__</name> <operator>&lt;=</operator> <literal type="number">599002100</literal></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BROKEN_YY_NO_INPUT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/endian.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER</name></cpp:macro> <cpp:value>_BYTE_ORDER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>_LITTLE_ENDIAN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_BYTE_ORDER_BIG_ENDIAN</name></cpp:macro> <cpp:value>_BIG_ENDIAN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_MMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_HAVE_STRMODE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFTC_NEED_BYTEORDER_EXTENSIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>roundup2</name></cpp:macro> <cpp:value>roundup</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
