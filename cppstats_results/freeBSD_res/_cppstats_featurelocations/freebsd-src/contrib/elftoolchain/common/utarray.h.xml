<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/common/utarray.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UTARRAY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTARRAY_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTARRAY_VERSION</name></cpp:macro> <cpp:value>1.9.7</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UNUSED_</name></cpp:macro> <cpp:value>__attribute__ ((__unused__))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UNUSED_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>oom</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>oom</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>exit(-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>ctor_f</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>dtor_f</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>init_f</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>init_f</name> <modifier>*</modifier></type><name>init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctor_f</name> <modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dtor_f</name> <modifier>*</modifier></type><name>dtor</name></decl>;</decl_stmt>
}</block></struct></type> <name>UT_icd</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>,<name>n</name>;</decl_stmt>
<decl_stmt><decl><type><name>UT_icd</name></type> <name>icd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
}</block></struct></type> <name>UT_array</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_init</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>_icd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { memset(a,0,sizeof(UT_array)); (a)-&gt;icd=*_icd; } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_done</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((a)-&gt;n) { if ((a)-&gt;icd.dtor) { size_t _ut_i; for(_ut_i=0; _ut_i &lt; (a)-&gt;i; _ut_i++) { (a)-&gt;icd.dtor(utarray_eltptr(a,_ut_i)); } } free((a)-&gt;d); } (a)-&gt;n=0; } while(0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_new</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>_icd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { a=(UT_array*)malloc(sizeof(UT_array)); utarray_init(a,_icd); } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_free</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { utarray_done(a); free(a); } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_reserve</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>by</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (((a)-&gt;i+by) &gt; ((a)-&gt;n)) { while(((a)-&gt;i+by) &gt; ((a)-&gt;n)) { (a)-&gt;n = ((a)-&gt;n ? (2*(a)-&gt;n) : 8); } if ( ((a)-&gt;d=(char*)realloc((a)-&gt;d, (a)-&gt;n*(a)-&gt;icd.sz)) == NULL) oom(); } } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_push_back</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { utarray_reserve(a,1); if ((a)-&gt;icd.copy) { (a)-&gt;icd.copy( _utarray_eltptr(a,(a)-&gt;i++), p); } else { memcpy(_utarray_eltptr(a,(a)-&gt;i++), p, (a)-&gt;icd.sz); }; } while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_pop_back</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((a)-&gt;icd.dtor) { (a)-&gt;icd.dtor( _utarray_eltptr(a,--((a)-&gt;i))); } else { (a)-&gt;i--; } } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_extend_back</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { utarray_reserve(a,1); if ((a)-&gt;icd.init) { (a)-&gt;icd.init(_utarray_eltptr(a,(a)-&gt;i)); } else { memset(_utarray_eltptr(a,(a)-&gt;i),0,(a)-&gt;icd.sz); } (a)-&gt;i++; } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_len</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;i)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_eltptr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((j) &lt; (a)-&gt;i) ? _utarray_eltptr(a,j) : NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_utarray_eltptr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char*)((a)-&gt;d + ((a)-&gt;icd.sz*(j) )))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_insert</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { utarray_reserve(a,1); if (j &gt; (a)-&gt;i) break; if ((j) &lt; (a)-&gt;i) { memmove( _utarray_eltptr(a,(j)+1), _utarray_eltptr(a,j), ((a)-&gt;i - (j))*((a)-&gt;icd.sz)); } if ((a)-&gt;icd.copy) { (a)-&gt;icd.copy( _utarray_eltptr(a,j), p); } else { memcpy(_utarray_eltptr(a,j), p, (a)-&gt;icd.sz); }; (a)-&gt;i++; } while(0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_inserta</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (utarray_len(w) == 0) break; if (j &gt; (a)-&gt;i) break; utarray_reserve(a,utarray_len(w)); if ((j) &lt; (a)-&gt;i) { memmove(_utarray_eltptr(a,(j)+utarray_len(w)), _utarray_eltptr(a,j), ((a)-&gt;i - (j))*((a)-&gt;icd.sz)); } if ((a)-&gt;icd.copy) { size_t _ut_i; for(_ut_i=0;_ut_i&lt;(w)-&gt;i;_ut_i++) { (a)-&gt;icd.copy(_utarray_eltptr(a,j+_ut_i), _utarray_eltptr(w,_ut_i)); } } else { memcpy(_utarray_eltptr(a,j), _utarray_eltptr(w,0), utarray_len(w)*((a)-&gt;icd.sz)); } (a)-&gt;i += utarray_len(w); } while(0)</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_resize</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>,<parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { size_t _ut_i; if (dst-&gt;i &gt; (size_t)(num)) { if ((dst)-&gt;icd.dtor) { for(_ut_i=num; _ut_i &lt; dst-&gt;i; _ut_i++) { (dst)-&gt;icd.dtor(utarray_eltptr(dst,_ut_i)); } } } else if (dst-&gt;i &lt; (size_t)(num)) { utarray_reserve(dst,num-dst-&gt;i); if ((dst)-&gt;icd.init) { for(_ut_i=dst-&gt;i; _ut_i &lt; num; _ut_i++) { (dst)-&gt;icd.init(utarray_eltptr(dst,_ut_i)); } } else { memset(_utarray_eltptr(dst,dst-&gt;i),0,(dst)-&gt;icd.sz*(num-dst-&gt;i)); } } dst-&gt;i = num; } while(0)</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_concat</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>,<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { utarray_inserta((dst),(src),utarray_len(dst)); } while(0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_erase</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((a)-&gt;icd.dtor) { size_t _ut_i; for(_ut_i=0; _ut_i &lt; len; _ut_i++) { (a)-&gt;icd.dtor(utarray_eltptr((a),pos+_ut_i)); } } if ((a)-&gt;i &gt; (pos+len)) { memmove( _utarray_eltptr((a),pos), _utarray_eltptr((a),pos+len), (((a)-&gt;i)-(pos+len))*((a)-&gt;icd.sz)); } (a)-&gt;i -= (len); } while(0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_renew</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (a) utarray_clear(a); else utarray_new((a),(u)); } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_clear</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((a)-&gt;i &gt; 0) { if ((a)-&gt;icd.dtor) { size_t _ut_i; for(_ut_i=0; _ut_i &lt; (a)-&gt;i; _ut_i++) { (a)-&gt;icd.dtor(utarray_eltptr(a,_ut_i)); } } (a)-&gt;i = 0; } } while(0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_sort</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { qsort((a)-&gt;d, (a)-&gt;i, (a)-&gt;icd.sz, cmp); } while(0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_find</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>v</name></type></parameter>,<parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bsearch((v),(a)-&gt;d,(a)-&gt;i,(a)-&gt;icd.sz,cmp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_front</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)-&gt;i) ? (_utarray_eltptr(a,0)) : NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_next</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((e)==NULL) ? utarray_front(a) : (((int)((a)-&gt;i) &gt; (utarray_eltidx(a,e)+1)) ? _utarray_eltptr(a,utarray_eltidx(a,e)+1) : NULL))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_prev</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((e)==NULL) ? utarray_back(a) : ((utarray_eltidx(a,e) &gt; 0) ? _utarray_eltptr(a,utarray_eltidx(a,e)-1) : NULL))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_back</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)-&gt;i) ? (_utarray_eltptr(a,(a)-&gt;i-1)) : NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utarray_eltidx</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((char*)(e) &gt;= (char*)((a)-&gt;d)) ? (int)(((char*)(e) - (char*)((a)-&gt;d))/(a)-&gt;icd.sz) : -1)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>utarray_str_cpy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>_src</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><specifier>const</specifier><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>_dst</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>_dst</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>_src</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>strdup</name><argument_list>(<argument><expr><operator>*</operator><name>_src</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>utarray_str_dtor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>eltc</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>elt</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>eltc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>eltc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UT_icd</name> <name>ut_str_icd</name></type> <name>_UNUSED_</name> <init>= <expr><block>{<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,<expr><name>NULL</name></expr>,<expr><name>utarray_str_cpy</name></expr>,<expr><name>utarray_str_dtor</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UT_icd</name> <name>ut_int_icd</name></type> <name>_UNUSED_</name> <init>= <expr><block>{<expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>,<expr><name>NULL</name></expr>,<expr><name>NULL</name></expr>,<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UT_icd</name> <name>ut_ptr_icd</name></type> <name>_UNUSED_</name> <init>= <expr><block>{<expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,<expr><name>NULL</name></expr>,<expr><name>NULL</name></expr>,<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
