<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libpe/_libpe.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBPE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LIBPE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_elftc.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>_PE_SecBuf</name> <block>{
<decl_stmt><decl><type><name>PE_Buffer</name></type> <name>sb_pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>sb_ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sb_flags</name></decl>;</decl_stmt>
<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>_PE_SecBuf</argument>)</argument_list></macro> <expr_stmt><expr><name>sb_next</name></expr>;</expr_stmt>
}</block></struct></type> <name>PE_SecBuf</name>;</typedef>

<struct>struct <name>_PE_Scn</name> <block>{
<decl_stmt><decl><type><name>PE</name> <modifier>*</modifier></type><name>ps_pe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_SecHdr</name></type> <name>ps_sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ps_ndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ps_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ps_falign</name></decl>;</decl_stmt>
<macro><name>STAILQ_HEAD</name><argument_list>(<argument/>, <argument>_PE_SecBuf</argument>)</argument_list></macro> <expr_stmt><expr><name>ps_b</name></expr>;</expr_stmt>
<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>_PE_Scn</argument>)</argument_list></macro> <expr_stmt><expr><name>ps_next</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>_PE</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pe_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_Cmd</name></type> <name>pe_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_Object</name></type> <name>pe_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pe_fsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pe_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_DosHdr</name> <modifier>*</modifier></type><name>pe_dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pe_stub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pe_stub_ex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pe_stub_app</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pe_stub_app_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_RichHdr</name> <modifier>*</modifier></type><name>pe_rh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pe_rh_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_CoffHdr</name> <modifier>*</modifier></type><name>pe_ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_OptHdr</name> <modifier>*</modifier></type><name>pe_oh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_DataDir</name> <modifier>*</modifier></type><name>pe_dd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pe_nscn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pe_symtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pe_symbtab_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pe_nsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pe_rvamax</name></decl>;</decl_stmt>
<macro><name>STAILQ_HEAD</name><argument_list>(<argument/>, <argument>_PE_Scn</argument>)</argument_list></macro> <expr_stmt><expr><name>pe_scn</name></expr>;</expr_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_API_MASK</name></cpp:macro> <cpp:value>0x000FFFU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_SPECIAL_FILE</name></cpp:macro> <cpp:value>0x001000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_BAD_DOS_HEADER</name></cpp:macro> <cpp:value>0x002000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_BAD_PE_HEADER</name></cpp:macro> <cpp:value>0x004000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_BAD_COFF_HEADER</name></cpp:macro> <cpp:value>0x008000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_BAD_OPT_HEADER</name></cpp:macro> <cpp:value>0x010000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_BAD_SEC_HEADER</name></cpp:macro> <cpp:value>0x020000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_LOAD_DOS_STUB</name></cpp:macro> <cpp:value>0x040000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_FD_DONE</name></cpp:macro> <cpp:value>0x080000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_DIRTY_DOS_HEADER</name></cpp:macro> <cpp:value>0x100000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_DIRTY_COFF_HEADER</name></cpp:macro> <cpp:value>0x200000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_DIRTY_OPT_HEADER</name></cpp:macro> <cpp:value>0x400000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_DIRTY_SEC_HEADER</name></cpp:macro> <cpp:value>0x800000U</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_LOAD_SECTION</name></cpp:macro> <cpp:value>0x1000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_STRIP_SECTION</name></cpp:macro> <cpp:value>0x2000U</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBPE_F_BUFFER_MALLOCED</name></cpp:macro> <cpp:value>0x1000U</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DOS_MAGIC</name></cpp:macro> <cpp:value>0x5a4dU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_RICH_TEXT</name></cpp:macro> <cpp:value>"Rich"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_RICH_HIDDEN</name></cpp:macro> <cpp:value>0x536e6144U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_SIGNATURE</name></cpp:macro> <cpp:value>0x4550U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_COFF_OPT_SIZE_32</name></cpp:macro> <cpp:value>224</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_COFF_OPT_SIZE_32P</name></cpp:macro> <cpp:value>240</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_SYM_ENTRY_SIZE</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELFTC_NEED_BYTEORDER_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline</name> <name>uint16_t</name></type>
<name>le16dec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>uint32_t</name></type>
<name>le32dec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>uint64_t</name></type>
<name>le64dec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>le32dec</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <call><name>le32dec</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type>
<name>le16enc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>u</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type>
<name>le32enc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>u</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type>
<name>le64enc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>le32enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>u</name> <operator>&amp;</operator> <literal type="number">0xffffffffU</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>le32enc</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_READ16</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (v) = le16dec((p)); (p) += 2; } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_READ32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (v) = le32dec((p)); (p) += 4; } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_WRITE16</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { le16enc((p), (v)); (p) += 2; } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_WRITE32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { le32enc((p), (v)); (p) += 4; } while(0)</cpp:value></cpp:define>






<function_decl><type><name>off_t</name></type> <name>libpe_align</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PE_SecBuf</name> <modifier>*</modifier></type><name>libpe_alloc_buffer</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>libpe_alloc_scn</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>libpe_load_all_sections</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>libpe_load_section</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>libpe_open_object</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>libpe_pad</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>libpe_parse_msdos_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>libpe_parse_coff_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>libpe_parse_rich_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>libpe_parse_section_headers</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>libpe_read_msdos_stub</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>libpe_release_buffer</name><parameter_list>(<parameter><decl><type><name>PE_SecBuf</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>libpe_release_object</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>libpe_release_scn</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>libpe_resync_buffers</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>libpe_resync_sections</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>libpe_write_buffers</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>off_t</name></type> <name>libpe_write_coff_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>off_t</name></type> <name>libpe_write_msdos_stub</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>off_t</name></type> <name>libpe_write_pe_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>off_t</name></type> <name>libpe_write_sections</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>off_t</name></type> <name>libpe_write_section_headers</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>off_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
