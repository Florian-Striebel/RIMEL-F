<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libpe/libpe_coff.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libpe.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libpe_coff.c 3326 2016-01-16 17:46:17Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>libpe_parse_coff_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_CoffHdr</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_OptHdr</name> <modifier>*</modifier></type><name>oh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_DataDir</name> <modifier>*</modifier></type><name>dd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_machine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_symptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_nsym</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_char</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>libpe_parse_section_headers</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oh</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_OptHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_oh</name></name> <operator>=</operator> <name>oh</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_OPT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (p + (n) &gt; ch-&gt;ch_optsize) { r = ch-&gt;ch_optsize - p; if (read(pe-&gt;pe_fd, tmp, r) != (ssize_t) r) { pe-&gt;pe_flags |= LIBPE_F_BAD_SEC_HEADER;return (0); } return (libpe_parse_section_headers(pe)); } if (read(pe-&gt;pe_fd, tmp, (n)) != (ssize_t) (n)) { pe-&gt;pe_flags |= LIBPE_F_BAD_OPT_HEADER; return (0); } p += (n); } while (0)</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_OPT8</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { READ_OPT(1); (v) = *tmp; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_OPT16</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { READ_OPT(2); (v) = le16dec(tmp); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_OPT32</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { READ_OPT(4); (v) = le32dec(tmp); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_OPT64</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { READ_OPT(8); (v) = le64dec(tmp); } while(0)</cpp:value></cpp:define>






<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oh</name><operator>-&gt;</operator><name>oh_magic</name></name> <operator>==</operator> <name>PE_FORMAT_32P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>=</operator> <name>PE_O_PE32P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>READ_OPT8</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ldvermajor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT8</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ldverminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_textsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_datasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_bsssize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_textbase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oh</name><operator>-&gt;</operator><name>oh_magic</name></name> <operator>!=</operator> <name>PE_FORMAT_32P</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_imgbase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>READ_OPT64</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_imgbase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_secalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_filealign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_osvermajor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_osverminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_imgvermajor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_imgverminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_subvermajor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_subverminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_win32ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_imgsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_hdrsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_subsystem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_dllchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oh</name><operator>-&gt;</operator><name>oh_magic</name></name> <operator>!=</operator> <name>PE_FORMAT_32P</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_stacksizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_stacksizec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_heapsizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_heapsizec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>READ_OPT64</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_stacksizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT64</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_stacksizec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT64</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_heapsizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT64</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_heapsizec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ldrflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ndatadir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ndatadir</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dd</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_DataDir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dd</name></name> <operator>=</operator> <name>dd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dd</name><operator>-&gt;</operator><name>dd_total</name></name> <operator>=</operator> <ternary><condition><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ndatadir</name></name> <operator>&lt;</operator> <name>PE_DD_MAX</name></expr> ?</condition><then> <expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ndatadir</name></name></expr> </then><else>:
<expr><name>PE_DD_MAX</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name><name>dd</name><operator>-&gt;</operator><name>dd_total</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>de_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_OPT32</name><argument_list>(<argument><expr><name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>de_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>&gt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>r</name> <operator>-=</operator> <name>s</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>r</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><name>r</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BAD_SEC_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>libpe_parse_section_headers</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>off_t</name></type>
<name>libpe_write_pe_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_cmd</name></name> <operator>==</operator> <name>PE_C_RDWR</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_PE_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name><operator>-&gt;</operator><name>dh_lfanew</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>off</name> <operator>=</operator> <call><name>libpe_align</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>le32enc</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>PE_SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_BAD_PE_HEADER</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_COFF_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_OPT_HEADER</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>off_t</name></type>
<name>libpe_write_coff_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_CoffHdr</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_DataDir</name> <modifier>*</modifier></type><name>dd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_OptHdr</name> <modifier>*</modifier></type><name>oh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_SecHdr</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reloc_rva</name></decl>, <decl><type ref="prev"/><name>reloc_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>reloc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reloc_rva</name> <operator>=</operator> <name>reloc_sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_cmd</name></name> <operator>==</operator> <name>PE_C_RDWR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_DIRTY_COFF_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_COFF_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name></expr>;</expr_stmt>
<goto>goto <name>coff_done</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>==</operator> <name>PE_O_PE32P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_machine</name></name> <operator>=</operator> <name>IMAGE_FILE_MACHINE_AMD64</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_machine</name></name> <operator>=</operator> <name>IMAGE_FILE_MACHINE_I386</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ch</name><operator>-&gt;</operator><name>ch_timestamp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_timestamp</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>==</operator> <name>PE_O_PE32</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>=</operator> <name>PE_COFF_OPT_SIZE_32</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_char</name></name> <operator>|=</operator> <name>IMAGE_FILE_EXECUTABLE_IMAGE</name> <operator>|</operator>
<name>IMAGE_FILE_32BIT_MACHINE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>==</operator> <name>PE_O_PE32P</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>=</operator> <name>PE_COFF_OPT_SIZE_32P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_char</name></name> <operator>|=</operator> <name>IMAGE_FILE_EXECUTABLE_IMAGE</name> <operator>|</operator>
<name>IMAGE_FILE_LARGE_ADDRESS_AWARE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>






<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_char</name></name> <operator>|=</operator> <name>IMAGE_FILE_LINE_NUMS_STRIPPED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>==</operator> <name>PE_O_PE32</name> <operator>||</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>==</operator> <name>PE_O_PE32P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_char</name></name> <operator>|=</operator> <name>IMAGE_FILE_LOCAL_SYMS_STRIPPED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_nsec</name></name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_nscn</name></name></expr>;</expr_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ps</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>==</operator> <literal type="number">0xFFFFFFFFU</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_symptr</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_nsym</name></name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_nsym</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>==</operator> <name>PE_O_PE32</name> <operator>||</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>==</operator> <name>PE_O_PE32P</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>==</operator> <operator>(</operator><literal type="number">0xFFFF0000</literal> <operator>|</operator> <name>PE_DD_BASERELOC</name><operator>)</operator> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_name</name></name></expr></argument>, <argument><expr><literal type="string">".reloc"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">".reloc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
<literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reloc_rva</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>reloc_sz</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_virtsize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reloc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_char</name></name> <operator>|=</operator> <name>IMAGE_FILE_RELOCS_STRIPPED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_OPT_HEADER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>==</operator> <name>PE_O_PE32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>=</operator> <name>PE_COFF_OPT_SIZE_32</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>==</operator> <name>PE_O_PE32P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>=</operator> <name>PE_COFF_OPT_SIZE_32P</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>hdr</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_machine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_symptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_nsym</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_char</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>coff_done</name>:</label>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_DIRTY_COFF_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_BAD_COFF_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_SEC_HEADER</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_cmd</name></name> <operator>==</operator> <name>PE_C_RDWR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_DIRTY_OPT_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_OPT_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name></expr></argument>,
<argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_oh</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oh</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_OptHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_oh</name></name> <operator>=</operator> <name>oh</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>oh</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_oh</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>==</operator> <name>PE_O_PE32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_magic</name></name> <operator>=</operator> <name>PE_FORMAT_32</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_magic</name></name> <operator>=</operator> <name>PE_FORMAT_32P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oh</name><operator>-&gt;</operator><name>oh_ldvermajor</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oh</name><operator>-&gt;</operator><name>oh_ldverminor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ldvermajor</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ldverminor</name></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ndatadir</name></name> <operator>=</operator> <name>PE_DD_MAX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oh</name><operator>-&gt;</operator><name>oh_filealign</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_filealign</name></name> <operator>=</operator> <literal type="number">0x200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oh</name><operator>-&gt;</operator><name>oh_secalign</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_secalign</name></name> <operator>=</operator> <literal type="number">0x1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_hdrsize</name></name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_nscn</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>PE_SecHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_filealign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_imgsize</name></name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_rvamax</name></name></expr></argument>, <argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_secalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_OPT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (p + (n) &gt; ch-&gt;ch_optsize) { if (libpe_pad(pe, ch-&gt;ch_optsize - p) &lt; 0) { errno = EIO; return (-1); } goto opt_done; } if (write(pe-&gt;pe_fd, tmp, (n)) != (ssize_t) (n)) { errno = EIO; return (-1); } p += (n); } while (0)</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_OPT8</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { *tmp = (v); WRITE_OPT(1); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_OPT16</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { le16enc(tmp, (v)); WRITE_OPT(2); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_OPT32</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { le32enc(tmp, (v)); WRITE_OPT(4); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_OPT64</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { le64enc(tmp, (v)); WRITE_OPT(8); } while(0)</cpp:value></cpp:define>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oh</name><operator>-&gt;</operator><name>oh_magic</name></name> <operator>==</operator> <name>PE_FORMAT_32P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>=</operator> <name>PE_O_PE32P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>WRITE_OPT8</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ldvermajor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT8</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ldverminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_textsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_datasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_bsssize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_textbase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oh</name><operator>-&gt;</operator><name>oh_magic</name></name> <operator>!=</operator> <name>PE_FORMAT_32P</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_imgbase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WRITE_OPT64</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_imgbase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_secalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_filealign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_osvermajor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_osverminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_imgvermajor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_imgverminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_subvermajor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_subverminor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_win32ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_imgsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_hdrsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_subsystem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT16</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_dllchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oh</name><operator>-&gt;</operator><name>oh_magic</name></name> <operator>!=</operator> <name>PE_FORMAT_32P</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_stacksizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_stacksizec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_heapsizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_heapsizec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>WRITE_OPT64</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_stacksizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT64</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_stacksizec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT64</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_heapsizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT64</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_heapsizec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ldrflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ndatadir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ndatadir</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dd</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_DataDir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dd</name></name> <operator>=</operator> <name>dd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dd</name><operator>-&gt;</operator><name>dd_total</name></name> <operator>=</operator> <name>PE_DD_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dd</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_dd</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>oh</name><operator>-&gt;</operator><name>oh_ndatadir</name></name> <operator>&lt;=</operator> <name>PE_DD_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>PE_DD_BASERELOC</name></expr>]</index></name><operator>.</operator><name>de_addr</name> <operator>=</operator> <name>reloc_rva</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>PE_DD_BASERELOC</name></expr>]</index></name><operator>.</operator><name>de_size</name> <operator>=</operator> <name>reloc_sz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name><name>dd</name><operator>-&gt;</operator><name>dd_total</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>de_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WRITE_OPT32</name><argument_list>(<argument><expr><name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>de_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>&gt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>libpe_pad</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>opt_done</name>:</label>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_optsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_DIRTY_OPT_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_BAD_OPT_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_SEC_HEADER</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
