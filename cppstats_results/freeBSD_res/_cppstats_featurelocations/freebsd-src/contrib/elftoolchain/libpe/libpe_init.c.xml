<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libpe/libpe_init.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libpe.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libpe_init.c 3312 2016-01-10 09:23:51Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>libpe_open_object</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>magic</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fsize</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISCHR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISFIFO</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>S_ISSOCK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_cmd</name></name> <operator>==</operator> <name>PE_C_RDWR</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_fsize</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>magic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>&amp;&amp;</operator> <name><name>magic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>=</operator> <name>PE_O_PE32</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>magic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>libpe_parse_msdos_header</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>magic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name><name>magic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>magic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>magic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>=</operator> <name>PE_O_PE32</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>libpe_parse_coff_header</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>=</operator> <name>PE_O_COFF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>magic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>libpe_parse_coff_header</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>libpe_release_object</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>_ps</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_rh</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_rh</name><operator>-&gt;</operator><name>rh_compid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_rh</name><operator>-&gt;</operator><name>rh_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_rh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_oh</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_oh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>ps</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>, <argument>_ps</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>libpe_release_scn</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
