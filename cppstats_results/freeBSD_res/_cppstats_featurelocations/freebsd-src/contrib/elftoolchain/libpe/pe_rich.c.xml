<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libpe/pe_rich.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libpe.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: pe_rich.c 3312 2016-01-10 09:23:51Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>PE_RichHdr</name> <modifier>*</modifier></type>
<name>pe_rich_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_rh</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_LOAD_DOS_STUB</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>libpe_read_msdos_stub</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_rh</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_rh</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>rol32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <name>c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">0x20</literal> <operator>-</operator> <name>c</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pe_rich_header_validate</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_RichHdr</name> <modifier>*</modifier></type><name>rh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pe_rich_header</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_rh_start</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>cksum</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_rh_start</name></name> <operator>-</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_rh_start</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <literal type="number">0x3c</literal> <operator>&amp;&amp;</operator> <name>off</name> <operator>&lt;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <call><name>rol32</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>rh</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_rh</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name><name>rh</name><operator>-&gt;</operator><name>rh_total</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <call><name>rol32</name><argument_list>(<argument><expr><name><name>rh</name><operator>-&gt;</operator><name>rh_compid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rh</name><operator>-&gt;</operator><name>rh_cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>cksum</name> <operator>==</operator> <name><name>rh</name><operator>-&gt;</operator><name>rh_xor</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
