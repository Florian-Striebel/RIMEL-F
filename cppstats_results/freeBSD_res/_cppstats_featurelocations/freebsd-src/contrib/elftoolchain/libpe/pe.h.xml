<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libpe/pe.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_PE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>





<typedef>typedef <type><struct>struct <name>_PE_DosHdr</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>dh_magic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_lastsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_nblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_nreloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_hdrsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_minalloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_maxalloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_checksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_relocpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_noverlay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>dh_reserved1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_oemid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>dh_oeminfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>dh_reserved2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dh_lfanew</name></decl>;</decl_stmt>
}</block></struct></type> <name>PE_DosHdr</name>;</typedef>





<typedef>typedef <type><struct>struct <name>_PE_RichHdr</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rh_xor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rh_total</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rh_compid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rh_cnt</name></decl>;</decl_stmt>
}</block></struct></type> <name>PE_RichHdr</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_UNKNOWN</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_AM33</name></cpp:macro> <cpp:value>0x1d3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_AMD64</name></cpp:macro> <cpp:value>0x8664</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_ARM</name></cpp:macro> <cpp:value>0x1c0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_ARMNT</name></cpp:macro> <cpp:value>0x1c4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_ARM64</name></cpp:macro> <cpp:value>0xaa64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_EBC</name></cpp:macro> <cpp:value>0xebc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_I386</name></cpp:macro> <cpp:value>0x14c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_IA64</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_M32R</name></cpp:macro> <cpp:value>0x9041</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_MIPS16</name></cpp:macro> <cpp:value>0x266</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_MIPSFPU</name></cpp:macro> <cpp:value>0x366</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_MIPSFPU16</name></cpp:macro> <cpp:value>0x466</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_POWERPC</name></cpp:macro> <cpp:value>0x1f0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_POWERPCFP</name></cpp:macro> <cpp:value>0x1f1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_R4000</name></cpp:macro> <cpp:value>0x166</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_RISCV32</name></cpp:macro> <cpp:value>0x5032</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_RISCV64</name></cpp:macro> <cpp:value>0x5064</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_RISCV128</name></cpp:macro> <cpp:value>0x5128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_SH3</name></cpp:macro> <cpp:value>0x1a2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_SH3DSP</name></cpp:macro> <cpp:value>0x1a3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_SH4</name></cpp:macro> <cpp:value>0x1a6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_SH5</name></cpp:macro> <cpp:value>0x1a8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_THUMB</name></cpp:macro> <cpp:value>0x1c2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_MACHINE_WCEMIPSV2</name></cpp:macro> <cpp:value>0x169</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_RELOCS_STRIPPED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_EXECUTABLE_IMAGE</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_LINE_NUMS_STRIPPED</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_LOCAL_SYMS_STRIPPED</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_AGGRESSIVE_WS_TRIM</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_LARGE_ADDRESS_AWARE</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_BYTES_REVERSED_LO</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_32BIT_MACHINE</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_DEBUG_STRIPPED</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_NET_RUN_FROM_SWAP</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_SYSTEM</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_DLL</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_UP_SYSTEM_ONLY</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_FILE_BYTES_REVERSED_HI</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>





<typedef>typedef <type><struct>struct <name>_PE_CoffHdr</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ch_machine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ch_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ch_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ch_symptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ch_nsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ch_optsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ch_char</name></decl>;</decl_stmt>
}</block></struct></type> <name>PE_CoffHdr</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SUBSYSTEM_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SUBSYSTEM_NATIVE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SUBSYSTEM_WINDOWS_GUI</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SUBSYSTEM_WINDOWS_CUI</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SUBSYSTEM_POSIX_CUI</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SUBSYSTEM_WINDOWS_CE_GUI</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SUBSYSTEM_EFI_APPLICATION</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SUBSYSTEM_EFI_ROM</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SUBSYSTEM_XBOX</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_DLL_CHARACTERISTICS_NX_COMPAT</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_DLL_CHARACTERISTICS_NO_ISOLATION</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_DLL_CHARACTERISTICS_NO_SEH</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_DLL_CHARACTERISTICS_NO_BIND</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_DLL_CHARACTERISTICS_WDM_DRIVER</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_DLL_CHARACTERISTICS_TERMINAL_SERVER_AWARE</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_FORMAT_ROM</name></cpp:macro> <cpp:value>0x107</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_FORMAT_32</name></cpp:macro> <cpp:value>0x10b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_FORMAT_32P</name></cpp:macro> <cpp:value>0x20b</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_PE_OptHdr</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>oh_magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>oh_ldvermajor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>oh_ldverminor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_textsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_datasize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_bsssize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_textbase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_database</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>oh_imgbase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_secalign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_filealign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>oh_osvermajor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>oh_osverminor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>oh_imgvermajor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>oh_imgverminor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>oh_subvermajor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>oh_subverminor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_win32ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_imgsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_hdrsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_checksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>oh_subsystem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>oh_dllchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>oh_stacksizer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>oh_stacksizec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>oh_heapsizer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>oh_heapsizec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_ldrflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>oh_ndatadir</name></decl>;</decl_stmt>
}</block></struct></type> <name>PE_OptHdr</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_EXPORT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_IMPORT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_RESROUCE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_EXCEPTION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_CERTIFICATE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_BASERELOC</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_DEBUG</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_ARCH</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_GLOBALPTR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_TLS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_LOADCONFIG</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_BOUNDIMPORT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_IAT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_DELAYIMPORT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_CLRRUNTIME</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_RESERVED</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PE_DD_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_PE_DataDirEntry</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>de_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>de_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>PE_DataDirEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_PE_DataDir</name> <block>{
<decl_stmt><decl><type><name>PE_DataDirEntry</name></type> <name><name>dd_e</name><index>[<expr><name>PE_DD_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dd_total</name></decl>;</decl_stmt>
}</block></struct></type> <name>PE_DataDir</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_TYPE_NO_PAD</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_CNT_CODE</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_CNT_INITIALIZED_DATA</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_CNT_UNINITIALIZED_DATA</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_LNK_OTHER</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_LNK_INFO</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_LNK_REMOVE</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_LNK_COMDAT</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_GPREL</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_MEM_PURGEABLE</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_MEM_16BIT</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_MEM_LOCKED</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_MEM_PRELOAD</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_1BYTES</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_2BYTES</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_4BYTES</name></cpp:macro> <cpp:value>0x00300000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_8BYTES</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_16BYTES</name></cpp:macro> <cpp:value>0x00500000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_32BYTES</name></cpp:macro> <cpp:value>0x00600000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_64BYTES</name></cpp:macro> <cpp:value>0x00700000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_128BYTES</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_256BYTES</name></cpp:macro> <cpp:value>0x00900000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_512BYTES</name></cpp:macro> <cpp:value>0x00A00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_1024BYTES</name></cpp:macro> <cpp:value>0x00B00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_2048BYTES</name></cpp:macro> <cpp:value>0x00C00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_4096BYTES</name></cpp:macro> <cpp:value>0x00D00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_ALIGN_8192BYTES</name></cpp:macro> <cpp:value>0x00E00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_LNK_NRELOC_OVFL</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_MEM_DISCARDABLE</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_MEM_NOT_CACHED</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_MEM_NOT_PAGED</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_MEM_SHARED</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_MEM_EXECUTE</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_MEM_READ</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_SCN_MEM_WRITE</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>





<typedef>typedef <type><struct>struct <name>_PE_SecHdr</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>sh_name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_virtsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_rawsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_rawptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_relocptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_lineptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sh_nreloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sh_nline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_char</name></decl>;</decl_stmt>
}</block></struct></type> <name>PE_SecHdr</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
