<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libpe/pe_flag.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libpe.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: pe_flag.c 3312 2016-01-10 09:23:51Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>pe_flag</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>PE_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>PE_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>PE_C_CLR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>PE_F_STRIP_DOS_STUB</name> <operator>|</operator> <name>PE_F_STRIP_RICH_HEADER</name> <operator>|</operator>
<name>PE_F_STRIP_SYMTAB</name> <operator>|</operator> <name>PE_F_STRIP_DEBUG</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>PE_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flags</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pe_flag_dos_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>PE_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>PE_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>PE_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>PE_F_DIRTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>PE_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_DOS_HEADER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_DIRTY_DOS_HEADER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pe_flag_coff_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>PE_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>PE_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>PE_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>PE_F_DIRTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>PE_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_COFF_HEADER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_DIRTY_COFF_HEADER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pe_flag_opt_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>PE_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>PE_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>PE_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>PE_F_DIRTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>PE_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_OPT_HEADER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_DIRTY_OPT_HEADER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pe_flag_data_dir</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>PE_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>PE_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>PE_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>PE_F_DIRTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>PE_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_OPT_HEADER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_DIRTY_OPT_HEADER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pe_flag_scn</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>PE_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>PE_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>PE_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>PE_F_DIRTY</name> <operator>|</operator> <name>PE_F_STRIP_SECTION</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>PE_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flags</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pe_flag_section_header</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>PE_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>PE_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>PE_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>PE_F_DIRTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pe</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>ps_pe</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>PE_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_SEC_HEADER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_DIRTY_SEC_HEADER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pe_flag_buffer</name><parameter_list>(<parameter><decl><type><name>PE_Buffer</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>PE_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_SecBuf</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>PE_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>PE_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>PE_F_DIRTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <operator>(</operator><name>PE_SecBuf</name> <operator>*</operator><operator>)</operator> <name>pb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>PE_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flags</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
