<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libpe/libpe_dos.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libpe.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libpe_dos.c 3312 2016-01-10 09:23:51Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>libpe_parse_msdos_header</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_DosHdr</name> <modifier>*</modifier></type><name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>coff</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pe_magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dh</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name></name> <operator>=</operator> <name>dh</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_magic</name></name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_lastsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_nblock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_nreloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_hdrsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_minalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_maxalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_ss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_relocpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_noverlay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dh</name><operator>-&gt;</operator><name>dh_relocpos</name></name> <operator>!=</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BAD_DOS_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_reserved1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_oemid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_oeminfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_reserved2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>PE_READ32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_lfanew</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>dh</name><operator>-&gt;</operator><name>dh_lfanew</name></name> <operator>&gt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_fsize</name></name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BAD_DOS_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dh</name><operator>-&gt;</operator><name>dh_lfanew</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BAD_DOS_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dh</name><operator>-&gt;</operator><name>dh_lfanew</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name> <operator>=</operator> <name><name>dh</name><operator>-&gt;</operator><name>dh_lfanew</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>libpe_read_msdos_stub</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BAD_DOS_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name><name>dh</name><operator>-&gt;</operator><name>dh_lfanew</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BAD_PE_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe_magic</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator>
<call><name>htole32</name><argument_list>(<argument><expr><name>pe_magic</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PE_SIGNATURE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BAD_PE_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>coff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>coff</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BAD_COFF_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>libpe_parse_coff_header</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>coff</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>libpe_read_msdos_stub</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_LOAD_DOS_STUB</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_LOAD_DOS_STUB</name></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>libpe_parse_rich_header</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>msdos_stub</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="char">'\x0e'</literal></expr>,<expr><literal type="char">'\x1f'</literal></expr>,<expr><literal type="char">'\xba'</literal></expr>,<expr><literal type="char">'\x0e'</literal></expr>,<expr><literal type="char">'\x00'</literal></expr>,<expr><literal type="char">'\xb4'</literal></expr>,<expr><literal type="char">'\x09'</literal></expr>,<expr><literal type="char">'\xcd'</literal></expr>,
<expr><literal type="char">'\x21'</literal></expr>,<expr><literal type="char">'\xb8'</literal></expr>,<expr><literal type="char">'\x01'</literal></expr>,<expr><literal type="char">'\x4c'</literal></expr>,<expr><literal type="char">'\xcd'</literal></expr>,<expr><literal type="char">'\x21'</literal></expr>,<expr><literal type="char">'\x54'</literal></expr>,<expr><literal type="char">'\x68'</literal></expr>,
<expr><literal type="char">'\x69'</literal></expr>,<expr><literal type="char">'\x73'</literal></expr>,<expr><literal type="char">'\x20'</literal></expr>,<expr><literal type="char">'\x70'</literal></expr>,<expr><literal type="char">'\x72'</literal></expr>,<expr><literal type="char">'\x6f'</literal></expr>,<expr><literal type="char">'\x67'</literal></expr>,<expr><literal type="char">'\x72'</literal></expr>,
<expr><literal type="char">'\x61'</literal></expr>,<expr><literal type="char">'\x6d'</literal></expr>,<expr><literal type="char">'\x20'</literal></expr>,<expr><literal type="char">'\x63'</literal></expr>,<expr><literal type="char">'\x61'</literal></expr>,<expr><literal type="char">'\x6e'</literal></expr>,<expr><literal type="char">'\x6e'</literal></expr>,<expr><literal type="char">'\x6f'</literal></expr>,
<expr><literal type="char">'\x74'</literal></expr>,<expr><literal type="char">'\x20'</literal></expr>,<expr><literal type="char">'\x62'</literal></expr>,<expr><literal type="char">'\x65'</literal></expr>,<expr><literal type="char">'\x20'</literal></expr>,<expr><literal type="char">'\x72'</literal></expr>,<expr><literal type="char">'\x75'</literal></expr>,<expr><literal type="char">'\x6e'</literal></expr>,
<expr><literal type="char">'\x20'</literal></expr>,<expr><literal type="char">'\x69'</literal></expr>,<expr><literal type="char">'\x6e'</literal></expr>,<expr><literal type="char">'\x20'</literal></expr>,<expr><literal type="char">'\x44'</literal></expr>,<expr><literal type="char">'\x4f'</literal></expr>,<expr><literal type="char">'\x53'</literal></expr>,<expr><literal type="char">'\x20'</literal></expr>,
<expr><literal type="char">'\x6d'</literal></expr>,<expr><literal type="char">'\x6f'</literal></expr>,<expr><literal type="char">'\x64'</literal></expr>,<expr><literal type="char">'\x65'</literal></expr>,<expr><literal type="char">'\x2e'</literal></expr>,<expr><literal type="char">'\x0d'</literal></expr>,<expr><literal type="char">'\x0d'</literal></expr>,<expr><literal type="char">'\x0a'</literal></expr>,
<expr><literal type="char">'\x24'</literal></expr>,<expr><literal type="char">'\x00'</literal></expr>,<expr><literal type="char">'\x00'</literal></expr>,<expr><literal type="char">'\x00'</literal></expr>,<expr><literal type="char">'\x00'</literal></expr>,<expr><literal type="char">'\x00'</literal></expr>,<expr><literal type="char">'\x00'</literal></expr>,<expr><literal type="char">'\x00'</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_dos_header</name><parameter_list>(<parameter><decl><type><name>PE_DosHdr</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_magic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'M'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_magic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'Z'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_lastsize</name></name> <operator>=</operator> <literal type="number">144</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_nblock</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_hdrsize</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_maxalloc</name></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_sp</name></name> <operator>=</operator> <literal type="number">184</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_relocpos</name></name> <operator>=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_lfanew</name></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>off_t</name></type>
<name>libpe_write_msdos_stub</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_DosHdr</name> <modifier>*</modifier></type><name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>strip_rich</name></decl>;</decl_stmt>

<expr_stmt><expr><name>strip_rich</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_cmd</name></name> <operator>==</operator> <name>PE_C_RDWR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>PE_F_STRIP_DOS_STUB</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BAD_PE_HEADER</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_DIRTY_DOS_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_DOS_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>PE_F_STRIP_RICH_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_app</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_DOS_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>PE_F_STRIP_RICH_HEADER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_LOAD_DOS_STUB</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>libpe_read_msdos_stub</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_rh</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>strip_rich</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_DOS_HEADER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_DOS_HEADER</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_stub_app</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_app_sz</name></name> <operator>!=</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name><operator>)</operator> <operator>||</operator> <name>strip_rich</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>libpe_load_all_sections</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BAD_PE_HEADER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>PE_F_STRIP_DOS_STUB</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub_app</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_app_sz</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub_app</name></name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub_app_sz</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_app_sz</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_app_sz</name></name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dh</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name></name> <operator>=</operator> <name>dh</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dos_header</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_DOS_HEADER</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dh</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_DOS_HEADER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_dos_header</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strip_rich</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_rh_start</name></name> <operator>-</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_lfanew</name></name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_DIRTY_DOS_HEADER</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_DOS_HEADER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_magic</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_lastsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_nblock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_nreloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_hdrsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_minalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_maxalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_ss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_relocpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_noverlay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_reserved1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_oemid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_oeminfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_reserved2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>PE_WRITE32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>dh_lfanew</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_DosHdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>strip_rich</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_rh_start</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_rh_start</name></name> <operator>-</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_cmd</name></name> <operator>==</operator> <name>PE_C_RDWR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_stub_ex</name></name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>msdos_stub</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msdos_stub</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msdos_stub</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msdos_stub</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_DIRTY_DOS_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_BAD_DOS_HEADER</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
