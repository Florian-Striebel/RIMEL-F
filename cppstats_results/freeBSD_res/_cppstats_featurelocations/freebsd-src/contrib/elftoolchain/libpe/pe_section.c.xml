<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libpe/pe_section.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libpe.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: pe_section.c 3312 2016-01-10 09:23:51Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>PE_Scn</name> <modifier>*</modifier></type>
<name>pe_getscn</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ndx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ndx</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>ndx</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xFFFFU</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ps</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>==</operator> <name>ndx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ps</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>pe_ndxscn</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>PE_Scn</name> <modifier>*</modifier></type>
<name>pe_nextscn</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>STAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_scn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>ps</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>&lt;=</operator> <literal type="number">0xFFFFU</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ps</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>PE_Scn</name> <modifier>*</modifier></type>
<name>pe_newscn</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>_tps</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_cmd</name></name> <operator>==</operator> <name>PE_C_READ</name> <operator>||</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_FD_DONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ps</name> <operator>=</operator> <call><name>libpe_alloc_scn</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_SEC_HEADER</name></expr>)</condition> <block>{<block_content>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>tps</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>, <argument>_tps</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>libpe_release_scn</name><argument_list>(<argument><expr><name>tps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_BAD_SEC_HEADER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_scn</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>|=</operator> <name>PE_F_DIRTY</name> <operator>|</operator> <name>LIBPE_F_LOAD_SECTION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_SEC_HEADER</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ps</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>PE_Scn</name> <modifier>*</modifier></type>
<name>pe_insertscn</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ndx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ndx</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>ndx</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xFFFFU</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_cmd</name></name> <operator>==</operator> <name>PE_C_READ</name> <operator>||</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_FD_DONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ps</name> <operator>=</operator> <call><name>libpe_alloc_scn</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_SEC_HEADER</name></expr>)</condition> <block>{<block_content>
<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>a</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>, <argument>b</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>libpe_release_scn</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBPE_F_BAD_SEC_HEADER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>a</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF0000U</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>==</operator> <name>ndx</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_scn</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_INSERT_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_scn</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_INSERT_AFTER</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_scn</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>=</operator> <name>ndx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>ps</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>a</name> <operator>=</operator> <call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF0000U</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>ps_ndx</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>|=</operator> <name>PE_F_DIRTY</name> <operator>|</operator> <name>LIBPE_F_LOAD_SECTION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_SEC_HEADER</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ps</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>PE_SecHdr</name> <modifier>*</modifier></type>
<name>pe_section_header</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pe_update_section_header</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>PE_SecHdr</name> <modifier>*</modifier></type><name>sh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>sh</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pe</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>ps_pe</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_cmd</name></name> <operator>==</operator> <name>PE_C_READ</name> <operator>||</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_FD_DONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name> <operator>=</operator> <operator>*</operator><name>sh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_DIRTY_SEC_HEADER</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
