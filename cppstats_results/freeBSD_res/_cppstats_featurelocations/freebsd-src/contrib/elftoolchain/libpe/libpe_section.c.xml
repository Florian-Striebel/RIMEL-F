<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libpe/libpe_section.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libpe.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libpe_section.c 3446 2016-05-03 01:31:17Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>PE_Scn</name> <modifier>*</modifier></type>
<name>libpe_alloc_scn</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ps</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_Scn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_pe</name></name> <operator>=</operator> <name>pe</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ps</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>libpe_release_scn</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_SecBuf</name> <modifier>*</modifier></type><name>sb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>_sb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ps</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pe</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>ps_pe</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_scn</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>_PE_Scn</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>STAILQ_FOREACH_SAFE</name><argument_list>(<argument>sb</argument>, <argument>&amp;ps-&gt;ps_b</argument>, <argument>sb_next</argument>, <argument>_sb</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>libpe_release_buffer</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_scn</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>ps_sh</name><operator>.</operator><name>sh_addr</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>ps_sh</name><operator>.</operator><name>sh_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>ps_sh</name><operator>.</operator><name>sh_addr</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>ps_sh</name><operator>.</operator><name>sh_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sort_sections</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_scn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>STAILQ_SORT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_scn</name></name></expr></argument>, <argument><expr><name>_PE_Scn</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>, <argument><expr><name>cmp_scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>libpe_parse_section_headers</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_SecHdr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_SecHdr</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_CoffHdr</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_DataDir</name> <modifier>*</modifier></type><name>dd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name><operator>-&gt;</operator><name>ch_nsec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_SecHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_SecHdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BAD_SEC_HEADER</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ps</name> <operator>=</operator> <call><name>libpe_alloc_scn</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_scn</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>=</operator> <operator>++</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_nscn</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_name</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_virtsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_relocptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_lineptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_nreloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_nline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_READ32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_char</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><name>dd</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_dd</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dd</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dd</name><operator>-&gt;</operator><name>dd_total</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>i</name> <operator>&lt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_dd</name><operator>-&gt;</operator><name>dd_total</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>de_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ps</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>de_addr</name> <operator>&gt;=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_addr</name></name> <operator>&amp;&amp;</operator>
<name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>de_addr</name> <operator>+</operator> <name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>de_size</name> <operator>&lt;=</operator>
<name><name>sh</name><operator>-&gt;</operator><name>sh_addr</name></name> <operator>+</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_virtsize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ps</name> <operator>=</operator> <call><name>libpe_alloc_scn</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_scn</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>=</operator> <literal type="number">0xFFFF0000U</literal> <operator>|</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name> <operator>=</operator> <name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>de_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name> <operator>=</operator> <name><name>dd</name><operator>-&gt;</operator><name>dd_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>de_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>ch_nsym</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ps</name> <operator>=</operator> <call><name>libpe_alloc_scn</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_scn</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>ps_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_symptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_nsym</name></name> <operator>*</operator> <name>PE_SYM_ENTRY_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_nsym</name></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_nsym</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>libpe_load_section</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_SecHdr</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_SecBuf</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pe</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ps</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_LOAD_SECTION</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>libpe_alloc_buffer</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>|=</operator> <name>LIBPE_F_LOAD_SECTION</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sb</name> <operator>=</operator> <call><name>libpe_alloc_buffer</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_buf</name></name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>==</operator> <literal type="number">0xFFFFFFFFU</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>le32dec</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sz</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sb</name> <operator>=</operator> <call><name>libpe_alloc_buffer</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_buf</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>|=</operator> <name>LIBPE_F_LOAD_SECTION</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>libpe_load_all_sections</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_SecHdr</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_dh</name><operator>-&gt;</operator><name>dh_lfanew</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name><operator>-&gt;</operator><name>ch_optsize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ps</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_LOAD_SECTION</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>r</name> <operator>-=</operator> <name>s</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>r</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><name>r</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>libpe_load_section</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>libpe_resync_sections</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_SecHdr</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>falign</name></decl>, <decl><type ref="prev"/><name>nsec</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>sort_sections</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>nsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ps</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_STRIP_SECTION</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF0000U</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nsec</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_nscn</name></name> <operator>=</operator> <name>nsec</name></expr>;</expr_stmt>





<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_CoffHdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name><operator>-&gt;</operator><name>ch_optsize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name><operator>-&gt;</operator><name>ch_optsize</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PE_O_PE32</name></expr>:</case>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>PE_COFF_OPT_SIZE_32</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_O_PE32P</name></expr>:</case>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>PE_COFF_OPT_SIZE_32P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PE_O_COFF</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>nsec</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_SecHdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_oh</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_oh</name><operator>-&gt;</operator><name>oh_filealign</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>falign</name> <operator>=</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_oh</name><operator>-&gt;</operator><name>oh_filealign</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_obj</name></name> <operator>==</operator> <name>PE_O_COFF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>falign</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>falign</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_rvamax</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ps</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_STRIP_SECTION</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>sh_addr</name></name> <operator>+</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_virtsize</name></name> <operator>&gt;</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_rvamax</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_rvamax</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_addr</name></name> <operator>+</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_virtsize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF0000U</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_falign</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_falign</name></name> <operator>=</operator> <name>falign</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_falign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>!=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>|=</operator> <name>PE_F_DIRTY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>PE_F_DIRTY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_LOAD_SECTION</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>libpe_load_section</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name> <operator>=</operator> <call><name>libpe_resync_buffers</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>off_t</name></type>
<name>libpe_write_section_headers</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_SecHdr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_SecHdr</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_SEC_HEADER</name> <operator>||</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_nscn</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_DIRTY_SEC_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_SecHdr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pe</name><operator>-&gt;</operator><name>pe_ch</name><operator>-&gt;</operator><name>ch_nsec</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ps</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_STRIP_SECTION</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ndx</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF0000U</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_DIRTY_SEC_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>PE_F_DIRTY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_header</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_virtsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_relocptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_lineptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_nreloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE16</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_nline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PE_WRITE32</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_char</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_SecHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_SecHdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>next_header</name>:</label>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PE_SecHdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>off_t</name></type>
<name>libpe_write_sections</name><parameter_list>(<parameter><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_SecHdr</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BAD_SEC_HEADER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>ps</argument>, <argument>&amp;pe-&gt;pe_scn</argument>, <argument>ps_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_sh</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_STRIP_SECTION</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>






<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>off</name> <operator>&lt;=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libpe_pad</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name> <operator>-</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>PE_F_DIRTY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name> <operator>+</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name> <operator>+</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libpe_write_buffers</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>sh</name><operator>-&gt;</operator><name>sh_rawsize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>PE_F_DIRTY</name></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>off</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
