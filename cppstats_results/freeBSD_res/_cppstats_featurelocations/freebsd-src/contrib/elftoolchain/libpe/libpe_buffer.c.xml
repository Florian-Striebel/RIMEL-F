<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libpe/libpe_buffer.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libpe.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libpe_buffer.c 3312 2016-01-10 09:23:51Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>PE_SecBuf</name> <modifier>*</modifier></type>
<name>libpe_alloc_buffer</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_SecBuf</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sb</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PE_SecBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_ps</name></name> <operator>=</operator> <name>ps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_align</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_flags</name></name> <operator>|=</operator> <name>LIBPE_F_BUFFER_MALLOCED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_b</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sb_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>sb</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>libpe_release_buffer</name><parameter_list>(<parameter><decl><type><name>PE_SecBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>sb_ps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_b</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>_PE_SecBuf</name></expr></argument>, <argument><expr><name>sb_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>sb_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_BUFFER_MALLOCED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_sb</name><parameter_list>(<parameter><decl><type><name>PE_SecBuf</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>PE_SecBuf</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_off</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_off</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_off</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>sb_pb</name><operator>.</operator><name>pb_off</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sort_buffers</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_b</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STAILQ_SORT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>ps_b</name></name></expr></argument>, <argument><expr><name>_PE_SecBuf</name></expr></argument>, <argument><expr><name>sb_next</name></expr></argument>, <argument><expr><name>cmp_sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>libpe_resync_buffers</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE_SecBuf</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_Buffer</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_LOAD_SECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sort_buffers</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>sb</argument>, <argument>&amp;ps-&gt;ps_b</argument>, <argument>sb_next</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>PE_F_DIRTY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_flags</name></name> <operator>|=</operator> <name>PE_F_DIRTY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <operator>(</operator><name>PE_Buffer</name> <operator>*</operator><operator>)</operator> <name>sb</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>pb_align</name></name> <operator>&gt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>ps_falign</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pb</name><operator>-&gt;</operator><name>pb_align</name></name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>ps_falign</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>pb_buf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pb</name><operator>-&gt;</operator><name>pb_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>roundup</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>pb_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>pb_off</name></name> <operator>!=</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pb</name><operator>-&gt;</operator><name>pb_off</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>sb_flags</name></name> <operator>|=</operator> <name>PE_F_DIRTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sz</name> <operator>+=</operator> <name><name>pb</name><operator>-&gt;</operator><name>pb_size</name></name></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>sz</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>libpe_write_buffers</name><parameter_list>(<parameter><decl><type><name>PE_Scn</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PE</name> <modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_SecBuf</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PE_Buffer</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>off</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_LOAD_SECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pe</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>ps_pe</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>sb</argument>, <argument>&amp;ps-&gt;ps_b</argument>, <argument>sb_next</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>pb</name> <operator>=</operator> <operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>sb_pb</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>pb_buf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pb</name><operator>-&gt;</operator><name>pb_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>sb_flags</name></name> <operator>&amp;</operator> <name>PE_F_DIRTY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pe</name><operator>-&gt;</operator><name>pe_flags</name></name> <operator>&amp;</operator> <name>LIBPE_F_SPECIAL_FILE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name><name>pb</name><operator>-&gt;</operator><name>pb_size</name></name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<goto>goto <name>next_buf</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>pb_off</name></name> <operator>&gt;</operator> <name>off</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>libpe_pad</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>pb_off</name></name> <operator>-</operator> <name>off</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>pb</name><operator>-&gt;</operator><name>pb_off</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pe_fd</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>pb_buf</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>pb_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<operator>(</operator><name>ssize_t</name><operator>)</operator> <name><name>pb</name><operator>-&gt;</operator><name>pb_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>next_buf</name>:</label>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>pb</name><operator>-&gt;</operator><name>pb_size</name></name></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
