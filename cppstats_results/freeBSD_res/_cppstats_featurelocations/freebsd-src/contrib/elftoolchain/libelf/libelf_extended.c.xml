<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/libelf_extended.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelf_extended.c 3712 2019-03-16 22:23:34Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<function><type><specifier>static</specifier> <name>Elf_Scn</name> <modifier>*</modifier></type>
<name>_libelf_getscn0</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>RB_MIN</name><argument_list>(<argument><expr><name>scntree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_scn</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>_libelf_allocate_scn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>SHN_UNDEF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_libelf_setshnum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>eh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>shnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shnum</name> <operator>&gt;=</operator> <name>SHN_LORESERVE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>_libelf_getscn0</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>scn</name><operator>-&gt;</operator><name>s_ndx</name></name> <operator>==</operator> <name>SHN_UNDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_size</name></name> <operator>=</operator> <operator>(</operator><name>Elf32_Word</name><operator>)</operator> <name>shnum</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_size</name></name> <operator>=</operator> <name>shnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_flagshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>ELF_C_SET</name></expr></argument>, <argument><expr><name>ELF_F_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>Elf32_Ehdr</name> <operator>*</operator><operator>)</operator> <name>eh</name><operator>)</operator><operator>-&gt;</operator><name>e_shnum</name> <operator>=</operator> <name>shnum</name> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>Elf64_Ehdr</name> <operator>*</operator><operator>)</operator> <name>eh</name><operator>)</operator><operator>-&gt;</operator><name>e_shnum</name> <operator>=</operator> <name>shnum</name> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_libelf_setshstrndx</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>eh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>shstrndx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shstrndx</name> <operator>&gt;=</operator> <name>SHN_LORESERVE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>_libelf_getscn0</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>scn</name><operator>-&gt;</operator><name>s_ndx</name></name> <operator>==</operator> <name>SHN_UNDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_link</name></name> <operator>=</operator> <operator>(</operator><name>Elf32_Word</name><operator>)</operator> <name>shstrndx</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_link</name></name> <operator>=</operator> <operator>(</operator><name>Elf64_Word</name><operator>)</operator> <name>shstrndx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_flagshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>ELF_C_SET</name></expr></argument>, <argument><expr><name>ELF_F_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shstrndx</name> <operator>=</operator> <name>SHN_XINDEX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>Elf32_Ehdr</name> <operator>*</operator><operator>)</operator> <name>eh</name><operator>)</operator><operator>-&gt;</operator><name>e_shstrndx</name> <operator>=</operator> <name>shstrndx</name> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>Elf64_Ehdr</name> <operator>*</operator><operator>)</operator> <name>eh</name><operator>)</operator><operator>-&gt;</operator><name>e_shstrndx</name> <operator>=</operator> <name>shstrndx</name> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_libelf_setphnum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>eh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>phnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>phnum</name> <operator>&gt;=</operator> <name>PN_XNUM</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>_libelf_getscn0</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>scn</name><operator>-&gt;</operator><name>s_ndx</name></name> <operator>==</operator> <name>SHN_UNDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_info</name></name> <operator>=</operator> <operator>(</operator><name>Elf32_Word</name><operator>)</operator> <name>phnum</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_info</name></name> <operator>=</operator> <operator>(</operator><name>Elf64_Word</name><operator>)</operator> <name>phnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_flagshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>ELF_C_SET</name></expr></argument>, <argument><expr><name>ELF_F_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>phnum</name> <operator>=</operator> <name>PN_XNUM</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>Elf32_Ehdr</name> <operator>*</operator><operator>)</operator> <name>eh</name><operator>)</operator><operator>-&gt;</operator><name>e_phnum</name> <operator>=</operator> <name>phnum</name> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>Elf64_Ehdr</name> <operator>*</operator><operator>)</operator> <name>eh</name><operator>)</operator><operator>-&gt;</operator><name>e_phnum</name> <operator>=</operator> <name>phnum</name> <operator>&amp;</operator> <literal type="number">0xFFFFU</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
