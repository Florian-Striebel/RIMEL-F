<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/elf_flag.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: elf_flag.c 3174 2015-03-27 17:13:41Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>unsigned</name> <name>int</name></type>
<name>elf_flagarhdr</name><parameter_list>(<parameter><decl><type><name>Elf_Arhdr</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>!=</operator> <name>ELF_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>ELF_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>ELF_F_DIRTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ELF_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>ar_flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>ar_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flags</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <name>LIBELF_F_API_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>elf_flagdata</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_Libelf_Data</name></name> <modifier>*</modifier></type><name>ld</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>!=</operator> <name>ELF_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>ELF_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>ELF_F_DIRTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ld</name> <operator>=</operator> <operator>(</operator>struct <name>_Libelf_Data</name> <operator>*</operator><operator>)</operator> <name>d</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ELF_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>d_flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ld</name><operator>-&gt;</operator><name>d_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flags</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <name>LIBELF_F_API_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>elf_flagehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ehdr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>!=</operator> <name>ELF_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>ELF_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>!=</operator> <name>ELF_K_ELF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>ELF_F_DIRTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>ec</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name><operator>)</operator> <operator>!=</operator> <name>ELFCLASS32</name> <operator>&amp;&amp;</operator> <name>ec</name> <operator>!=</operator> <name>ELFCLASS64</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ehdr</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_ehdr</name><operator>.</operator><name>e_ehdr32</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ehdr</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_ehdr</name><operator>.</operator><name>e_ehdr64</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ehdr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>SEQUENCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>elf_flagelf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>elf_flagelf</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>!=</operator> <name>ELF_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>ELF_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>!=</operator> <name>ELF_K_ELF</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>ELF_F_ARCHIVE</name> <operator>|</operator> <name>ELF_F_ARCHIVE_SYSV</name> <operator>|</operator>
<name>ELF_F_DIRTY</name> <operator>|</operator> <name>ELF_F_LAYOUT</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ELF_F_ARCHIVE_SYSV</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ELF_F_ARCHIVE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ELF_F_ARCHIVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>e_cmd</name></name> <operator>!=</operator> <name>ELF_C_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>MODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ELF_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flags</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <name>LIBELF_F_API_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>elf_flagphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>phdr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>!=</operator> <name>ELF_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>ELF_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>!=</operator> <name>ELF_K_ELF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>ELF_F_DIRTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>ec</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name><operator>)</operator> <operator>!=</operator> <name>ELFCLASS32</name> <operator>&amp;&amp;</operator> <name>ec</name> <operator>!=</operator> <name>ELFCLASS64</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>phdr</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_phdr</name><operator>.</operator><name>e_phdr32</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>phdr</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_phdr</name><operator>.</operator><name>e_phdr64</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>phdr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>SEQUENCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>elf_flagelf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>elf_flagscn</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>!=</operator> <name>ELF_C_SET</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>ELF_C_CLR</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>ELF_F_DIRTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ELF_C_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flags</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <name>LIBELF_F_API_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>elf_flagshdr</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>elf_flagscn</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
