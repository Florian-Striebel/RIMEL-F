<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/libelf_xlate.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelf_xlate.c 3732 2019-04-22 11:08:38Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<function><type><name>Elf_Data</name> <modifier>*</modifier></type>
<name>_libelf_xlate</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Elf_Data</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>encoding</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>elfclass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elfmachine</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byteswap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>dsz</name></decl>, <decl><type ref="prev"/><name>fsz</name></decl>, <decl><type ref="prev"/><name>msz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>sb</name></decl>, <decl><type ref="prev"/><name>se</name></decl>, <decl><type ref="prev"/><name>db</name></decl>, <decl><type ref="prev"/><name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_libelf_translator_function</name> <modifier>*</modifier></type><name>xlator</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>ELFDATANONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>encoding</name> <operator>=</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>byteorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>encoding</name> <operator>!=</operator> <name>ELFDATA2LSB</name> <operator>&amp;&amp;</operator> <name>encoding</name> <operator>!=</operator> <name>ELFDATA2MSB</name><operator>)</operator> <operator>||</operator>
<name>dst</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>src</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dst</name> <operator>==</operator> <name>src</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>elfclass</name> <operator>==</operator> <name>ELFCLASS32</name> <operator>||</operator> <name>elfclass</name> <operator>==</operator> <name>ELFCLASS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>direction</name> <operator>==</operator> <name>ELF_TOFILE</name> <operator>||</operator> <name>direction</name> <operator>==</operator> <name>ELF_TOMEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>d_version</name></name> <operator>!=</operator> <name><name>src</name><operator>-&gt;</operator><name>d_version</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>UNIMPL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>src</name><operator>-&gt;</operator><name>d_type</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>d_type</name></name> <operator>&gt;=</operator> <name>ELF_T_NUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fsz</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>elfclass</name> <operator>==</operator> <name>ELFCLASS32</name></expr> ?</condition><then> <expr><name>elf32_fsize</name></expr> </then><else>: <expr><name>elf64_fsize</name></expr></else></ternary><operator>)</operator>
<operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>d_type</name></name><operator>,</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal><operator>,</operator> <name><name>src</name><operator>-&gt;</operator><name>d_version</name></name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msz</name> <operator>=</operator> <call><name>_libelf_msize</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>d_type</name></name></expr></argument>, <argument><expr><name>elfclass</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>d_version</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>d_size</name></name> <operator>%</operator> <operator>(</operator><ternary><condition><expr><name>direction</name> <operator>==</operator> <name>ELF_TOMEMORY</name></expr> ?</condition><then> <expr><name>fsz</name></expr> </then><else>: <expr><name>msz</name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>ELF_TOMEMORY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>src</name><operator>-&gt;</operator><name>d_size</name></name> <operator>/</operator> <name>fsz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dsz</name> <operator>=</operator> <name>cnt</name> <operator>*</operator> <name>msz</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>src</name><operator>-&gt;</operator><name>d_size</name></name> <operator>/</operator> <name>msz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dsz</name> <operator>=</operator> <name>cnt</name> <operator>*</operator> <name>fsz</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>d_size</name></name> <operator>&lt;</operator> <name>dsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>src</name><operator>-&gt;</operator><name>d_buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>se</name> <operator>=</operator> <name>sb</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>src</name><operator>-&gt;</operator><name>d_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>db</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>dst</name><operator>-&gt;</operator><name>d_buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>de</name> <operator>=</operator> <name>db</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>dst</name><operator>-&gt;</operator><name>d_size</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>db</name> <operator>!=</operator> <name>sb</name> <operator>&amp;&amp;</operator> <name>de</name> <operator>&gt;</operator> <name>sb</name> <operator>&amp;&amp;</operator> <name>se</name> <operator>&gt;</operator> <name>db</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name>direction</name> <operator>==</operator> <name>ELF_TOMEMORY</name></expr> ?</condition><then> <expr><name>db</name></expr> </then><else>: <expr><name>sb</name></expr></else></ternary><operator>)</operator> <operator>%</operator>
<call><name>_libelf_malign</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>d_type</name></name></expr></argument>, <argument><expr><name>elfclass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>d_type</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>d_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>d_size</name></name> <operator>=</operator> <name>dsz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>byteswap</name> <operator>=</operator> <name>encoding</name> <operator>!=</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>byteorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>d_size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>db</name> <operator>==</operator> <name>sb</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>byteswap</name> <operator>&amp;&amp;</operator> <name>fsz</name> <operator>==</operator> <name>msz</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dst</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xlator</name> <operator>=</operator> <call><name>_libelf_get_translator</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>d_type</name></name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>elfclass</name></expr></argument>,
<argument><expr><name>elfmachine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>xlator</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><name>dsz</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>byteswap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>dst</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
