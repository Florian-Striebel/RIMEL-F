<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/libelf_ehdr.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelf_ehdr.c 3732 2019-04-22 11:08:38Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>_libelf_load_extended</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ec</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>shoff</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>phnum</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>strndx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>fsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>shtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_libelf_translator_function</name> <modifier>*</modifier></type><name>xlator</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_scn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fsz</name> <operator>=</operator> <call><name>_libelf_fsize</name><argument_list>(<argument><expr><name>ELF_T_SHDR</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_version</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fsz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shoff</name> <operator>+</operator> <name>fsz</name> <operator>&lt;</operator> <name>shoff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>HEADER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_rawsize</name></name> <operator>&lt;</operator> <name>shoff</name> <operator>+</operator> <name>fsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>HEADER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>_libelf_allocate_scn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xlator</name> <operator>=</operator> <call><name>_libelf_get_translator</name><argument_list>(<argument><expr><name>ELF_T_SHDR</name></expr></argument>, <argument><expr><name>ELF_TOMEMORY</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>,
<argument><expr><call><name>_libelf_elfmachine</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>xlator</name>)<argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>+</operator> <name>shoff</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_byteorder</name></name> <operator>!=</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>byteorder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SHDR_MEMBER</name><parameter_list>(<parameter><type><name>M</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ec == ELFCLASS32) ? scn-&gt;s_shdr.s_shdr32.M : scn-&gt;s_shdr.s_shdr64.M)</cpp:value></cpp:define>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>shtype</name> <operator>=</operator> <call><name>GET_SHDR_MEMBER</name><argument_list>(<argument><expr><name>sh_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SHT_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>SECTION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nscn</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>GET_SHDR_MEMBER</name><argument_list>(<argument><expr><name>sh_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nphdr</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>phnum</name> <operator>!=</operator> <name>PN_XNUM</name><operator>)</operator></expr> ?</condition><then> <expr><name>phnum</name></expr> </then><else>:
<expr><call><name>GET_SHDR_MEMBER</name><argument_list>(<argument><expr><name>sh_info</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_strndx</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>strndx</name> <operator>!=</operator> <name>SHN_XINDEX</name><operator>)</operator></expr> ?</condition><then> <expr><name>strndx</name></expr> </then><else>:
<expr><call><name>GET_SHDR_MEMBER</name><argument_list>(<argument><expr><name>sh_link</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_SHDR_MEMBER</name></cpp:undef>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EHDR_INIT</name><parameter_list>(<parameter><type><name>E</name></type></parameter>,<parameter><type><name>SZ</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { Elf##SZ##_Ehdr *eh = (E); eh-&gt;e_ident[EI_MAG0] = ELFMAG0; eh-&gt;e_ident[EI_MAG1] = ELFMAG1; eh-&gt;e_ident[EI_MAG2] = ELFMAG2; eh-&gt;e_ident[EI_MAG3] = ELFMAG3; eh-&gt;e_ident[EI_CLASS] = ELFCLASS##SZ; eh-&gt;e_ident[EI_DATA] = ELFDATANONE; eh-&gt;e_ident[EI_VERSION] = LIBELF_PRIVATE(version) &amp; 0xFFU; eh-&gt;e_machine = EM_NONE; eh-&gt;e_type = ELF_K_NONE; eh-&gt;e_version = LIBELF_PRIVATE(version); } while (0)</cpp:value></cpp:define>













<function><type><name>void</name> <modifier>*</modifier></type>
<name>_libelf_ehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allocate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ehdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fsz</name></decl>, <decl><type ref="prev"/><name>msz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>phnum</name></decl>, <decl><type ref="prev"/><name>shnum</name></decl>, <decl><type ref="prev"/><name>strndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>shoff</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xlator</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>_d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_dsz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>_s</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>_c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_swap</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name> <operator>||</operator> <name>ec</name> <operator>==</operator> <name>ELFCLASS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>!=</operator> <name>ELF_K_ELF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_class</name></name> <operator>!=</operator> <name>ELFCLASSNONE</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name> <operator>!=</operator> <name>ec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_version</name></name> <operator>!=</operator> <name>EV_CURRENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_class</name></name> <operator>==</operator> <name>ELFCLASSNONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_class</name></name> <operator>=</operator> <name>ec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ehdr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_ehdr</name><operator>.</operator><name>e_ehdr32</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ehdr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_ehdr</name><operator>.</operator><name>e_ehdr64</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ehdr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ehdr</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fsz</name> <operator>=</operator> <call><name>_libelf_fsize</name><argument_list>(<argument><expr><name>ELF_T_EHDR</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_version</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fsz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_cmd</name></name> <operator>!=</operator> <name>ELF_C_WRITE</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>e_rawsize</name></name> <operator>&lt;</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name>fsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>HEADER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msz</name> <operator>=</operator> <call><name>_libelf_msize</name><argument_list>(<argument><expr><name>ELF_T_EHDR</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ehdr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>msz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>RESOURCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_ehdr</name><operator>.</operator><name>e_ehdr32</name></name> <operator>=</operator> <name>ehdr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EHDR_INIT</name><argument_list>(<argument><expr><name>ehdr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_ehdr</name><operator>.</operator><name>e_ehdr64</name></name> <operator>=</operator> <name>ehdr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EHDR_INIT</name><argument_list>(<argument><expr><name>ehdr</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>allocate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>|=</operator> <name>ELF_F_DIRTY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_cmd</name></name> <operator>==</operator> <name>ELF_C_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ehdr</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>xlator</name> <operator>=</operator> <call><name>_libelf_get_translator</name><argument_list>(<argument><expr><name>ELF_T_EHDR</name></expr></argument>, <argument><expr><name>ELF_TOMEMORY</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>,
<argument><expr><call><name>_libelf_elfmachine</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>xlator</name>)<argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ehdr</name></expr></argument>, <argument><expr><name>msz</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_rawfile</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_byteorder</name></name> <operator>!=</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>byteorder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>phnum</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Elf32_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name><operator>)</operator><operator>-&gt;</operator><name>e_phnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shnum</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Elf32_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name><operator>)</operator><operator>-&gt;</operator><name>e_shnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shoff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Elf32_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name><operator>)</operator><operator>-&gt;</operator><name>e_shoff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>strndx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Elf32_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name><operator>)</operator><operator>-&gt;</operator><name>e_shstrndx</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>phnum</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Elf64_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name><operator>)</operator><operator>-&gt;</operator><name>e_phnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shnum</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Elf64_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name><operator>)</operator><operator>-&gt;</operator><name>e_shnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shoff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Elf64_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name><operator>)</operator><operator>-&gt;</operator><name>e_shoff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>strndx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Elf64_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name><operator>)</operator><operator>-&gt;</operator><name>e_shstrndx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shnum</name> <operator>&gt;=</operator> <name>SHN_LORESERVE</name> <operator>||</operator>
<operator>(</operator><name>shoff</name> <operator>==</operator> <literal type="number">0LL</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>shnum</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>phnum</name> <operator>==</operator> <name>PN_XNUM</name> <operator>||</operator>
<name>strndx</name> <operator>==</operator> <name>SHN_XINDEX</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>HEADER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>shnum</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>shoff</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>phnum</name> <operator>==</operator> <name>PN_XNUM</name> <operator>||</operator> <name>strndx</name> <operator>==</operator> <name>SHN_XINDEX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_libelf_load_extended</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><name>shoff</name></expr></argument>, <argument><expr><name>phnum</name></expr></argument>, <argument><expr><name>strndx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nphdr</name></name> <operator>=</operator> <name>phnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nscn</name></name> <operator>=</operator> <name>shnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_strndx</name></name> <operator>=</operator> <name>strndx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>ehdr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
