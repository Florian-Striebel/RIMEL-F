<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/libelf_data.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelf_data.c 3737 2019-05-05 14:49:50Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>_libelf_xlate_shtype</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sht</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<switch>switch <condition>(<expr><name>sht</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SHT_DYNAMIC</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_DYN</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_DYNSYM</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_SYM</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_FINI_ARRAY</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_ADDR</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_GNU_HASH</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_GNUHASH</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_GNU_LIBLIST</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_WORD</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_GROUP</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_WORD</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_HASH</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_WORD</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_INIT_ARRAY</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_ADDR</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_NOBITS</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_BYTE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_NOTE</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_NOTE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_PREINIT_ARRAY</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_ADDR</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_PROGBITS</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_BYTE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_REL</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_REL</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_RELA</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_RELA</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_STRTAB</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_BYTE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_SYMTAB</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_SYM</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_SYMTAB_SHNDX</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_WORD</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_SUNW_dof</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_BYTE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_SUNW_move</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_MOVE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_SUNW_syminfo</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_SYMINFO</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_SUNW_verdef</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_VDEF</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_SUNW_verneed</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_VNEED</name><operator>)</operator></expr>;</return>
<case>case <expr><name>SHT_SUNW_versym</name></expr>:</case>
<return>return <expr><operator>(</operator><name>ELF_T_HALF</name><operator>)</operator></expr>;</return>
<default>default:</default>












<if_stmt><if>if <condition>(<expr><name>sht</name> <operator>&gt;=</operator> <name>SHT_LOOS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ELF_T_BYTE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
