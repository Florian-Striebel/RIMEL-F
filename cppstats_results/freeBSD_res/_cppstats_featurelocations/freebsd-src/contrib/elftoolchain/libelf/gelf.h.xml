<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/gelf.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GELF_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GELF_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>Elf64_Addr</name></type> <name>GElf_Addr</name>;</typedef>
<typedef>typedef <type><name>Elf64_Half</name></type> <name>GElf_Half</name>;</typedef>
<typedef>typedef <type><name>Elf64_Off</name></type> <name>GElf_Off</name>;</typedef>
<typedef>typedef <type><name>Elf64_Sword</name></type> <name>GElf_Sword</name>;</typedef>
<typedef>typedef <type><name>Elf64_Sxword</name></type> <name>GElf_Sxword</name>;</typedef>
<typedef>typedef <type><name>Elf64_Word</name></type> <name>GElf_Word</name>;</typedef>
<typedef>typedef <type><name>Elf64_Xword</name></type> <name>GElf_Xword</name>;</typedef>

<typedef>typedef <type><name>Elf64_Chdr</name></type> <name>GElf_Chdr</name>;</typedef>
<typedef>typedef <type><name>Elf64_Dyn</name></type> <name>GElf_Dyn</name>;</typedef>
<typedef>typedef <type><name>Elf64_Ehdr</name></type> <name>GElf_Ehdr</name>;</typedef>
<typedef>typedef <type><name>Elf64_Phdr</name></type> <name>GElf_Phdr</name>;</typedef>
<typedef>typedef <type><name>Elf64_Shdr</name></type> <name>GElf_Shdr</name>;</typedef>
<typedef>typedef <type><name>Elf64_Sym</name></type> <name>GElf_Sym</name>;</typedef>
<typedef>typedef <type><name>Elf64_Rel</name></type> <name>GElf_Rel</name>;</typedef>
<typedef>typedef <type><name>Elf64_Rela</name></type> <name>GElf_Rela</name>;</typedef>

<typedef>typedef <type><name>Elf64_Cap</name></type> <name>GElf_Cap</name>;</typedef>
<typedef>typedef <type><name>Elf64_Move</name></type> <name>GElf_Move</name>;</typedef>
<typedef>typedef <type><name>Elf64_Syminfo</name></type> <name>GElf_Syminfo</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_M_INFO</name></cpp:macro> <cpp:value>ELF64_M_INFO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_M_SIZE</name></cpp:macro> <cpp:value>ELF64_M_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_M_SYM</name></cpp:macro> <cpp:value>ELF64_M_SYM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_R_INFO</name></cpp:macro> <cpp:value>ELF64_R_INFO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_R_SYM</name></cpp:macro> <cpp:value>ELF64_R_SYM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_R_TYPE</name></cpp:macro> <cpp:value>ELF64_R_TYPE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_R_TYPE_DATA</name></cpp:macro> <cpp:value>ELF64_R_TYPE_DATA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_R_TYPE_ID</name></cpp:macro> <cpp:value>ELF64_R_TYPE_ID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_R_TYPE_INFO</name></cpp:macro> <cpp:value>ELF64_R_TYPE_INFO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_ST_BIND</name></cpp:macro> <cpp:value>ELF64_ST_BIND</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_ST_INFO</name></cpp:macro> <cpp:value>ELF64_ST_INFO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_ST_TYPE</name></cpp:macro> <cpp:value>ELF64_ST_TYPE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GELF_ST_VISIBILITY</name></cpp:macro> <cpp:value>ELF64_ST_VISIBILITY</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>long</name></type> <name>gelf_checksum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>gelf_fsize</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>Elf_Type</name></type> <name>_type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_count</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Chdr</name> <modifier>*</modifier></type><name>gelf_getchdr</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>, <parameter><decl><type><name>GElf_Chdr</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_getclass</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Dyn</name> <modifier>*</modifier></type><name>gelf_getdyn</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Dyn</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Ehdr</name> <modifier>*</modifier></type><name>gelf_getehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>GElf_Ehdr</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Phdr</name> <modifier>*</modifier></type><name>gelf_getphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Phdr</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Rel</name> <modifier>*</modifier></type><name>gelf_getrel</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Rel</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Rela</name> <modifier>*</modifier></type><name>gelf_getrela</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Rela</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Shdr</name> <modifier>*</modifier></type><name>gelf_getshdr</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>, <parameter><decl><type><name>GElf_Shdr</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>gelf_getsym</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>gelf_getsymshndx</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_shindexsrc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>Elf32_Word</name> <modifier>*</modifier></type><name>_shindexdst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>gelf_newehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_class</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type> <name>gelf_newphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_phnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_update_dyn</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Dyn</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_update_ehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>GElf_Ehdr</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_update_phdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Phdr</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_update_rel</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Rel</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_update_rela</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Rela</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_update_shdr</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>GElf_Shdr</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_update_sym</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_update_symshndx</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_symdst</name></decl></parameter>, <parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_shindexdst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Sym</name> <modifier>*</modifier></type><name>_symsrc</name></decl></parameter>, <parameter><decl><type><name>Elf32_Word</name></type> <name>_shindexsrc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>gelf_xlatetof</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_encode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>gelf_xlatetom</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_encode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>GElf_Cap</name> <modifier>*</modifier></type><name>gelf_getcap</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Cap</name> <modifier>*</modifier></type><name>_cap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Move</name> <modifier>*</modifier></type><name>gelf_getmove</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Move</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GElf_Syminfo</name> <modifier>*</modifier></type><name>gelf_getsyminfo</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Syminfo</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_update_cap</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Cap</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_update_move</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Move</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gelf_update_syminfo</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_index</name></decl></parameter>, <parameter><decl><type><name>GElf_Syminfo</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
