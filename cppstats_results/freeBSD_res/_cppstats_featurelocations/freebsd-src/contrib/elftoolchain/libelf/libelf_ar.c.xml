<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/libelf_ar.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf_ar.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelf_ar.c 3712 2019-03-16 22:23:34Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_NALLOC_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>




































































<function><type><name>Elf_Arhdr</name> <modifier>*</modifier></type>
<name>_libelf_ar_gethdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Arhdr</name> <modifier>*</modifier></type><name>eh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type><name>arh</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>parent</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_parent</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>&amp;</operator> <name>LIBELF_F_AR_HEADER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arh</name> <operator>=</operator> <operator>(</operator>struct <name>ar_hdr</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_hdr</name><operator>.</operator><name>e_rawhdr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>arh</name> <operator>&gt;=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>parent</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>+</operator> <name>SARMAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>arh</name> <operator>&gt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>parent</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>+</operator>
<operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>parent</name><operator>-&gt;</operator><name>e_rawsize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ar_hdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARCHIVE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>eh</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Elf_Arhdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>RESOURCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_hdr</name><operator>.</operator><name>e_arhdr</name></name> <operator>=</operator> <name>eh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>|=</operator> <name>LIBELF_F_AR_HEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eh</name><operator>-&gt;</operator><name>ar_name</name></name> <operator>=</operator> <name><name>eh</name><operator>-&gt;</operator><name>ar_rawname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>eh</name><operator>-&gt;</operator><name>ar_name</name></name> <operator>=</operator> <call><name>_libelf_ar_get_translated_name</name><argument_list>(<argument><expr><name>arh</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_libelf_ar_get_number</name><argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>eh</name><operator>-&gt;</operator><name>ar_uid</name></name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_libelf_ar_get_number</name><argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_gid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_gid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>eh</name><operator>-&gt;</operator><name>ar_gid</name></name> <operator>=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_libelf_ar_get_number</name><argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>eh</name><operator>-&gt;</operator><name>ar_mode</name></name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_libelf_ar_get_number</name><argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>IS_EXTENDED_BSD_NAME</name><argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <name><name>arh</name><operator>-&gt;</operator><name>ar_name</name></name> <operator>+</operator>
<name>LIBELF_AR_BSD_EXTENDED_NAME_PREFIX_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_libelf_ar_get_number</name><argument_list>(<argument><expr><name>namelen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator>
<name>LIBELF_AR_BSD_EXTENDED_NAME_PREFIX_SIZE</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>nlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eh</name><operator>-&gt;</operator><name>ar_size</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>eh</name><operator>-&gt;</operator><name>ar_rawname</name></name> <operator>=</operator> <call><name>_libelf_ar_get_raw_name</name><argument_list>(<argument><expr><name>arh</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eh</name><operator>-&gt;</operator><name>ar_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>eh</name><operator>)</operator></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>eh</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eh</name><operator>-&gt;</operator><name>ar_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>eh</name><operator>-&gt;</operator><name>ar_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eh</name><operator>-&gt;</operator><name>ar_rawname</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>eh</name><operator>-&gt;</operator><name>ar_rawname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>eh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LIBELF_F_AR_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_hdr</name><operator>.</operator><name>e_rawhdr</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>arh</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Elf</name> <modifier>*</modifier></type>
<name>_libelf_ar_open_member</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nsz</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>next</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type><name>arh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>member</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>namelen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>elf</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>==</operator> <name>ELF_K_AR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>elf</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_next</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>next</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>end</name> <operator>=</operator> <name>next</name> <operator>+</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ar_hdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <macro><name>end</name></macro> <operator>&lt;</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator> <name>next</name> <operator>||</operator>
<name>end</name> <operator>&gt;</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name><name>elf</name><operator>-&gt;</operator><name>e_rawsize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARCHIVE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arh</name> <operator>=</operator> <operator>(</operator>struct <name>ar_hdr</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>elf</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>+</operator> <name>next</name><operator>)</operator></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>_libelf_ar_get_number</name><argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARCHIVE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>end</name> <operator>+=</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name>sz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><macro><name>end</name></macro> <operator>&lt;</operator> <name>next</name> <operator>||</operator>
<name>end</name> <operator>&gt;</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name><name>elf</name><operator>-&gt;</operator><name>e_rawsize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARCHIVE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>IS_EXTENDED_BSD_NAME</name><argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <name><name>arh</name><operator>-&gt;</operator><name>ar_name</name></name> <operator>+</operator>
<name>LIBELF_AR_BSD_EXTENDED_NAME_PREFIX_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_libelf_ar_get_number</name><argument_list>(<argument><expr><name>namelen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arh</name><operator>-&gt;</operator><name>ar_name</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator>
<name>LIBELF_AR_BSD_EXTENDED_NAME_PREFIX_SIZE</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsz</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARCHIVE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>member</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>arh</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>nsz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>-=</operator> <name>nsz</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>member</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>arh</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>elf_memory</name><argument_list>(<argument><expr><name>member</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_cmd</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_hdr</name><operator>.</operator><name>e_rawhdr</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>arh</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elf</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_nchildren</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_parent</name></name> <operator>=</operator> <name>elf</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>e</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LONG</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do { memcpy(&amp;(V), (P), sizeof(long)); (P) += sizeof(long); } while (0)</cpp:value></cpp:define>




<function><type><name>Elf_Arsym</name> <modifier>*</modifier></type>
<name>_libelf_ar_process_bsd_symtab</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf_Arsym</name> <modifier>*</modifier></type><name>symtab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nentries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>entrysize</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arraysize</name></decl>, <decl><type ref="prev"/><name>fileoffset</name></decl>, <decl><type ref="prev"/><name>stroffset</name></decl>, <decl><type ref="prev"/><name>strtabsize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_symtab</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symtab</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_rawsymtabsz</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>symtaberror</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p0</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_rawsymtab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>p0</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_rawsymtabsz</name></name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>GET_LONG</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>arraysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arraysize</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>p0</name> <operator>+</operator> <name>arraysize</name> <operator>&gt;=</operator> <name>end</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>arraysize</name> <operator>%</operator> <name>entrysize</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>symtaberror</name>;</goto></block_content></block></if></if_stmt>




<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>arraysize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LONG</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>strtabsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>strtabsize</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>s0</name> <operator>+</operator> <name>strtabsize</name></expr></argument> &gt;</argument_list></name> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>symtaberror</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nentries</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>arraysize</name> <operator>/</operator> <name>entrysize</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>symtab</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Elf_Arsym</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nentries</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>RESOURCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>sym</name> <operator>=</operator> <name>symtab</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nentries</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>sym</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_LONG</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>stroffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_LONG</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fileoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stroffset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fileoffset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>off_t</name><operator>)</operator> <name>fileoffset</name> <operator>&gt;=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_rawsize</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>symtaberror</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s0</name> <operator>+</operator> <name>stroffset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>symtaberror</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_off</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name>fileoffset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_hash</name></name> <operator>=</operator> <call><name>elf_hash</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_hash</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_off</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_symtab</name></name> <operator>=</operator> <name>symtab</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_symtabsz</name></name> <operator>=</operator> <name>nentries</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>symtab</name><operator>)</operator></expr>;</return>

<label><name>symtaberror</name>:</label>
<if_stmt><if>if <condition>(<expr><name>symtab</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>symtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARCHIVE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_WORD</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (V) = 0; (V) = (P)[0]; (V) &lt;&lt;= 8; (V) += (P)[1]; (V) &lt;&lt;= 8; (V) += (P)[2]; (V) &lt;&lt;= 8; (V) += (P)[3]; } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTSZ</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<function><type><name>Elf_Arsym</name> <modifier>*</modifier></type>
<name>_libelf_ar_process_svr4_symtab</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nentries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Arsym</name> <modifier>*</modifier></type><name>symtab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_symtab</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>symtab</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_rawsymtabsz</name></name> <operator>&lt;</operator> <name>INTSZ</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>symtaberror</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_rawsymtab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_rawsymtabsz</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_WORD</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>INTSZ</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nentries</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>p</name> <operator>+</operator> <name>nentries</name> <operator>*</operator> <name>INTSZ</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>symtaberror</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>symtab</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Elf_Arsym</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nentries</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>RESOURCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>+</operator> <operator>(</operator><name>nentries</name> <operator>*</operator> <name>INTSZ</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nentries</name></expr><operator>,</operator> <expr><name>sym</name> <operator>=</operator> <name>symtab</name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>symtaberror</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GET_WORD</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_rawsize</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>symtaberror</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_off</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_hash</name></name> <operator>=</operator> <call><name>elf_hash</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>INTSZ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sym</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></for>


<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_hash</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sym</name><operator>-&gt;</operator><name>as_off</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_symtabsz</name></name> <operator>=</operator> <name>nentries</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_ar</name><operator>.</operator><name>e_symtab</name></name> <operator>=</operator> <name>symtab</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>symtab</name><operator>)</operator></expr>;</return>

<label><name>symtaberror</name>:</label>
<if_stmt><if>if <condition>(<expr><name>symtab</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>symtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARCHIVE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
