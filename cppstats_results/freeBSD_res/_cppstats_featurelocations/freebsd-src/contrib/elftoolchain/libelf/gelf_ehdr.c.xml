<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/gelf_ehdr.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: gelf_ehdr.c 3177 2015-03-30 18:19:41Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Elf32_Ehdr</name> <modifier>*</modifier></type>
<name>elf32_getehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ELFCLASS32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Elf64_Ehdr</name> <modifier>*</modifier></type>
<name>elf64_getehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ELFCLASS64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>GElf_Ehdr</name> <modifier>*</modifier></type>
<name>gelf_getehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>GElf_Ehdr</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Ehdr</name> <modifier>*</modifier></type><name>eh32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Ehdr</name> <modifier>*</modifier></type><name>eh64</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>ec</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name><operator>)</operator> <operator>!=</operator> <name>ELFCLASS32</name> <operator>&amp;&amp;</operator> <name>ec</name> <operator>!=</operator> <name>ELFCLASS64</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>eh32</name> <operator>=</operator> <call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ELFCLASS32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>e_ident</name></name></expr></argument>, <argument><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_ident</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_ident</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_type</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_machine</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_machine</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_version</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_entry</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_entry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_phoff</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_phoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_shoff</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_shoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_ehsize</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_ehsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_phentsize</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_phentsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_phnum</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_phnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_shentsize</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_shentsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_shnum</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_shnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>e_shstrndx</name></name> <operator>=</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_shstrndx</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>d</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ec</name> <operator>==</operator> <name>ELFCLASS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>eh64</name> <operator>=</operator> <call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ELFCLASS64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>*</operator><name>eh64</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>d</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Elf32_Ehdr</name> <modifier>*</modifier></type>
<name>elf32_newehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ELFCLASS32</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Elf64_Ehdr</name> <modifier>*</modifier></type>
<name>elf64_newehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ELFCLASS64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>gelf_newehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name> <operator>||</operator> <name>ec</name> <operator>==</operator> <name>ELFCLASS64</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gelf_update_ehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>GElf_Ehdr</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ehdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Ehdr</name> <modifier>*</modifier></type><name>eh32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Ehdr</name> <modifier>*</modifier></type><name>eh64</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name><operator>==</operator> <name>NULL</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>!=</operator> <name>ELF_K_ELF</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>ec</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name><operator>)</operator> <operator>!=</operator> <name>ELFCLASS32</name> <operator>&amp;&amp;</operator> <name>ec</name> <operator>!=</operator> <name>ELFCLASS64</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_cmd</name></name> <operator>==</operator> <name>ELF_C_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>MODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ehdr</name> <operator>=</operator> <call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_flagehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ELF_C_SET</name></expr></argument>, <argument><expr><name>ELF_F_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eh64</name> <operator>=</operator> <operator>(</operator><name>Elf64_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>eh64</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eh32</name> <operator>=</operator> <operator>(</operator><name>Elf32_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_ident</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>e_ident</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_ident</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>e_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_machine</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>e_machine</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_version</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>e_version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIBELF_COPY_U32</name><argument_list>(<argument><expr><name>eh32</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIBELF_COPY_U32</name><argument_list>(<argument><expr><name>eh32</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e_phoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIBELF_COPY_U32</name><argument_list>(<argument><expr><name>eh32</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e_shoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>e_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_ehsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>e_ehsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_phentsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>e_phentsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_phnum</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>e_phnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_shentsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>e_shentsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_shnum</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>e_shnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eh32</name><operator>-&gt;</operator><name>e_shstrndx</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>e_shstrndx</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
