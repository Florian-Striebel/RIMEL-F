<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/libelf_align.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelf_align.c 3174 2015-03-27 17:13:41Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>align</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a64</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALIGN</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .a32 = __alignof__(Elf32_##N), .a64 = __alignof__(Elf64_##N) }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALIGN64</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .a32 = 0, .a64 = __alignof__(Elf64_##V) }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALIGN_WORD</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ .a32 = __alignof__(int32_t), .a64 = __alignof__(int64_t) }</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> Need the __alignof__ builtin.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNSUPPORTED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ .a32 = 0, .a64 = 0 }</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>align</name></name></type> <name><name>malign</name><index>[<expr><name>ELF_T_NUM</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>ELF_T_ADDR</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Addr</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_BYTE</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>a32</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>a64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>ELF_T_CAP</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Cap</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_DYN</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Dyn</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_EHDR</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Ehdr</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_HALF</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Half</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_LWORD</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Lword</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_MOVE</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Move</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_MOVEP</name></expr>]</index> <operator>=</operator> <call><name>UNSUPPORTED</name><argument_list>()</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_NOTE</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Nhdr</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_OFF</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Off</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_PHDR</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Phdr</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_REL</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Rel</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_RELA</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Rela</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_SHDR</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Shdr</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_SWORD</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Sword</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_SXWORD</name></expr>]</index> <operator>=</operator> <call><name>MALIGN64</name><argument_list>(<argument><expr><name>Sxword</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_SYM</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Sym</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_SYMINFO</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Syminfo</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_VDEF</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Verdef</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_VNEED</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Verneed</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_WORD</name></expr>]</index> <operator>=</operator> <call><name>MALIGN</name><argument_list>(<argument><expr><name>Word</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_XWORD</name></expr>]</index> <operator>=</operator> <call><name>MALIGN64</name><argument_list>(<argument><expr><name>Xword</name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_GNUHASH</name></expr>]</index> <operator>=</operator> <macro><name>MALIGN_WORD</name><argument_list>()</argument_list></macro></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>unsigned</name> <name>int</name></type>
<name>_libelf_malign</name><parameter_list>(<parameter><decl><type><name>Elf_Type</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elfclass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>ELF_T_NUM</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>elfclass</name> <operator>==</operator> <name>ELFCLASS32</name></expr> ?</condition><then> <expr><name><name>malign</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>a32</name></expr> </then><else>:
<expr><name><name>malign</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>a64</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALIGN</name><parameter_list>(<parameter><type><name>A32</name></type></parameter>,<parameter><type><name>A64</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .a32 = (A32), .a64 = (A64) }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>align</name></name></type> <name><name>falign</name><index>[<expr><name>ELF_T_NUM</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>ELF_T_ADDR</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_BYTE</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_CAP</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_DYN</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_EHDR</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_HALF</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_LWORD</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_MOVE</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_MOVEP</name></expr>]</index> <operator>=</operator> <call><name>UNSUPPORTED</name><argument_list>()</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_NOTE</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_OFF</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_PHDR</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_REL</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_RELA</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_SHDR</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_SWORD</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_SXWORD</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_SYM</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_SYMINFO</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_VDEF</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_VNEED</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_WORD</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_XWORD</name></expr>]</index> <operator>=</operator> <call><name>FALIGN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>ELF_T_GNUHASH</name></expr>]</index> <operator>=</operator> <macro><name>FALIGN</name><argument_list>(<argument><literal type="number">4</literal></argument>,<argument><literal type="number">8</literal></argument>)</argument_list></macro></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>unsigned</name> <name>int</name></type>
<name>_libelf_falign</name><parameter_list>(<parameter><decl><type><name>Elf_Type</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elfclass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>ELF_T_NUM</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>elfclass</name> <operator>==</operator> <name>ELFCLASS32</name></expr> ?</condition><then> <expr><name><name>falign</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>a32</name></expr> </then><else>:
<expr><name><name>falign</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>a64</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
