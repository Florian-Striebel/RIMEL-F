<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/libelf_open.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ELFTC_HAVE_MMAP</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelf_open.c 3007 2014-03-22 08:10:14Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBELF_INITSIZE</name></cpp:macro> <cpp:value>(64*1024)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>_libelf_read_special_file</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>fsz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>readsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bufsz</name></decl>, <decl><type ref="prev"/><name>datasz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>datasz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>readsz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bufsz</name> <operator>=</operator> <name>_LIBELF_INITSIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bufsz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>resourceerror</name>;</goto></block_content></block></if></if_stmt>





<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>datasz</name> <operator>==</operator> <name>bufsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bufsz</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>resourceerror</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bufsz</name> <operator>-</operator> <name>datasz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>datasz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>readsz</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>bufsz</name> <operator>-</operator> <name>datasz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>datasz</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>readsz</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>datasz</name> <operator>&lt;</operator> <name>bufsz</name></expr>)</condition>;</do>

</block_content>}</block> while <condition>(<expr><name>readsz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>readsz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>IO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>readsz</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>bufsz</name> <operator>&gt;</operator> <name>datasz</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>datasz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>datasz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>resourceerror</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fsz</name> <operator>=</operator> <name>datasz</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>

<label><name>resourceerror</name>:</label>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>RESOURCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>Elf</name> <modifier>*</modifier></type>
<name>_libelf_open_object</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reporterror</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <name>ELF_C_READ</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>ELF_C_RDWR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>ELF_C_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>IO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fsize</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISCHR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISFIFO</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>S_ISSOCK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ELF_C_WRITE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>_libelf_allocate_elf</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_libelf_init_elf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ELF_K_ELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_byteorder</name></name> <operator>=</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>byteorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_cmd</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>|=</operator> <name>LIBELF_F_SPECIAL_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>e</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>m</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>fsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ELFTC_HAVE_MMAP</name></expr></cpp:if>









<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>LIBELF_F_RAWFILE_MMAP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>fsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>RESOURCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>fsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>IO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>LIBELF_F_RAWFILE_MALLOC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>_libelf_read_special_file</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>LIBELF_F_RAWFILE_MALLOC</name> <operator>|</operator> <name>LIBELF_F_SPECIAL_FILE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>_libelf_memory</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>, <argument><expr><name>reporterror</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LIBELF_F_RAWFILE_MALLOC</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LIBELF_F_RAWFILE_MMAP</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LIBELF_F_RAWFILE_MALLOC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ELFTC_HAVE_MMAP</name></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>munmap</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ELF_C_RDWR</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>==</operator> <name>ELF_K_AR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_end</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_cmd</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>e</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
