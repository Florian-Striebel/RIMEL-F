<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/gelf_syminfo.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: gelf_syminfo.c 3732 2019-04-22 11:08:38Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>GElf_Syminfo</name> <modifier>*</modifier></type>
<name>gelf_getsyminfo</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>ed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndx</name></decl></parameter>, <parameter><decl><type><name>GElf_Syminfo</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>msz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_Libelf_Data</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Syminfo</name> <modifier>*</modifier></type><name>syminfo32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Syminfo</name> <modifier>*</modifier></type><name>syminfo64</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator>struct <name>_Libelf_Data</name> <operator>*</operator><operator>)</operator> <name>ed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ndx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>dst</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>scn</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>d_scn</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>e</name> <operator>=</operator> <name><name>scn</name><operator>-&gt;</operator><name>s_elf</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name> <operator>||</operator> <name>ec</name> <operator>==</operator> <name>ELFCLASS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sh_type</name> <operator>=</operator> <name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_type</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sh_type</name> <operator>=</operator> <name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_type</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_libelf_xlate_shtype</name><argument_list>(<argument><expr><name>sh_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ELF_T_SYMINFO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msz</name> <operator>=</operator> <call><name>_libelf_msize</name><argument_list>(<argument><expr><name>ELF_T_SYMINFO</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_version</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ndx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msz</name> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>ndx</name> <operator>&gt;=</operator> <name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>syminfo32</name> <operator>=</operator> <operator>(</operator><name>Elf32_Syminfo</name> <operator>*</operator><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_buf</name></name> <operator>+</operator> <name>ndx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>si_boundto</name></name> <operator>=</operator> <name><name>syminfo32</name><operator>-&gt;</operator><name>si_boundto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>=</operator> <name><name>syminfo32</name><operator>-&gt;</operator><name>si_flags</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>syminfo64</name> <operator>=</operator> <operator>(</operator><name>Elf64_Syminfo</name> <operator>*</operator><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_buf</name></name> <operator>+</operator> <name>ndx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>syminfo64</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>dst</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gelf_update_syminfo</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>ed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndx</name></decl></parameter>, <parameter><decl><type><name>GElf_Syminfo</name> <modifier>*</modifier></type><name>gs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>msz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_Libelf_Data</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Syminfo</name> <modifier>*</modifier></type><name>syminfo32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Syminfo</name> <modifier>*</modifier></type><name>syminfo64</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator>struct <name>_Libelf_Data</name> <operator>*</operator><operator>)</operator> <name>ed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ndx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>gs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>scn</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>d_scn</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>e</name> <operator>=</operator> <name><name>scn</name><operator>-&gt;</operator><name>s_elf</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name> <operator>||</operator> <name>ec</name> <operator>==</operator> <name>ELFCLASS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sh_type</name> <operator>=</operator> <name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_type</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sh_type</name> <operator>=</operator> <name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_type</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_libelf_xlate_shtype</name><argument_list>(<argument><expr><name>sh_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ELF_T_SYMINFO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msz</name> <operator>=</operator> <call><name>_libelf_msize</name><argument_list>(<argument><expr><name>ELF_T_SYMINFO</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_version</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ndx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msz</name> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>ndx</name> <operator>&gt;=</operator> <name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>syminfo32</name> <operator>=</operator> <operator>(</operator><name>Elf32_Syminfo</name> <operator>*</operator><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_buf</name></name> <operator>+</operator> <name>ndx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syminfo32</name><operator>-&gt;</operator><name>si_boundto</name></name> <operator>=</operator> <name><name>gs</name><operator>-&gt;</operator><name>si_boundto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>syminfo32</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>=</operator> <name><name>gs</name><operator>-&gt;</operator><name>si_flags</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>syminfo64</name> <operator>=</operator> <operator>(</operator><name>Elf64_Syminfo</name> <operator>*</operator><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_buf</name></name> <operator>+</operator> <name>ndx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>syminfo64</name> <operator>=</operator> <operator>*</operator><name>gs</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
