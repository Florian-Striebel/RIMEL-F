<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/elf_hash.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: elf_hash.c 3174 2015-03-27 17:13:41Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<function><type><name>unsigned</name> <name>long</name></type>
<name>elf_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <operator>~</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <literal type="number">0xF0000000UL</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <name>t</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>h</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
