<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/elf_errmsg.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: elf_errmsg.c 3174 2015-03-27 17:13:41Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>_libelf_errors</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_ERROR</name><parameter_list>(<parameter><type><name>N</name></type></parameter>,<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[ELF_E_##N] = S</cpp:value></cpp:define>
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>, <argument><expr><literal type="string">"No Error"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>ARCHIVE</name></expr></argument>, <argument><expr><literal type="string">"Malformed ar(1) archive"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="string">"Invalid argument"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><literal type="string">"ELF class mismatch"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>, <argument><expr><literal type="string">"Invalid data buffer descriptor"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>HEADER</name></expr></argument>, <argument><expr><literal type="string">"Missing or malformed ELF header"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>IO</name></expr></argument>, <argument><expr><literal type="string">"I/O error"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>LAYOUT</name></expr></argument>, <argument><expr><literal type="string">"Layout constraint violation"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>MODE</name></expr></argument>, <argument><expr><literal type="string">"Incorrect ELF descriptor mode"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>RANGE</name></expr></argument>, <argument><expr><literal type="string">"Value out of range of target"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>RESOURCE</name></expr></argument>, <argument><expr><literal type="string">"Resource exhaustion"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>SECTION</name></expr></argument>, <argument><expr><literal type="string">"Invalid section descriptor"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>SEQUENCE</name></expr></argument>, <argument><expr><literal type="string">"API calls out of sequence"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>UNIMPL</name></expr></argument>, <argument><expr><literal type="string">"Unimplemented feature"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DEFINE_ERROR</name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>, <argument><expr><literal type="string">"Unknown ELF API version"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>DEFINE_ERROR</name><argument_list>(<argument>NUM</argument>, <argument><literal type="string">"Unknown error"</literal></argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFINE_ERROR</name></cpp:undef>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>elf_errmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>oserr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>ELF_E_NONE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>error</name> <operator>=</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>error</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oserr</name> <operator>=</operator> <name>error</name> <operator>&gt;&gt;</operator> <name>LIBELF_OS_ERROR_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>&amp;=</operator> <name>LIBELF_ELF_ERROR_MASK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&lt;</operator> <name>ELF_E_NONE</name> <operator>||</operator> <name>error</name> <operator>&gt;=</operator> <name>ELF_E_NUM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>_libelf_errors</name><index>[<expr><name>ELF_E_NUM</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>oserr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>,
<argument><expr><name><name>_libelf_errors</name><index>[<expr><name>error</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>oserr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>_libelf_errors</name><index>[<expr><name>error</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
