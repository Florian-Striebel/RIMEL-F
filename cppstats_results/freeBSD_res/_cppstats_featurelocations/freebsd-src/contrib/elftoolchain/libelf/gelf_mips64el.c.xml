<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/gelf_mips64el.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>int</name></type>
<name>_libelf_is_mips64el</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>==</operator> <name>ELF_K_ELF</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name> <operator>==</operator> <name>ELFCLASS64</name> <operator>&amp;&amp;</operator>
<name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_ehdr</name><operator>.</operator><name>e_ehdr64</name><operator>-&gt;</operator><name>e_machine</name></name> <operator>==</operator> <name>EM_MIPS</name> <operator>&amp;&amp;</operator>
<name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_ehdr</name><operator>.</operator><name>e_ehdr64</name><operator>-&gt;</operator><name>e_ident</name><index>[<expr><name>EI_DATA</name></expr>]</index></name> <operator>==</operator> <name>ELFDATA2LSB</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>Elf64_Xword</name></type>
<name>_libelf_mips64el_r_info_tof</name><parameter_list>(<parameter><decl><type><name>Elf64_Xword</name></type> <name>r_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>new_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ssym</name></decl>, <decl><type ref="prev"/><name>type3</name></decl>, <decl><type ref="prev"/><name>type2</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ssym</name> <operator>=</operator> <name>r_info</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type3</name> <operator>=</operator> <name>r_info</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type2</name> <operator>=</operator> <name>r_info</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>r_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_info</name> <operator>=</operator> <name>r_info</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_info</name> <operator>|=</operator> <operator>(</operator><name>Elf64_Xword</name><operator>)</operator><name>ssym</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_info</name> <operator>|=</operator> <operator>(</operator><name>Elf64_Xword</name><operator>)</operator><name>type3</name> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_info</name> <operator>|=</operator> <operator>(</operator><name>Elf64_Xword</name><operator>)</operator><name>type2</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_info</name> <operator>|=</operator> <operator>(</operator><name>Elf64_Xword</name><operator>)</operator><name>type</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>new_info</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Elf64_Xword</name></type>
<name>_libelf_mips64el_r_info_tom</name><parameter_list>(<parameter><decl><type><name>Elf64_Xword</name></type> <name>r_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>new_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ssym</name></decl>, <decl><type ref="prev"/><name>type3</name></decl>, <decl><type ref="prev"/><name>type2</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ssym</name> <operator>=</operator> <name>r_info</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type3</name> <operator>=</operator> <name>r_info</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type2</name> <operator>=</operator> <name>r_info</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>r_info</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_info</name> <operator>=</operator> <operator>(</operator><name>r_info</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_info</name> <operator>|=</operator> <operator>(</operator><name>Elf64_Xword</name><operator>)</operator><name>ssym</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_info</name> <operator>|=</operator> <operator>(</operator><name>Elf64_Xword</name><operator>)</operator><name>type3</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_info</name> <operator>|=</operator> <operator>(</operator><name>Elf64_Xword</name><operator>)</operator><name>type2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_info</name> <operator>|=</operator> <operator>(</operator><name>Elf64_Xword</name><operator>)</operator><name>type</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>new_info</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
