<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/libelf_phdr.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelf_phdr.c 3732 2019-04-22 11:08:38Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>_libelf_getphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>phnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fsz</name></decl>, <decl><type ref="prev"/><name>msz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>phoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Ehdr</name> <modifier>*</modifier></type><name>eh32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Ehdr</name> <modifier>*</modifier></type><name>eh64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ehdr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>phdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_libelf_translator_function</name> <modifier>*</modifier></type><name>xlator</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name> <operator>||</operator> <name>ec</name> <operator>==</operator> <name>ELFCLASS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>phdr</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr> ?</condition><then>
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_phdr</name><operator>.</operator><name>e_phdr32</name></name></expr> </then><else>:
<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_phdr</name><operator>.</operator><name>e_phdr64</name></name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>phdr</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ehdr</name> <operator>=</operator> <call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>phnum</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nphdr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eh32</name> <operator>=</operator> <operator>(</operator><name>Elf32_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>phoff</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_phoff</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>eh64</name> <operator>=</operator> <operator>(</operator><name>Elf64_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>phoff</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>eh64</name><operator>-&gt;</operator><name>e_phoff</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fsz</name> <operator>=</operator> <call><name>gelf_fsize</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ELF_T_PHDR</name></expr></argument>, <argument><expr><name>phnum</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fsz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>phoff</name> <operator>+</operator> <name>fsz</name> <operator>&lt;</operator> <name>phoff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>HEADER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_rawsize</name></name> <operator>&lt;</operator> <operator>(</operator><name>phoff</name> <operator>+</operator> <name>fsz</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>HEADER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msz</name> <operator>=</operator> <call><name>_libelf_msize</name><argument_list>(<argument><expr><name>ELF_T_PHDR</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>phdr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>phnum</name></expr></argument>, <argument><expr><name>msz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>RESOURCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_phdr</name><operator>.</operator><name>e_phdr32</name></name> <operator>=</operator> <name>phdr</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_phdr</name><operator>.</operator><name>e_phdr64</name></name> <operator>=</operator> <name>phdr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>xlator</name> <operator>=</operator> <call><name>_libelf_get_translator</name><argument_list>(<argument><expr><name>ELF_T_PHDR</name></expr></argument>, <argument><expr><name>ELF_TOMEMORY</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>,
<argument><expr><call><name>_libelf_elfmachine</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>xlator</name>)<argument_list>(<argument><expr><name>phdr</name></expr></argument>, <argument><expr><name>phnum</name> <operator>*</operator> <name>msz</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>+</operator> <name>phoff</name></expr></argument>, <argument><expr><name>phnum</name></expr></argument>,
<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_byteorder</name></name> <operator>!=</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>byteorder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>phdr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>_libelf_newphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ehdr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newphdr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldphdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>msz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ehdr</name> <operator>=</operator> <call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>SEQUENCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_class</name></name> <operator>==</operator> <name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name> <operator>||</operator> <name>ec</name> <operator>==</operator> <name>ELFCLASS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_version</name></name> <operator>==</operator> <name>EV_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msz</name> <operator>=</operator> <call><name>_libelf_msize</name><argument_list>(<argument><expr><name>ELF_T_PHDR</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_version</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>newphdr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>newphdr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>msz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>RESOURCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oldphdr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_phdr</name><operator>.</operator><name>e_phdr32</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oldphdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_phdr</name><operator>.</operator><name>e_phdr32</name></name> <operator>=</operator> <operator>(</operator><name>Elf32_Phdr</name> <operator>*</operator><operator>)</operator> <name>newphdr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oldphdr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_phdr</name><operator>.</operator><name>e_phdr64</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oldphdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_phdr</name><operator>.</operator><name>e_phdr64</name></name> <operator>=</operator> <operator>(</operator><name>Elf64_Phdr</name> <operator>*</operator><operator>)</operator> <name>newphdr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nphdr</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>elf_flagphdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ELF_C_SET</name></expr></argument>, <argument><expr><name>ELF_F_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>newphdr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
