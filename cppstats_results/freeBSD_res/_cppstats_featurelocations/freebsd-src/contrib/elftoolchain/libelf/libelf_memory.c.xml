<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/libelf_memory.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: libelf_memory.c 3738 2019-05-05 21:49:06Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<function><type><name>Elf</name> <modifier>*</modifier></type>
<name>_libelf_memory</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reporterror</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>Elf_Error</name></name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>e_byteorder</name></decl>, <decl><type ref="prev"/><name>e_version</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>image</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>_libelf_allocate_elf</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_cmd</name></name> <operator>=</operator> <name>ELF_C_READ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>=</operator> <name>image</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_rawsize</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name>sz</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LIBELF_IS_ELF</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_IS_ELF</name><parameter_list>(<parameter><type><name>P</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((P)[EI_MAG0] == ELFMAG0 &amp;&amp; (P)[EI_MAG1] == ELFMAG1 &amp;&amp; (P)[EI_MAG2] == ELFMAG2 &amp;&amp; (P)[EI_MAG3] == ELFMAG3)</cpp:value></cpp:define>



<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <name>EI_NIDENT</name> <operator>&amp;&amp;</operator> <call><name>LIBELF_IS_ELF</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e_byteorder</name> <operator>=</operator> <name><name>image</name><index>[<expr><name>EI_DATA</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e_class</name> <operator>=</operator> <name><name>image</name><index>[<expr><name>EI_CLASS</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e_version</name> <operator>=</operator> <name><name>image</name><index>[<expr><name>EI_VERSION</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ELF_E_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e_version</name> <operator>&gt;</operator> <name>EV_CURRENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ELF_E_VERSION</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>e_byteorder</name> <operator>!=</operator> <name>ELFDATA2LSB</name> <operator>&amp;&amp;</operator> <name>e_byteorder</name> <operator>!=</operator>
<name>ELFDATA2MSB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>e_class</name> <operator>!=</operator> <name>ELFCLASS32</name> <operator>&amp;&amp;</operator> <name>e_class</name> <operator>!=</operator>
<name>ELFCLASS64</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ELF_E_HEADER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>ELF_E_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reporterror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>LIBELF_ERROR</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_libelf_release_elf</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>_libelf_init_elf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ELF_K_ELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_byteorder</name></name> <operator>=</operator> <name>e_byteorder</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_class</name></name> <operator>=</operator> <name>e_class</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_version</name></name> <operator>=</operator> <name>e_version</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sz</name> <operator>&gt;=</operator> <name>SARMAG</name> <operator>&amp;&amp;</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>image</name></expr></argument>, <argument><expr><name>ARMAG</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>SARMAG</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>_libelf_ar_open</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>reporterror</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>e</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
