<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/_libelf_ar.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBELF_AR_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LIBELF_AR_H_</name></cpp:macro></cpp:define>






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ar.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_AR_BSD_EXTENDED_NAME_PREFIX</name></cpp:macro> <cpp:value>"#1/"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_AR_BSD_SYMTAB_NAME</name></cpp:macro> <cpp:value>"__.SYMDEF"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_AR_BSD_EXTENDED_NAME_PREFIX_SIZE</name></cpp:macro> <cpp:value>(sizeof(LIBELF_AR_BSD_EXTENDED_NAME_PREFIX) - 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_EXTENDED_BSD_NAME</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strncmp((const char *) (NAME), LIBELF_AR_BSD_EXTENDED_NAME_PREFIX, LIBELF_AR_BSD_EXTENDED_NAME_PREFIX_SIZE) == 0)</cpp:value></cpp:define>





<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>_libelf_ar_get_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_sz</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_rawname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_svr4names</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>_libelf_ar_get_raw_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type><name>_arh</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>_libelf_ar_get_translated_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ar_hdr</name></name> <modifier>*</modifier></type><name>_arh</name></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_ar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_libelf_ar_get_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_sz</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_base</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_ret</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
