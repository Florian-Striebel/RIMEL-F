<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/_libelf.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LIBELF_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LIBELF_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/tree.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_elftc.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_MSG_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<struct>struct <name>_libelf_globals</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>libelf_arch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>libelf_byteorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>libelf_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>libelf_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>libelf_fillchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>libelf_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>libelf_msg</name><index>[<expr><name>LIBELF_MSG_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>_libelf_globals</name></name></type> <name>_libelf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_PRIVATE</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_libelf.libelf_##N)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_ELF_ERROR_MASK</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_OS_ERROR_SHIFT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_ERROR</name><parameter_list>(<parameter><type><name>E</name></type></parameter>, <parameter><type><name>O</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((E) &amp; LIBELF_ELF_ERROR_MASK) | ((O) &lt;&lt; LIBELF_OS_ERROR_SHIFT))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_SET_ERROR</name><parameter_list>(<parameter><type><name>E</name></type></parameter>, <parameter><type><name>O</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LIBELF_PRIVATE(error) = LIBELF_ERROR(ELF_E_##E, (O)); } while (0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_ADJUST_AR_SIZE</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((S) + 1U) &amp; ~1U)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_F_API_MASK</name></cpp:macro> <cpp:value>0x00FFFFU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_F_AR_HEADER</name></cpp:macro> <cpp:value>0x010000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_F_AR_VARIANT_SVR4</name></cpp:macro> <cpp:value>0x020000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_F_DATA_MALLOCED</name></cpp:macro> <cpp:value>0x040000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_F_RAWFILE_MALLOC</name></cpp:macro> <cpp:value>0x080000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_F_RAWFILE_MMAP</name></cpp:macro> <cpp:value>0x100000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_F_SHDRS_LOADED</name></cpp:macro> <cpp:value>0x200000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_F_SPECIAL_FILE</name></cpp:macro> <cpp:value>0x400000U</cpp:value></cpp:define>

<expr_stmt><expr><call><name>RB_HEAD</name><argument_list>(<argument><expr><name>scntree</name></expr></argument>, <argument><expr><name>_Elf_Scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_PROTOTYPE</name><argument_list>(<argument><expr><name>scntree</name></expr></argument>, <argument><expr><name>_Elf_Scn</name></expr></argument>, <argument><expr><name>e_scn</name></expr></argument>, <argument><expr><name>elfscn_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>_Elf</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>e_activations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>e_byteorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Cmd</name></type> <name>e_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>e_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Kind</name></type> <name>e_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e_parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e_rawfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>e_rawsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>e_version</name></decl>;</decl_stmt>





<union>union <block>{
<decl_stmt><decl><type><name>Elf_Arhdr</name> <modifier>*</modifier></type><name>e_arhdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e_rawhdr</name></decl>;</decl_stmt>
}</block> <decl><name>e_hdr</name></decl>;</union>

<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>off_t</name></type> <name>e_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e_nchildren</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e_rawstrtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>e_rawstrtabsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e_rawsymtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>e_rawsymtabsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Arsym</name> <modifier>*</modifier></type><name>e_symtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>e_symtabsz</name></decl>;</decl_stmt>
}</block> <decl><name>e_ar</name></decl>;</struct>
<struct>struct <block>{
<union>union <block>{
<decl_stmt><decl><type><name>Elf32_Ehdr</name> <modifier>*</modifier></type><name>e_ehdr32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Ehdr</name> <modifier>*</modifier></type><name>e_ehdr64</name></decl>;</decl_stmt>
}</block> <decl><name>e_ehdr</name></decl>;</union>
<union>union <block>{
<decl_stmt><decl><type><name>Elf32_Phdr</name> <modifier>*</modifier></type><name>e_phdr32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Phdr</name> <modifier>*</modifier></type><name>e_phdr64</name></decl>;</decl_stmt>
}</block> <decl><name>e_phdr</name></decl>;</union>
<decl_stmt><decl><type><name><name>struct</name> <name>scntree</name></name></type> <name>e_scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>e_nphdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>e_nscn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>e_strndx</name></decl>;</decl_stmt>
}</block> <decl><name>e_elf</name></decl>;</struct>
}</block> <decl><name>e_u</name></decl>;</union>
}</block>;</struct>




<struct>struct <name>_Libelf_Data</name> <block>{
<decl_stmt><decl><type><name>Elf_Data</name></type> <name>d_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>d_scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>d_flags</name></decl>;</decl_stmt>
<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>_Libelf_Data</argument>)</argument_list></macro> <expr_stmt><expr><name>d_next</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>_Elf_Scn</name> <block>{
<union>union <block>{
<decl_stmt><decl><type><name>Elf32_Shdr</name></type> <name>s_shdr32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Shdr</name></type> <name>s_shdr64</name></decl>;</decl_stmt>
}</block> <decl><name>s_shdr</name></decl>;</union>
<macro><name>STAILQ_HEAD</name><argument_list>(<argument/>, <argument>_Libelf_Data</argument>)</argument_list></macro> <expr_stmt><expr><name>s_data</name></expr>;</expr_stmt>
<macro><name>STAILQ_HEAD</name><argument_list>(<argument/>, <argument>_Libelf_Data</argument>)</argument_list></macro> <expr_stmt><expr><name>s_rawdata</name></expr>;</expr_stmt>
<macro><name>RB_ENTRY</name><argument_list>(<argument>_Elf_Scn</argument>)</argument_list></macro> <expr_stmt><expr><name>s_tree</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_Elf</name></name> <modifier>*</modifier></type><name>s_elf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_ndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>s_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>s_rawoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>s_size</name></decl>;</decl_stmt>
}</block>;</struct>


<enum>enum <block>{
<decl><name>ELF_TOFILE</name></decl>,
<decl><name>ELF_TOMEMORY</name></decl>
}</block>;</enum>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_COPY_U32</name><parameter_list>(<parameter><type><name>DST</name></type></parameter>, <parameter><type><name>SRC</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((SRC)-&gt;NAME &gt; UINT32_MAX) { LIBELF_SET_ERROR(RANGE, 0); return (0); } (DST)-&gt;NAME = (SRC)-&gt;NAME &amp; 0xFFFFFFFFU; } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBELF_COPY_S32</name><parameter_list>(<parameter><type><name>DST</name></type></parameter>, <parameter><type><name>SRC</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((SRC)-&gt;NAME &gt; INT32_MAX || (SRC)-&gt;NAME &lt; INT32_MIN) { LIBELF_SET_ERROR(RANGE, 0); return (0); } (DST)-&gt;NAME = (int32_t) (SRC)-&gt;NAME; } while (0)</cpp:value></cpp:define>













<typedef>typedef <function_decl><type><name>int</name></type> <name>_libelf_translator_function</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dsz</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_byteswap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name><name>struct</name> <name>_Libelf_Data</name></name> <modifier>*</modifier></type><name>_libelf_allocate_data</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf</name> <modifier>*</modifier></type><name>_libelf_allocate_elf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_libelf_allocate_scn</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_ndx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Arhdr</name> <modifier>*</modifier></type><name>_libelf_ar_gethdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf</name> <modifier>*</modifier></type><name>_libelf_ar_open</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_reporterror</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf</name> <modifier>*</modifier></type><name>_libelf_ar_open_member</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_fd</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_c</name></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_ar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Arsym</name> <modifier>*</modifier></type><name>_libelf_ar_process_bsd_symtab</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_ar</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Arsym</name> <modifier>*</modifier></type><name>_libelf_ar_process_svr4_symtab</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_ar</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_libelf_checksum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>_libelf_ehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_allocate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_libelf_elfmachine</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>_libelf_falign</name><parameter_list>(<parameter><decl><type><name>Elf_Type</name></type> <name>_t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>_libelf_fsize</name><parameter_list>(<parameter><decl><type><name>Elf_Type</name></type> <name>_t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_version</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>_libelf_translator_function</name> <modifier>*</modifier></type><name>_libelf_get_translator</name><parameter_list>(<parameter><decl><type><name>Elf_Type</name></type> <name>_t</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>_direction</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfmachine</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>_libelf_getchdr</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>_libelf_getphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>_libelf_getshdr</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_libelf_init_elf</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>, <parameter><decl><type><name>Elf_Kind</name></type> <name>_kind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_libelf_is_mips64el</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_libelf_load_section_headers</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ehdr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>_libelf_malign</name><parameter_list>(<parameter><decl><type><name>Elf_Type</name></type> <name>_t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf</name> <modifier>*</modifier></type><name>_libelf_memory</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>_image</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_reporterror</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>_libelf_msize</name><parameter_list>(<parameter><decl><type><name>Elf_Type</name></type> <name>_t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>_libelf_newphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf</name> <modifier>*</modifier></type><name>_libelf_open_object</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_fd</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_reporterror</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf64_Xword</name></type> <name>_libelf_mips64el_r_info_tof</name><parameter_list>(<parameter><decl><type><name>Elf64_Xword</name></type> <name>r_info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf64_Xword</name></type> <name>_libelf_mips64el_r_info_tom</name><parameter_list>(<parameter><decl><type><name>Elf64_Xword</name></type> <name>r_info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>_Libelf_Data</name></name> <modifier>*</modifier></type><name>_libelf_release_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Libelf_Data</name></name> <modifier>*</modifier></type><name>_d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_libelf_release_elf</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_libelf_release_scn</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_libelf_setphnum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_eh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_phnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_libelf_setshnum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_eh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_shnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_libelf_setshstrndx</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_eh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>_shstrndx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_libelf_xlate</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Elf_Data</name> <modifier>*</modifier></type><name>_s</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_encoding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfclass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_elfmachine</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_direction</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_libelf_xlate_shtype</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>_sht</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
