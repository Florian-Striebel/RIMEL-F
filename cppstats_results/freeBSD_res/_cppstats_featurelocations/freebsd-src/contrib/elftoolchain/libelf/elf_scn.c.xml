<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/elf_scn.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: elf_scn.c 3712 2019-03-16 22:23:34Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>elfscn_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Elf_Scn</name></name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_Elf_Scn</name></name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>s_ndx</name></name> <operator>&lt;</operator> <name><name>s2</name><operator>-&gt;</operator><name>s_ndx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>s_ndx</name></name> <operator>&gt;</operator> <name><name>s2</name><operator>-&gt;</operator><name>s_ndx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>RB_GENERATE</name><argument_list>(<argument><expr><name>scntree</name></expr></argument>, <argument><expr><name>_Elf_Scn</name></expr></argument>, <argument><expr><name>s_tree</name></expr></argument>, <argument><expr><name>elfscn_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<function><type><name>int</name></type>
<name>_libelf_load_section_headers</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ehdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>shoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Ehdr</name> <modifier>*</modifier></type><name>eh32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Ehdr</name> <modifier>*</modifier></type><name>eh64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ec</name></decl>, <decl><type ref="prev"/><name>swapbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fsz</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>shnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_libelf_translator_function</name> <modifier>*</modifier></type><name>xlator</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ehdr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>&amp;</operator> <name>LIBELF_F_SHDRS_LOADED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_EHDR</name><parameter_list>(<parameter><type><name>E</name></type></parameter>,<parameter><type><name>EH</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uintmax_t rawsize = (uintmax_t) e-&gt;e_rawsize; if (shoff &gt; (uintmax_t) e-&gt;e_rawsize || fsz != (EH)-&gt;e_shentsize || shnum &gt; SIZE_MAX / fsz || fsz * shnum &gt; rawsize - shoff) { LIBELF_SET_ERROR(HEADER, 0); return (0); } } while (0)</cpp:value></cpp:define>










<expr_stmt><expr><name>ec</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fsz</name> <operator>=</operator> <call><name>_libelf_fsize</name><argument_list>(<argument><expr><name>ELF_T_SHDR</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_version</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fsz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shnum</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nscn</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eh32</name> <operator>=</operator> <operator>(</operator><name>Elf32_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shoff</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>eh32</name><operator>-&gt;</operator><name>e_shoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EHDR</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>eh32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>eh64</name> <operator>=</operator> <operator>(</operator><name>Elf64_Ehdr</name> <operator>*</operator><operator>)</operator> <name>ehdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shoff</name> <operator>=</operator> <name><name>eh64</name><operator>-&gt;</operator><name>e_shoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_EHDR</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>eh64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>xlator</name> <operator>=</operator> <call><name>_libelf_get_translator</name><argument_list>(<argument><expr><name>ELF_T_SHDR</name></expr></argument>, <argument><expr><name>ELF_TOMEMORY</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>,
<argument><expr><call><name>_libelf_elfmachine</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>swapbytes</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_byteorder</name></name> <operator>!=</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>byteorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>+</operator> <name>shoff</name></expr>;</expr_stmt>






<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_scn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_MIN</name><argument_list>(<argument><expr><name>scntree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_scn</name></name></expr></argument>)</argument_list></call> <operator>==</operator>
<call><name>RB_MAX</name><argument_list>(<argument><expr><name>scntree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_scn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>fsz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>src</name> <operator>+=</operator> <name>fsz</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>_libelf_allocate_scn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>xlator</name>)<argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>swapbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ec</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>s_offset</name></name> <operator>=</operator> <name><name>scn</name><operator>-&gt;</operator><name>s_rawoff</name></name> <operator>=</operator>
<name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>s_size</name></name> <operator>=</operator> <name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>s_offset</name></name> <operator>=</operator> <name><name>scn</name><operator>-&gt;</operator><name>s_rawoff</name></name> <operator>=</operator>
<name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>s_size</name></name> <operator>=</operator> <name><name>scn</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>|=</operator> <name>LIBELF_F_SHDRS_LOADED</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>Elf_Scn</name> <modifier>*</modifier></type>
<name>elf_getscn</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ehdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>!=</operator> <name>ELF_K_ELF</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>ec</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name><operator>)</operator> <operator>!=</operator> <name>ELFCLASS32</name> <operator>&amp;&amp;</operator> <name>ec</name> <operator>!=</operator> <name>ELFCLASS64</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ehdr</name> <operator>=</operator> <call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_cmd</name></name> <operator>!=</operator> <name>ELF_C_WRITE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>&amp;</operator> <name>LIBELF_F_SHDRS_LOADED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>_libelf_load_section_headers</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ehdr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <call><name>RB_ROOT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_scn</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s_ndx</name></name> <operator>==</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s_ndx</name></name> <operator>&lt;</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RB_RIGHT</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RB_LEFT</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>elf_ndxscn</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>SHN_UNDEF</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s_ndx</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Elf_Scn</name> <modifier>*</modifier></type>
<name>elf_newscn</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ehdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>!=</operator> <name>ELF_K_ELF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ec</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name><operator>)</operator> <operator>!=</operator> <name>ELFCLASS32</name> <operator>&amp;&amp;</operator> <name>ec</name> <operator>!=</operator> <name>ELFCLASS64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ehdr</name> <operator>=</operator> <call><name>_libelf_ehdr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_cmd</name></name> <operator>!=</operator> <name>ELF_C_WRITE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>&amp;</operator> <name>LIBELF_F_SHDRS_LOADED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>_libelf_load_section_headers</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ehdr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_scn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nscn</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>_libelf_allocate_scn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>SHN_UNDEF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nscn</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nscn</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>_libelf_allocate_scn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nscn</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_nscn</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_flagscn</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>ELF_C_SET</name></expr></argument>, <argument><expr><name>ELF_F_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>scn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Elf_Scn</name> <modifier>*</modifier></type>
<name>elf_nextscn</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>!=</operator> <name>ELF_K_ELF</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s_elf</name></name> <operator>!=</operator> <name>e</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>elf_getscn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>RB_NEXT</name><argument_list>(<argument><expr><name>scntree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>e_u</name><operator>.</operator><name>e_elf</name><operator>.</operator><name>e_scn</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
