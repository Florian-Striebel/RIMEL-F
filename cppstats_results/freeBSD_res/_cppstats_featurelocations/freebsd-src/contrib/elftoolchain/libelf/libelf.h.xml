<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/libelf.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBELF_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBELF_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/elf32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/elf64.h&gt;</cpp:file></cpp:include>


<typedef>typedef <type><name><name>struct</name> <name>_Elf</name></name></type> <name>Elf</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>_Elf_Scn</name></name></type> <name>Elf_Scn</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>ELF_K_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ELF_K_AR</name></decl>,
<decl><name>ELF_K_COFF</name></decl>,
<decl><name>ELF_K_ELF</name></decl>,
<decl><name>ELF_K_NUM</name></decl>
}</block></enum></type> <name>Elf_Kind</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_K_FIRST</name></cpp:macro> <cpp:value>ELF_K_NONE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_K_LAST</name></cpp:macro> <cpp:value>ELF_K_NUM</cpp:value></cpp:define>


<typedef>typedef <type><enum>enum <block>{
<decl><name>ELF_T_ADDR</name></decl>,
<decl><name>ELF_T_BYTE</name></decl>,
<decl><name>ELF_T_CAP</name></decl>,
<decl><name>ELF_T_DYN</name></decl>,
<decl><name>ELF_T_EHDR</name></decl>,
<decl><name>ELF_T_HALF</name></decl>,
<decl><name>ELF_T_LWORD</name></decl>,
<decl><name>ELF_T_MOVE</name></decl>,
<decl><name>ELF_T_MOVEP</name></decl>,
<decl><name>ELF_T_NOTE</name></decl>,
<decl><name>ELF_T_OFF</name></decl>,
<decl><name>ELF_T_PHDR</name></decl>,
<decl><name>ELF_T_REL</name></decl>,
<decl><name>ELF_T_RELA</name></decl>,
<decl><name>ELF_T_SHDR</name></decl>,
<decl><name>ELF_T_SWORD</name></decl>,
<decl><name>ELF_T_SXWORD</name></decl>,
<decl><name>ELF_T_SYMINFO</name></decl>,
<decl><name>ELF_T_SYM</name></decl>,
<decl><name>ELF_T_VDEF</name></decl>,
<decl><name>ELF_T_VNEED</name></decl>,
<decl><name>ELF_T_WORD</name></decl>,
<decl><name>ELF_T_XWORD</name></decl>,
<decl><name>ELF_T_GNUHASH</name></decl>,
<decl><name>ELF_T_NUM</name></decl>
}</block></enum></type> <name>Elf_Type</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_T_FIRST</name></cpp:macro> <cpp:value>ELF_T_ADDR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_T_LAST</name></cpp:macro> <cpp:value>ELF_T_GNUHASH</cpp:value></cpp:define>


<typedef>typedef <type><enum>enum <block>{
<decl><name>ELF_C_NULL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ELF_C_CLR</name></decl>,
<decl><name>ELF_C_FDDONE</name></decl>,
<decl><name>ELF_C_FDREAD</name></decl>,
<decl><name>ELF_C_RDWR</name></decl>,
<decl><name>ELF_C_READ</name></decl>,
<decl><name>ELF_C_SET</name></decl>,
<decl><name>ELF_C_WRITE</name></decl>,
<decl><name>ELF_C_NUM</name></decl>
}</block></enum></type> <name>Elf_Cmd</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_C_FIRST</name></cpp:macro> <cpp:value>ELF_C_NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_C_LAST</name></cpp:macro> <cpp:value>ELF_C_NUM</cpp:value></cpp:define>





<typedef>typedef <type><struct>struct <name>_Elf_Data</name> <block>{



<decl_stmt><decl><type><name>uint64_t</name></type> <name>d_align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>d_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>d_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>d_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Type</name></type> <name>d_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>d_version</name></decl>;</decl_stmt>
}</block></struct></type> <name>Elf_Data</name>;</typedef>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>time_t</name></type> <name>ar_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ar_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>ar_gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>ar_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ar_rawname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ar_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>ar_uid</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ar_flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>Elf_Arhdr</name>;</typedef>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>off_t</name></type> <name>as_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>as_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>as_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>Elf_Arsym</name>;</typedef>





<enum>enum <name>Elf_Error</name> <block>{
<decl><name>ELF_E_NONE</name></decl>,
<decl><name>ELF_E_ARCHIVE</name></decl>,
<decl><name>ELF_E_ARGUMENT</name></decl>,
<decl><name>ELF_E_CLASS</name></decl>,
<decl><name>ELF_E_DATA</name></decl>,
<decl><name>ELF_E_HEADER</name></decl>,
<decl><name>ELF_E_IO</name></decl>,
<decl><name>ELF_E_LAYOUT</name></decl>,
<decl><name>ELF_E_MODE</name></decl>,
<decl><name>ELF_E_RANGE</name></decl>,
<decl><name>ELF_E_RESOURCE</name></decl>,
<decl><name>ELF_E_SECTION</name></decl>,
<decl><name>ELF_E_SEQUENCE</name></decl>,
<decl><name>ELF_E_UNIMPL</name></decl>,
<decl><name>ELF_E_VERSION</name></decl>,
<decl><name>ELF_E_INVALID_SECTION_FLAGS</name></decl>,
<decl><name>ELF_E_INVALID_SECTION_TYPE</name></decl>,
<decl><name>ELF_E_NOT_COMPRESSED</name></decl>,
<decl><name>ELF_E_NUM</name></decl>
}</block>;</enum>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_F_LAYOUT</name></cpp:macro> <cpp:value>0x001U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_F_DIRTY</name></cpp:macro> <cpp:value>0x002U</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_F_ARCHIVE</name></cpp:macro> <cpp:value>0x100U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_F_ARCHIVE_SYSV</name></cpp:macro> <cpp:value>0x200U</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf_begin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_fd</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_cmd</name></decl></parameter>, <parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>elf_cntl</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>elf_end</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>elf_errmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_error</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>elf_errno</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>elf_fill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_fill</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>elf_flagarhdr</name><parameter_list>(<parameter><decl><type><name>Elf_Arhdr</name> <modifier>*</modifier></type><name>_arh</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_cmd</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>elf_flagdata</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_cmd</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>elf_flagehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_cmd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>elf_flagelf</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_cmd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>elf_flagphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_cmd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>elf_flagscn</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_cmd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>elf_flagshdr</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_cmd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Arhdr</name> <modifier>*</modifier></type><name>elf_getarhdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Arsym</name> <modifier>*</modifier></type><name>elf_getarsym</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>off_t</name></type> <name>elf_getbase</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>elf_getdata</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>elf_getident</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>elf_getphdrnum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>elf_getphnum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>elf_getscn</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>elf_getshdrnum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>elf_getshnum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>elf_getshdrstrndx</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>elf_getshstrndx</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>elf_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Kind</name></type> <name>elf_kind</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf_memory</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>_image</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>elf_ndxscn</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>elf_newdata</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>elf_newscn</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>elf_nextscn</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Cmd</name></type> <name>elf_next</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf_open</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf</name> <modifier>*</modifier></type><name>elf_openmemory</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>_image</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>off_t</name></type> <name>elf_rand</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>_off</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>elf_rawdata</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>, <parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>elf_rawfile</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>elf_setshstrndx</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_shnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>elf_strptr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_section</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>off_t</name></type> <name>elf_update</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>Elf_Cmd</name></type> <name>_cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>elf_version</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_version</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> <name>elf32_checksum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>elf32_fsize</name><parameter_list>(<parameter><decl><type><name>Elf_Type</name></type> <name>_type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_count</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf32_Chdr</name> <modifier>*</modifier></type><name>elf32_getchdr</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf32_Ehdr</name> <modifier>*</modifier></type><name>elf32_getehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf32_Phdr</name> <modifier>*</modifier></type><name>elf32_getphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf32_Shdr</name> <modifier>*</modifier></type><name>elf32_getshdr</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf32_Ehdr</name> <modifier>*</modifier></type><name>elf32_newehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf32_Phdr</name> <modifier>*</modifier></type><name>elf32_newphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>elf32_xlatetof</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>elf32_xlatetom</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_enc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> <name>elf64_checksum</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>elf64_fsize</name><parameter_list>(<parameter><decl><type><name>Elf_Type</name></type> <name>_type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_count</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf64_Chdr</name> <modifier>*</modifier></type><name>elf64_getchdr</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf64_Ehdr</name> <modifier>*</modifier></type><name>elf64_getehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf64_Phdr</name> <modifier>*</modifier></type><name>elf64_getphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf64_Shdr</name> <modifier>*</modifier></type><name>elf64_getshdr</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>_scn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf64_Ehdr</name> <modifier>*</modifier></type><name>elf64_newehdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf64_Phdr</name> <modifier>*</modifier></type><name>elf64_newphdr</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>_elf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>_count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>elf64_xlatetof</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>elf64_xlatetom</name><parameter_list>(<parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Elf_Data</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_enc</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
