<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/gelf_fsize.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: gelf_fsize.c 3174 2015-03-27 17:13:41Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>size_t</name></type>
<name>elf32_fsize</name><parameter_list>(<parameter><decl><type><name>Elf_Type</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>_libelf_fsize</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>ELFCLASS32</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>elf64_fsize</name><parameter_list>(<parameter><decl><type><name>Elf_Type</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>_libelf_fsize</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>ELFCLASS64</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>gelf_fsize</name><parameter_list>(<parameter><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Elf_Type</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_class</name></name> <operator>==</operator> <name>ELFCLASS32</name> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name> <operator>==</operator> <name>ELFCLASS64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>_libelf_fsize</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_class</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
