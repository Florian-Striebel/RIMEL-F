<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/libelf/elf_data.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_libelf.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: elf_data.c 3732 2019-04-22 11:08:38Z jkoshy $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Elf_Data</name> <modifier>*</modifier></type>
<name>elf_getdata</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>ed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sh_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>elfclass</name></decl>, <decl><type ref="prev"/><name>elftype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>fsz</name></decl>, <decl><type ref="prev"/><name>msz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_Libelf_Data</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sh_align</name></decl>, <decl><type ref="prev"/><name>sh_offset</name></decl>, <decl><type ref="prev"/><name>sh_size</name></decl>, <decl><type ref="prev"/><name>raw_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_libelf_translator_function</name> <modifier>*</modifier></type><name>xlate</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator>struct <name>_Libelf_Data</name> <operator>*</operator><operator>)</operator> <name>ed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>e</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_elf</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>d</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>!=</operator> <name><name>d</name><operator>-&gt;</operator><name>d_scn</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>==</operator> <name>ELF_K_ELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>d</name> <operator>=</operator> <call><name>STAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s_data</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d_data</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>d_next</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><operator>&amp;</operator><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>d_next</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>d_data</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elfclass</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>elfclass</name> <operator>==</operator> <name>ELFCLASS32</name> <operator>||</operator> <name>elfclass</name> <operator>==</operator> <name>ELFCLASS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>elfclass</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sh_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_offset</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_size</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_align</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_addralign</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sh_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_align</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_addralign</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sh_type</name> <operator>==</operator> <name>SHT_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>SECTION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>raw_size</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_rawsize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>elftype</name> <operator>=</operator> <call><name>_libelf_xlate_shtype</name><argument_list>(<argument><expr><name>sh_type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>ELF_T_FIRST</name> <operator>||</operator>
<name>elftype</name> <operator>&gt;</operator> <name>ELF_T_LAST</name> <operator>||</operator> <operator>(</operator><name>sh_type</name> <operator>!=</operator> <name>SHT_NOBITS</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>sh_offset</name> <operator>&gt;</operator> <name>raw_size</name> <operator>||</operator> <name>sh_size</name> <operator>&gt;</operator> <name>raw_size</name> <operator>-</operator> <name>sh_offset</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>SECTION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fsz</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>elfclass</name> <operator>==</operator> <name>ELFCLASS32</name></expr> ?</condition><then> <expr><name>elf32_fsize</name></expr> </then><else>: <expr><name>elf64_fsize</name></expr></else></ternary><operator>)</operator>
<operator>(</operator><name>elftype</name><operator>,</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal><operator>,</operator> <name><name>e</name><operator>-&gt;</operator><name>e_version</name></name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>UNIMPL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sh_size</name> <operator>%</operator> <name>fsz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>SECTION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sh_size</name> <operator>/</operator> <name>fsz</name> <operator>&gt;</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>RANGE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>sh_size</name> <operator>/</operator> <name>fsz</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msz</name> <operator>=</operator> <call><name>_libelf_msize</name><argument_list>(<argument><expr><name>elftype</name></expr></argument>, <argument><expr><name>elfclass</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_version</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>msz</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>/</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>RANGE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>msz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>&lt;=</operator> <name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>msz</name> <operator>*</operator> <name>count</name> <operator>&lt;=</operator> <name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>_libelf_allocate_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_align</name></name> <operator>=</operator> <name>sh_align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_size</name></name> <operator>=</operator> <name>msz</name> <operator>*</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_type</name></name> <operator>=</operator> <name>elftype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_version</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_version</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sh_type</name> <operator>==</operator> <name>SHT_NOBITS</name> <operator>||</operator> <name>sh_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s_data</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d_data</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>msz</name> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>_libelf_release_data</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>RESOURCE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_flags</name></name> <operator>|=</operator> <name>LIBELF_F_DATA_MALLOCED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xlate</name> <operator>=</operator> <call><name>_libelf_get_translator</name><argument_list>(<argument><expr><name>elftype</name></expr></argument>, <argument><expr><name>ELF_TOMEMORY</name></expr></argument>, <argument><expr><name>elfclass</name></expr></argument>,
<argument><expr><call><name>_libelf_elfmachine</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call>(<modifier>*</modifier><name>xlate</name>)<argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_size</name></name></expr></argument>,
<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>+</operator> <name>sh_offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,
<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_byteorder</name></name> <operator>!=</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>byteorder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_libelf_release_data</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s_data</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d_data</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Elf_Data</name> <modifier>*</modifier></type>
<name>elf_newdata</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_Libelf_Data</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>e</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_elf</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>==</operator> <name>ELF_K_ELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>STAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s_data</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>elf_getdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>_libelf_allocate_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s_data</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_align</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_off</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_type</name></name> <operator>=</operator> <name>ELF_T_BYTE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_version</name></name> <operator>=</operator> <call><name>LIBELF_PRIVATE</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_flagscn</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ELF_C_SET</name></expr></argument>, <argument><expr><name>ELF_F_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d_data</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>Elf_Data</name> <modifier>*</modifier></type>
<name>elf_rawdata</name><parameter_list>(<parameter><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>ed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>elf_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_Libelf_Data</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sh_align</name></decl>, <decl><type ref="prev"/><name>sh_offset</name></decl>, <decl><type ref="prev"/><name>sh_size</name></decl>, <decl><type ref="prev"/><name>raw_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>e</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_elf</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>ARGUMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>e_kind</name></name> <operator>==</operator> <name>ELF_K_ELF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator>struct <name>_Libelf_Data</name> <operator>*</operator><operator>)</operator> <name>ed</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>d</name> <operator>=</operator> <call><name>STAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s_rawdata</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d_data</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><call><name>STAILQ_NEXT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>d_next</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>d_data</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>elf_class</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_class</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>elf_class</name> <operator>==</operator> <name>ELFCLASS32</name> <operator>||</operator> <name>elf_class</name> <operator>==</operator> <name>ELFCLASS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>elf_class</name> <operator>==</operator> <name>ELFCLASS32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sh_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_offset</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_size</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_align</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr32</name><operator>.</operator><name>sh_addralign</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sh_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sh_align</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s_shdr</name><operator>.</operator><name>s_shdr64</name><operator>.</operator><name>sh_addralign</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sh_type</name> <operator>==</operator> <name>SHT_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>SECTION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>raw_size</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>e</name><operator>-&gt;</operator><name>e_rawsize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sh_type</name> <operator>!=</operator> <name>SHT_NOBITS</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>sh_offset</name> <operator>&gt;</operator> <name>raw_size</name> <operator>||</operator> <name>sh_size</name> <operator>&gt;</operator> <name>raw_size</name> <operator>-</operator> <name>sh_offset</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LIBELF_SET_ERROR</name><argument_list>(<argument><expr><name>SECTION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>_libelf_allocate_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_buf</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sh_type</name> <operator>==</operator> <name>SHT_NOBITS</name> <operator>||</operator> <name>sh_size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>:
<expr><name><name>e</name><operator>-&gt;</operator><name>e_rawfile</name></name> <operator>+</operator> <name>sh_offset</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_align</name></name> <operator>=</operator> <name>sh_align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_size</name></name> <operator>=</operator> <name>sh_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_type</name></name> <operator>=</operator> <name>ELF_T_BYTE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_data</name><operator>.</operator><name>d_version</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>e_version</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s_rawdata</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>d_data</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
