<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/elfcopy/binary.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"elfcopy.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: binary.c 3757 2019-06-28 01:15:28Z emaste $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<function><type><name>void</name></type>
<name>create_binary</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ifd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Data</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>baseaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Shdr</name></type> <name>sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>baseoff</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>elferr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>elf_begin</name><argument_list>(<argument><expr><name>ifd</name></expr></argument>, <argument><expr><name>ELF_C_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"elf_begin() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>baseaddr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>baseoff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>, <argument><expr><name>baseoff</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"lseek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><name>baseoff</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>elf_nextscn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sh</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"gelf_getshdr failed: %s"</literal></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sh</name><operator>.</operator><name>sh_flags</name></name> <operator>&amp;</operator> <name>SHF_ALLOC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>sh</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_NOBITS</name> <operator>||</operator>
<name><name>sh</name><operator>.</operator><name>sh_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>baseoff</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>off_t</name><operator>)</operator> <name><name>sh</name><operator>.</operator><name>sh_offset</name></name> <operator>&lt;</operator> <name>baseoff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>baseoff</name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>sh_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>baseaddr</name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>sh_addr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>elferr</name> <operator>=</operator> <call><name>elf_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elferr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"elf_nextscn failed: %s"</literal></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><name>elferr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>baseoff</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>scn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>scn</name> <operator>=</operator> <call><name>elf_nextscn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sh</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"gelf_getshdr failed: %s"</literal></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sh</name><operator>.</operator><name>sh_flags</name></name> <operator>&amp;</operator> <name>SHF_ALLOC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>sh</name><operator>.</operator><name>sh_type</name></name> <operator>==</operator> <name>SHT_NOBITS</name> <operator>||</operator>
<name><name>sh</name><operator>.</operator><name>sh_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>elf_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>elf_rawdata</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>elferr</name> <operator>=</operator> <call><name>elf_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elferr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"elf_rawdata failed: %s"</literal></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>d_buf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>d</name><operator>-&gt;</operator><name>d_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>sh</name><operator>.</operator><name>sh_addr</name></name> <operator>-</operator> <name>baseaddr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"lseek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>ofd</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_buf</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name><name>d</name><operator>-&gt;</operator><name>d_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>elferr</name> <operator>=</operator> <call><name>elf_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elferr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"elf_nextscn failed: %s"</literal></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><name>elferr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SYMBOL_NAMSZ</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>






<function><type><name>void</name></type>
<name>create_elf_from_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>ecp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ifd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ifn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>_SYMBOL_NAMSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>sec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sec_temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>shtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Ehdr</name></type> <name>oeh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Shdr</name></type> <name>sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>data_start</name></decl>, <decl><type ref="prev"/><name>data_end</name></decl>, <decl><type ref="prev"/><name>data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sym_basename</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ecp</name><operator>-&gt;</operator><name>v_sec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<macro><name>TAILQ_FOREACH_SAFE</name><argument_list>(<argument>sec</argument>, <argument>&amp;ecp-&gt;v_sec</argument>, <argument>sec_list</argument>, <argument>sec_temp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ecp</name><operator>-&gt;</operator><name>v_sec</name></name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>sec_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>ifd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"fstat failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>content</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>ifd</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>sb</name><operator>.</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"read failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>gelf_newehdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>oec</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_newehdr failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getehdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oeh</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_getehdr() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>oeh</name><operator>.</operator><name>e_ident</name><index>[<expr><name>EI_CLASS</name></expr>]</index></name> <operator>=</operator> <name><name>ecp</name><operator>-&gt;</operator><name>oec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oeh</name><operator>.</operator><name>e_ident</name><index>[<expr><name>EI_DATA</name></expr>]</index></name> <operator>=</operator> <name><name>ecp</name><operator>-&gt;</operator><name>oed</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>oeh</name><operator>.</operator><name>e_ident</name><index>[<expr><name>EI_OSABI</name></expr>]</index></name> <operator>=</operator> <name>ELFOSABI_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oeh</name><operator>.</operator><name>e_machine</name></name> <operator>=</operator> <name><name>ecp</name><operator>-&gt;</operator><name>oem</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oeh</name><operator>.</operator><name>e_type</name></name> <operator>=</operator> <name>ET_REL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oeh</name><operator>.</operator><name>e_entry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>RELOCATABLE</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>init_shstrtab</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ecp</name><operator>-&gt;</operator><name>shstrtab</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>gelf_fsize</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><name>ELF_T_EHDR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_fsize() failed: %s"</literal></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>create_external_section</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>, <argument><expr><literal type="string">".data"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>st_size</name></name></expr></argument>,
<argument><expr><name>off</name></expr></argument>, <argument><expr><name>SHT_PROGBITS</name></expr></argument>, <argument><expr><name>ELF_T_BYTE</name></expr></argument>, <argument><expr><name>SHF_ALLOC</name> <operator>|</operator> <name>SHF_WRITE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ecp</name><operator>-&gt;</operator><name>shstrtab</name><operator>-&gt;</operator><name>os</name></name> <operator>=</operator> <call><name>elf_newscn</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"elf_newscn failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>insert_to_sec_list</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>, <argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>shstrtab</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shtab</name> <operator>=</operator> <call><name>insert_shtab</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>shtab</name><operator>-&gt;</operator><name>sz</name></name> <operator>+=</operator> <call><name>gelf_fsize</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><name>ELF_T_SHDR</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sym_basename</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>ifn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"strdup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>sym_basename</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GEN_SYMNAME</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { snprintf(name, sizeof(name), "%s%s%s", "_binary_", sym_basename, S); } while (0)</cpp:value></cpp:define>






<expr_stmt><expr><call><name>create_external_symtab</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data_end</name> <operator>=</operator> <name>data_start</name> <operator>+</operator> <name><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GEN_SYMNAME</name><argument_list>(<argument><expr><literal type="string">"_start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_to_symtab</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>data_start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>ELF32_ST_INFO</name><argument_list>(<argument><expr><name>STB_GLOBAL</name></expr></argument>, <argument><expr><name>STT_NOTYPE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GEN_SYMNAME</name><argument_list>(<argument><expr><literal type="string">"_end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_to_symtab</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>data_end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>ELF32_ST_INFO</name><argument_list>(<argument><expr><name>STB_GLOBAL</name></expr></argument>, <argument><expr><name>STT_NOTYPE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_GEN_SYMNAME</name><argument_list>(<argument><expr><literal type="string">"_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_to_symtab</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHN_ABS</name></expr></argument>,
<argument><expr><call><name>ELF32_ST_INFO</name><argument_list>(<argument><expr><name>STB_GLOBAL</name></expr></argument>, <argument><expr><name>STT_NOTYPE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finalize_external_symtab</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_symtab_data</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_GEN_SYMNAME</name></cpp:undef>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sym_basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>gelf_update_ehdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oeh</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_update_ehdr() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SYMTAB_EXIST</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_shdr</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>gelf_getshdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>symtab</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sh</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"692 gelf_getshdr() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>sh_link</name></name> <operator>=</operator> <call><name>elf_ndxscn</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>strtab</name><operator>-&gt;</operator><name>os</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gelf_update_shdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>symtab</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_update_shdr() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>gelf_getehdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oeh</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_getehdr() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>resync_sections</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>oeh</name><operator>.</operator><name>e_shoff</name></name> <operator>=</operator> <name><name>shtab</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>gelf_update_ehdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oeh</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_update_ehdr() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>elf_update</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><name>ELF_C_WRITE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"elf_update() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_elf</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
