<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/elfcopy/elfcopy.h">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libelftc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_elftc.h"</cpp:file></cpp:include>





<struct>struct <name>symop</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newname</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMOP_KEEP</name></cpp:macro> <cpp:value>0x0001U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMOP_STRIP</name></cpp:macro> <cpp:value>0x0002U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMOP_GLOBALIZE</name></cpp:macro> <cpp:value>0x0004U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMOP_LOCALIZE</name></cpp:macro> <cpp:value>0x0008U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMOP_KEEPG</name></cpp:macro> <cpp:value>0x0010U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMOP_WEAKEN</name></cpp:macro> <cpp:value>0x0020U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMOP_REDEF</name></cpp:macro> <cpp:value>0x0040U</cpp:value></cpp:define>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>op</name></decl>;</decl_stmt>

<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>symop</argument>)</argument_list></macro> <expr_stmt><expr><name>symop_list</name></expr>;</expr_stmt>
}</block>;</struct>


<struct>struct <name>symfile</name> <block>{
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ino_t</name></type> <name>ino</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>op</name></decl>;</decl_stmt>

<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>symfile</argument>)</argument_list></macro> <expr_stmt><expr><name>symfile_list</name></expr>;</expr_stmt>
}</block>;</struct>


<struct>struct <name>sec_action</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addopt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>lma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>vma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lma_adjust</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>vma_adjust</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ALLOC</name></cpp:macro> <cpp:value>0x0001U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_LOAD</name></cpp:macro> <cpp:value>0x0002U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_NOLOAD</name></cpp:macro> <cpp:value>0x0004U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_READONLY</name></cpp:macro> <cpp:value>0x0008U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_DEBUG</name></cpp:macro> <cpp:value>0x0010U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_CODE</name></cpp:macro> <cpp:value>0x0020U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_DATA</name></cpp:macro> <cpp:value>0x0040U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_ROM</name></cpp:macro> <cpp:value>0x0080U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_SHARED</name></cpp:macro> <cpp:value>0X0100U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_CONTENTS</name></cpp:macro> <cpp:value>0x0200U</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>append</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>print</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remove</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>setflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>setlma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>setvma</name></decl>;</decl_stmt>

<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>sec_action</argument>)</argument_list></macro> <expr_stmt><expr><name>sac_list</name></expr>;</expr_stmt>
}</block>;</struct>


<struct>struct <name>sec_add</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>sec_add</argument>)</argument_list></macro> <expr_stmt><expr><name>sadd_list</name></expr>;</expr_stmt>
}</block>;</struct>

<struct_decl>struct <name>segment</name>;</struct_decl>


<struct>struct <name>section</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg_tls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>is</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf_Scn</name> <modifier>*</modifier></type><name>os</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>vma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>lma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pad_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loadable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pseudo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nocopy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Elftc_String_Table</name> <modifier>*</modifier></type><name>strtab</name></decl>;</decl_stmt>

<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>section</argument>)</argument_list></macro> <expr_stmt><expr><name>sec_list</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>TAILQ_HEAD</name><argument_list>(<argument><expr><name>sectionlist</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<struct>struct <name>segment</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>vaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>paddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>fsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>msz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remove</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>v_sec</name></decl>;</decl_stmt>

<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>segment</argument>)</argument_list></macro> <expr_stmt><expr><name>seg_list</name></expr>;</expr_stmt>
}</block>;</struct>




<struct>struct <name>ar_obj</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>maddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>

<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>ar_obj</argument>)</argument_list></macro> <expr_stmt><expr><name>objs</name></expr>;</expr_stmt>
}</block>;</struct>




<struct>struct <name>elfcopy</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elftc_Bfd_Target_Flavor</name></type> <name>itf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elftc_Bfd_Target_Flavor</name></type> <name>otf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>otgt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>oed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>ein</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf</name> <modifier>*</modifier></type><name>eout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iphnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ophnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nos</name></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>STRIP_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>STRIP_ALL</name></decl>,
<decl><name>STRIP_DEBUG</name></decl>,
<decl><name>STRIP_DWO</name></decl>,
<decl><name>STRIP_NONDEBUG</name></decl>,
<decl><name>STRIP_NONDWO</name></decl>,
<decl><name>STRIP_UNNEEDED</name></decl>
}</block> <decl><name>strip</name></decl>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXECUTABLE</name></cpp:macro> <cpp:value>0x00000001U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC</name></cpp:macro> <cpp:value>0x00000002U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELOCATABLE</name></cpp:macro> <cpp:value>0x00000004U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMTAB_EXIST</name></cpp:macro> <cpp:value>0x00000010U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMTAB_INTACT</name></cpp:macro> <cpp:value>0x00000020U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_GLOBAL</name></cpp:macro> <cpp:value>0x00000040U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISCARD_LOCAL</name></cpp:macro> <cpp:value>0x00000080U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEAKEN_ALL</name></cpp:macro> <cpp:value>0x00000100U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRESERVE_DATE</name></cpp:macro> <cpp:value>0x00001000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SREC_FORCE_S3</name></cpp:macro> <cpp:value>0x00002000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SREC_FORCE_LEN</name></cpp:macro> <cpp:value>0x00004000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_START</name></cpp:macro> <cpp:value>0x00008000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAP_FILL</name></cpp:macro> <cpp:value>0x00010000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WILDCARD</name></cpp:macro> <cpp:value>0x00020000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_CHANGE_WARN</name></cpp:macro> <cpp:value>0x00040000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_ADD</name></cpp:macro> <cpp:value>0x00080000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_APPEND</name></cpp:macro> <cpp:value>0x00100000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_COMPRESS</name></cpp:macro> <cpp:value>0x00200000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_PRINT</name></cpp:macro> <cpp:value>0x00400000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_REMOVE</name></cpp:macro> <cpp:value>0x00800000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_COPY</name></cpp:macro> <cpp:value>0x01000000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISCARD_LLABEL</name></cpp:macro> <cpp:value>0x02000000U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCALIZE_HIDDEN</name></cpp:macro> <cpp:value>0x04000000U</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>change_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>change_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>set_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>srec_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pad_to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix_sym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>debuglink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>symtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>strtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>shstrtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>secndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>symndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>v_rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>v_grp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>v_secsym</name></decl>;</decl_stmt>
<macro><name>STAILQ_HEAD</name><argument_list>(<argument/>, <argument>segment</argument>)</argument_list></macro> <expr_stmt><expr><name>v_seg</name></expr>;</expr_stmt>
<macro><name>STAILQ_HEAD</name><argument_list>(<argument/>, <argument>sec_action</argument>)</argument_list></macro> <expr_stmt><expr><name>v_sac</name></expr>;</expr_stmt>
<macro><name>STAILQ_HEAD</name><argument_list>(<argument/>, <argument>sec_add</argument>)</argument_list></macro> <expr_stmt><expr><name>v_sadd</name></expr>;</expr_stmt>
<macro><name>STAILQ_HEAD</name><argument_list>(<argument/>, <argument>symop</argument>)</argument_list></macro> <expr_stmt><expr><name>v_symop</name></expr>;</expr_stmt>
<macro><name>STAILQ_HEAD</name><argument_list>(<argument/>, <argument>symfile</argument>)</argument_list></macro> <expr_stmt><expr><name>v_symfile</name></expr>;</expr_stmt>
<macro><name>TAILQ_HEAD</name><argument_list>(<argument/>, <argument>section</argument>)</argument_list></macro> <expr_stmt><expr><name>v_sec</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>as_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>as_cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>s_so</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_so_cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s_sn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_sn_cap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_sn_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>off_t</name></type> <name>rela_off</name></decl>;</decl_stmt>
<macro><name>STAILQ_HEAD</name><argument_list>(<argument/>, <argument>ar_obj</argument>)</argument_list></macro> <expr_stmt><expr><name>v_arobj</name></expr>;</expr_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>add_section</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_optarg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>add_to_shstrtab</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>add_to_symop_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_newname</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_op</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>add_to_symtab</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>_st_value</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>_st_size</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>_st_shndx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>_st_info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>_st_other</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ndx_known</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>add_to_inseg_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>_sec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>adjust_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cleanup_tempfile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>_fn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>copy_content</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>copy_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>_s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>copy_phdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>copy_shdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>_s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>_copy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_sec_flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_binary</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_ifd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ofd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_elf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_elf_from_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ifd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ifn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_elf_from_ihex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ifd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_elf_from_srec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ifd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>create_external_section</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>_newname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>_size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>_off</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>_stype</name></decl></parameter>,
<parameter><decl><type><name>Elf_Type</name></type> <name>_dtype</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>_align</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>_vma</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>_loadable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_external_symtab</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_ihex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_ifd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ofd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_pe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ifd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ofd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_scn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_srec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ifd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ofd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_ofn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_symtab</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_symtab_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>create_tempfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_fn</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>_fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>finalize_external_symtab</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>free_elf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>free_sec_act</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>free_sec_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>free_symtab</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>init_shstrtab</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>insert_to_sec_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>_sec</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>_tail</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>insert_shtab</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tail</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>is_remove_reloc_sec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>_sh_info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>is_remove_section</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>sec_action</name></name> <modifier>*</modifier></type><name>lookup_sec_act</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_add</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>symop</name></name> <modifier>*</modifier></type><name>lookup_symop_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_name</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_op</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>resync_sections</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setup_phdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>update_shdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_update_link</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBELF_AR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ac_detect_ar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_ifd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ac_create_ar</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>_ecp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ifd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_ofd</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
