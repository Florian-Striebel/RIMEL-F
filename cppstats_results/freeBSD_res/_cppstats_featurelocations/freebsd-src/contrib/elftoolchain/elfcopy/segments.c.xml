<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/elftoolchain/elfcopy/segments.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gelf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"elfcopy.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>ELFTC_VCSID</name><argument_list>(<argument><expr><literal type="string">"$Id: segments.c 3615 2018-05-17 04:12:24Z kaiwang27 $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>insert_to_inseg_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list>;</function_decl>













<function><type><name>int</name></type>
<name>add_to_inseg_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>ecp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loadable</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecp</name><operator>-&gt;</operator><name>ophnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>












<expr_stmt><expr><name>loadable</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>seg</argument>, <argument>&amp;ecp-&gt;v_seg</argument>, <argument>seg_list</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;</operator> <name><name>seg</name><operator>-&gt;</operator><name>off</name></name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>&lt;</operator> <name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pseudo</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sz</name></name> <operator>&gt;</operator> <name><name>seg</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>seg</name><operator>-&gt;</operator><name>fsz</name></name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SHT_NOBITS</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sz</name></name> <operator>&gt;</operator> <name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>seg</name><operator>-&gt;</operator><name>msz</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PT_TLS</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHF_TLS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>insert_to_inseg_list</name><argument_list>(<argument><expr><name>seg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PT_LOAD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seg</name></name> <operator>=</operator> <name>seg</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PT_TLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seg_tls</name></name> <operator>=</operator> <name>seg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pseudo</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name><name>seg</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lma</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>paddr</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name><name>seg</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>loadable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>loadable</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>adjust_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>ecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sec_action</name></name> <modifier>*</modifier></type><name>sac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dl</name></decl>, <decl><type ref="prev"/><name>vma</name></decl>, <decl><type ref="prev"/><name>lma</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>




<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>s</argument>, <argument>&amp;ecp-&gt;v_sec</argument>, <argument>sec_list</argument>)</argument_list></macro> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loadable</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ecp</name><operator>-&gt;</operator><name>change_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>+=</operator> <name><name>ecp</name><operator>-&gt;</operator><name>change_addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ecp</name><operator>-&gt;</operator><name>change_addr</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>paddr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lma</name></name> <operator>+=</operator> <name><name>ecp</name><operator>-&gt;</operator><name>change_addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>




<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>s</argument>, <argument>&amp;ecp-&gt;v_sec</argument>, <argument>sec_list</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loadable</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<expr_stmt><expr><name>sac</name> <operator>=</operator> <call><name>lookup_sec_act</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sac</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vma</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sac</name><operator>-&gt;</operator><name>setvma</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vma</name> <operator>=</operator> <name><name>sac</name><operator>-&gt;</operator><name>vma</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sac</name><operator>-&gt;</operator><name>vma_adjust</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vma</name> <operator>+=</operator> <name><name>sac</name><operator>-&gt;</operator><name>vma_adjust</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vma</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>seg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>=</operator> <name>vma</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"VMA for section %s: %#jx\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>vma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>vma</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>align</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"The VMA %#jx for "</literal>
<literal type="string">"section %s is not aligned to %ju"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name>vma</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vma</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vma</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Not enough space to move "</literal>
<literal type="string">"section %s VMA to %#jx"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name>vma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>vma</name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>nsec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>msz</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>msz</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>vma</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>vma</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>msz</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Not enough space to move "</literal>
<literal type="string">"section %s VMA to %#jx"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name>vma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"new extent for segment containing %s: (%#jx,%#jx)\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>seg</argument>, <argument>&amp;ecp-&gt;v_seg</argument>, <argument>seg_list</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seg</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name></name> <operator>||</operator> <name><name>seg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PT_LOAD</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>seg</name><operator>-&gt;</operator><name>msz</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"The extent of segment containing "</literal>
<literal type="string">"section %s overlaps with segment(%#jx,%#jx)"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <operator>(</operator><name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>seg</name><operator>-&gt;</operator><name>msz</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<if_stmt><if>if <condition>(<expr><name>vma</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>dl</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>-</operator> <name>vma</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>nsec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s0</name><operator>-&gt;</operator><name>vma</name></name> <operator>-=</operator> <name>dl</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"section %s VMA set to %#jx\n"</literal></expr></argument>,
<argument><expr><name><name>s0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name><name>s0</name><operator>-&gt;</operator><name>vma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>s0</name> <operator>==</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>nsec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s0</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>dl</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"section %s offset set to %#jx\n"</literal></expr></argument>,
<argument><expr><name><name>s0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name><name>s0</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>







<expr_stmt><expr><name>dl</name> <operator>=</operator> <name>vma</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>nsec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Internal: section `%s' not"</literal>
<literal type="string">" found in its containing segement"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>nsec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s0</name><operator>-&gt;</operator><name>vma</name></name> <operator>+=</operator> <name>dl</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"section %s VMA set to %#jx\n"</literal></expr></argument>,
<argument><expr><name><name>s0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name><name>s0</name><operator>-&gt;</operator><name>lma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s0</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>dl</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"section %s offset set to %#jx\n"</literal></expr></argument>,
<argument><expr><name><name>s0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name><name>s0</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block>





<if_stmt><if>if <condition>(<expr><name><name>ecp</name><operator>-&gt;</operator><name>pad_to</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>seg</argument>, <argument>&amp;ecp-&gt;v_seg</argument>, <argument>seg_list</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PT_LOAD</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>nsec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>SHT_NOBITS</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s0</name><operator>-&gt;</operator><name>vma</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>adjust_lma</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ecp</name><operator>-&gt;</operator><name>pad_to</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sz</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>adjust_lma</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pad_sz</name></name> <operator>=</operator> <name><name>ecp</name><operator>-&gt;</operator><name>pad_to</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sz</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"pad section %s VMA to address %#jx by %#jx\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name><name>ecp</name><operator>-&gt;</operator><name>pad_to</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>pad_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<label><name>adjust_lma</name>:</label>




<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>s</argument>, <argument>&amp;ecp-&gt;v_sec</argument>, <argument>sec_list</argument>)</argument_list></macro> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>loadable</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>paddr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<expr_stmt><expr><name>sac</name> <operator>=</operator> <call><name>lookup_sec_act</name><argument_list>(<argument><expr><name>ecp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sac</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sac</name><operator>-&gt;</operator><name>setlma</name></name> <operator>&amp;&amp;</operator> <name><name>sac</name><operator>-&gt;</operator><name>lma_adjust</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lma</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lma</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sac</name><operator>-&gt;</operator><name>setlma</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lma</name> <operator>=</operator> <name><name>sac</name><operator>-&gt;</operator><name>lma</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sac</name><operator>-&gt;</operator><name>lma_adjust</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lma</name> <operator>+=</operator> <name><name>sac</name><operator>-&gt;</operator><name>lma_adjust</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lma</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>lma</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"LMA for section %s: %#jx\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>lma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>lma</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>align</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"The LMA %#jx for "</literal>
<literal type="string">"section %s is not aligned to %ju"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name>lma</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>lma</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lma</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>dl</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lma</name></name> <operator>-</operator> <name>lma</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>nsec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s0</name><operator>-&gt;</operator><name>lma</name></name> <operator>-=</operator> <name>dl</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"section %s LMA set to %#jx\n"</literal></expr></argument>,
<argument><expr><name><name>s0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name><name>s0</name><operator>-&gt;</operator><name>lma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>s0</name> <operator>==</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><name>dl</name> <operator>=</operator> <name>lma</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>lma</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>nsec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>nsec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Internal: section `%s' not"</literal>
<literal type="string">" found in its containing segement"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>nsec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s0</name><operator>-&gt;</operator><name>lma</name></name> <operator>+=</operator> <name>dl</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"section %s LMA set to %#jx\n"</literal></expr></argument>,
<argument><expr><name><name>s0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator> <name><name>s0</name><operator>-&gt;</operator><name>lma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NO_CHANGE_WARN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>sac</argument>, <argument>&amp;ecp-&gt;v_sac</argument>, <argument>sac_list</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sac</name><operator>-&gt;</operator><name>setvma</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sac</name><operator>-&gt;</operator><name>setlma</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>sac</name><operator>-&gt;</operator><name>vma_adjust</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sac</name><operator>-&gt;</operator><name>lma_adjust</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>s</argument>, <argument>&amp;ecp-&gt;v_sec</argument>, <argument>sec_list</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pseudo</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>sac</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><literal type="string">"cannot find section `%s'"</literal></expr></argument>, <argument><expr><name><name>sac</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>insert_to_inseg_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>sec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>nsec</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>v_sec</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>v_sec</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>nsec</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>seg</name><operator>-&gt;</operator><name>v_sec</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>v_sec</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"realloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>nsec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sec</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>setup_phdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>ecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Phdr</name></type> <name>iphdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>iphnum</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>elf_getphnum</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>ein</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iphnum</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"elf_getphnum failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ecp</name><operator>-&gt;</operator><name>ophnum</name></name> <operator>=</operator> <name><name>ecp</name><operator>-&gt;</operator><name>iphnum</name></name> <operator>=</operator> <name>iphnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iphnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ecp</name><operator>-&gt;</operator><name>strip</name></name> <operator>==</operator> <name>STRIP_NONDEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ecp</name><operator>-&gt;</operator><name>ophnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iphnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getphdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>ein</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iphdr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>&amp;</operator><name>iphdr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_getphdr failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>seg</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>seg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"calloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>iphdr</name><operator>.</operator><name>p_vaddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>iphdr</name><operator>.</operator><name>p_paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>iphdr</name><operator>.</operator><name>p_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>fsz</name></name> <operator>=</operator> <name><name>iphdr</name><operator>.</operator><name>p_filesz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>msz</name></name> <operator>=</operator> <name><name>iphdr</name><operator>.</operator><name>p_memsz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>iphdr</name><operator>.</operator><name>p_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ecp</name><operator>-&gt;</operator><name>v_seg</name></name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name>seg_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>copy_phdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elfcopy</name></name> <modifier>*</modifier></type><name>ecp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GElf_Phdr</name></type> <name>iphdr</name></decl>, <decl><type ref="prev"/><name>ophdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>seg</argument>, <argument>&amp;ecp-&gt;v_seg</argument>, <argument>seg_list</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PT_PHDR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TAILQ_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ecp</name><operator>-&gt;</operator><name>v_sec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ecp</name><operator>-&gt;</operator><name>v_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pseudo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>+</operator>
<call><name>gelf_fsize</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><name>ELF_T_EHDR</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lma</name></name> <operator>+</operator>
<call><name>gelf_fsize</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><name>ELF_T_EHDR</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>fsz</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>msz</name></name> <operator>=</operator> <call><name>gelf_fsize</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><name>ELF_T_PHDR</name></expr></argument>,
<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>ophnum</name></name></expr></argument>, <argument><expr><name>EV_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>nsec</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>paddr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lma</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>fsz</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>msz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>seg</name><operator>-&gt;</operator><name>nsec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>v_sec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>msz</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vma</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sz</name></name> <operator>-</operator> <name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SHT_NOBITS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>fsz</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sz</name></name> <operator>-</operator> <name><name>seg</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>






<if_stmt><if>if <condition>(<expr><call><name>gelf_newphdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>ophnum</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_newphdr() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>elf_update</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><name>ELF_C_NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"elf_update() failed: %s"</literal></expr></argument>, <argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>STAILQ_FOREACH</name><argument_list>(<argument>seg</argument>, <argument>&amp;ecp-&gt;v_seg</argument>, <argument>seg_list</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>ecp</name><operator>-&gt;</operator><name>iphnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getphdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>ein</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iphdr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>&amp;</operator><name>iphdr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_getphdr failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gelf_getphdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ophdr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>&amp;</operator><name>ophdr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_getphdr failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ophdr</name><operator>.</operator><name>p_type</name></name> <operator>=</operator> <name><name>iphdr</name><operator>.</operator><name>p_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ophdr</name><operator>.</operator><name>p_vaddr</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>vaddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ophdr</name><operator>.</operator><name>p_paddr</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>paddr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ophdr</name><operator>.</operator><name>p_flags</name></name> <operator>=</operator> <name><name>iphdr</name><operator>.</operator><name>p_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ophdr</name><operator>.</operator><name>p_align</name></name> <operator>=</operator> <name><name>iphdr</name><operator>.</operator><name>p_align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ophdr</name><operator>.</operator><name>p_offset</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ophdr</name><operator>.</operator><name>p_filesz</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>fsz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ophdr</name><operator>.</operator><name>p_memsz</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>msz</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gelf_update_phdr</name><argument_list>(<argument><expr><name><name>ecp</name><operator>-&gt;</operator><name>eout</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ophdr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"gelf_update_phdr failed: %s"</literal></expr></argument>,
<argument><expr><call><name>elf_errmsg</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>
</unit>
