<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns-host/ldns-host.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>countof</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(array)/sizeof(*(array)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>die</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ndots</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>name</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_resolver_new_default</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_resolver_new_frm_file</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>res</name> <operator>=</operator> <call><name>ldns_resolver_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_resolver_push_default_servers</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_a</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>LDNS_STATUS_OK</name> <operator>||</operator>
<operator>(</operator><name>status</name> <operator>=</operator> <call><name>ldns_resolver_push_nameserver</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_aaaa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="string">"::1"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>LDNS_STATUS_OK</name> <operator>||</operator>
<operator>(</operator><name>status</name> <operator>=</operator> <call><name>ldns_resolver_push_nameserver</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rdf_new_addr_frm_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_str</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_A</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_str</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_AAAA</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_resolver_remove_nameservers</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><call><name>ldns_resolver_nameserver_count</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><call><name>ldns_resolver_pop_nameserver</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rdf_reverse_a</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>LDNS_IP4ADDRLEN</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LDNS_IP4ADDRLEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%d."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call><index>[<expr><name>LDNS_IP4ADDRLEN</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_dname_new_frm_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rdf_reverse_aaaa</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>LDNS_IP6ADDRLEN</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LDNS_IP6ADDRLEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name> <init>= <expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call><index>[<expr><name>LDNS_IP6ADDRLEN</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%x.%x."</literal></expr></argument>, <argument><expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>LDNS_IP6ADDRLEN</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_dname_new_frm_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_pkt_push_rr_soa</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt_section</name></type> <name>sec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_class</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rr</name> <operator>=</operator> <call><name>ldns_rr_new_frm_type</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_SOA</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_class</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_ttl</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_DNAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>memerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_INT32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>memerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_PERIOD</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>memerr</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>!</operator><call><name>ldns_pkt_push_rr</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>memerr</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>

<label><name>memerr</name>:</label>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>ldns_rr_soa_get_serial</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_SOA</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rdf</name> <operator>=</operator> <call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RDF_TYPE_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ldns_rdf2native_int32</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_tcp_start</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>qpkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nameserver</name></decl></parameter>)</parameter_list> <block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ns_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>ldns_rdf2native_sockaddr_storage</name><argument_list>(
<argument><expr><name><name>res</name><operator>-&gt;</operator><name>_nameservers</name><index>[<expr><name>nameserver</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>ldns_resolver_port</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ns</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name> <operator>=</operator> <call><name>ldns_tcp_connect</name><argument_list>(
<argument><expr><name>ns</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name>ns_len</name></expr></argument>, <argument><expr><call><name>ldns_resolver_timeout</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_ADDRESS_ERR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>qbuf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>qbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_pkt2buffer_wire</name><argument_list>(<argument><expr><name>qbuf</name></expr></argument>, <argument><expr><name>qpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_tcp_send_query</name><argument_list>(<argument><expr><name>qbuf</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name>ns_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_NETWORK_ERR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>qbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>qbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_tcp_read</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier><modifier>*</modifier></type><name>answer</name></decl></parameter>, <parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>ldns_tcp_read_wire_timeout</name><argument_list>(
<argument><expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><call><name>ldns_resolver_timeout</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_wire2pkt</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_querytime</name><argument_list>(<argument><expr><operator>*</operator><name>answer</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>t2</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>t1</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>t2</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>t1</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_timestamp</name><argument_list>(<argument><expr><operator>*</operator><name>answer</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_tcp_close</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>_socket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_resolver_send_to</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier><modifier>*</modifier></type><name>answer</name></decl></parameter>, <parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_class</name></type> <name>c</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ixfr_serial</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nameserver</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>close_tcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>qpkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nscnt</name> <init>= <expr><call><name>ldns_resolver_nameserver_count</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>ns</name> <init>= <expr><call><name>ldns_resolver_nameservers</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>rtt</name> <init>= <expr><call><name>ldns_resolver_rtt</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ldns_resolver_set_nameservers</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ns</name><index>[<expr><name>nameserver</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_resolver_set_rtt</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtt</name><index>[<expr><name>nameserver</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_resolver_set_nameserver_count</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>qpkt</name> <operator>=</operator> <call><name>ldns_pkt_query_new</name><argument_list>(<argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>qpkt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_ERR</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_timestamp</name><argument_list>(<argument><expr><name>qpkt</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_random_id</name><argument_list>(<argument><expr><name>qpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>LDNS_RR_TYPE_IXFR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_pkt_push_rr_soa</name><argument_list>(<argument><expr><name>qpkt</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_AUTHORITY</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>ixfr_serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>close_tcp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_resolver_send_pkt</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>qpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_tcp_start</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>qpkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_tcp_read</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_answerfrom</name><argument_list>(<argument><expr><operator>*</operator><name>answer</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name><name>ns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>qpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_resolver_set_nameservers</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_resolver_set_rtt</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rtt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_resolver_set_nameserver_count</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>nscnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_pkt_filter_answer</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name>rrtype</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rrlist</name> <operator>=</operator> <call><name>ldns_pkt_answer</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rrtype</name> <operator>=</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>LDNS_RR_TYPE_ANY</name> <operator>||</operator>
<name>type</name> <operator>==</operator> <name>rrtype</name> <operator>||</operator>
<operator>(</operator><name>type</name> <operator>==</operator> <name>LDNS_RR_TYPE_AXFR</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>rrtype</name> <operator>==</operator> <name>LDNS_RR_TYPE_A</name> <operator>||</operator>
<name>rrtype</name> <operator>==</operator> <name>LDNS_RR_TYPE_AAAA</name> <operator>||</operator>
<name>rrtype</name> <operator>==</operator> <name>LDNS_RR_TYPE_NS</name> <operator>||</operator>
<name>rrtype</name> <operator>==</operator> <name>LDNS_RR_TYPE_PTR</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_rr_list_set_rr</name><argument_list>(<argument><expr><name>rrlist</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr><name>j</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_rr_list_set_rr_count</name><argument_list>(<argument><expr><name>rrlist</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
}</block> <decl><name><name>rr_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>LDNS_RR_TYPE_A</name></expr>, <expr><literal type="string">"has address"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_NS</name></expr>, <expr><literal type="string">"name server"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_CNAME</name></expr>, <expr><literal type="string">"is an alias for"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_WKS</name></expr>, <expr><literal type="string">"has well known services"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_PTR</name></expr>, <expr><literal type="string">"domain name pointer"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_HINFO</name></expr>, <expr><literal type="string">"host information"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_MX</name></expr>, <expr><literal type="string">"mail is handled by"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_TXT</name></expr>, <expr><literal type="string">"descriptive text"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_X25</name></expr>, <expr><literal type="string">"x25 address"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_ISDN</name></expr>, <expr><literal type="string">"ISDN address"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_SIG</name></expr>, <expr><literal type="string">"has signature"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_KEY</name></expr>, <expr><literal type="string">"has key"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_AAAA</name></expr>, <expr><literal type="string">"has IPv6 address"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>LDNS_RR_TYPE_LOC</name></expr>, <expr><literal type="string">"location"</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_opcode</name><parameter_list>(<parameter><decl><type><name>ldns_pkt_opcode</name></type> <name>opcode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>lt</name> <init>= <expr><call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_opcodes</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>&amp;&amp;</operator> <name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RESERVED%d"</literal></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_rcode</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>rcode</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>lt</name> <init>= <expr><call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_rcodes</name></expr></argument>, <argument><expr><name>rcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>&amp;&amp;</operator> <name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RESERVED%d"</literal></expr></argument>, <argument><expr><name>rcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_rr_type</name><parameter_list>(<parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ldns_rr_type2str</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_rr_class</name><parameter_list>(<parameter><decl><type><name>ldns_rr_class</name></type> <name>cls</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ldns_rr_class2str</name><argument_list>(<argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_rdf</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ldns_rdf2str</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_rdf_nodot</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ldns_rdf2str</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>str</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr> ?</condition><then> <expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_padding</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fromcol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tocol</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>fromcol</name></expr></init></decl>, <decl><type ref="prev"/><name>nextcol</name> <init>= <expr><name>fromcol</name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>fromcol</name><operator>%</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fromcol</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>tocol</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tocol</name> <operator>=</operator> <name>fromcol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>nextcol</name> <operator>&lt;=</operator> <name>tocol</name></expr>;</condition> <incr><expr><name>col</name> <operator>=</operator> <name>nextcol</name></expr><operator>,</operator> <expr><name>nextcol</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>tocol</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>col</name> <operator>-</operator> <name>fromcol</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_rr_verbose</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>isq</name> <init>= <expr><call><name>ldns_rr_is_question</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdcnt</name> <init>= <expr><call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>isq</name></expr> ?</condition><then> <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>print_rdf</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isq</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>print_padding</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>ldns_rr_ttl</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>print_padding</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>print_rr_class</name><argument_list>(<argument><expr><call><name>ldns_rr_get_class</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>print_padding</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>print_rr_type</name><argument_list>(<argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rdcnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_padding</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>print_rdf</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_pkt_section_verbose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrlist</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; %s SECTION:\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_rr_verbose</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_pkt_verbose</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>got_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; -&gt;&gt;HEADER&lt;&lt;- opcode: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_opcode</name><argument_list>(<argument><expr><call><name>ldns_pkt_get_opcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">", status: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_rcode</name><argument_list>(<argument><expr><call><name>ldns_pkt_get_rcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">", id: %u\n"</literal></expr></argument>, <argument><expr><call><name>ldns_pkt_id</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; flags:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_qr</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" qr"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>got_flags</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_aa</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" aa"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>got_flags</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_tc</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" tc"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>got_flags</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_rd</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" rd"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>got_flags</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_ra</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ra"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>got_flags</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_ad</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ad"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>got_flags</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_cd</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" cd"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>got_flags</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_flags</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"; QUERY: %u, ANSWER: %u, AUTHORITY: %u, ADDITIONAL: %u\n"</literal></expr></argument>,
<argument><expr><call><name>ldns_pkt_qdcount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_pkt_ancount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_pkt_nscount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_pkt_arcount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_edns</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; EDNS: version: %u, udp=%u\n"</literal></expr></argument>,
<argument><expr><call><name>ldns_pkt_edns_version</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_pkt_edns_udp_size</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pkt_section_verbose</name><argument_list>(<argument><expr><literal type="string">"QUESTION"</literal></expr></argument>, <argument><expr><call><name>ldns_pkt_question</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pkt_section_verbose</name><argument_list>(<argument><expr><literal type="string">"ANSWER"</literal></expr></argument>, <argument><expr><call><name>ldns_pkt_answer</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pkt_section_verbose</name><argument_list>(<argument><expr><literal type="string">"AUTHORITY"</literal></expr></argument>, <argument><expr><call><name>ldns_pkt_authority</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_pkt_section_verbose</name><argument_list>(<argument><expr><literal type="string">"ADDITIONAL"</literal></expr></argument>, <argument><expr><call><name>ldns_pkt_additional</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_rr_short</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name>type</name> <init>= <expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rdcnt</name> <init>= <expr><call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>print_rdf_nodot</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>countof</name><argument_list>(<argument><expr><name>rr_types</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rr_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>rr_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"has "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_rr_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" record"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>found</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rdcnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_rdf</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_pkt_short</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_rr_server</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrlist</name> <init>= <expr><call><name>ldns_pkt_answer</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrlist</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>print_rr_server</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Nameserver "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_rdf</name><argument_list>(<argument><expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">":\n\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>print_rr_short</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_received_line</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>from</name> <init>= <expr><call><name>ldns_rdf2str</name><argument_list>(<argument><expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Received %zu bytes from %s#%d in %d ms\n"</literal></expr></argument>,
<argument><expr><call><name>ldns_pkt_size</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><call><name>ldns_resolver_port</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_pkt_querytime</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TCP_TIMEOUT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_UDP_TIMEOUT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<enum>enum <name>operation_mode</name> <block>{ <decl><name>M_AXFR</name></decl>, <decl><name>M_IXFR</name></decl>, <decl><name>M_DEFAULT_Q</name></decl>, <decl><name>M_SINGLE_Q</name></decl>, <decl><name>M_SOA</name></decl> }</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>operation_mode</name></name></type> <name>o_mode</name> <init>= <expr><name>M_DEFAULT_Q</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_ignore_servfail</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_ip6_int</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_print_pkt_server</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_print_rr_server</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_recursive</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_tcp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_verbose</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>o_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>o_server</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>o_ipversion</name> <init>= <expr><name>LDNS_RESOLV_INETANY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>o_ndots</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>o_retries</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ldns_rr_class</name></type> <name>o_rrclass</name> <init>= <expr><name>LDNS_RR_CLASS_IN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ldns_rr_type</name></type> <name>o_rrtype</name> <init>= <expr><operator>(</operator><name>ldns_rr_type</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>o_timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>o_ixfr_serial</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Usage: %s [-aCdilrsTvw46] [-c class] [-N ndots] [-R number]\n"</literal>
<literal type="string">" %*c [-t type] [-W wait] name [server]\n"</literal>
<literal type="string">"\t-a same as -v -t ANY\n"</literal>
<literal type="string">"\t-C query SOA records from all authoritative name servers\n"</literal>
<literal type="string">"\t-c use this query class (IN, CH, HS, etc)\n"</literal>
<literal type="string">"\t-d produce verbose output, same as -v\n"</literal>
<literal type="string">"\t-i use IP6.INT for IPv6 reverse lookups\n"</literal>
<literal type="string">"\t-l list records in a zone via AXFR\n"</literal>
<literal type="string">"\t-N consider names with at least this many dots as absolute\n"</literal>
<literal type="string">"\t-R retry UDP queries this many times\n"</literal>
<literal type="string">"\t-r disable recursive query\n"</literal>
<literal type="string">"\t-s do not ignore SERVFAIL responses\n"</literal>
<literal type="string">"\t-T send query via TCP\n"</literal>
<literal type="string">"\t-t use this query type (A, AAAA, MX, etc)\n"</literal>
<literal type="string">"\t-v produce verbose output\n"</literal>
<literal type="string">"\t-w wait forever for a server reply\n"</literal>
<literal type="string">"\t-W wait this many seconds for a reply\n"</literal>
<literal type="string">"\t-4 use IPv4 only\n"</literal>
<literal type="string">"\t-6 use IPv6 only\n"</literal></expr></argument>,
<argument><expr><name>progname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_args</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>progname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"aCdilrsTvw46c:N:R:t:W:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>o_mode</name> <operator>!=</operator> <name>M_AXFR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>o_mode</name> <operator>=</operator> <name>M_SINGLE_Q</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_ANY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_verbose</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name>o_mode</name> <operator>=</operator> <name>M_SOA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_print_rr_server</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_rrclass</name> <operator>=</operator> <name>LDNS_RR_CLASS_IN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_NS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name>o_rrclass</name> <operator>=</operator> <call><name>ldns_get_rr_class_by_name</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_rrclass</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"invalid class: %s\n"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><name>o_verbose</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name>o_ip6_int</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>o_mode</name> <operator>=</operator> <name>M_AXFR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_rrtype</name> <operator>==</operator> <operator>(</operator><name>ldns_rr_type</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_AXFR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o_tcp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<expr_stmt><expr><name>o_ndots</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_ndots</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>o_ndots</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>o_recursive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><name>o_retries</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_retries</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>o_retries</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o_retries</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>o_retries</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>o_ignore_servfail</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case> <expr_stmt><expr><name>o_tcp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>o_mode</name> <operator>!=</operator> <name>M_AXFR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>o_mode</name> <operator>=</operator> <name>M_SINGLE_Q</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"ixfr="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_IXFR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_ixfr_serial</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name>optarg</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <call><name>ldns_get_rr_type_by_name</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_rrtype</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"invalid type: %s\n"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o_rrtype</name> <operator>==</operator> <name>LDNS_RR_TYPE_AXFR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o_mode</name> <operator>=</operator> <name>M_AXFR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_ANY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_verbose</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o_rrtype</name> <operator>==</operator> <name>LDNS_RR_TYPE_IXFR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o_mode</name> <operator>=</operator> <name>M_IXFR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_ANY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case> <expr_stmt><expr><name>o_verbose</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<expr_stmt><expr><name>o_timeout</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>INT_MAX</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><name>o_timeout</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_timeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>o_timeout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'4'</literal></expr>:</case> <expr_stmt><expr><name>o_ipversion</name> <operator>=</operator> <name>LDNS_RESOLV_INET</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'6'</literal></expr>:</case> <expr_stmt><expr><name>o_ipversion</name> <operator>=</operator> <name>LDNS_RESOLV_INET6</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o_name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o_server</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_print_pkt_server</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o_rrtype</name> <operator>==</operator> <operator>(</operator><name>ldns_rr_type</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_A</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_rdf</name><modifier>*</modifier></type>
<name>safe_str2rdf_dname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>dname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_dname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"'%s' is not a legal name (%s)"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ldns_get_errorstr_by_id</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dname</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_rdf</name><modifier>*</modifier></type>
<name>safe_dname_cat_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>ldns_dname_cat_clone</name><argument_list>(<argument><expr><name>rd1</name></expr></argument>, <argument><expr><name>rd2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"not enought memory for a domain name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>LDNS_MAX_DOMAINLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"'%s' is not a legal name (%s)\n"</literal></expr></argument>, <argument><expr><call><name>ldns_rdf2str</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_get_errorstr_by_id</name><argument_list>(<argument><expr><name>LDNS_STATUS_DOMAINNAME_OVERFLOW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>query</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier><modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>close_tcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_pkt_rcode</name></type> <name>rcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o_verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Trying \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_rdf_nodot</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <call><name>ldns_resolver_nameserver_count</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_resolver_send_to</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>o_rrtype</name></expr></argument>,
<argument><expr><name>o_rrclass</name></expr></argument>, <argument><expr><ternary><condition><expr><name>o_recursive</name></expr> ?</condition><then> <expr><name>LDNS_RD</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>o_ixfr_serial</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>close_tcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pkt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_tc</name><argument_list>(<argument><expr><operator>*</operator><name>pkt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ldns_resolver_usevc</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>o_verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; Truncated, retrying in TCP mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_resolver_set_usevc</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_resolver_send_to</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>o_rrtype</name></expr></argument>,
<argument><expr><name>o_rrclass</name></expr></argument>, <argument><expr><ternary><condition><expr><name>o_recursive</name></expr> ?</condition><then> <expr><name>LDNS_RD</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>o_ixfr_serial</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>close_tcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_resolver_set_usevc</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rcode</name> <operator>=</operator> <call><name>ldns_pkt_get_rcode</name><argument_list>(<argument><expr><operator>*</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_ignore_servfail</name> <operator>&amp;&amp;</operator> <name>rcode</name> <operator>==</operator> <name>LDNS_RCODE_SERVFAIL</name> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<return>return <expr><name>rcode</name> <operator>==</operator> <name>LDNS_RCODE_NOERROR</name></expr>;</return>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pkt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; connection timed out; no servers could be reached\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type>
<name>search</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier><modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>absolute</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>close_tcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>dname</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>searchlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>absolute</name> <operator>&amp;&amp;</operator> <call><name>query</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>close_tcp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>domain</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dname</name> <operator>=</operator> <call><name>ldns_resolver_domain</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dname</name> <operator>=</operator> <call><name>safe_dname_cat_clone</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>query</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>close_tcp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>dname</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>searchlist</name> <operator>=</operator> <call><name>ldns_resolver_searchlist</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ldns_resolver_searchlist_count</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dname</name> <operator>=</operator> <call><name>safe_dname_cat_clone</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name><name>searchlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>query</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>close_tcp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>dname</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>absolute</name> <operator>&amp;&amp;</operator> <call><name>query</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>close_tcp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>domain</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>report</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_pkt_rcode</name></type> <name>rcode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o_print_pkt_server</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Using domain server:\nName: %s\nAddress: "</literal></expr></argument>, <argument><expr><name>o_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_rdf</name><argument_list>(<argument><expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#%d\nAliases: \n\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_port</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o_print_pkt_server</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rcode</name> <operator>=</operator> <call><name>ldns_pkt_get_rcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rcode</name> <operator>!=</operator> <name>LDNS_RCODE_NOERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Host "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_rdf_nodot</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" not found: %d("</literal></expr></argument>, <argument><expr><name>rcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_rcode</name><argument_list>(<argument><expr><name>rcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>o_verbose</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_pkt_verbose</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_pkt_short</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>o_print_rr_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_mode</name> <operator>==</operator> <name>M_SINGLE_Q</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><call><name>ldns_pkt_answer</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_rdf_nodot</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" has no "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_rr_type</name><argument_list>(<argument><expr><name>o_rrtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" record\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o_verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_received_line</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>doquery</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>q</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>doquery_filtered</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_filter_answer</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>o_rrtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>q</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>dosearch</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>absolute</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>dname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dname</name> <operator>=</operator> <call><name>search</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>absolute</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><ternary><condition><expr><name>dname</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>dname</name></expr> </then><else>: <expr><name>domain</name></expr></else></ternary></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>o_mode</name> <operator>!=</operator> <name>M_DEFAULT_Q</name></expr> ?</condition><then> <expr><operator>(</operator><name>dname</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name>dname</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_AAAA</name><operator>,</operator> <call><name>doquery_filtered</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_MX</name><operator>,</operator> <call><name>doquery_filtered</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>dozonetransfer</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>absolute</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextpkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>dname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name>rrtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nsoa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>first_serial</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rrtype</name> <operator>=</operator> <name>o_rrtype</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>o_mode</name> <operator>==</operator> <name>M_AXFR</name><operator>)</operator></expr> ?</condition><then> <expr><name>LDNS_RR_TYPE_AXFR</name></expr> </then><else>: <expr><name>LDNS_RR_TYPE_IXFR</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dname</name> <operator>=</operator> <call><name>search</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>absolute</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>rrl</name> <operator>=</operator> <call><name>ldns_rr_list_clone</name><argument_list>(<argument><expr><call><name>ldns_pkt_answer</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_filter_answer</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>rrtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><ternary><condition><expr><name>dname</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>dname</name></expr> </then><else>: <expr><name>domain</name></expr></else></ternary></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dname</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>ldns_pkt_get_rcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RCODE_NOERROR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"; Transfer failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_tcp_close</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrl</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nsoa</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_SOA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"; Transfer failed. "</literal>
<literal type="string">"Didn't start with SOA answer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_tcp_close</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first_serial</name> <operator>=</operator> <call><name>ldns_rr_soa_get_serial</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>o_mode</name> <operator>==</operator> <name>M_IXFR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>first_serial</name> <operator>&lt;=</operator> <name>o_ixfr_serial</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_tcp_close</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_SOA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nsoa</name> <operator>=</operator> <ternary><condition><expr><name>nsoa</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>nsoa</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nsoa</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ldns_rr_soa_get_serial</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>first_serial</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_tcp_close</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>ldns_tcp_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nextpkt</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"; Transfer failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_answerfrom</name><argument_list>(<argument><expr><name>nextpkt</name></expr></argument>,
<argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>rrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pkt</name> <operator>=</operator> <name>nextpkt</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>dosoa</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>absolute</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>answer</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>nsaddrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>dname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dname</name> <operator>=</operator> <call><name>search</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>absolute</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>answer</name> <operator>=</operator> <call><name>ldns_pkt_answer</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>answer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nsaddrs</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><name>cnt</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nsaddrs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr</name> <operator>=</operator> <call><name>ldns_rr_ns_nsdname</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nsaddrs</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>ldns_get_rr_list_addr_by_name</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>LDNS_RR_CLASS_IN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>o_print_pkt_server</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_recursive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_SOA</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name><name>nsaddrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_resolver_remove_nameservers</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name><name>nsaddrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>ldns_resolver_ip6</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RESOLV_INET</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_AAAA</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>ldns_resolver_ip6</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RESOLV_INET6</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_A</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_resolver_push_nameserver_rr</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>doquery</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>resolver_set_nameserver_hostname</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ailist</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>hints</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>ldns_resolver_ip6</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_RESOLV_INET</name></expr>:</case> <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LDNS_RESOLV_INET6</name></expr>:</case> <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET6</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<do>do<block type="pseudo"><block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ailist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><name>err</name> <operator>==</operator> <name>EAI_AGAIN</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"couldn't get address for '%s': %s"</literal></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>ai</name> <operator>=</operator> <name>ailist</name></expr>;</init> <condition><expr><name>ai</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rdf</name> <operator>=</operator> <call><name>ldns_sockaddr_storage2rdf</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"couldn't allocate an rdf: %s"</literal></expr></argument>,
<argument><expr><call><name>ldns_get_errorstr_by_id</name><argument_list>(<argument><expr><name>LDNS_STATUS_MEM_ERR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_resolver_push_nameserver</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"couldn't push a nameserver address: %s"</literal></expr></argument>,
<argument><expr><call><name>ldns_get_errorstr_by_id</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>resolver_set_nameserver_str</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ldns_resolver_remove_nameservers</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ldns_rdf_new_addr_frm_str</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_resolver_push_nameserver</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"couldn't push a nameserver address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resolver_set_nameserver_hostname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>addr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>restimeout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parse_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_resolver_new_default</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"error creating resolver: %s"</literal></expr></argument>, <argument><expr><call><name>ldns_get_errorstr_by_id</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_resolver_nameserver_count</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_resolver_push_default_servers</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_resolver_set_usevc</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>o_tcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>restimeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <ternary><condition><expr><name>o_timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>o_timeout</name></expr> </then><else>:
<expr><ternary><condition><expr><name>o_tcp</name></expr> ?</condition><then> <expr><name>DEFAULT_TCP_TIMEOUT</name></expr> </then><else>: <expr><name>DEFAULT_UDP_TIMEOUT</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>restimeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_resolver_set_timeout</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>restimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_resolver_set_retry</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>o_retries</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_resolver_set_ip6</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>o_ipversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_resolver_set_defnames</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_resolver_set_fallback</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>o_server</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resolver_set_nameserver_str</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>o_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_str2rdf_a</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>o_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dname</name> <operator>=</operator> <call><name>ldns_rdf_reverse_a</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="string">"in-addr.arpa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"can't reverse '%s': %s"</literal></expr></argument>, <argument><expr><name>o_name</name></expr></argument>,
<argument><expr><call><name>ldns_get_errorstr_by_id</name><argument_list>(<argument><expr><name>LDNS_STATUS_MEM_ERR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o_mode</name> <operator>=</operator> <name>M_SINGLE_Q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_PTR</name></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>doquery</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_str2rdf_aaaa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>o_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dname</name> <operator>=</operator> <call><name>ldns_rdf_reverse_aaaa</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>o_ip6_int</name></expr> ?</condition><then> <expr><literal type="string">"ip6.int"</literal></expr> </then><else>: <expr><literal type="string">"ip6.arpa"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"can't reverse '%s': %s"</literal></expr></argument>, <argument><expr><name>o_name</name></expr></argument>,
<argument><expr><call><name>ldns_get_errorstr_by_id</name><argument_list>(<argument><expr><name>LDNS_STATUS_MEM_ERR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o_mode</name> <operator>=</operator> <name>M_SINGLE_Q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o_rrtype</name> <operator>=</operator> <name>LDNS_RR_TYPE_PTR</name></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>doquery</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>!</operator><operator>(</operator><ternary><condition><expr><name>o_mode</name> <operator>==</operator> <name>M_SOA</name></expr> ?</condition><then> <expr><name>dosoa</name></expr> </then><else>:
<expr><ternary><condition><expr><name>o_mode</name> <operator>==</operator> <name>M_AXFR</name></expr> ?</condition><then> <expr><name>dozonetransfer</name></expr> </then><else>:
<expr><ternary><condition><expr><name>o_mode</name> <operator>==</operator> <name>M_IXFR</name></expr> ?</condition><then> <expr><name>dozonetransfer</name></expr> </then><else>:
<expr><name>dosearch</name></expr></else></ternary></expr></else></ternary></expr></else></ternary><operator>)</operator>
<operator>(</operator><name>res</name><operator>,</operator> <call><name>safe_str2rdf_dname</name><argument_list>(<argument><expr><name>o_name</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>ndots</name><argument_list>(<argument><expr><name>o_name</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>o_ndots</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
